antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,48.388]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[1,58.751]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1-3",[2,21.667,3,22.278]],["name/1-3",[]],["text/1-3",[]],["component/1-3",[]],["title/1-4",[2,21.667,4,30.475]],["name/1-4",[]],["text/1-4",[]],["component/1-4",[]],["title/1-5",[2,15.398,3,15.832,5,15.324,6,19.422]],["name/1-5",[]],["text/1-5",[]],["component/1-5",[]],["title/1-6",[2,15.398,3,15.832,5,15.324,7,52.87]],["name/1-6",[]],["text/1-6",[]],["component/1-6",[]],["title/1-7",[2,18.002,3,18.51,8,20.842]],["name/1-7",[]],["text/1-7",[]],["component/1-7",[]],["title/1-8",[2,21.667,9,16.962]],["name/1-8",[]],["text/1-8",[]],["component/1-8",[]],["title/1-9",[2,21.667,10,33.375]],["name/1-9",[]],["text/1-9",[]],["component/1-9",[]],["title/1-10",[2,18.002,9,14.093,11,11.848]],["name/1-10",[]],["text/1-10",[]],["component/1-10",[]],["title/1-11",[9,14.093,12,23.679,13,24.65]],["name/1-11",[]],["text/1-11",[]],["component/1-11",[]],["title/1-12",[14,23.84,15,26.734]],["name/1-12",[]],["text/1-12",[]],["component/1-12",[]],["title/1-13",[14,23.84,16,31.63]],["name/1-13",[]],["text/1-13",[]],["component/1-13",[]],["title/1-14",[14,23.84,17,34.438]],["name/1-14",[]],["text/1-14",[]],["component/1-14",[]],["title/1-15",[8,25.084,18,21.772]],["name/1-15",[]],["text/1-15",[]],["component/1-15",[]],["title/1-16",[14,23.84,15,26.734]],["name/1-16",[]],["text/1-16",[]],["component/1-16",[]],["title/1-17",[14,23.84,16,31.63]],["name/1-17",[]],["text/1-17",[]],["component/1-17",[]],["title/1-18",[14,23.84,17,34.438]],["name/1-18",[]],["text/1-18",[]],["component/1-18",[]],["title/1",[19,38.169,20,31.351]],["name/1",[21,2.781]],["text/1",[0,2.572,2,2.217,3,2.898,4,2.462,5,1.439,6,2.527,8,1.242,9,1.736,11,0.706,12,1.411,13,1.98,14,1.926,15,0.746,16,0.883,17,3.815,18,2.71,19,2.548,20,1.553,22,1.539,23,1.331,24,1.566,25,1.06,26,2.274,27,1.262,28,2.89,29,3.039,30,0.758,31,1.666,32,1.591,33,1.097,34,1.713,35,2.077,36,1.015,37,1.532,38,2.077,39,2.172,40,2.077,41,2.077,42,1.626,43,1.56,44,1.532,45,2.524,46,1.8,47,1.626,48,0.835,49,2.822,50,1.002,51,2.845,52,0.658,53,1.591,54,2.077,55,1.933,56,1.532,57,0.88,58,1.713,59,1.331,60,1.147,61,1.233,62,2.059,63,1.207,64,1.032,65,0.938,66,1.262,67,1.252,68,0.839,69,1.56,70,1.591,71,2.717,72,1.769,73,0.938,74,0.636,75,1.461,76,3.804,77,1.115,78,2.948,79,3.984,80,1.425,81,2.526,82,0.938,83,1.933,84,1.405,85,1.591,86,1.839,87,1.461,88,2.077,89,0.745,90,1.591,91,0.837,92,1.294,93,0.83,94,1.134,95,0.758,96,1.552,97,2.767,98,1.015,99,1.423,100,1.215,101,1.933,102,1.461,103,2.077,104,1.713,105,2.66,106,1.272,107,1.097,108,1.56,109,1.318,110,1.358,111,1.532,112,0.826,113,1.405,114,0.998,115,1.461,116,1.14,117,1.318,118,1.175,119,1.839,120,3.138,121,1.161,122,1.032,123,1.028,124,1.283,125,1.483,126,0.567,127,1.294,128,1.224,129,2.141,130,1.183,131,1.839,132,1.207,133,1.235,134,0.837,135,2.157,136,1.415,137,1.124,138,1.198,139,0.68,140,2.077,141,2.077,142,2.077,143,1.666,144,2.077,145,2.077,146,2.077,147,1.67,148,2.077,149,1.267,150,1.687,151,0.972,152,3.684,153,1.713,154,1.081,155,0.983,156,2.077,157,1.461,158,1.306,159,2.077,160,2.077,161,2.077,162,1.56,163,1.483,164,1.097,165,2.077,166,1.6,167,1.591,168,1.839,169,0.998,170,2.792,171,1.595,172,2.35,173,1.506,174,2.112,175,1.07,176,1.432,177,1.109,178,0.639,179,1.769,180,1.331,181,1.365,182,1.358,183,1.769,184,1.666,185,1.56,186,1.506,187,1.115,188,2.077,189,2.077]],["component/1",[190,1.552]],["title/2-1",[191,86.978]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[192,61.361,193,50.966]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[194,48.155]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[14,23.84,195,32.619]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[14,23.84,196,29.439]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[14,23.84,197,35.769]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2-7",[14,19.808,198,40.015,199,25.898]],["name/2-7",[]],["text/2-7",[]],["component/2-7",[]],["title/2-8",[14,23.84,200,34.071]],["name/2-8",[]],["text/2-8",[]],["component/2-8",[]],["title/2-9",[14,23.84,16,31.63]],["name/2-9",[]],["text/2-9",[]],["component/2-9",[]],["title/2-10",[14,23.84,17,34.438]],["name/2-10",[]],["text/2-10",[]],["component/2-10",[]],["title/2-11",[14,23.84,201,29.591]],["name/2-11",[]],["text/2-11",[]],["component/2-11",[]],["title/2-12",[14,23.84,202,32.724]],["name/2-12",[]],["text/2-12",[]],["component/2-12",[]],["title/2-13",[203,40.572]],["name/2-13",[]],["text/2-13",[]],["component/2-13",[]],["title/2-14",[14,23.84,15,26.734]],["name/2-14",[]],["text/2-14",[]],["component/2-14",[]],["title/2",[9,16.962,204,35.488]],["name/2",[205,1.287]],["text/2",[1,2.256,2,0.587,3,1.074,5,1.954,9,1.341,11,0.386,12,1.857,13,1.43,14,2.395,15,0.724,16,0.857,18,0.59,20,0.849,23,1.291,24,2.061,26,4.177,28,0.969,29,4.85,30,4.394,36,0.984,37,1.486,39,1.188,46,3.295,48,4.12,51,2.783,52,1.536,53,1.543,62,1.126,75,1.418,80,1.875,87,1.418,90,2.747,93,0.806,94,1.1,96,0.63,98,0.984,102,2.524,104,1.662,112,0.801,117,1.279,121,1.126,122,1.783,123,0.997,124,1.245,126,0.55,128,2.114,131,1.784,135,0.875,137,0.615,171,0.872,175,1.849,178,2.075,179,1.716,194,2.499,195,0.883,196,0.797,197,0.969,199,0.844,200,1.642,201,0.801,202,0.886,204,2.312,206,1.876,207,1.593,208,1.465,209,2.575,210,2.015,211,1.38,212,1.876,213,1.876,214,1.806,215,5.877,216,1.006,217,0.946,218,0.839,219,1.616,220,1.143,221,0.602,222,2.348,223,1.019,224,1.1,225,0.854,226,0.632,227,1.876,228,1.304,229,3.66,230,1.234,231,1.716,232,1.577,233,0.936,234,2.873,235,0.814,236,5.685,237,2.464,238,2.146,239,2.015,240,4.129,241,1.188,242,1.717,243,2.747,244,1.38,245,1.876,246,1.044,247,1.418,248,1.318,249,1.716,250,0.993,251,1.082,252,2.114,253,1.513,254,1.876,255,1.065,256,1.196,257,0.984,258,2.015,259,0.965,260,1.439,261,0.783,262,1.196,263,2.489,264,1.876,265,1.662,266,0.883,267,1.577,268,4.717,269,1.398,270,2.015,271,1.577,272,1.039,273,2.958,274,4.129,275,2.677,276,2.015,277,2.235,278,2.015,279,0.832,280,2.015,281,1.876,282,1.094,283,1.224,284,1.234,285,1.616,286,0.936,287,2.004,288,1.256,289,1.662,290,2.958,291,2.015,292,1.716,293,1.439,294,1.332,295,2.015,296,1.876,297,1.876,298,1.876,299,1.398,300,2.015,301,2.958,302,1.662,303,1.006,304,1.784,305,1.577,306,1.662,307,1.076,308,1.577,309,0.933]],["component/2",[190,1.552]],["title/3-1",[310,57.238]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[2,18.002,49,47.353,89,22.164]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3",[138,53.915]],["name/3",[138,1.605]],["text/3",[0,3.052,2,3.294,5,1.707,8,1.986,9,1.343,11,1.129,12,2.257,14,1.888,17,4.007,18,1.724,19,3.023,20,2.483,36,4.23,46,2.879,60,3.253,89,3.104,96,1.841,110,3.854,112,2.343,133,1.975,149,2.026,181,1.62,182,3.854,196,3.425,202,3.808,221,2.588,261,2.29,311,5.891,312,5.218,313,3.854,314,3.18,315,4.623,316,4.425,317,4.146,318,5.102,319,6.008,320,2.219,321,1.779,322,3.378,323,5.891,324,5.891,325,3.672,326,4.207,327,5.891,328,5.891,329,7.667,330,4.513,331,4.089,332,4.273,333,2.652,334,2.708,335,2.559,336,5.891,337,4.207]],["component/3",[190,1.552]],["title/4",[]],["name/4",[338,2.781]],["text/4",[5,1.505,8,1.751,114,3.787,116,2.851,209,6.636,226,3.332,261,2.019,294,3.433,339,3.83,340,3.396,341,4.835,342,3.208,343,5.192,344,2.819,345,4.283,346,5.192,347,5.192,348,4.423,349,4.835,350,3.361,351,4.713,352,9.214,353,7.877,354,5.81,355,6.833,356,5.192,357,5.192,358,5.8,359,7.877,360,4.677,361,7.877,362,6.497,363,4.677,364,6.32,365,3.513,366,4.423,367,4.835,368,6.71,369,7.877,370,6.497,371,10.625,372,2.92,373,4.835,374,3.534,375,4.423]],["component/4",[190,1.552]],["title/5-1",[209,39.522,376,61.361]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[26,34.071,63,43.234]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[10,41.906]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[11,17.906]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5",[9,10.531,26,21.152,30,16.854,209,24.536,216,23.057]],["name/5",[377,2.781]],["text/5",[2,1.789,3,1.591,5,1.986,9,2.547,10,1.946,11,2.413,13,2.119,14,2.982,15,0.632,16,1.349,17,1.469,18,0.514,22,0.734,25,0.898,26,3.422,30,2.727,36,0.859,39,3.62,46,0.859,48,2.136,52,2.829,60,0.971,61,1.044,63,3.088,64,1.577,65,0.794,68,2.482,72,1.497,77,0.944,86,1.557,93,0.703,100,1.029,112,1.262,113,3.595,121,1.774,126,1.87,129,2.521,133,1.064,171,1.374,175,0.906,176,0.683,178,0.976,194,0.906,195,0.771,196,1.717,197,0.845,199,1.33,200,1.987,201,0.699,202,0.773,203,1.378,204,1.514,205,0.814,207,1.409,208,1.296,209,3.641,212,1.637,214,0.885,215,0.954,222,3.107,223,0.889,225,0.745,226,1.361,230,1.077,235,1.282,238,1.052,241,1.036,242,0.842,248,1.15,251,0.944,253,1.32,257,0.859,260,1.255,261,0.683,266,1.902,275,3.392,286,0.817,288,1.978,294,1.162,303,0.877,309,1.469,335,1.378,355,3.179,378,1.077,379,1.533,380,1.497,381,1.096,382,1.839,383,1.758,384,1.32,385,1.45,386,1.116,387,1.491,388,2.252,389,1.921,390,1.855,391,1.921,392,1.255,393,1.255,394,1.758,395,1.376,396,1.758,397,1.15,398,1.637,399,0.614,400,1.637,401,0.756,402,1.41,403,1.45,404,1.45,405,0.786,406,1.32,407,1.758,408,1.557,409,1.237,410,1.557,411,1.138,412,1.32,413,0.944,414,1.758,415,0.866,416,3.549,417,1.844,418,1.175,419,0.55,420,1.732,421,3.64,422,1.959,423,1.758,424,2.955,425,1.189,426,1.758,427,1.637,428,1.189,429,2.955,430,1.557,431,1.796,432,1.361,433,1.086,434,1.001,435,0.759,436,3.323,437,1.162,438,1.361,439,1.014,440,1.15,441,0.606,442,2.329,443,2.136,444,1.913,445,1.758,446,2.098,447,0.949,448,0.898,449,1.346,450,0.881,451,1.237,452,1.41,453,1.275,454,1.376]],["component/5",[190,1.552]],["title/6",[425,63.206]],["name/6",[205,1.287]],["text/6",[26,4.78,45,7.15,49,7.995,204,4.978,215,5.665,455,4.831,456,9.718,457,9.718,458,8.608,459,10.437,460,10.437,461,8.171]],["component/6",[190,1.552]],["title/7-1",[443,37.547]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[261,36.315]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[255,39.317,462,33.487]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[52,23.584,68,30.063]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[215,40.385,463,47.227]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7",[442,39.944,443,29.903]],["name/7",[443,1.118]],["text/7",[3,0.764,5,1.861,6,0.938,9,1.007,11,1.332,12,0.53,13,1.416,16,0.589,18,0.747,22,1.844,24,0.589,26,1.626,30,1.296,36,0.677,39,0.816,48,1.774,52,3.471,57,1.082,60,1.41,61,0.822,68,2.089,70,1.061,73,3.139,74,0.781,77,0.743,78,0.822,81,0.582,82,1.153,89,1.853,93,0.554,94,0.756,95,2.128,99,0.949,102,1.796,109,0.913,114,2.485,116,0.76,122,1.269,126,0.969,133,0.464,134,1.779,135,1.109,137,2.12,147,0.628,151,1.195,164,0.732,166,1.542,169,0.666,170,1.436,171,1.911,177,0.739,181,2.04,196,1.747,203,1.917,204,1.218,207,0.615,215,1.928,218,2.43,220,0.441,221,1.062,222,0.889,229,0.752,233,0.643,234,0.677,242,1.222,248,0.906,250,0.682,252,0.816,255,5.949,257,0.677,259,0.663,263,0.961,268,1.111,272,0.714,273,1.142,277,0.863,279,1.467,281,1.289,293,0.989,294,0.916,299,1.772,302,1.142,303,0.691,307,1.897,320,0.522,321,0.418,333,3.341,342,0.856,350,0.896,351,0.828,379,0.902,380,1.18,381,0.863,382,1.505,390,1.519,399,1.242,401,0.596,419,0.799,433,1.577,438,3.368,442,2.775,443,4.401,451,1.796,455,0.641,462,1.599,463,2.254,464,5.223,465,0.856,466,5.57,467,4.823,468,2.377,469,2.276,470,1.316,471,1.07,472,0.974,473,1.226,474,2.558,475,0.799,476,5.768,477,0.926,478,0.856,479,1.289,480,1.289,481,1.727,482,1.688,483,0.961,484,2.514,485,0.961,486,3.202,487,1.142,488,2.667,489,1.18,490,0.534,491,1.727,492,1.329,493,1.004,494,1.084,495,1.917,496,0.794,497,1.385,498,1.385,499,0.789,500,0.863,501,0.682,502,0.81,503,1.289,504,2.576,505,2.214,506,1.289,507,0.548,508,0.71,509,0.532,510,1.813,511,1.289,512,0.926,513,1.142,514,0.955,515,4.263,516,1.356,517,1.142,518,0.514,519,1.021,520,1.274,521,0.961,522,0.765,523,1.098,524,1.04,525,1.772,526,0.694,527,0.926,528,0.743,529,0.856,530,1.021,531,0.822,532,1.013,533,0.974,534,0.926,535,0.732,536,1.061]],["component/7",[190,1.552]],["title/8-1",[279,25.532,537,36.981,538,48.397]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[135,32.312,539,42.939]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[8,25.084,540,61.361]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8-4",[11,14.261,541,28.363]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["title/8-5",[195,40.957]],["name/8-5",[]],["text/8-5",[]],["component/8-5",[]],["title/8-6",[201,29.591,542,31.82]],["name/8-6",[]],["text/8-6",[]],["component/8-6",[]],["title/8-7",[215,40.385,463,47.227]],["name/8-7",[]],["text/8-7",[]],["component/8-7",[]],["title/8",[439,42.939,541,28.363]],["name/8",[543,1.839]],["text/8",[3,1.843,5,1.784,6,1.007,8,1.582,9,0.625,11,0.727,18,1.977,22,0.625,24,1.612,26,0.685,30,1,46,0.731,64,1.885,74,1.437,80,1.467,82,1.238,89,2.614,96,0.857,98,0.731,109,0.535,114,0.719,122,1.362,125,1.957,134,1.105,135,3.56,137,1.67,154,1.427,155,1.297,163,1.068,164,2.892,166,1.647,169,1.318,171,1.642,181,0.753,194,1.955,195,2.058,201,1.09,204,1.307,221,1.403,222,1.634,225,0.634,228,0.969,235,0.605,246,0.775,247,1.053,248,2.481,255,0.791,257,0.731,263,1.038,275,1.514,279,4.258,286,3.608,320,3.088,321,0.828,333,0.673,335,2.038,374,0.671,379,0.968,381,1.708,382,1.608,399,0.523,411,1.774,417,0.869,418,1,419,2.688,424,1.393,434,0.852,437,2.508,439,5.344,455,0.693,471,0.627,474,0.74,490,2.607,492,1.427,500,0.933,502,1.604,505,1.374,507,1.085,508,1.406,509,1.053,510,1.126,512,1,516,1.456,519,1.103,522,0.826,526,0.75,528,0.803,532,1.087,535,3.253,537,5.54,538,2.146,539,0.863,541,1.045,542,0.64,544,0.989,545,2.708,546,1.155,547,5.848,548,2.23,549,1.26,550,0.917,551,0.852,552,1.068,553,1.496,554,1.988,555,3.793,556,0.941,557,0.989,558,1.793,559,1.146,560,0.852,561,1.146,562,2.797,563,1.846,564,2.797,565,1.551,566,1.757,567,1.496,568,1.902,569,4.272,570,1.124,571,0.803,572,1.496,573,2.598,574,1.325,575,1.571,576,2.236,577,1,578,1.496,579,0.989,580,1.496,581,1.325,582,0.858,583,1.496,584,0.817,585,1.325,586,1.325,587,1.103,588,1.234,589,2.741,590,0.757,591,2.146,592,1.496,593,1.085,594,2.741,595,2.199,596,1.014,597,1.957,598,0.858,599,2.174,600,2.287,601,1.038,602,1.393,603,1.496,604,1.038,605,1.496,606,1.274,607,1.274,608,0.888,609,1.234,610,1.171,611,1.496,612,1.234,613,0.95,614,3.793,615,1.496,616,1.496,617,0.924,618,1.274,619,1.496,620,1.146,621,1,622,1.124,623,1.496,624,1.496,625,1.085,626,1.393,627,1.393,628,0.764,629,0.917,630,0.638,631,1.496,632,1.124,633,2.741,634,0.869,635,1.496,636,1.103,637,1.234,638,1.325,639,1.234,640,1.339,641,0.858,642,1.171,643,0.959,644,1.025,645,0.775,646,1.274,647,0.969,648,0.933,649,1.496]],["component/8",[190,1.552]],["title/9-1",[650,82.74]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[126,25.488]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[600,56.321]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9-4",[309,34.438,422,33.602]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["title/9-5",[261,36.315]],["name/9-5",[]],["text/9-5",[]],["component/9-5",[]],["title/9-6",[89,33.495]],["name/9-6",[]],["text/9-6",[]],["component/9-6",[]],["title/9-7",[215,40.385,463,47.227]],["name/9-7",[]],["text/9-7",[]],["component/9-7",[]],["title/9",[309,28.613,422,40.493]],["name/9",[309,0.504,422,0.921]],["text/9",[5,1.646,6,1.263,9,0.438,11,0.659,18,1.006,22,2.372,23,1.231,30,1.254,36,0.939,48,0.772,50,0.927,74,2.412,77,1.031,78,1.141,81,0.807,82,2.949,89,2.036,90,1.472,91,1.385,92,1.197,95,1.254,114,1.653,122,0.955,125,4.055,126,2.429,134,1.88,135,3.151,137,0.586,139,1.86,181,0.528,187,1.031,192,1.584,199,1.44,207,1.527,221,1.394,233,0.892,236,2.143,238,2.056,242,4.81,250,3.218,261,1.813,263,2.386,266,0.842,286,3.034,309,5.416,315,1.026,321,1.038,378,2.106,379,2.006,382,0.814,388,0.814,391,0.85,397,1.257,415,0.947,419,1.46,422,5.934,441,0.662,462,0.865,463,1.219,470,0.99,471,3.301,484,1.094,490,1.326,499,1.094,505,3.638,507,0.76,509,0.738,510,2.332,516,1.826,518,2.695,520,0.959,532,1.364,541,0.732,549,0.883,557,1.27,566,2.203,584,4.599,599,1.101,600,4.374,631,3.1,650,1.702,651,1.921,652,1.417,653,1.702,654,0.927,655,0.906,656,1.636,657,4.286,658,3.437,659,2.493,660,1.094,661,1.087,662,1.921,663,1.005,664,1.372,665,2.928,666,1.504,667,2.056,668,1.702,669,1.132,670,1.921,671,1.921,672,1.541,673,1.921,674,1.177,675,1.921,676,1.921,677,1.558,678,1.094,679,3.201,680,1.08,681,1.921,682,1.541,683,1.584,684,1.921,685,3.156,686,3.89,687,3.44,688,1.333,689,1.333,690,2.086,691,1.067,692,1.984,693,1.945,694,1.257,695,3.437,696,2.182,697,1.333,698,1.182,699,1.443,700,1.472]],["component/9",[190,1.552]],["title/10-1",[701,47.227,702,49.749]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[433,38.196,523,26.599,703,26.847]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[89,33.495]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[334,34.192,704,44.51]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[419,19.352,705,54.75,706,50.982]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10-6",[172,44.217]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["title/10-7",[374,33.375,707,35.628]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["title/10",[416,32.936,419,23.292]],["name/10",[416,1.231]],["text/10",[5,2.18,6,2.763,8,0.879,9,0.594,18,1.734,22,0.592,24,1.539,26,0.649,30,1.64,44,1.045,46,0.692,48,1.455,50,0.684,52,0.449,61,0.841,64,0.704,68,3.978,73,0.64,81,0.595,82,1.177,89,2.697,92,0.883,93,1.042,94,0.773,95,0.517,98,1.769,100,0.829,106,0.868,109,1.881,114,1.253,116,0.778,121,0.792,122,1.799,126,0.711,130,0.807,132,0.823,134,1.459,136,2.018,137,2.544,150,2.407,154,0.737,172,3.336,175,0.73,176,2.043,178,0.436,181,2.293,196,2.08,201,0.563,207,0.629,208,0.579,217,0.665,218,0.59,241,1.536,266,0.621,275,1.999,279,1.857,283,0.861,286,2.442,293,1.011,294,0.936,307,0.756,313,0.926,315,0.756,334,2.996,335,1.132,340,0.926,379,1.588,382,0.6,393,1.011,416,4.358,419,2.916,420,6.025,425,0.958,433,0.875,440,2.368,441,1.549,447,1.407,448,0.723,462,2.366,471,1.883,490,0.547,491,0.958,499,0.807,505,1.307,506,1.319,507,2.977,508,0.727,509,2.889,510,2.159,523,3.589,532,3.308,545,1.011,557,0.936,576,2.134,579,0.936,584,0.773,628,1.331,655,1.229,665,1.207,677,0.642,682,2.091,701,5.294,702,3.963,703,4.275,704,4.757,705,1.255,706,1.168,708,0.592,709,3.165,710,2.972,711,2.427,712,2.427,713,3.12,714,1.416,715,1.416,716,4.524,717,1.958,718,0.891,719,0.97,720,1.416,721,1.085,722,1.268,723,2.036,724,0.936,725,1.255,726,1.319,727,1.168,728,1.255,729,1.416,730,1.136,731,1.207,732,1.027,733,0.97,734,1.416,735,0.97,736,2.548,737,2.774,738,1.89,739,1.416,740,1.045,741,0.797,742,0.899,743,1.168,744,1.431,745,0.997,746,3.182,747,0.899,748,0.854,749,0.947,750,1.168,751,0.947,752,1.319,753,0.868,754,0.917,755,0.936]],["component/10",[190,1.552]],["title/11-1",[650,82.74]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[89,33.495]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11-3",[13,21.084,390,22.613,438,22.682,541,20.156]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["title/11-4",[9,12.054,13,21.084,127,32.955,390,22.613]],["name/11-4",[]],["text/11-4",[]],["component/11-4",[]],["title/11-5",[9,12.054,13,21.084,390,22.613,756,37.204]],["name/11-5",[]],["text/11-5",[]],["component/11-5",[]],["title/11-6",[9,12.054,13,21.084,47,41.395,756,37.204]],["name/11-6",[]],["text/11-6",[]],["component/11-6",[]],["title/11-7",[215,40.385,463,47.227]],["name/11-7",[]],["text/11-7",[]],["component/11-7",[]],["title/11",[13,24.65,390,26.438,438,26.518]],["name/11",[757,2.59]],["text/11",[5,2.55,6,2.212,9,1.836,11,1.748,12,0.555,13,1.826,14,1.713,15,3.034,16,0.616,17,2.119,18,1.937,26,1.691,30,1.67,34,1.195,50,1.285,52,2.985,60,0.8,64,1.323,68,4.496,73,3.973,74,0.815,77,0.778,81,3.204,89,1.641,93,1.476,95,1.347,109,2.155,118,3.408,121,1.488,126,0.726,133,1.792,136,0.557,137,2.872,147,0.657,150,0.664,151,1.246,155,0.686,163,1.035,166,0.63,169,0.697,171,1.153,175,0.747,178,0.446,180,1.706,181,1.655,196,1.053,197,3.666,198,0.938,199,4.439,200,1.219,203,1.156,204,1.761,215,1.445,217,0.681,221,1.8,223,1.347,233,1.237,236,0.903,237,1.877,238,1.593,242,0.694,262,0.861,263,2.563,266,1.619,275,1.47,279,0.599,303,0.724,307,2.856,313,0.948,320,1.391,321,0.804,335,1.156,342,0.896,379,0.512,382,0.614,388,0.614,390,3.261,415,0.714,419,0.454,438,4.702,441,0.5,443,0.583,455,0.671,462,0.652,463,0.92,490,1.027,496,0.831,507,2.383,508,1.366,509,2.312,523,0.624,532,2.836,534,0.969,537,0.867,541,0.553,551,1.516,565,0.82,584,0.791,596,0.536,628,0.74,636,1.069,654,0.7,655,2.159,664,1.035,688,1.006,689,1.848,709,0.774,716,1.006,758,0.993,759,1.449,760,1.235,761,1.051,762,1.195,763,0.805,764,2.39,765,1.195,766,1.284,767,1.35,768,1.235,769,1.558,770,3.745,771,0.815,772,0.791,773,0.958,774,1.824,775,0.787,776,1.135,777,1.449,778,1.284,779,1.449,780,1.237,781,0.981,782,1.449,783,2.739,784,3.823,785,0.733,786,1.195,787,0.958,788,1.972,789,2.773,790,2,791,2,792,1.089,793,0.796,794,1.11,795,1.195,796,1.195,797,1.449,798,1.449,799,0.958,800,1.235,801,2.662,802,0.831]],["component/11",[190,1.552]],["title/12",[116,40.846,803,46.373]],["name/12",[804,2.781]],["text/12",[2,0.55,3,1.013,5,0.98,8,2.175,9,1.471,11,2.321,14,3.084,15,0.678,16,1.438,17,0.873,26,2.566,28,0.907,37,1.392,45,1.293,46,1.653,52,1.776,61,2.73,64,1.681,72,2.881,75,1.328,80,1.309,93,0.754,94,1.03,95,0.689,98,2.738,99,1.293,105,0.609,109,1.21,112,1.345,116,2.524,125,1.347,136,2.755,137,0.576,147,1.533,166,0.82,176,1.315,178,1.041,194,0.973,195,0.827,196,0.747,197,0.907,198,1.222,199,0.791,200,0.864,201,0.751,202,0.83,203,1.469,204,3.422,216,0.942,220,0.601,221,0.564,226,0.592,229,1.836,230,2.073,234,2.738,235,4.264,237,0.959,242,0.904,250,0.93,252,1.112,255,0.997,263,1.31,277,1.176,283,1.147,288,1.176,294,3.04,306,1.556,307,1.008,342,1.166,351,1.129,352,2.495,378,1.156,388,1.434,400,1.757,411,1.222,415,2.265,433,1.166,434,1.075,435,0.814,451,1.328,475,1.089,490,0.728,512,1.262,523,0.812,542,1.447,544,1.248,552,1.347,579,1.248,584,1.03,596,0.698,628,0.964,680,1.061,735,1.293,805,1.417,806,1.671,807,2.996,808,1.887,809,1.887,810,1.887,811,1.887,812,1.887,813,10.272,814,1.887,815,1.887,816,1.887,817,1.887,818,1.887,819,1.887,820,1.887,821,1.887,822,1.887,823,1.887,824,1.887,825,1.887,826,1.887,827,1.887,828,1.887,829,1.887,830,1.887,831,1.887,832,1.887,833,1.887,834,1.887,835,1.887,836,1.887,837,1.887,838,1.887,839,1.887,840,1.887,841,1.887,842,1.887,843,1.887,844,1.887,845,1.887,846,1.887,847,1.887,848,1.887,849,1.887,850,1.887,851,1.887,852,1.887,853,1.887,854,1.887,855,1.887,856,1.887,857,1.887,858,1.887,859,1.887,860,1.887,861,1.887,862,1.887,863,1.887,864,1.887,865,1.887,866,1.757,867,1.887,868,1.757,869,1.887,870,1.887,871,1.887,872,1.887,873,1.887,874,1.887,875,1.887,876,1.887,877,1.887,878,1.887,879,1.887,880,1.887,881,1.887,882,1.887,883,1.887,884,1.887,885,1.31,886,1.887,887,1.262,888,1.234,889,2.996,890,3.383,891,1.147,892,1.31,893,1.31,894,1.887,895,1.887,896,1.887,897,1.887,898,1.277,899,1.12,900,1.347,901,1.514,902,2.541,903,1.392,904,1.887,905,1.757,906,1.757,907,0.977,908,1.671,909,1.689,910,1.887,911,1.887,912,1.671,913,1.671,914,1.887,915,2.947,916,1.446,917,1.556,918,1.887,919,1.757,920,1.757,921,1.417,922,1.826,923,1.198,924,1.002,925,1.277]],["component/12",[190,1.552]],["title/13-1",[267,58.249,926,63.374]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[927,36.205,928,74.396]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[11,14.261,235,30.063]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13-4",[116,40.846,220,23.711]],["name/13-4",[]],["text/13-4",[]],["component/13-4",[]],["title/13-5",[745,52.352,929,59.685]],["name/13-5",[]],["text/13-5",[]],["component/13-5",[]],["title/13",[0,38.537,930,74.396]],["name/13",[205,1.287]],["text/13",[1,2.289,2,1.06,3,0.613,5,1.423,6,0.752,9,1.864,11,1.447,19,1.051,22,0.856,23,1.313,25,3.039,26,3.122,30,0.747,42,1.603,46,1.001,48,0.823,50,2.371,51,1.723,52,0.649,61,1.216,63,1.19,67,1.235,77,1.1,80,0.792,86,3.223,95,1.328,96,1.137,105,1.175,109,0.733,113,1.386,114,0.985,116,3.743,118,3.368,133,1.995,147,0.928,151,0.958,166,1.581,177,1.094,178,1.12,204,3.601,206,1.907,214,1.833,215,1.112,217,1.71,220,1.565,221,0.612,223,1.036,227,3.388,230,6.826,232,1.603,233,0.951,234,1.778,235,3.051,237,1.85,242,0.981,244,1.403,252,4.45,261,0.796,266,1.596,277,1.277,293,1.462,307,1.094,319,1.421,322,2.086,333,4.139,334,0.941,340,1.34,352,1.511,363,1.216,382,0.868,392,1.462,402,1.643,403,1.689,411,1.326,415,1.009,419,0.641,475,1.182,491,1.386,502,1.198,512,1.369,544,1.354,604,1.421,606,1.745,608,2.161,610,1.603,626,1.907,630,2.907,693,1.159,704,1.225,722,0.997,761,1.485,764,2.356,772,3.249,783,1.225,785,1.036,803,3.061,807,1.814,885,1.421,887,3.284,891,2.985,899,1.216,903,1.511,906,3.388,907,1.061,908,1.814,909,0.752,912,1.814,915,1.313,917,1.689,922,1.106,926,7.834,929,1.643,931,2.048,932,1.313,933,1.814,934,3.1,935,2.249,936,1.643,937,1.814,938,1.814,939,2.048,940,3.639,941,4.682,942,2.289,943,3.845,944,2.048,945,1.907,946,1.485,947,2.048,948,2.048,949,1.061,950,4.143,951,2.048,952,1.369,953,1.643,954,2.048,955,1.643,956,1.814,957,1.182,958,1.046,959,2.048,960,1.131,961,1.441,962,1.745,963,1.643,964,1.643,965,1.745,966,0.922,967,1.814,968,1.337,969,1.138,970,2.048,971,1.689,972,1.421,973,1.907,974,1.643,975,2.048,976,1.403,977,1.814,978,2.048,979,2.048,980,3.639,981,1.689,982,2.599,983,1.036,984,2.048,985,2.048,986,1.462,987,2.639,988,2.048,989,1.643,990,2.048]],["component/13",[190,1.552]],["title/14-1",[191,86.978]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[443,37.547]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[89,22.164,255,32.667,443,24.845]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[9,14.093,11,11.848,443,24.845]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[13,29.668,390,31.82]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14-6",[178,19.018,464,43.497,476,37.566]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["title/14-7",[390,26.438,438,26.518,774,42.345]],["name/14-7",[]],["text/14-7",[]],["component/14-7",[]],["title/14-8",[11,10.134,126,14.425,279,21.838,443,21.251]],["name/14-8",[]],["text/14-8",[]],["component/14-8",[]],["title/14-9",[442,50.154]],["name/14-9",[]],["text/14-9",[]],["component/14-9",[]],["title/14-10",[991,50.995]],["name/14-10",[]],["text/14-10",[]],["component/14-10",[]],["title/14-11",[155,44.217]],["name/14-11",[]],["text/14-11",[]],["component/14-11",[]],["title/14",[68,21.365,443,21.251,535,27.941,536,40.502]],["name/14",[992,2.781]],["text/14",[3,0.867,5,1.425,6,1.465,9,1.723,11,1.697,12,1.528,13,3.205,14,0.509,16,0.675,22,1.21,23,1.018,24,0.675,26,1.326,30,2.086,36,0.776,37,1.172,48,1.164,52,2.807,57,0.673,60,1.599,61,0.943,62,0.888,65,0.718,73,0.718,74,0.486,77,1.555,78,3.395,80,0.615,81,0.668,89,1.43,93,0.635,94,0.867,95,0.58,98,0.776,99,1.984,114,1.918,126,2.193,127,0.99,133,0.533,135,1.258,137,1.217,147,0.72,155,0.752,164,1.53,166,1.258,171,0.688,177,2.13,178,1.972,181,1.93,196,0.629,203,0.69,204,1.381,207,0.706,215,2.166,218,2.049,221,0.866,222,0.553,229,0.862,234,0.776,242,0.761,248,1.039,250,0.783,252,0.936,255,4.864,259,2.738,263,1.103,268,1.275,272,0.819,273,1.31,277,0.99,279,2.361,282,0.862,293,1.134,299,1.103,303,2.854,320,0.599,321,0.48,350,1.028,380,1.353,390,3.438,399,1.012,432,0.682,433,0.982,438,4.086,441,0.548,442,4.315,443,4.882,451,1.118,462,0.715,463,1.009,464,5.318,466,2.178,467,1.103,470,1.493,471,1.213,472,1.118,473,1.407,474,1.974,475,1.671,476,3.474,477,1.936,478,2.465,479,1.479,480,1.479,481,2.699,482,1.915,483,1.103,486,4.146,487,1.31,489,1.353,492,2.077,494,1.244,495,2.175,501,1.427,504,2.1,505,2,507,1.146,508,1.486,509,1.112,511,1.479,519,1.172,522,0.877,523,0.684,526,0.797,527,1.062,528,0.853,529,0.982,530,1.172,531,0.943,534,1.062,535,0.84,536,1.217,544,1.05,549,0.73,584,0.867,596,0.588,628,0.811,634,0.923,645,0.823,672,1.275,698,0.546,722,0.773,774,1.088,780,0.738,796,1.31,889,1.407,986,1.134,991,0.867,993,0.761,994,1.31,995,1.05,996,1.589,997,0.867,998,3.78,999,2.388,1000,2.467,1001,1.31,1002,1.217,1003,1.589,1004,1.407,1005,1.353,1006,0.786,1007,1.062,1008,1.589,1009,1.118,1010,1.353,1011,1.193,1012,1.172,1013,1.407,1014,1.479,1015,1.589,1016,2.996,1017,2.896,1018,1.353,1019,1.589,1020,1.589,1021,1.589,1022,1.589,1023,1.275,1024,1.589,1025,1.589,1026,3.714,1027,1.589,1028,1.244,1029,1.589,1030,1.217,1031,1.479,1032,0.649]],["component/14",[190,1.552]],["title/15-1",[23,47.683,1011,55.878]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[13,18.419,139,15.132,390,19.755,997,25.214,1033,25.815]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15-3",[13,18.419,139,15.132,390,19.755,774,31.641,1033,25.815]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["title/15-4",[217,34.949,535,39.317]],["name/15-4",[]],["text/15-4",[]],["component/15-4",[]],["title/15-5",[133,20.72,390,26.438,438,26.518]],["name/15-5",[]],["text/15-5",[]],["component/15-5",[]],["title/15-6",[390,26.438,438,26.518,774,42.345]],["name/15-6",[]],["text/15-6",[]],["component/15-6",[]],["title/15-7",[390,26.438,438,26.518,596,22.861]],["name/15-7",[]],["text/15-7",[]],["component/15-7",[]],["title/15-8",[215,33.554,390,26.438,438,26.518]],["name/15-8",[]],["text/15-8",[]],["component/15-8",[]],["title/15-9",[237,37.814,892,51.635]],["name/15-9",[]],["text/15-9",[]],["component/15-9",[]],["title/15",[13,21.084,390,22.613,535,27.941,536,40.502]],["name/15",[757,2.59]],["text/15",[1,1.143,3,0.544,5,2.507,6,0.668,9,0.414,11,1.462,12,1.253,13,3.041,15,0.653,18,1.595,22,0.759,24,0.773,30,1.988,47,2.561,51,2.579,52,2.742,67,1.096,68,1.802,81,0.764,89,0.652,93,1.308,96,1.394,99,1.245,109,2.249,126,1.487,133,1.096,137,2.99,139,1.461,147,0.824,149,0.625,158,1.143,178,1.006,180,3.493,181,3.292,215,1.776,220,1.421,222,2.189,225,0.771,232,1.423,244,1.245,252,2.629,261,0.707,266,0.797,282,0.987,307,1.747,319,1.262,350,2.118,390,4.325,391,0.805,399,1.905,415,0.896,425,1.23,430,2.897,434,1.035,435,0.785,438,4.338,441,1.127,443,0.731,455,0.841,470,0.937,478,1.123,490,1.721,499,1.035,501,2.198,507,0.719,508,0.933,509,1.256,518,1.215,519,1.341,520,0.907,524,1.365,527,1.216,534,1.216,549,0.835,551,1.035,565,1.029,582,1.042,596,0.672,618,1.548,628,0.928,654,1.579,698,1.534,744,0.998,770,1.851,780,1.52,785,0.92,788,0.971,802,1.042,889,4.827,891,1.105,899,1.079,943,1.423,960,1.004,997,1.786,1001,1.499,1006,0.9,1012,4.019,1013,1.61,1014,1.693,1018,1.548,1033,2.492,1034,1.818,1035,1.096,1036,1.245,1037,1.088,1038,1.458,1039,1.599,1040,2.241,1041,1.61,1042,1.318,1043,1.548,1044,1.298,1045,1.559,1046,1.818,1047,1.693,1048,1.548,1049,3.271,1050,1.818,1051,3.271,1052,1.341,1053,1.818,1054,1.818,1055,1.818,1056,1.818,1057,1.202,1058,1.818,1059,1.818,1060,3.271,1061,3.271,1062,6.287,1063,1.818,1064,1.818,1065,1.818,1066,1.818,1067,3.046,1068,1.818,1069,4.827,1070,1.818,1071,3.271,1072,1.818,1073,1.818,1074,1.818,1075,1.818,1076,1.818,1077,1.818,1078,1.818,1079,1.818,1080,1.216,1081,1.318,1082,1.341,1083,1.818,1084,1.818,1085,1.818,1086,1.818,1087,1.818,1088,0.785,1089,1.693,1090,1.818,1091,1.818,1092,1.818,1093,1.818,1094,1.818,1095,1.818,1096,1.818,1097,1.818,1098,1.818,1099,1.818,1100,1.818,1101,1.818,1102,1.818,1103,1.818,1104,1.818,1105,1.818,1106,1.818,1107,1.818,1108,3.271,1109,1.458,1110,1.61,1111,1.004,1112,1.279]],["component/15",[190,1.552]],["title/16-1",[1113,70.161]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[193,42.345,891,37.566,922,33.369]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[52,19.595,909,22.707,922,33.369]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16-4",[8,20.842,294,40.871,922,33.369]],["name/16-4",[]],["text/16-4",[]],["component/16-4",[]],["title/16-5",[204,35.488,922,40.162]],["name/16-5",[]],["text/16-5",[]],["component/16-5",[]],["title/16-6",[11,11.848,915,39.618,922,33.369]],["name/16-6",[]],["text/16-6",[]],["component/16-6",[]],["title/16-7",[133,20.72,333,27.823,941,33.188]],["name/16-7",[]],["text/16-7",[]],["component/16-7",[]],["title/16",[630,31.725,926,63.374]],["name/16",[630,1.186]],["text/16",[0,1.746,2,0.776,3,0.563,4,0.408,5,1.161,6,1.238,8,3.855,9,0.428,11,1.907,18,1.172,20,1.42,22,0.785,25,2.045,26,0.457,27,0.606,28,0.903,42,2.087,51,1.261,52,1.619,56,0.735,63,0.579,73,1.204,84,1.803,89,0.674,90,0.764,91,0.402,92,0.621,93,1.602,95,0.364,96,1.883,105,1.293,109,0.357,112,0.397,113,0.675,114,2.897,116,1.85,118,1.063,123,0.493,124,1.647,125,0.712,126,0.272,129,0.579,133,2.02,137,0.304,147,0.452,149,0.646,151,0.879,155,1.261,166,1.99,169,0.903,171,0.814,176,0.73,180,0.639,181,1.26,193,1.826,204,2.875,207,1.497,208,0.407,209,0.53,214,2.017,217,0.468,218,0.415,220,0.599,221,1.923,222,0.928,226,2.244,230,1.151,233,0.873,234,0.487,235,2.891,242,0.477,252,3.01,253,0.749,261,0.388,266,0.437,267,0.781,275,1.038,294,4.501,296,0.928,302,0.822,319,1.85,320,1.27,321,1.018,329,0.883,333,3.366,334,0.458,335,0.433,337,1.342,342,1.161,345,1.55,349,4.266,350,0.645,351,0.596,352,0.735,358,2.501,360,1.582,362,0.822,363,1.582,365,1.271,374,0.447,378,1.151,379,0.352,388,0.423,401,1.147,402,0.8,405,0.446,408,0.883,417,1.092,419,0.312,430,0.883,432,1.143,463,0.633,469,0.639,471,0.418,475,0.575,476,0.606,485,0.692,492,1.754,518,0.37,519,0.735,522,0.551,523,0.809,529,0.616,536,0.764,539,0.575,541,0.38,565,1.063,584,0.544,598,0.572,599,0.572,621,0.667,630,2.57,645,2.075,652,0.735,654,0.481,659,1.363,678,0.568,680,0.561,682,1.507,722,0.485,740,0.735,756,0.702,758,0.683,764,0.645,772,0.544,792,0.749,800,0.849,806,0.883,887,1.782,888,0.652,902,1.411,907,2.075,908,0.883,909,2.363,912,0.883,915,1.708,922,5.28,923,0.633,924,0.53,941,4.176,942,0.627,945,0.928,952,1.256,953,1.507,956,0.883,957,1.084,958,2.852,960,2.212,961,0.702,962,0.849,964,0.8,966,0.449,968,1.238,987,0.723,991,1.455,1009,0.702,1011,0.749,1012,1.386,1028,1.471,1113,2.531,1114,3.548,1115,0.928,1116,2.856,1117,0.883,1118,3.064,1119,2.198,1120,0.946,1121,0.997,1122,0.764,1123,1.439,1124,0.579,1125,1.439,1126,1.879,1127,0.675,1128,0.997,1129,1.471,1130,2.784,1131,1.879,1132,0.849,1133,1.322,1134,0.997,1135,0.849,1136,0.611,1137,0.997,1138,0.997,1139,0.997,1140,2.638,1141,0.692,1142,0.928,1143,0.702,1144,1.725,1145,0.997,1146,0.735,1147,0.997,1148,0.997,1149,0.928,1150,1.55,1151,1.879,1152,0.928,1153,1.879,1154,0.616,1155,0.997,1156,2.002,1157,0.997,1158,0.564,1159,0.997,1160,0.633,1161,0.467,1162,0.883,1163,0.928,1164,0.675,1165,0.781,1166,0.883,1167,1.879,1168,1.142,1169,0.997,1170,0.611,1171,0.997,1172,0.997,1173,0.997,1174,0.997,1175,0.928,1176,0.973,1177,0.735,1178,3.779,1179,0.928,1180,1.193,1181,0.997,1182,0.712,1183,0.723,1184,1.304,1185,2.042,1186,1.879,1187,0.997,1188,0.997,1189,0.997,1190,0.764,1191,0.712,1192,1.879,1193,0.849,1194,0.883,1195,0.997,1196,0.928,1197,0.928,1198,0.997,1199,0.883,1200,0.735,1201,0.997,1202,0.883,1203,0.997]],["component/16",[190,1.552]],["title/17",[0,32.019,204,29.486,1156,46.426]],["name/17",[1204,2.781]],["text/17",[0,4.341,3,2.78,5,3.594,9,1.286,18,0.997,25,1.74,26,2.582,64,2.803,84,2.306,89,1.222,96,1.762,114,1.639,116,1.871,137,1.04,149,1.172,151,1.595,178,1.049,194,1.757,204,5.282,207,1.514,225,1.445,251,1.83,252,4.251,257,2.755,282,3.061,299,2.366,340,2.229,367,3.174,378,2.088,382,1.445,397,2.229,412,2.56,415,2.779,419,1.765,438,1.462,462,1.534,471,2.362,476,3.427,478,4.456,523,2.426,536,7.662,571,1.83,609,2.811,632,2.56,698,1.172,703,3.64,780,1.583,785,1.724,787,2.254,788,3.011,907,4.341,966,1.534,1007,3.771,1044,5.15,1045,0.975,1130,2.071,1142,5.25,1156,8.624,1205,1.929,1206,3.408,1207,3.408,1208,3.408,1209,4.994,1210,5.639,1211,7.212,1212,7.212,1213,4.235,1214,5.25,1215,1.322,1216,4.803,1217,3.408,1218,2.254,1219,3.408,1220,2.734,1221,3.408,1222,3.174,1223,4.994,1224,4.994,1225,3.408,1226,3.408,1227,2.903,1228,3.174,1229,3.408,1230,3.019]],["component/17",[190,1.552]],["title/18",[11,17.906]],["name/18",[205,1.287]],["text/18",[1,4.321,9,1.566,11,2.145,14,4.596,15,2.469,16,2.921,17,3.18,52,2.178,60,3.794,64,3.415,109,2.458,121,3.84,176,2.671,195,3.012,196,2.719,197,3.303,198,4.448,199,2.879,200,3.146,201,2.733,202,3.022,203,2.984,204,3.277,207,3.052,222,2.392,223,3.476,225,2.912,226,2.155,307,5.164,388,2.912,389,3.042,434,3.913,451,4.835,455,3.18,542,2.939,590,3.476,899,4.08]],["component/18",[190,1.552]],["title/19-1",[11,14.261,413,39.944]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[2,21.667,413,39.944]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[303,37.139,413,39.944]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19-4",[237,37.814,413,39.944]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["title/19",[389,41.355]],["name/19",[389,1.231]],["text/19",[2,2.269,3,2.683,4,2.53,5,2.855,6,1.399,9,1.776,11,1.493,13,3.574,18,2.28,47,2.983,48,1.531,80,1.474,91,1.535,126,1.685,130,2.17,132,2.214,137,1.162,150,2.829,151,1.783,166,1.655,178,1.172,181,1.047,204,1.817,209,2.024,217,1.79,222,1.326,226,1.195,237,1.936,257,1.862,262,4.626,279,3.218,303,1.902,363,4.626,389,2.735,397,2.492,399,2.159,401,1.639,405,1.703,413,7.268,435,1.644,505,3.906,507,1.508,509,1.463,526,3.097,532,1.511,607,3.245,628,1.945,631,2.08,667,2.279,691,2.116,703,1.655,763,2.116,927,1.854,968,3.292,994,3.142,1140,2.983,1231,6.426,1232,4.639,1233,2.983,1234,3.81,1235,3.81,1236,3.81,1237,3.81,1238,2.045,1239,6.177,1240,3.81,1241,6.177,1242,2.17,1243,2.035,1244,3.81,1245,3.81,1246,6.177,1247,3.921,1248,3.81,1249,3.81,1250,2.354,1251,3.81,1252,2.279,1253,2.644]],["component/19",[190,1.552]],["title/20-1",[14,23.84,195,32.619]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[14,23.84,196,29.439]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[14,23.84,197,35.769]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20-4",[14,23.84,199,31.17]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["title/20-5",[14,23.84,200,34.071]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["title/20-6",[14,23.84,16,31.63]],["name/20-6",[]],["text/20-6",[]],["component/20-6",[]],["title/20-7",[14,23.84,17,34.438]],["name/20-7",[]],["text/20-7",[]],["component/20-7",[]],["title/20-8",[229,28.7,255,27.941,256,31.393,443,21.251]],["name/20-8",[]],["text/20-8",[]],["component/20-8",[]],["title/20-9",[3,18.51,14,19.808,201,24.586]],["name/20-9",[]],["text/20-9",[]],["component/20-9",[]],["title/20-10",[14,23.84,202,32.724]],["name/20-10",[]],["text/20-10",[]],["component/20-10",[]],["title/20-11",[14,23.84,15,26.734]],["name/20-11",[]],["text/20-11",[]],["component/20-11",[]],["title/20-12",[203,40.572]],["name/20-12",[]],["text/20-12",[]],["component/20-12",[]],["title/20",[52,19.595,222,21.521,226,19.387]],["name/20",[1254,2.781]],["text/20",[9,1.552,11,1.305,52,2.158,96,2.128,222,2.37,226,3.013,266,2.985,1120,3.429,1255,5.33,1256,5.113,1257,4.938,1258,5.215,1259,5.113,1260,5.799,1261,5.799,1262,5.799,1263,5.799,1264,5.113,1265,5.462,1266,5.799,1267,4.938,1268,5.462,1269,5.33,1270,5.799,1271,5.799,1272,5.615,1273,4.664,1274,5.799,1275,4.791,1276,5.799,1277,5.799,1278,5.799,1279,5.021,1280,7.522,1281,7.359,1282,4.725,1283,5.215,1284,5.615,1285,5.799,1286,5.799,1287,5.021,1288,4.861,1289,5.799,1290,5.799,1291,4.243,1292,5.615,1293,4.861]],["component/20",[190,1.552]],["title/21",[523,40.197]],["name/21",[205,1.287]],["text/21",[26,5.384,388,4.983,523,5.059,703,5.106]],["component/21",[190,1.552]],["title/22-1",[702,62.465]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22-2",[89,26.676,224,40.613]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["title/22-3",[701,59.299]],["name/22-3",[]],["text/22-3",[]],["component/22-3",[]],["title/22-4",[89,33.495]],["name/22-4",[]],["text/22-4",[]],["component/22-4",[]],["title/22",[416,32.936,419,23.292]],["name/22",[416,1.231]],["text/22",[5,1.467,6,3.173,48,1.204,64,2.516,68,4.564,74,0.917,89,2.357,109,1.812,136,2.968,137,3.445,150,3.011,166,2.855,172,4.964,175,2.61,176,1.968,178,0.922,181,0.824,223,3.326,307,2.704,335,1.301,374,1.344,378,1.836,415,2.495,416,4.418,419,3.419,420,5.725,425,3.426,441,1.033,447,1.618,455,1.387,471,2.121,490,1.156,499,1.707,505,1.502,507,3.418,508,1.537,509,3.317,523,4.033,532,3.066,541,1.142,571,2.718,576,3.875,677,1.358,701,5.483,702,5.168,703,2.855,704,4.623,709,3.511,710,4.347,711,4.714,712,4.714,713,3.514,746,5.032,747,1.902,748,1.807,749,2.004,750,2.471,751,2.004,752,2.79,753,1.836,754,1.94,755,1.981,780,3.054,1032,1.224,1045,0.858,1222,2.79,1294,2.996,1295,2.251,1296,2.996,1297,1.94,1298,3.468,1299,2.996,1300,1.793]],["component/22",[190,1.552]],["title/23-1",[53,71.562]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[957,42.939,1301,65.895]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23-3",[16,31.63,17,34.438]],["name/23-3",[]],["text/23-3",[]],["component/23-3",[]],["title/23-4",[11,14.261,12,28.5]],["name/23-4",[]],["text/23-4",[]],["component/23-4",[]],["title/23-5",[11,14.261,176,28.922]],["name/23-5",[]],["text/23-5",[]],["component/23-5",[]],["title/23-6",[11,14.261,15,26.734]],["name/23-6",[]],["text/23-6",[]],["component/23-6",[]],["title/23-7",[11,14.261,16,31.63]],["name/23-7",[]],["text/23-7",[]],["component/23-7",[]],["title/23-8",[11,14.261,17,34.438]],["name/23-8",[]],["text/23-8",[]],["component/23-8",[]],["title/23-9",[12,28.5,15,26.734]],["name/23-9",[]],["text/23-9",[]],["component/23-9",[]],["title/23-10",[12,23.679,16,26.28,17,28.613]],["name/23-10",[]],["text/23-10",[]],["component/23-10",[]],["title/23-11",[16,22.478,30,19.292,242,25.319,282,28.7]],["name/23-11",[]],["text/23-11",[]],["component/23-11",[]],["title/23-12",[196,36.964]],["name/23-12",[]],["text/23-12",[]],["component/23-12",[]],["title/23-13",[9,12.054,11,10.134,12,20.253,196,20.921]],["name/23-13",[]],["text/23-13",[]],["component/23-13",[]],["title/23-14",[112,24.586,320,23.287,518,22.966]],["name/23-14",[]],["text/23-14",[]],["component/23-14",[]],["title/23-15",[286,34.563,509,28.569]],["name/23-15",[]],["text/23-15",[]],["component/23-15",[]],["title/23-16",[286,34.563,440,48.663]],["name/23-16",[]],["text/23-16",[]],["component/23-16",[]],["title/23-17",[15,33.567]],["name/23-17",[]],["text/23-17",[]],["component/23-17",[]],["title/23-18",[12,23.679,18,18.089,196,24.459]],["name/23-18",[]],["text/23-18",[]],["component/23-18",[]],["title/23-19",[30,27.147,241,43.851]],["name/23-19",[]],["text/23-19",[]],["component/23-19",[]],["title/23-20",[196,20.921,241,31.163,551,30.113,1302,29.732]],["name/23-20",[]],["text/23-20",[]],["component/23-20",[]],["title/23-21",[241,43.851,325,46.373]],["name/23-21",[]],["text/23-21",[]],["component/23-21",[]],["title/23-22",[202,41.089]],["name/23-22",[]],["text/23-22",[]],["component/23-22",[]],["title/23-23",[9,12.054,11,10.134,12,20.253,202,23.255]],["name/23-23",[]],["text/23-23",[]],["component/23-23",[]],["title/23-24",[112,24.586,320,23.287,518,22.966]],["name/23-24",[]],["text/23-24",[]],["component/23-24",[]],["title/23-25",[12,23.679,18,18.089,202,27.189]],["name/23-25",[]],["text/23-25",[]],["component/23-25",[]],["title/23-26",[112,14.664,150,16.884,202,16.217,518,13.698,551,20.999,1247,23.404,1302,20.734]],["name/23-26",[]],["text/23-26",[]],["component/23-26",[]],["title/23-27",[196,24.459,202,27.189,303,30.857]],["name/23-27",[]],["text/23-27",[]],["component/23-27",[]],["title/23-28",[30,22.555,803,38.529,1303,57.554]],["name/23-28",[]],["text/23-28",[]],["component/23-28",[]],["title/23-29",[518,34.706]],["name/23-29",[]],["text/23-29",[]],["component/23-29",[]],["title/23",[30,14.963,112,16.31,293,29.281,518,15.235,1304,41.603]],["name/23",[1304,0.993,1305,1.564]],["text/23",[0,0.816,2,2.926,3,0.472,4,1.177,5,2.657,9,1.824,10,2.86,11,2.13,12,1.517,13,0.628,14,2.043,15,2.702,16,3.583,17,4.243,18,2.201,26,0.721,28,1.381,30,2.919,33,0.833,36,2.388,45,1.079,46,0.77,48,0.633,51,0.746,53,3.743,55,1.467,56,1.162,57,0.668,58,2.37,60,0.87,61,0.935,62,0.88,63,1.67,64,0.783,65,0.711,66,0.957,67,0.95,68,1.161,69,1.183,70,1.207,72,1.342,73,1.789,74,0.482,75,1.109,76,1.207,81,0.662,91,1.596,93,1.954,94,0.86,95,2.073,97,1.183,112,0.627,114,1.381,130,1.636,133,1.905,139,0.516,147,0.714,166,1.72,175,0.812,176,1.899,177,0.841,178,0.884,181,1.343,196,2.522,202,1.742,208,1.174,215,1.56,221,1.184,235,0.637,241,1.694,242,0.754,243,2.201,251,1.543,272,1.481,284,2.427,286,0.732,287,1.606,293,2.052,301,1.299,303,0.786,318,0.929,320,1.082,321,0.476,325,0.982,331,2.749,334,0.724,335,0.684,363,3.785,370,1.299,379,0.556,387,0.74,399,1.385,401,0.678,416,2.163,419,0.493,420,0.86,434,1.636,450,0.79,455,1.33,457,1.467,462,0.709,483,1.093,490,0.608,518,1.815,520,0.786,521,1.093,528,0.846,530,1.162,534,1.053,542,0.674,550,0.965,558,1.879,577,1.053,661,0.891,674,0.965,678,1.636,698,0.542,709,0.841,722,0.767,731,1.342,740,1.162,744,0.865,763,2.714,772,0.86,803,1.791,900,1.125,907,0.816,915,1.01,924,1.526,925,1.066,927,0.767,929,1.264,958,0.804,968,3.367,983,0.797,1006,0.78,1043,1.342,1161,0.737,1176,0.816,1184,1.093,1215,0.611,1227,1.342,1243,0.841,1252,0.942,1304,1,1306,1.467,1307,2.25,1308,1.093,1309,1.066,1310,1.681,1311,0.837,1312,1.467,1313,1.093,1314,1.109,1315,1.575,1316,1.207,1317,2.447,1318,2.084,1319,3.034,1320,1.299,1321,0.922,1322,0.991,1323,1.575,1324,0.915,1325,1.575,1326,0.86,1327,1.575,1328,1.575,1329,1.183,1330,1.575,1331,1.342,1332,1.575,1333,1.342,1334,1.264,1335,1.467,1336,1.467,1337,1.467,1338,1.395,1339,1.395,1340,2.545,1341,1.264,1342,1.575,1343,3.688,1344,1.395,1345,2.545,1346,1.575,1347,1.395,1348,1.575,1349,5.682,1350,4.886,1351,1.575,1352,2.675,1353,2.675,1354,2.873,1355,1.575]],["component/23",[190,1.552]],["title/24",[53,71.562]],["name/24",[205,1.287]],["text/24",[53,8.109,121,5.916,193,7.251,455,4.9,502,6.195,630,4.514,1300,6.333,1334,8.492,1356,10.585,1357,5.778,1358,9.376]],["component/24",[190,1.552]],["title/25-1",[484,35.206,949,32.019,1359,36.174]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[474,36.818,1360,37.641]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25-3",[441,25.639,608,44.175]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["title/25-4",[474,36.818,1361,48.161]],["name/25-4",[]],["text/25-4",[]],["component/25-4",[]],["title/25-5",[976,50.966,1362,44.856]],["name/25-5",[]],["text/25-5",[]],["component/25-5",[]],["title/25-6",[1362,44.856,1363,51.635]],["name/25-6",[]],["text/25-6",[]],["component/25-6",[]],["title/25-7",[441,21.302,1364,40.871,1365,40.871]],["name/25-7",[]],["text/25-7",[]],["component/25-7",[]],["title/25-8",[1366,82.74]],["name/25-8",[]],["text/25-8",[]],["component/25-8",[]],["title/25-9",[1367,79.574]],["name/25-9",[]],["text/25-9",[]],["component/25-9",[]],["title/25",[5,13.387,204,22.032,299,32.057,1367,39.345,1368,40.91]],["name/25",[1368,1.385,1369,1.564]],["text/25",[5,1.11,28,1.841,31,3.072,37,2.824,45,2.623,48,1.539,61,2.274,95,2.263,133,2.621,193,2.623,204,2.959,208,3.194,218,1.595,229,2.079,237,1.946,244,5.356,261,1.489,299,6.854,317,4.365,375,3.262,397,8.231,401,1.648,406,2.876,435,2.677,441,1.32,474,1.895,500,2.387,512,2.561,531,2.274,590,1.937,700,2.934,704,2.291,727,6.448,728,6.925,733,2.623,772,2.09,805,2.876,916,5.989,921,2.876,942,3.901,991,4.907,993,1.834,1007,4.148,1028,2.998,1035,2.309,1132,3.262,1176,1.984,1177,4.575,1190,4.752,1193,3.262,1318,2.777,1366,8.747,1367,5.284,1370,2.998,1371,2.998,1372,2.658,1373,2.658,1374,3.072,1375,3.072,1376,2.934,1377,2.934,1378,2.505,1379,2.505,1380,2.241,1381,3.392,1382,2.346,1383,2.998,1384,5.116,1385,4.659,1386,2.14,1387,6.203,1388,2.658,1389,7.818,1390,2.998,1391,3.829,1392,6.203,1393,2.734,1394,2.998,1395,3.566,1396,4.512,1397,3.262,1398,3.829,1399,4.101,1400,3.566]],["component/25",[190,1.552]],["title/26-1",[484,35.206,949,32.019,1359,36.174]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26-2",[474,36.818,1360,37.641]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["title/26-3",[441,25.639,608,44.175]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["title/26-4",[474,36.818,1361,48.161]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["title/26-5",[976,50.966,1362,44.856]],["name/26-5",[]],["text/26-5",[]],["component/26-5",[]],["title/26-6",[1362,44.856,1363,51.635]],["name/26-6",[]],["text/26-6",[]],["component/26-6",[]],["title/26-7",[441,21.302,1364,40.871,1365,40.871]],["name/26-7",[]],["text/26-7",[]],["component/26-7",[]],["title/26-8",[122,36.977,235,30.063]],["name/26-8",[]],["text/26-8",[]],["component/26-8",[]],["title/26-9",[235,30.063,379,26.281]],["name/26-9",[]],["text/26-9",[]],["component/26-9",[]],["title/26-10",[342,57.723]],["name/26-10",[]],["text/26-10",[]],["component/26-10",[]],["title/26",[5,9.706,22,13.991,235,22.456,283,20.353,379,11.831,763,18.605,1401,29.663]],["name/26",[1401,1.385,1402,1.564]],["text/26",[5,0.769,8,2.026,11,0.875,22,2.51,23,1.701,28,1.276,36,1.297,48,1.067,52,0.841,80,1.027,95,1.666,96,0.83,104,3.766,112,1.056,114,2.889,121,1.484,122,3.546,166,1.153,178,0.817,181,1.961,193,3.128,194,5.552,204,1.266,209,3.79,218,1.902,223,1.343,234,1.297,235,4.82,244,1.818,252,1.565,256,1.576,257,1.297,283,2.775,293,1.895,298,2.472,320,1.72,335,1.153,364,3.663,365,3.089,379,2.52,406,1.994,433,3.713,434,3.422,441,0.915,477,1.775,500,1.655,518,0.986,520,2.279,535,2.413,560,2.601,584,1.449,585,2.351,604,4.17,700,2.033,723,4.012,733,3.128,761,3.312,885,1.842,898,1.796,899,1.576,901,4.82,922,4.741,923,2.898,927,1.292,942,5.056,961,1.868,993,1.271,1013,7.121,1035,2.753,1042,1.925,1119,2.189,1143,3.213,1165,3.575,1176,1.375,1205,3.4,1312,2.472,1318,1.925,1370,2.078,1371,2.078,1372,1.842,1373,1.842,1374,2.129,1375,2.129,1376,2.033,1377,2.033,1378,1.736,1379,1.736,1380,1.553,1381,2.351,1396,1.532,1399,7.122,1403,2.654,1404,2.654,1405,5.594,1406,2.129,1407,3.368,1408,2.261,1409,1.842,1410,2.654,1411,1.994,1412,2.261,1413,3.429,1414,2.261,1415,1.868,1416,3.368,1417,2.261,1418,2.472,1419,3.889,1420,2.654,1421,2.654,1422,2.472,1423,2.654,1424,2.033,1425,2.472,1426,4.82,1427,1.994,1428,2.189,1429,2.472,1430,2.189,1431,2.654]],["component/26",[190,1.552]],["title/27-1",[484,35.206,949,32.019,1359,36.174]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[474,36.818,1360,37.641]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27-3",[441,25.639,608,44.175]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["title/27-4",[474,36.818,1361,48.161]],["name/27-4",[]],["text/27-4",[]],["component/27-4",[]],["title/27-5",[976,50.966,1362,44.856]],["name/27-5",[]],["text/27-5",[]],["component/27-5",[]],["title/27-6",[1362,44.856,1363,51.635]],["name/27-6",[]],["text/27-6",[]],["component/27-6",[]],["title/27-7",[441,21.302,1364,40.871,1365,40.871]],["name/27-7",[]],["text/27-7",[]],["component/27-7",[]],["title/27-8",[364,59.685,1185,56.993]],["name/27-8",[]],["text/27-8",[]],["component/27-8",[]],["title/27-9",[364,59.685,1185,56.993]],["name/27-9",[]],["text/27-9",[]],["component/27-9",[]],["title/27",[5,11.885,469,26.282,922,22.136,1185,31.413,1432,36.32,1433,38.18]],["name/27",[1432,1.385,1434,1.564]],["text/27",[14,0.876,19,3.15,36,1.335,43,2.052,61,1.622,95,3.835,101,4.358,102,1.923,111,4.529,112,1.087,114,1.314,116,1.5,130,1.556,132,2.72,133,1.569,177,1.459,193,1.872,209,3.262,218,1.138,224,1.492,235,1.891,242,2.242,244,4.206,252,3.619,263,1.896,283,1.661,317,1.923,321,0.825,333,3.682,345,3.861,351,2.8,364,10.256,402,4.926,441,1.613,462,1.23,474,1.352,500,1.703,536,2.093,549,1.256,604,1.896,645,3.768,680,1.537,730,2.192,772,1.492,799,1.807,805,3.516,898,4.155,903,2.015,922,5.673,923,5.193,926,2.328,941,4.392,942,4.575,953,3.755,957,4.198,961,3.294,993,1.309,1035,1.647,1041,2.42,1144,1.769,1176,1.415,1177,2.015,1178,6,1185,9.223,1197,2.544,1238,1.467,1360,1.382,1370,2.139,1371,2.139,1372,1.896,1373,1.896,1374,2.192,1375,2.192,1376,2.093,1377,2.093,1378,1.787,1379,1.787,1380,1.599,1381,2.42,1385,2.052,1399,5.899,1414,2.328,1415,1.923,1416,3.452,1424,5.573,1426,3.755,1435,2.42,1436,2.732,1437,2.42,1438,2.544,1439,2.544,1440,6.14,1441,3.755,1442,2.732,1443,4.146,1444,2.254,1445,2.732,1446,2.732,1447,2.254,1448,2.732,1449,2.732,1450,2.732,1451,1.872,1452,2.732]],["component/27",[190,1.552]],["title/28-1",[484,35.206,949,32.019,1359,36.174]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28-2",[474,36.818,1360,37.641]],["name/28-2",[]],["text/28-2",[]],["component/28-2",[]],["title/28-3",[441,25.639,608,44.175]],["name/28-3",[]],["text/28-3",[]],["component/28-3",[]],["title/28-4",[474,36.818,1361,48.161]],["name/28-4",[]],["text/28-4",[]],["component/28-4",[]],["title/28-5",[976,50.966,1362,44.856]],["name/28-5",[]],["text/28-5",[]],["component/28-5",[]],["title/28-6",[1362,44.856,1363,51.635]],["name/28-6",[]],["text/28-6",[]],["component/28-6",[]],["title/28-7",[441,21.302,1364,40.871,1365,40.871]],["name/28-7",[]],["text/28-7",[]],["component/28-7",[]],["title/28-8",[1453,55.887]],["name/28-8",[]],["text/28-8",[]],["component/28-8",[]],["title/28-9",[132,54.285]],["name/28-9",[]],["text/28-9",[]],["component/28-9",[]],["title/28-10",[891,56.771]],["name/28-10",[]],["text/28-10",[]],["component/28-10",[]],["title/28",[5,11.885,256,24.348,299,28.46,891,24.921,1454,36.32,1455,34.93]],["name/28",[1454,1.385,1456,1.564]],["text/28",[2,0.937,3,0.963,5,1.558,11,0.617,12,2.059,22,1.344,23,2.062,25,3.534,26,2.461,28,1.547,39,4.765,46,1.572,52,1.02,57,1.364,61,5.339,62,1.798,80,1.244,93,1.286,95,1.961,100,3.145,102,2.264,116,2.95,121,3.004,122,3.44,132,1.869,133,1.078,147,1.458,155,1.523,166,1.397,178,0.99,181,1.903,207,1.429,222,2.41,223,1.628,230,1.971,250,1.585,252,1.896,256,3.191,271,2.519,277,2.005,299,6.745,313,2.104,314,1.737,320,2.025,406,2.416,441,1.852,486,2.333,500,2.005,535,1.7,546,1.356,612,4.432,655,1.517,663,1.683,727,5.708,728,4.76,733,2.204,745,3.782,772,1.756,799,2.127,891,4.913,892,2.233,942,6.8,986,3.837,993,1.54,1035,1.939,1123,4.117,1124,1.869,1165,2.519,1176,1.666,1370,2.519,1371,2.519,1372,2.233,1373,2.233,1374,2.581,1375,2.581,1376,2.464,1377,2.464,1378,2.104,1379,2.104,1380,1.882,1385,2.416,1399,6.426,1411,2.416,1453,1.924,1455,5.896,1457,2.995,1458,2.995,1459,3.217,1460,6.486,1461,5.374,1462,2.653,1463,3.217,1464,2.995,1465,5.374,1466,6.921,1467,3.217,1468,3.217,1469,3.217,1470,2.062,1471,3.217,1472,5.004,1473,2.849,1474,3.217,1475,2.849,1476,2.74,1477,2.849,1478,3.217,1479,3.217,1480,3.217,1481,2.581]],["component/28",[190,1.552]],["title/29-1",[484,35.206,949,32.019,1359,36.174]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[474,36.818,1360,37.641]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29-3",[441,25.639,608,44.175]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["title/29-4",[474,36.818,1361,48.161]],["name/29-4",[]],["text/29-4",[]],["component/29-4",[]],["title/29-5",[976,50.966,1362,44.856]],["name/29-5",[]],["text/29-5",[]],["component/29-5",[]],["title/29-6",[1362,44.856,1363,51.635]],["name/29-6",[]],["text/29-6",[]],["component/29-6",[]],["title/29-7",[441,21.302,1364,40.871,1365,40.871]],["name/29-7",[]],["text/29-7",[]],["component/29-7",[]],["title/29-8",[5,11.885,25,20.939,401,17.645,1130,24.921,1482,38.18,1483,32.897]],["name/29-8",[]],["text/29-8",[]],["component/29-8",[]],["title/29-9",[74,14.138,93,18.467,677,20.933,1129,36.163,1484,43.006]],["name/29-9",[]],["text/29-9",[]],["component/29-9",[]],["title/29-10",[74,14.138,93,18.467,133,15.483,677,20.933,1129,36.163]],["name/29-10",[]],["text/29-10",[]],["component/29-10",[]],["title/29",[93,14.741,621,24.654,677,16.709,1035,22.229,1129,28.866,1462,30.408,1485,32.656]],["name/29",[1485,1.385,1486,1.564]],["text/29",[2,0.77,5,2.325,8,0.892,9,0.603,13,1.055,22,1.105,24,1.125,25,1.351,48,1.063,74,1.834,87,1.861,93,5.068,94,1.444,95,2.186,98,1.292,99,1.812,100,1.548,102,1.861,108,1.987,114,1.272,121,2.544,128,2.683,133,3.146,139,0.867,170,3.37,171,1.145,178,0.814,218,1.102,220,0.843,221,0.791,225,1.121,226,1.428,233,1.229,250,1.303,256,1.571,262,1.571,305,2.071,314,1.428,342,1.634,391,1.171,401,1.959,406,1.987,428,1.79,435,1.965,441,2.065,466,1.444,472,3.203,477,1.769,491,1.79,500,1.649,518,0.983,522,1.461,535,3.762,579,1.749,590,1.338,604,3.159,625,1.918,636,1.951,641,1.516,655,2.146,664,3.25,674,1.621,677,3.226,700,2.026,733,1.812,773,1.749,785,2.303,799,1.749,805,1.987,893,3.159,922,1.428,923,2.89,942,4.477,960,3.309,961,1.861,993,1.267,1035,2.744,1037,1.582,1039,0.948,1129,9.655,1130,5.327,1143,1.861,1165,2.071,1176,1.37,1300,1.582,1372,1.836,1373,1.836,1376,2.026,1377,2.026,1378,1.73,1379,1.73,1380,1.548,1393,1.889,1399,5.795,1414,2.253,1415,3.203,1418,2.463,1419,2.253,1462,3.754,1482,2.463,1483,2.122,1484,4.238,1487,2.645,1488,3.419,1489,2.645,1490,5.992,1491,2.645,1492,2.645,1493,2.645,1494,2.645,1495,2.645,1496,1.749,1497,4.238,1498,2.463,1499,2.182,1500,2.253,1501,1.812,1502,1.951,1503,1.987,1504,2.122,1505,2.463,1506,2.122,1507,2.645,1508,2.645,1509,2.645,1510,2.463,1511,2.645,1512,2.122,1513,2.645,1514,2.463,1515,1.749]],["component/29",[190,1.552]],["title/30-1",[484,35.206,949,32.019,1359,36.174]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["title/30-2",[474,36.818,1360,37.641]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["title/30-3",[441,25.639,608,44.175]],["name/30-3",[]],["text/30-3",[]],["component/30-3",[]],["title/30-4",[474,36.818,1361,48.161]],["name/30-4",[]],["text/30-4",[]],["component/30-4",[]],["title/30-5",[976,50.966,1362,44.856]],["name/30-5",[]],["text/30-5",[]],["component/30-5",[]],["title/30-6",[1362,44.856,1363,51.635]],["name/30-6",[]],["text/30-6",[]],["component/30-6",[]],["title/30-7",[441,21.302,1364,40.871,1365,40.871]],["name/30-7",[]],["text/30-7",[]],["component/30-7",[]],["title/30-8",[421,36.219,1231,43.606,1516,45.037,1517,45.037]],["name/30-8",[]],["text/30-8",[]],["component/30-8",[]],["title/30-9",[421,42.345,1231,50.982,1516,52.655]],["name/30-9",[]],["text/30-9",[]],["component/30-9",[]],["title/30-10",[20,31.351,1518,65.895]],["name/30-10",[]],["text/30-10",[]],["component/30-10",[]],["title/30",[3,12.279,9,9.349,194,21.138,421,28.091,1035,24.723,1519,36.32]],["name/30",[1519,1.385,1520,1.564]],["text/30",[3,3.579,5,1.86,8,0.37,9,0.661,11,0.7,12,2.899,18,0.602,19,0.563,20,0.866,24,1.838,27,0.667,28,0.988,30,1.332,31,1.649,32,0.84,33,0.58,36,1.417,44,0.809,45,0.751,46,0.536,48,1.737,49,0.84,50,0.529,52,0.348,61,0.651,62,0.613,63,0.637,80,0.424,84,0.742,87,0.772,89,1.309,94,0.599,95,3.188,100,2.137,102,0.772,104,1.695,107,0.58,112,1.154,113,0.742,114,0.527,116,2.373,117,1.305,118,2.066,123,1.017,132,0.637,133,0.689,135,0.476,147,0.497,149,0.377,151,0.513,166,0.476,177,1.098,178,0.337,181,0.797,193,1.987,194,3.523,207,0.913,208,0.448,209,1.541,214,1.035,216,0.548,217,0.966,218,0.856,221,0.328,224,0.599,226,0.645,228,0.71,229,0.595,230,1.259,237,2.503,242,0.525,244,0.751,246,0.568,252,1.212,256,3.543,261,0.799,262,0.651,263,0.761,272,0.565,282,1.116,286,0.51,287,0.613,305,2.271,312,1.821,314,0.592,320,0.774,351,1.23,365,0.742,368,0.934,370,0.905,372,0.617,389,0.486,397,2.827,405,0.49,409,0.772,419,0.343,421,4.088,425,0.742,432,0.471,433,3.044,435,0.473,441,2.056,447,0.592,448,0.56,456,1.021,461,2.271,463,0.696,466,0.599,469,0.703,472,1.446,474,2.139,478,4.223,487,0.905,500,0.684,502,0.642,522,0.606,523,0.885,535,3.153,539,0.633,549,0.945,550,0.672,551,0.625,557,0.725,558,0.717,560,0.625,582,0.629,584,0.599,590,0.555,604,0.761,608,0.651,609,0.905,630,0.877,641,0.629,645,1.502,652,0.809,653,0.972,654,0.529,655,2.814,661,0.621,674,0.672,722,0.534,733,2.501,740,2.139,744,0.602,763,1.142,764,0.71,768,0.934,772,1.122,775,0.595,785,0.555,799,1.359,805,1.544,891,0.667,893,3.797,902,0.824,903,0.809,909,0.403,917,0.905,922,0.592,923,1.841,924,0.583,936,0.88,937,0.972,942,4.298,943,0.859,956,2.569,963,0.88,966,2.889,982,0.783,994,1.695,1035,1.239,1037,0.656,1042,0.796,1117,0.972,1122,0.84,1124,1.686,1146,0.809,1162,3.234,1176,0.568,1177,2.693,1184,1.427,1193,0.934,1196,1.021,1200,0.809,1214,1.021,1231,4.062,1233,0.859,1304,1.305,1322,0.69,1326,0.599,1331,0.934,1338,0.972,1370,0.859,1371,0.859,1372,0.761,1373,0.761,1374,0.88,1375,0.88,1376,0.84,1377,0.84,1378,0.717,1379,0.717,1380,0.642,1396,0.633,1399,4.244,1407,0.809,1408,6.445,1415,3.85,1416,0.809,1419,1.751,1426,1.649,1429,1.021,1481,0.88,1488,0.824,1505,1.021,1514,2.701,1516,5.083,1517,1.751,1518,2.569,1521,0.972,1522,1.097,1523,1.097,1524,1.097,1525,0.905,1526,1.097,1527,0.972,1528,2.056,1529,0.934,1530,1.345,1531,1.751,1532,0.972,1533,2.701,1534,1.097,1535,1.097,1536,2.056,1537,1.097,1538,0.972,1539,2.056,1540,0.905,1541,0.633,1542,1.575,1543,1.345,1544,1.097,1545,1.097,1546,1.021,1547,1.097,1548,1.021,1549,1.097,1550,0.84,1551,1.021,1552,1.097,1553,2.471,1554,1.021,1555,2.056,1556,3.333,1557,0.88,1558,1.097,1559,1.021,1560,0.972,1561,1.097,1562,1.021,1563,0.88,1564,1.097,1565,1.097,1566,0.905,1567,1.097,1568,0.809,1569,1.695,1570,1.021,1571,0.905,1572,0.934,1573,1.097,1574,1.097,1575,1.097,1576,1.751,1577,0.972,1578,0.905,1579,1.097,1580,0.859,1581,1.097,1582,1.097,1583,1.021,1584,1.097,1585,0.972,1586,0.859,1587,0.905,1588,1.097,1589,2.056,1590,2.056,1591,1.491,1592,1.021,1593,0.934,1594,0.905]],["component/30",[190,1.552]],["title/31-1",[484,35.206,949,32.019,1359,36.174]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31-2",[474,36.818,1360,37.641]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["title/31-3",[441,25.639,608,44.175]],["name/31-3",[]],["text/31-3",[]],["component/31-3",[]],["title/31-4",[474,36.818,1361,48.161]],["name/31-4",[]],["text/31-4",[]],["component/31-4",[]],["title/31-5",[976,50.966,1362,44.856]],["name/31-5",[]],["text/31-5",[]],["component/31-5",[]],["title/31-6",[1362,44.856,1363,51.635]],["name/31-6",[]],["text/31-6",[]],["component/31-6",[]],["title/31-7",[441,21.302,1364,40.871,1365,40.871]],["name/31-7",[]],["text/31-7",[]],["component/31-7",[]],["title/31-8",[3,15.832,11,10.134,218,22.024,421,36.219]],["name/31-8",[]],["text/31-8",[]],["component/31-8",[]],["title/31-9",[11,11.848,117,39.239,421,42.345]],["name/31-9",[]],["text/31-9",[]],["component/31-9",[]],["title/31-10",[342,57.723]],["name/31-10",[]],["text/31-10",[]],["component/31-10",[]],["title/31",[3,12.279,11,7.86,218,17.082,237,20.842,421,28.091,1595,36.32]],["name/31",[1595,1.385,1596,1.564]],["text/31",[3,2.683,9,0.628,11,2.217,12,2.365,16,2.003,22,1.968,23,1.764,24,1.17,30,1.004,31,2.208,32,2.109,46,4.378,51,1.303,62,1.538,80,1.065,95,2.667,100,1.611,109,1.685,117,2.99,118,2.666,133,1.579,139,1.543,151,1.288,155,2.923,193,5.008,194,2.428,201,1.095,218,1.962,233,2.188,237,2.394,242,1.318,253,2.067,261,2.4,294,1.82,320,2.754,335,1.196,382,1.997,388,1.167,421,5.629,428,1.862,433,1.701,434,1.568,441,0.949,461,3.688,500,1.716,518,1.023,521,1.91,522,1.52,535,4.734,549,1.265,551,1.568,584,2.571,587,2.03,595,2.208,604,1.91,608,1.634,645,1.426,674,1.687,698,0.947,733,1.886,740,2.03,763,1.529,772,1.503,783,2.818,785,2.383,792,2.067,888,1.8,893,4.285,902,2.067,923,2.99,942,4.598,953,2.208,962,2.345,966,1.239,1009,1.937,1012,3.474,1035,2.84,1037,1.647,1042,3.417,1116,2.936,1117,2.438,1176,1.426,1177,2.03,1338,2.438,1370,2.155,1371,2.155,1372,1.91,1373,1.91,1376,2.109,1377,2.109,1378,1.8,1379,1.8,1380,1.611,1399,4.082,1415,5.782,1464,2.563,1496,1.82,1512,2.208,1531,2.345,1553,4.013,1556,4.946,1563,2.208,1569,2.27,1576,2.345,1591,3.417,1594,2.27,1597,2.753,1598,2.753,1599,2.345,1600,2.03,1601,2.563,1602,2.563,1603,2.753,1604,2.563,1605,2.208,1606,2.438,1607,3.688,1608,2.753,1609,2.753,1610,2.753,1611,1.996,1612,4.71,1613,2.067,1614,2.753,1615,2.438,1616,2.753,1617,2.438]],["component/31",[190,1.552]],["title/32-1",[484,35.206,949,32.019,1359,36.174]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[441,25.639,608,44.175]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32-3",[474,46.229]],["name/32-3",[]],["text/32-3",[]],["component/32-3",[]],["title/32-4",[976,50.966,1362,44.856]],["name/32-4",[]],["text/32-4",[]],["component/32-4",[]],["title/32-5",[1362,44.856,1363,51.635]],["name/32-5",[]],["text/32-5",[]],["component/32-5",[]],["title/32-6",[342,57.723]],["name/32-6",[]],["text/32-6",[]],["component/32-6",[]],["title/32",[13,21.084,135,22.963,599,30.311,1618,46.829]],["name/32",[1618,1.385,1619,1.564]],["text/32",[3,1.98,5,1.668,11,1.267,12,0.749,13,1.888,18,0.573,22,2.404,24,2.447,25,0.999,29,1.614,30,0.714,44,1.443,48,1.404,50,1.687,63,1.137,73,3.314,74,1.069,82,1.578,89,0.701,90,1.499,95,2.1,96,0.611,98,0.956,100,2.045,113,1.324,114,0.941,118,1.107,121,1.093,122,2.353,126,0.534,132,1.137,134,0.788,135,4.25,136,0.751,137,1.066,139,1.886,149,0.673,154,1.018,164,1.034,166,1.517,171,3.177,181,3.075,190,1.034,192,1.614,194,1.801,201,1.39,217,0.919,218,1.455,219,1.57,220,1.114,221,1.044,222,1.216,225,1.481,236,1.219,242,1.673,250,2.333,263,1.358,266,2.076,309,3.06,313,1.28,321,0.591,372,1.965,378,2.141,379,0.691,391,0.866,402,1.57,406,1.469,409,2.459,419,0.613,421,1.34,422,3.843,432,0.839,435,1.508,441,1.204,470,1.009,471,0.82,490,1.348,500,1.219,501,0.964,505,2.374,510,1.435,518,0.727,519,1.443,520,1.744,535,1.846,539,2.732,549,0.899,565,1.107,577,1.308,579,1.294,582,1.122,599,2.714,602,1.822,604,1.358,631,5.342,663,1.828,672,2.803,691,1.941,698,1.979,703,1.517,744,3.16,761,2.534,768,1.667,783,2.832,786,1.614,787,1.294,788,1.045,792,1.469,925,1.324,942,2.197,949,1.013,960,1.08,966,1.573,993,0.937,1032,1.934,1033,1.093,1035,3.47,1127,2.364,1133,1.377,1135,4.902,1156,1.469,1158,1.107,1176,1.013,1182,1.397,1228,1.822,1372,1.358,1373,1.358,1378,1.28,1379,1.28,1380,1.145,1383,1.532,1385,1.469,1395,1.822,1409,1.358,1415,1.377,1426,1.57,1447,1.614,1512,1.57,1515,1.294,1530,2.285,1557,1.57,1569,1.614,1606,1.733,1620,1.614,1621,1.614,1622,1.822,1623,1.956,1624,1.956,1625,1.733,1626,1.358,1627,1.733,1628,1.956,1629,1.733,1630,2.735,1631,3.494,1632,3.494,1633,3.494,1634,3.494,1635,4.734,1636,1.956,1637,1.469,1638,1.219,1639,1.733,1640,1.733,1641,1.667,1642,1.822,1643,1.57,1644,1.28,1645,1.956,1646,1.956,1647,1.956,1648,1.956]],["component/32",[190,1.552]],["title/33-1",[484,35.206,949,32.019,1359,36.174]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[441,25.639,608,44.175]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33-3",[474,46.229]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["title/33-4",[976,50.966,1362,44.856]],["name/33-4",[]],["text/33-4",[]],["component/33-4",[]],["title/33-5",[1362,44.856,1363,51.635]],["name/33-5",[]],["text/33-5",[]],["component/33-5",[]],["title/33-6",[342,57.723]],["name/33-6",[]],["text/33-6",[]],["component/33-6",[]],["title/33",[3,10.029,22,13.991,24,14.238,149,11.518,1625,29.663,1649,29.663,1650,22.942,1651,23.244]],["name/33",[1649,1.385,1652,1.564]],["text/33",[3,2.025,4,1.005,5,2.22,6,0.901,11,1.296,20,1.797,22,1.025,24,2.875,25,2.178,27,1.491,28,1.179,59,1.572,65,1.108,78,4.015,81,1.031,89,0.88,91,0.989,93,0.981,95,2.795,96,1.333,99,1.681,113,1.66,121,3.162,122,2.12,132,1.426,133,0.822,137,0.748,147,1.112,149,3.815,164,2.254,171,2.928,192,2.023,201,0.976,208,1.002,218,1.022,219,1.968,222,1.97,225,1.04,226,0.769,229,1.332,230,3.467,232,1.921,248,2.79,249,2.09,261,1.658,266,1.87,282,1.332,333,1.104,335,1.065,339,3.146,340,1.605,342,1.516,351,1.468,360,1.457,373,2.284,378,1.503,381,1.529,401,1.056,405,1.097,419,2.117,432,3.873,442,1.317,481,1.66,485,4.693,502,1.436,518,0.911,520,2.129,521,2.96,523,1.056,531,1.457,532,1.692,535,2.254,579,2.82,598,1.406,610,1.921,629,1.503,634,1.426,652,1.809,655,2.011,703,1.852,709,1.31,733,1.681,760,2.09,763,2.369,780,1.14,799,1.622,805,1.842,898,2.886,922,1.324,923,2.707,943,1.921,966,1.92,993,2.042,1028,1.921,1030,1.879,1035,3.411,1040,1.681,1045,0.702,1136,1.503,1140,1.921,1158,1.388,1165,1.921,1176,2.931,1184,1.703,1205,1.388,1238,1.317,1300,1.468,1302,2.398,1329,3.203,1372,1.703,1373,1.703,1380,1.436,1388,1.703,1409,1.703,1415,1.726,1426,3.422,1500,3.633,1518,2.173,1527,2.173,1529,2.09,1532,2.173,1533,2.284,1571,2.023,1604,2.284,1622,2.284,1626,3.927,1640,5.989,1651,1.703,1653,2.453,1654,2.453,1655,1.879,1656,2.284,1657,2.453,1658,2.453,1659,2.453,1660,2.453,1661,2.453,1662,2.453,1663,2.09,1664,2.453,1665,2.284,1666,0.792,1667,2.453,1668,6.762,1669,1.842,1670,1.529,1671,2.173,1672,2.453,1673,2.284,1674,2.453,1675,1.752,1676,2.453,1677,2.023,1678,2.284,1679,2.453]],["component/33",[190,1.552]],["title/34-1",[484,35.206,949,32.019,1359,36.174]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["title/34-2",[441,25.639,608,44.175]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["title/34-3",[474,36.818,1360,37.641]],["name/34-3",[]],["text/34-3",[]],["component/34-3",[]],["title/34-4",[474,46.229]],["name/34-4",[]],["text/34-4",[]],["component/34-4",[]],["title/34-5",[1542,71.562]],["name/34-5",[]],["text/34-5",[]],["component/34-5",[]],["title/34-6",[1472,86.978]],["name/34-6",[]],["text/34-6",[]],["component/34-6",[]],["title/34-7",[441,25.639,903,54.873]],["name/34-7",[]],["text/34-7",[]],["component/34-7",[]],["title/34-8",[9,14.093,194,31.864,1460,49.589]],["name/34-8",[]],["text/34-8",[]],["component/34-8",[]],["title/34-9",[466,50.995]],["name/34-9",[]],["text/34-9",[]],["component/34-9",[]],["title/34-10",[9,12.054,93,21.139,126,14.425,194,27.254]],["name/34-10",[]],["text/34-10",[]],["component/34-10",[]],["title/34-11",[13,29.668,126,20.299]],["name/34-11",[]],["text/34-11",[]],["component/34-11",[]],["title/34-12",[261,28.922,1130,45.214]],["name/34-12",[]],["text/34-12",[]],["component/34-12",[]],["title/34-13",[93,29.746,187,39.944]],["name/34-13",[]],["text/34-13",[]],["component/34-13",[]],["title/34",[5,9.706,9,7.636,80,12.955,136,12.86,194,17.264,433,20.694,1130,20.353,1680,29.663]],["name/34",[1680,1.385,1681,1.564]],["text/34",[2,1.553,5,0.769,9,1.921,11,0.705,13,1.82,14,0.85,15,1.322,16,0.614,18,0.423,22,1.108,23,1.7,26,1.215,28,1.275,30,0.968,33,0.763,48,0.58,52,0.841,59,0.925,62,0.807,67,1.599,74,1.632,78,0.857,80,2.062,89,0.951,93,3.213,95,1.946,96,1.426,98,1.798,99,0.989,108,1.993,109,1.633,113,1.795,114,1.769,121,0.807,123,0.715,126,1.004,133,0.889,135,0.627,137,0.809,139,2.163,171,2.858,177,0.771,181,3.529,187,3.224,194,3.403,198,0.935,204,1.265,207,1.178,214,0.727,221,0.432,223,0.731,225,0.612,233,0.671,236,0.9,237,0.734,256,4.235,261,1.031,263,3.167,282,0.784,285,2.128,292,1.23,314,0.779,321,0.436,335,1.152,388,0.612,406,1.084,428,6.159,433,2.274,435,0.623,441,0.498,466,3.604,470,1.368,471,1.542,475,0.833,500,1.654,518,0.986,520,0.721,523,1.142,531,2.71,546,0.608,561,1.106,571,2.45,579,2.433,584,0.788,598,0.828,628,1.355,641,0.828,643,0.925,644,1.817,653,1.279,655,1.251,656,2.26,664,2.628,674,0.885,677,2.416,682,1.158,698,0.497,699,1.084,723,0.812,761,1.047,763,2.535,775,2.894,806,1.279,903,1.065,922,0.779,923,3.812,924,1.409,925,6.159,942,0.908,960,0.797,972,1.002,983,0.731,993,1.27,1006,0.715,1011,3.428,1035,1.599,1039,0.951,1045,0.759,1089,2.47,1118,2.461,1127,0.977,1130,4.624,1144,0.935,1176,0.748,1182,1.031,1184,1.002,1193,1.23,1194,2.35,1253,1.002,1308,1.002,1309,0.977,1372,1.002,1373,1.002,1378,0.944,1379,0.944,1380,0.845,1383,2.077,1400,1.344,1409,1.002,1441,2.128,1460,2.952,1462,1.191,1481,1.158,1488,1.084,1515,1.754,1569,1.191,1591,1.047,1607,1.13,1640,1.279,1650,0.989,1656,1.344,1682,1.444,1683,2.653,1684,1.444,1685,1.444,1686,1.23,1687,1.13,1688,1.444,1689,4.722,1690,5.332,1691,0.989,1692,2.653,1693,2.653,1694,3.68,1695,0.839,1696,6.601,1697,6.601,1698,1.279,1699,0.935,1700,1.444,1701,1.444,1702,1.344,1703,2.653,1704,1.344,1705,1.444,1706,1.444,1707,1.444,1708,1.444,1709,1.191,1710,1.444,1711,1.444,1712,0.989,1713,1.444,1714,1.279,1715,1.444,1716,1.23,1717,1.444,1718,1.158,1719,2.47,1720,1.444,1721,1.23,1722,1.444,1723,1.444]],["component/34",[190,1.552]],["title/35-1",[484,35.206,949,32.019,1359,36.174]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35-2",[474,36.818,1360,37.641]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["title/35-3",[441,25.639,608,44.175]],["name/35-3",[]],["text/35-3",[]],["component/35-3",[]],["title/35-4",[474,36.818,1361,48.161]],["name/35-4",[]],["text/35-4",[]],["component/35-4",[]],["title/35-5",[441,21.302,1364,40.871,1365,40.871]],["name/35-5",[]],["text/35-5",[]],["component/35-5",[]],["title/35-6",[3,22.278,176,28.922]],["name/35-6",[]],["text/35-6",[]],["component/35-6",[]],["title/35-7",[1724,63.374,1725,63.374]],["name/35-7",[]],["text/35-7",[]],["component/35-7",[]],["title/35-8",[13,24.65,176,24.03,966,27.823]],["name/35-8",[]],["text/35-8",[]],["component/35-8",[]],["title/35",[65,23.879,80,20.452,1726,46.829,1727,46.829]],["name/35",[1726,1.385,1728,1.564]],["text/35",[3,2.131,5,1.853,11,0.872,12,0.714,13,3.303,18,0.979,24,0.792,50,0.899,61,1.106,64,2.262,65,0.842,66,2.033,77,1,78,1.106,80,3.204,82,0.842,89,0.668,95,2.026,100,1.09,109,0.667,112,0.741,116,1.023,118,3.141,124,1.151,126,0.508,135,2.411,147,0.844,151,0.872,169,0.896,174,1.068,175,2.346,176,4.355,178,1.029,180,1.194,181,0.512,221,1,222,0.649,230,3.918,232,1.459,237,3.25,246,0.965,255,2.934,266,1.466,279,0.77,282,1.011,306,1.537,312,1.65,320,2.409,340,1.219,382,1.418,397,2.976,441,0.642,447,1.006,448,2.324,477,2.237,478,2.067,486,1.351,490,3.197,496,1.068,501,0.918,502,1.09,518,1.243,525,4.438,531,1.986,542,0.797,545,2.388,550,4.36,552,3.249,560,1.061,565,1.893,579,3.67,596,1.237,655,1.577,657,3.557,665,1.587,674,1.142,690,1.495,703,0.809,744,1.023,766,1.65,768,1.587,932,1.194,942,5.511,958,0.951,966,3.484,974,1.495,993,1.602,1009,1.311,1011,1.399,1035,1.123,1057,1.232,1176,0.965,1205,1.054,1216,2.849,1295,3.418,1304,1.183,1322,3.491,1372,1.293,1373,1.293,1378,1.219,1379,1.219,1380,1.09,1385,1.399,1390,1.459,1399,6.756,1407,2.467,1409,1.293,1483,1.495,1560,1.65,1592,1.735,1724,2.849,1725,5.447,1727,7.337,1729,1.399,1730,1.399,1731,1.427,1732,1.65,1733,1.495,1734,1.735,1735,1.331,1736,1.495,1737,1.863,1738,2.426,1739,3.345,1740,1.374,1741,1.374,1742,2.426,1743,3.651,1744,2.512,1745,4.55,1746,1.863,1747,1.537,1748,2.836,1749,3.345,1750,3.345,1751,1.65,1752,3.651,1753,1.863,1754,1.495,1755,1.863,1756,1.863,1757,3.345,1758,2.562,1759,1.65,1760,1.735,1761,1.863,1762,1.863,1763,1.863,1764,1.863,1765,1.863,1766,1.863,1767,1.863,1768,1.863,1769,1.587,1770,1.863,1771,2.962,1772,1.863,1773,1.863,1774,1.863,1775,1.735,1776,1.863,1777,1.863]],["component/35",[190,1.552]],["title/36-1",[484,35.206,949,32.019,1359,36.174]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["title/36-2",[3,18.51,226,19.387,255,32.667]],["name/36-2",[]],["text/36-2",[]],["component/36-2",[]],["title/36-3",[108,34.691,419,14.461,738,33.501,1778,40.91,1779,36.163]],["name/36-3",[]],["text/36-3",[]],["component/36-3",[]],["title/36-4",[9,16.962,1512,59.685]],["name/36-4",[]],["text/36-4",[]],["component/36-4",[]],["title/36-5",[3,12.279,18,12,80,15.862,178,12.616,222,14.276,255,21.67]],["name/36-5",[]],["text/36-5",[]],["component/36-5",[]],["title/36-6",[3,27.973]],["name/36-6",[]],["text/36-6",[]],["component/36-6",[]],["title/36-7",[3,15.832,13,21.084,1780,52.87,1781,49.228]],["name/36-7",[]],["text/36-7",[]],["component/36-7",[]],["title/36-8",[1782,74.396,1783,74.396]],["name/36-8",[]],["text/36-8",[]],["component/36-8",[]],["title/36-9",[1223,65.895,1784,69.271]],["name/36-9",[]],["text/36-9",[]],["component/36-9",[]],["title/36-10",[1785,86.978]],["name/36-10",[]],["text/36-10",[]],["component/36-10",[]],["title/36-11",[581,82.74]],["name/36-11",[]],["text/36-11",[]],["component/36-11",[]],["title/36-12",[474,36.818,1360,37.641]],["name/36-12",[]],["text/36-12",[]],["component/36-12",[]],["title/36-13",[441,25.639,608,44.175]],["name/36-13",[]],["text/36-13",[]],["component/36-13",[]],["title/36-14",[474,36.818,1361,48.161]],["name/36-14",[]],["text/36-14",[]],["component/36-14",[]],["title/36-15",[976,50.966,1362,44.856]],["name/36-15",[]],["text/36-15",[]],["component/36-15",[]],["title/36-16",[1362,44.856,1363,51.635]],["name/36-16",[]],["text/36-16",[]],["component/36-16",[]],["title/36-17",[342,57.723]],["name/36-17",[]],["text/36-17",[]],["component/36-17",[]],["title/36",[3,15.832,222,18.407,226,16.582,1786,46.829]],["name/36",[1786,1.385,1787,1.564]],["text/36",[0,0.651,1,1.467,3,3.639,4,0.515,5,1.577,9,0.286,11,0.782,13,0.501,18,0.368,22,0.525,25,2.084,26,0.575,27,0.763,32,2.502,36,0.614,42,0.983,48,0.938,51,0.595,62,1.304,63,3.495,80,1.263,82,2.458,83,1.17,95,1.489,96,0.393,99,0.861,108,1.752,109,0.449,112,0.5,114,0.604,116,0.69,121,0.702,122,1.623,127,0.783,129,0.73,134,0.506,147,0.569,166,2.612,171,0.544,178,1.005,181,0.641,193,0.861,194,0.648,204,1.113,208,0.513,209,5.314,211,1.598,213,2.172,221,0.697,222,3.788,226,3.89,246,0.651,250,0.619,255,3.451,257,0.614,261,1.269,263,0.872,266,1.432,283,1.418,297,1.17,302,2.693,306,1.924,314,1.259,315,2.906,320,0.473,334,0.577,335,1.013,340,0.822,341,1.17,342,0.776,345,1.036,375,3.477,379,0.824,380,1.987,381,0.783,382,0.532,384,0.943,397,0.822,402,1.008,404,1.036,419,0.393,435,0.542,462,1.05,471,0.526,474,0.622,476,1.985,478,3.716,510,0.516,516,2.891,521,0.872,523,0.541,525,0.872,542,0.537,546,0.983,557,0.831,560,0.715,571,0.674,581,1.113,584,1.783,585,2.066,590,1.18,600,0.757,621,0.84,629,3.334,634,0.73,680,0.706,703,1.013,722,0.611,733,0.861,763,0.698,775,0.682,799,0.831,885,0.872,893,0.872,902,1.752,920,1.17,923,0.797,933,1.113,934,1.07,942,0.79,957,0.725,964,1.008,966,1.837,1012,0.926,1035,1.406,1115,3.041,1118,0.84,1120,1.645,1123,0.962,1124,1.356,1140,0.983,1149,2.172,1162,1.113,1176,0.651,1194,2.066,1216,1.07,1223,1.113,1238,0.674,1300,0.752,1304,0.797,1310,1.911,1339,5.327,1340,1.113,1357,0.686,1372,0.872,1373,0.872,1380,1.365,1407,0.926,1414,1.07,1415,0.884,1417,1.07,1460,1.008,1476,1.07,1512,1.008,1521,1.113,1548,1.17,1556,1.578,1559,1.17,1577,1.113,1583,1.17,1638,0.783,1670,0.783,1732,1.113,1735,0.897,1736,1.008,1738,0.911,1778,6.572,1781,1.17,1784,2.172,1785,1.17,1788,1.256,1789,1.008,1790,3.96,1791,1.256,1792,4.082,1793,1.256,1794,0.962,1795,1.17,1796,0.872,1797,1.256,1798,2.333,1799,1.256,1800,1.008,1801,4.802,1802,1.008,1803,1.256,1804,1.256,1805,1.256,1806,0.983,1807,2.172,1808,2.266,1809,2.333,1810,2.333,1811,1.256,1812,1.256,1813,1.256,1814,0.84,1815,2.333,1816,3.266,1817,1.826,1818,1.256,1819,1.256,1820,1.07,1821,1.256,1822,1.256,1823,1.256,1824,1.256,1825,1.256,1826,1.256,1827,1.924,1828,1.256,1829,1.256,1830,1.256,1831,0.884,1832,1.07,1833,1.113,1834,0.84,1835,1.17,1836,1.256,1837,1.256,1838,1.256,1839,1.07,1840,1.256,1841,1.036,1842,1.036,1843,1.256,1844,1.256,1845,1.256,1846,1.256,1847,3.266,1848,1.256,1849,1.481,1850,3.266,1851,1.256,1852,1.256,1853,1.578,1854,1.256,1855,1.17,1856,2.333,1857,1.256,1858,1.17,1859,1.256,1860,1.256,1861,1.256,1862,1.256,1863,1.17,1864,0.962,1865,1.256,1866,1.256,1867,2.333,1868,1.036,1869,0.897,1870,1.256,1871,1.256,1872,0.962,1873,2.333,1874,1.256,1875,1.256]],["component/36",[190,1.552]],["title/37-1",[484,35.206,949,32.019,1359,36.174]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[474,36.818,1360,37.641]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[441,25.639,608,44.175]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37-4",[474,36.818,1361,48.161]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["title/37-5",[441,21.302,1364,40.871,1365,40.871]],["name/37-5",[]],["text/37-5",[]],["component/37-5",[]],["title/37-6",[65,33.602,1876,69.271]],["name/37-6",[]],["text/37-6",[]],["component/37-6",[]],["title/37-7",[52,16.76,432,22.682,520,26.393,1877,49.228]],["name/37-7",[]],["text/37-7",[]],["component/37-7",[]],["title/37-8",[1483,59.685,1878,46.373]],["name/37-8",[]],["text/37-8",[]],["component/37-8",[]],["title/37",[52,16.76,65,23.879,171,22.891,1879,45.037]],["name/37",[1879,1.332,1880,1.564]],["text/37",[2,0.413,5,0.757,6,2.18,9,1.353,11,1.6,13,1.446,17,3.021,18,1.317,20,0.598,25,3.603,26,1.196,27,1.587,30,0.953,32,1.087,50,1.26,52,3.042,65,4.077,67,0.856,80,1.01,81,0.596,82,0.641,89,0.936,98,0.693,109,0.934,112,1.039,122,0.705,126,1.228,128,2.137,131,1.257,134,0.572,137,1.81,139,0.465,147,0.643,150,1.661,154,1.359,171,2.279,172,2.131,176,0.552,178,0.437,181,1.631,194,0.732,209,0.754,211,0.972,217,0.667,218,1.875,222,1.833,233,0.659,237,0.721,266,1.974,275,0.784,294,0.938,305,1.111,308,2.044,313,0.928,320,0.984,321,1.095,335,0.616,340,0.928,378,2.222,379,0.922,388,2.231,431,4.925,432,4,434,0.808,441,2.743,455,0.657,462,1.175,471,1.094,486,1.029,490,0.548,501,1.787,507,2.348,509,2.279,510,1.072,518,1.347,520,0.708,523,1.937,526,1.309,529,1.613,531,0.843,532,2.354,535,1.38,545,3.214,551,1.487,560,4.019,584,0.775,634,0.825,704,0.849,723,2.532,746,1.947,764,1.69,788,0.758,796,2.991,902,1.066,923,2.858,937,1.257,942,4.105,946,1.894,957,0.819,958,1.333,966,1.632,977,1.257,993,0.68,997,1.425,1035,0.856,1045,0.406,1125,2,1130,1.587,1176,0.735,1200,1.047,1205,0.803,1220,3.611,1238,0.762,1295,2.724,1300,0.849,1324,2.616,1358,1.257,1378,0.928,1379,0.928,1380,0.83,1396,0.819,1399,4.979,1417,3.835,1527,1.257,1553,2.224,1557,1.138,1644,2.372,1691,1.789,1729,1.066,1730,1.066,1731,1.087,1735,1.013,1736,1.138,1738,1.029,1742,1.029,1744,3.954,1775,2.431,1876,3.376,1877,1.321,1878,5.812,1881,1.419,1882,1.419,1883,1.087,1884,1.087,1885,2.431,1886,1.419,1887,1.321,1888,1.926,1889,0.775,1890,1.419,1891,1.419,1892,1.138,1893,3.265,1894,2.63,1895,3.32,1896,2.675,1897,3.626,1898,3.212,1899,3.626,1900,1.419,1901,3.759,1902,1.419,1903,2.991,1904,2.224,1905,2.611,1906,1.419,1907,1.419,1908,1.419,1909,1.17,1910,1.419,1911,2.611,1912,1.419,1913,1.419,1914,1.419,1915,1.419,1916,1.419,1917,1.257,1918,1.257,1919,1.321,1920,0.999]],["component/37",[190,1.552]],["title/38-1",[484,35.206,949,32.019,1359,36.174]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[441,25.639,608,44.175]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38-3",[474,36.818,1361,48.161]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["title/38-4",[976,50.966,1362,44.856]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["title/38-5",[1362,44.856,1363,51.635]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["title/38-6",[441,21.302,1364,40.871,1365,40.871]],["name/38-6",[]],["text/38-6",[]],["component/38-6",[]],["title/38-7",[11,6.419,139,10.972,441,11.541,510,13.756,1006,16.574,1127,22.66,1921,27.622,1922,29.663]],["name/38-7",[]],["text/38-7",[]],["component/38-7",[]],["title/38-8",[134,18.614,441,15.918,490,17.823,596,17.082,1922,40.91]],["name/38-8",[]],["text/38-8",[]],["component/38-8",[]],["title/38",[5,10.686,11,7.067,176,14.333,181,10.135,438,15.817,698,12.68,1923,32.656]],["name/38",[1923,1.385,1924,1.564]],["text/38",[3,1.386,5,1.083,6,0.54,9,0.335,11,1.869,15,0.528,17,2.5,18,0.789,20,1.136,22,1.126,24,1.588,25,0.75,30,0.536,32,1.126,43,1.104,46,0.718,48,2.171,49,1.126,52,0.855,63,0.854,67,2.252,78,1.601,81,1.57,85,1.126,87,1.034,89,0.967,92,0.916,93,1.078,95,1.971,96,0.459,100,1.578,107,1.425,109,1.656,112,1.072,114,2.923,124,0.908,126,1.019,129,0.854,133,0.493,134,1.087,137,0.822,139,2.518,147,1.222,149,0.505,151,0.688,166,1.622,169,0.707,171,0.636,176,2.596,180,0.942,181,0.741,194,1.39,207,1.198,211,1.007,218,1.928,221,1.383,230,0.9,237,0.747,238,0.879,244,1.847,252,0.866,261,0.571,262,0.873,269,1.02,277,0.916,279,2.231,282,0.798,289,1.212,307,1.44,314,0.793,320,2.516,321,1.128,334,2.127,351,0.879,379,0.519,382,0.623,399,0.943,401,0.632,405,0.657,425,0.994,432,0.63,435,0.634,438,2.865,441,1.595,450,1.352,472,3.256,474,0.727,475,0.848,482,0.972,490,2.966,496,0.842,500,0.916,503,1.368,507,0.581,509,0.564,510,0.604,518,0.546,523,1.991,526,0.737,532,0.583,535,2.446,536,1.126,542,1.979,557,0.972,560,1.536,584,1.472,595,1.179,596,3.276,601,1.02,604,1.871,621,0.983,628,0.75,667,0.879,674,2.289,698,0.927,703,2.64,709,1.44,723,0.826,731,1.252,733,1.847,761,1.956,763,1.498,772,0.802,775,2.512,785,0.743,786,1.212,792,1.104,793,0.807,805,1.104,922,2.017,933,1.302,942,3.397,946,1.066,949,0.761,961,1.034,972,1.02,986,3.857,993,0.704,1006,3.568,1009,1.034,1032,1.101,1033,0.821,1035,0.886,1042,1.066,1043,2.297,1045,1.069,1127,2.528,1158,0.832,1176,0.761,1184,1.02,1230,1.302,1238,0.789,1300,0.879,1329,2.806,1378,0.961,1379,0.961,1380,0.86,1390,2.111,1399,4.767,1409,1.871,1416,3.413,1417,1.252,1426,2.163,1427,1.104,1428,2.224,1435,1.302,1476,2.297,1500,1.252,1501,1.007,1503,1.104,1504,1.179,1506,1.179,1512,1.179,1540,1.212,1571,1.212,1594,1.212,1613,1.104,1626,3.212,1666,1.494,1691,1.007,1698,2.388,1716,1.252,1729,1.104,1730,1.104,1731,1.126,1735,1.049,1736,1.179,1740,1.084,1758,1.126,1789,1.179,1883,1.126,1884,1.126,1893,1.066,1894,1.066,1921,3.817,1922,5.384,1925,1.252,1926,1.252,1927,1.302,1928,1.302,1929,1.469,1930,1.469,1931,1.469,1932,1.302,1933,1.368,1934,1.469,1935,1.302,1936,1.469,1937,1.179,1938,2.51,1939,1.469,1940,1.469,1941,2.696,1942,1.989,1943,1.469,1944,1.469,1945,1.126,1946,1.368,1947,1.469,1948,1.469,1949,1.469,1950,2.224,1951,1.469,1952,1.469,1953,1.151,1954,0.761]],["component/38",[190,1.552]],["title/39-1",[484,35.206,949,32.019,1359,36.174]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39-2",[474,36.818,1360,37.641]],["name/39-2",[]],["text/39-2",[]],["component/39-2",[]],["title/39-3",[441,25.639,608,44.175]],["name/39-3",[]],["text/39-3",[]],["component/39-3",[]],["title/39-4",[474,36.818,1361,48.161]],["name/39-4",[]],["text/39-4",[]],["component/39-4",[]],["title/39-5",[441,21.302,1364,40.871,1365,40.871]],["name/39-5",[]],["text/39-5",[]],["component/39-5",[]],["title/39-6",[172,13.397,217,13.296,416,12.53,441,9.754,510,11.625,701,17.966,702,18.926,703,12.292,1242,16.12,1503,21.257]],["name/39-6",[]],["text/39-6",[]],["component/39-6",[]],["title/39-7",[134,13.497,217,15.732,416,14.826,441,11.541,702,22.394,703,14.545,704,20.036,1242,19.074]],["name/39-7",[]],["text/39-7",[]],["component/39-7",[]],["title/39-8",[52,10.616,82,15.126,126,9.138,137,10.216,172,15.852,420,18.282,441,11.541,704,20.036]],["name/39-8",[]],["text/39-8",[]],["component/39-8",[]],["title/39-9",[172,14.521,217,14.412,416,13.582,441,10.573,516,16.297,701,19.475,703,13.324,1242,17.473,1503,23.042]],["name/39-9",[]],["text/39-9",[]],["component/39-9",[]],["title/39-10",[82,15.126,181,9.207,441,19.152,510,13.756,516,17.791,575,19.2,1178,27.622]],["name/39-10",[]],["text/39-10",[]],["component/39-10",[]],["title/39-11",[78,18.216,147,13.904,393,21.906,441,10.573,701,19.475,703,13.324,704,18.354,915,19.663,1849,19.475]],["name/39-11",[]],["text/39-11",[]],["component/39-11",[]],["title/39-12",[5,12.35,420,13.378,438,10.513,441,8.446,462,11.031,501,12.076,573,16.788,703,10.644,907,12.694,1808,17.009,1955,22.818]],["name/39-12",[]],["text/39-12",[]],["component/39-12",[]],["title/39",[416,20.448,420,25.214,432,19.815,1956,40.91,1957,43.006]],["name/39",[1956,1.385,1958,1.564]],["text/39",[5,1.854,6,0.832,8,0.41,9,0.516,11,0.763,18,0.356,20,0.955,22,0.508,24,0.517,26,0.557,27,0.74,30,1.159,31,0.976,36,1.107,46,1.107,48,1.599,50,0.588,52,1.007,68,1.284,70,0.932,74,0.373,78,1.345,80,0.471,81,0.511,82,1.435,87,2.236,89,0.812,95,1.159,99,0.834,102,2.236,104,1.004,112,1.264,114,1.528,122,1.126,126,0.618,128,0.717,133,1.065,134,1.28,136,0.87,137,1.43,147,2.124,150,1.455,151,0.57,154,0.634,155,1.072,169,0.585,171,1.376,172,2.518,177,0.65,181,3.381,196,0.896,200,0.557,203,0.984,204,1.081,207,0.541,217,1.869,218,1.952,220,0.388,222,0.424,226,0.382,230,1.388,237,0.619,244,0.834,253,0.914,257,0.595,260,0.869,261,1.235,279,0.936,285,0.976,314,0.657,319,0.845,321,0.959,335,1.38,351,0.728,379,1.122,388,0.516,393,0.869,405,0.544,409,1.594,416,3.829,420,4.875,428,2.15,432,0.522,435,0.525,438,1.707,441,3.758,447,0.657,448,0.621,462,2.394,468,1.133,469,1.452,471,2.228,472,2.799,474,1.121,500,0.759,501,0.6,502,0.712,507,0.896,508,1.162,509,0.87,510,1.634,516,1.688,518,1.478,520,0.608,523,1.367,525,0.845,529,0.752,535,2.811,542,0.521,573,1.552,575,1.822,577,0.814,579,0.805,582,1.299,590,1.146,608,0.723,630,0.519,636,0.898,645,0.63,655,0.574,664,0.869,679,1.133,701,3.736,702,4.587,703,4.096,704,3.827,713,0.845,718,0.765,723,0.684,741,1.787,742,0.773,746,1.216,763,0.676,772,0.664,792,0.914,893,0.845,903,0.898,907,1.646,915,2.55,919,1.133,922,0.657,936,0.976,942,2.502,960,1.755,961,0.856,966,0.548,993,0.583,1006,1.121,1016,1.701,1026,1.133,1035,0.734,1045,0.648,1067,1.133,1080,0.814,1124,1.316,1176,0.63,1177,0.898,1178,1.004,1205,0.689,1213,0.914,1215,0.472,1238,0.653,1242,3.643,1304,0.773,1324,0.707,1378,0.796,1379,0.796,1380,0.712,1399,2.101,1409,1.572,1415,0.856,1416,0.898,1422,1.133,1438,1.133,1488,0.914,1503,2.386,1541,0.702,1542,1.735,1556,2.15,1569,1.004,1577,1.078,1591,0.883,1617,1.078,1644,0.796,1651,0.845,1666,1.026,1673,1.133,1677,1.004,1695,0.707,1716,1.037,1729,0.914,1730,0.914,1731,0.932,1808,0.845,1849,0.773,1883,0.932,1884,0.932,1904,1.037,1919,1.133,1925,1.037,1926,1.037,1933,1.133,1938,1.133,1945,0.932,1955,1.133,1959,1.133,1960,1.133,1961,1.217,1962,1.217,1963,0.856,1964,1.217,1965,1.217,1966,1.217,1967,0.932,1968,1.217,1969,1.217,1970,1.217,1971,1.217,1972,1.133,1973,1.217,1974,0.824,1975,0.932,1976,0.834,1977,1.217,1978,1.217,1979,1.078,1980,2.265,1981,1.735,1982,1.217,1983,1.217,1984,1.217,1985,1.217,1986,1.217,1987,1.217,1988,1.217,1989,3.978,1990,1.217,1991,1.217,1992,1.217,1993,1.133,1994,1.078,1995,1.133,1996,1.217,1997,1.217,1998,1.217,1999,1.133,2000,1.004,2001,1.217,2002,1.217,2003,1.217,2004,1.217,2005,1.217,2006,1.217,2007,1.217,2008,1.217,2009,1.217,2010,1.217,2011,1.217,2012,1.217,2013,1.217,2014,1.217]],["component/39",[190,1.552]],["title/40-1",[484,35.206,949,32.019,1359,36.174]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40-2",[474,36.818,1360,37.641]],["name/40-2",[]],["text/40-2",[]],["component/40-2",[]],["title/40-3",[441,25.639,608,44.175]],["name/40-3",[]],["text/40-3",[]],["component/40-3",[]],["title/40-4",[474,36.818,1361,48.161]],["name/40-4",[]],["text/40-4",[]],["component/40-4",[]],["title/40-5",[441,21.302,1364,40.871,1365,40.871]],["name/40-5",[]],["text/40-5",[]],["component/40-5",[]],["title/40-6",[151,24.744,448,26.998,621,35.354,2015,45.037]],["name/40-6",[]],["text/40-6",[]],["component/40-6",[]],["title/40-7",[222,18.407,448,26.998,1878,32.955,2016,46.829]],["name/40-7",[]],["text/40-7",[]],["component/40-7",[]],["title/40-8",[65,13.856,139,10.051,455,14.201,654,14.809,655,14.466,723,17.252,1318,22.251,2017,38.789]],["name/40-8",[]],["text/40-8",[]],["component/40-8",[]],["title/40",[65,27.918,448,31.564,2018,54.75]],["name/40",[2018,1.385,2019,1.564]],["text/40",[5,2.017,6,2.146,9,0.739,11,0.183,13,0.718,15,2.243,18,0.279,23,0.61,24,1.088,25,0.486,28,0.865,48,0.723,50,0.46,52,1.565,57,0.404,60,0.526,62,0.532,65,3.669,66,1.97,68,1.31,74,0.992,78,1.925,81,0.4,95,1.409,96,0.298,102,0.67,107,0.503,109,0.341,117,1.624,118,1.018,126,0.26,134,1.031,135,1.111,137,2.123,139,2.385,147,0.816,151,0.842,155,0.451,164,0.951,171,1.108,176,1.719,178,2.141,180,0.61,181,3.635,202,0.419,211,0.652,215,0.977,218,0.397,222,1.344,223,2.956,226,0.802,233,0.442,237,0.915,249,2.179,261,0.37,313,0.623,321,0.288,340,0.623,388,1.374,390,0.77,397,1.673,399,1.349,418,0.637,425,0.644,431,1.018,432,0.409,433,0.588,438,0.772,441,1.33,447,1.381,448,6.329,455,0.833,458,0.785,462,0.429,469,2.474,495,0.715,500,0.594,502,0.557,507,2.312,509,2.243,510,1.051,514,0.957,518,1.204,523,2.686,526,1.283,532,2.318,535,0.503,541,0.363,557,0.63,560,1.846,584,0.52,596,0.352,621,2.168,634,1.487,654,4.454,655,3.707,657,2.033,667,0.57,690,1.144,703,0.782,723,1.439,746,5.148,753,1.567,756,1.266,769,1.497,770,1.448,771,1.439,799,0.63,868,0.887,903,0.702,942,2.039,993,0.456,1016,0.715,1035,0.574,1045,0.732,1057,2.552,1176,0.493,1199,0.843,1242,0.542,1291,1.595,1318,1.305,1329,0.715,1344,0.843,1357,0.52,1378,0.623,1379,0.623,1380,0.557,1399,2.552,1415,0.67,1510,1.676,1586,0.746,1587,1.484,1593,0.811,1620,0.785,1621,0.785,1637,1.921,1638,1.595,1650,1.752,1669,2.435,1729,0.715,1730,0.715,1731,0.73,1735,0.68,1736,0.764,1740,2.391,1752,3.548,1789,0.764,1878,5.363,1879,1.533,1883,0.73,1884,0.73,1889,0.52,1892,2.052,1974,3.659,1975,3.388,1976,3.382,2015,1.533,2016,1.594,2017,2.899,2020,0.952,2021,0.952,2022,0.61,2023,2.558,2024,0.952,2025,1.96,2026,3.419,2027,4.574,2028,2.871,2029,4.423,2030,2.558,2031,1.775,2032,1.827,2033,1.827,2034,0.952,2035,1.887,2036,2.11,2037,1.409,2038,1.409,2039,5.179,2040,0.764,2041,0.843,2042,0.811,2043,0.764,2044,0.952,2045,0.952,2046,0.952,2047,0.952]],["component/40",[190,1.552]],["title/41-1",[2048,93.413]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["title/41-2",[484,35.206,949,32.019,1359,36.174]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["title/41-3",[484,53.205]],["name/41-3",[]],["text/41-3",[]],["component/41-3",[]],["title/41-4",[474,46.229]],["name/41-4",[]],["text/41-4",[]],["component/41-4",[]],["title/41-5",[474,36.818,1360,37.641]],["name/41-5",[]],["text/41-5",[]],["component/41-5",[]],["title/41-6",[441,25.639,608,44.175]],["name/41-6",[]],["text/41-6",[]],["component/41-6",[]],["title/41-7",[441,25.639,738,53.961]],["name/41-7",[]],["text/41-7",[]],["component/41-7",[]],["title/41-8",[9,7.636,109,11.982,226,10.503,352,24.701,365,22.66,510,13.756,738,24.29,909,12.302]],["name/41-8",[]],["text/41-8",[]],["component/41-8",[]],["title/41-9",[9,6.453,52,8.972,109,10.126,134,11.406,226,15.129,352,20.875,365,19.15,738,20.528,909,10.397]],["name/41-9",[]],["text/41-9",[]],["component/41-9",[]],["title/41-10",[441,32.193]],["name/41-10",[]],["text/41-10",[]],["component/41-10",[]],["title/41-11",[11,7.86,226,20.555,308,32.105,909,15.063,2049,34.93]],["name/41-11",[]],["text/41-11",[]],["component/41-11",[]],["title/41-12",[5,10.686,11,7.067,105,11.901,226,11.563,909,13.543,1146,27.193,2050,31.406]],["name/41-12",[]],["text/41-12",[]],["component/41-12",[]],["title/41-13",[225,22.411,441,18.221,608,31.393,1184,36.695]],["name/41-13",[]],["text/41-13",[]],["component/41-13",[]],["title/41-14",[786,77.046]],["name/41-14",[]],["text/41-14",[]],["component/41-14",[]],["title/41-15",[474,36.818,1361,48.161]],["name/41-15",[]],["text/41-15",[]],["component/41-15",[]],["title/41-16",[441,21.302,1364,40.871,1365,40.871]],["name/41-16",[]],["text/41-16",[]],["component/41-16",[]],["title/41-17",[11,6.419,226,17.429,308,26.221,510,13.756,738,24.29,909,12.302,2049,28.528]],["name/41-17",[]],["text/41-17",[]],["component/41-17",[]],["title/41-18",[11,6.419,134,13.497,226,17.429,308,26.221,738,24.29,909,12.302,2049,28.528]],["name/41-18",[]],["text/41-18",[]],["component/41-18",[]],["title/41-19",[5,8.892,11,5.881,105,9.903,226,9.622,510,12.601,738,22.251,909,11.27,1146,22.628,2050,26.133]],["name/41-19",[]],["text/41-19",[]],["component/41-19",[]],["title/41-20",[5,8.892,11,5.881,105,9.903,134,12.364,226,9.622,738,22.251,909,11.27,1146,22.628,2050,26.133]],["name/41-20",[]],["text/41-20",[]],["component/41-20",[]],["title/41",[52,16.76,226,16.582,909,19.422,2051,46.829]],["name/41",[2051,1.385,2052,1.564]],["text/41",[5,1.604,8,0.434,9,1.115,11,2.058,12,1.441,14,0.215,16,1.014,18,0.841,19,0.343,22,0.996,25,3.257,27,0.407,31,1.032,36,0.629,37,0.494,43,0.503,50,0.323,51,1.361,52,2.819,59,0.429,63,0.747,64,0.333,77,0.997,82,0.302,84,0.453,85,0.985,89,0.855,95,1.655,96,1.418,98,0.327,102,1.306,105,2.218,107,0.354,109,1.749,112,1.804,114,0.618,117,0.816,118,0.379,129,0.747,130,0.381,133,0.964,134,1.516,135,0.291,137,0.204,139,0.219,151,0.602,171,1.443,175,0.663,177,0.687,178,0.206,194,0.345,202,0.816,203,0.291,207,0.297,208,0.273,209,3.522,214,0.337,215,0.363,216,0.334,218,0.536,220,0.213,221,0.2,222,1.16,223,0.651,225,0.545,226,4.062,232,1.453,233,0.598,235,1.162,237,1.462,242,0.889,244,0.459,246,0.666,250,0.634,252,0.758,257,0.907,260,0.478,261,1.118,266,1.649,277,0.417,305,1.007,306,0.552,307,0.687,308,1.867,320,0.898,321,0.56,334,0.591,337,0.478,351,1.11,352,0.494,360,0.398,364,1.032,365,4.803,368,1.096,375,1.096,379,0.656,382,0.284,386,0.425,393,0.478,408,1.644,432,0.287,435,0.289,441,1.685,454,1.007,466,0.365,471,0.539,474,1.423,476,0.407,485,0.893,487,0.552,496,0.737,499,0.381,500,0.417,502,0.392,510,1.369,516,0.683,521,0.893,522,0.37,523,0.553,527,1.594,528,1.28,535,0.981,539,1.924,546,0.782,549,1.532,560,0.381,565,0.379,579,0.443,584,1.302,588,0.552,595,1.032,598,0.384,601,0.465,608,1.707,620,0.513,628,0.948,629,2.042,636,0.494,640,0.327,657,0.308,674,0.41,680,0.376,722,0.326,723,0.376,735,0.459,738,4.23,743,0.552,763,0.715,765,0.552,772,0.702,775,0.363,785,0.339,786,1.531,787,0.85,796,0.552,799,0.443,807,3.331,892,0.465,898,0.453,899,0.398,901,1.032,902,0.503,909,4.408,915,0.429,922,3.148,923,1.825,927,0.626,935,0.795,942,3.481,949,0.347,953,0.537,960,0.37,965,1.096,991,0.365,1010,0.57,1011,0.503,1033,0.374,1035,1.119,1037,0.769,1120,0.337,1124,1.671,1140,3.828,1143,0.471,1146,2.458,1152,0.623,1158,0.379,1176,0.347,1177,1.369,1200,0.494,1205,0.379,1216,0.57,1238,0.359,1272,1.967,1300,0.401,1304,1.825,1310,0.753,1320,1.061,1324,1.079,1326,0.365,1340,0.593,1372,0.465,1373,0.465,1378,0.438,1379,0.438,1380,0.392,1396,0.386,1399,3.66,1405,1.728,1409,2.61,1425,0.623,1427,1.791,1441,0.537,1447,2.372,1481,0.537,1498,1.198,1500,1.096,1529,0.57,1541,0.742,1543,0.841,1546,0.623,1556,2.815,1568,0.494,1586,1.007,1591,2.086,1594,1.061,1613,0.503,1617,0.593,1620,0.552,1621,0.552,1670,0.417,1686,0.57,1691,1.633,1698,1.139,1699,0.433,1709,1.531,1729,0.503,1730,0.503,1735,1.325,1738,0.486,1760,2.22,1771,0.593,1779,1.007,1806,0.524,1814,0.86,1835,0.623,1864,0.513,1920,0.471,1927,0.593,1928,0.593,1932,0.593,1959,0.623,1960,0.623,1967,0.513,1972,0.623,1993,0.623,2015,0.57,2049,2.031,2050,4.165,2053,0.669,2054,0.669,2055,0.669,2056,0.669,2057,1.286,2058,0.669,2059,1.286,2060,1.286,2061,0.669,2062,0.669,2063,0.669,2064,0.669,2065,0.443,2066,0.669,2067,0.593,2068,0.669,2069,1.032,2070,0.57,2071,3.874,2072,1.286,2073,1.856,2074,1.794,2075,0.669,2076,0.669,2077,0.593,2078,0.669,2079,5.832,2080,4.161,2081,1.581,2082,2.875,2083,1.286,2084,1.286,2085,0.669,2086,0.57,2087,0.623,2088,1.358,2089,1.856,2090,0.669,2091,1.286,2092,0.669,2093,0.669,2094,0.669,2095,1.856,2096,0.669,2097,0.669,2098,0.669,2099,0.669,2100,0.669,2101,0.669,2102,0.623,2103,0.669,2104,1.286,2105,1.286,2106,1.007,2107,1.286,2108,1.286,2109,1.286,2110,1.286,2111,1.286,2112,1.139,2113,1.286,2114,1.096]],["component/41",[190,1.552]],["title/42-1",[484,35.206,949,32.019,1359,36.174]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["title/42-2",[474,36.818,1360,37.641]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["title/42-3",[441,25.639,608,44.175]],["name/42-3",[]],["text/42-3",[]],["component/42-3",[]],["title/42-4",[474,36.818,1361,48.161]],["name/42-4",[]],["text/42-4",[]],["component/42-4",[]],["title/42-5",[441,21.302,1364,40.871,1365,40.871]],["name/42-5",[]],["text/42-5",[]],["component/42-5",[]],["title/42-6",[335,17.81,390,17.538,432,17.592,438,17.592,1045,11.734,2115,32.897]],["name/42-6",[]],["text/42-6",[]],["component/42-6",[]],["title/42-7",[390,17.538,432,17.592,438,17.592,733,28.091,1045,11.734,2115,32.897]],["name/42-7",[]],["text/42-7",[]],["component/42-7",[]],["title/42",[203,22.963,334,24.298,2116,45.037,2117,38.347]],["name/42",[2116,1.332,2118,1.564]],["text/42",[5,0.806,11,0.911,13,0.606,18,0.445,20,0.641,22,0.635,24,1.635,30,0.555,48,1.118,50,0.734,64,1.911,68,2.238,74,2.09,81,0.639,89,0.545,93,0.608,95,2.491,98,1.359,102,1.07,107,0.804,109,0.544,112,0.605,117,0.965,126,0.415,128,0.896,133,0.51,136,1.068,137,2.082,151,1.302,154,1.448,164,2.032,171,0.658,178,1.462,181,3.509,199,4.437,200,3.371,203,3.197,218,1.159,221,0.455,222,2.377,233,0.706,234,0.743,236,0.948,250,0.749,252,1.64,257,0.743,261,0.591,279,1.588,285,2.232,288,2.963,307,1.486,334,1.279,335,2.703,340,2.515,370,1.254,379,1.358,390,3.853,416,1.702,432,1.65,435,0.656,438,4.853,441,3.105,450,0.762,462,2.493,469,0.975,471,1.165,472,1.07,473,1.347,500,0.948,509,1.068,514,1.041,518,0.565,523,2.045,526,1.395,532,1.104,535,0.804,541,1.061,560,1.584,582,0.872,584,3.397,596,0.562,604,1.931,621,1.017,646,1.295,664,1.086,703,2.405,704,1.664,733,1.042,741,2.673,763,0.845,780,0.706,784,2.441,885,1.931,936,1.22,942,1.75,993,0.728,1035,0.917,1045,3.281,1127,1.029,1176,0.788,1177,3.506,1199,2.464,1202,1.347,1215,0.59,1378,0.995,1379,0.995,1380,0.89,1383,1.191,1399,2.542,1409,1.055,1475,1.347,1530,0.995,1571,1.254,1593,1.295,1620,1.254,1621,1.254,1666,0.898,1729,1.142,1730,1.142,1731,1.165,1744,3.57,1883,1.165,1884,1.165,1917,1.347,1920,1.07,1925,1.295,1926,1.295,1981,1.165,2022,4.375,2115,6.945,2117,4.951,2119,1.416,2120,1.295,2121,4.905,2122,5.538,2123,3.218,2124,3.845,2125,1.521,2126,2.782,2127,2.782,2128,2.782,2129,2.782,2130,1.521,2131,1.521,2132,2.782,2133,1.521,2134,1.521,2135,1.521]],["component/42",[190,1.552]],["title/43-1",[484,35.206,949,32.019,1359,36.174]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[474,36.818,1360,37.641]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[441,25.639,608,44.175]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43-4",[474,36.818,1361,48.161]],["name/43-4",[]],["text/43-4",[]],["component/43-4",[]],["title/43-5",[441,21.302,1364,40.871,1365,40.871]],["name/43-5",[]],["text/43-5",[]],["component/43-5",[]],["title/43-6",[18,18.089,523,26.599,2117,44.834]],["name/43-6",[]],["text/43-6",[]],["component/43-6",[]],["title/43-7",[18,18.089,523,26.599,2117,44.834]],["name/43-7",[]],["text/43-7",[]],["component/43-7",[]],["title/43-8",[18,13.517,560,26.307,703,20.06,1033,25.815,2117,33.501]],["name/43-8",[]],["text/43-8",[]],["component/43-8",[]],["title/43-9",[18,18.089,523,26.599,2117,44.834]],["name/43-9",[]],["text/43-9",[]],["component/43-9",[]],["title/43-10",[399,16.147,505,36.098,631,25.214,1033,25.815]],["name/43-10",[]],["text/43-10",[]],["component/43-10",[]],["title/43",[203,22.963,541,20.156,2117,38.347,2120,45.037]],["name/43",[2120,1.332,2136,1.564]],["text/43",[3,1.868,11,0.419,12,0.838,18,3.563,22,0.913,24,0.93,25,2.641,28,1.051,30,0.798,36,1.068,48,1.55,50,1.055,52,0.693,68,1.558,73,3.214,80,1.492,95,2.597,107,1.155,109,0.782,122,1.087,133,0.733,164,2.038,171,2.24,178,1.186,203,5.477,207,0.971,208,0.893,217,1.811,218,0.911,225,0.927,234,1.068,257,1.068,292,1.862,303,1.091,307,1.168,334,2.377,335,0.95,340,2.522,379,2.514,399,1.348,401,2.226,409,2.713,421,4.273,432,0.938,435,0.944,441,1.329,462,0.984,469,1.401,471,1.616,500,1.363,505,3.568,518,0.812,522,1.207,523,3.062,525,1.517,535,2.038,541,0.834,545,1.561,548,1.039,549,1.005,560,3.553,582,1.253,584,5.61,590,2.617,600,1.318,631,2.105,632,1.642,636,1.613,637,1.803,646,1.862,666,3.019,703,4.124,727,1.803,762,1.803,763,1.215,792,1.642,794,3.963,942,5.335,960,2.129,961,1.539,993,1.047,1033,3.486,1035,1.318,1176,1.997,1179,7.314,1238,1.174,1378,1.43,1379,1.43,1380,1.279,1383,1.712,1385,2.896,1399,5.194,1409,1.517,1488,1.642,1501,1.498,1571,1.803,1593,3.285,1620,1.803,1621,1.803,1626,1.517,1642,2.036,1665,2.036,1666,1.245,1712,1.498,1729,1.642,1730,1.642,1731,1.675,1769,3.285,1883,1.675,1884,1.675,1925,1.862,1926,1.862,1967,1.675,1999,2.036,2115,3.093,2116,1.862,2117,9.402,2119,2.036,2137,2.186]],["component/43",[190,1.552]],["title/44-1",[484,35.206,949,32.019,1359,36.174]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[474,36.818,1360,37.641]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44-3",[441,25.639,608,44.175]],["name/44-3",[]],["text/44-3",[]],["component/44-3",[]],["title/44-4",[474,36.818,1361,48.161]],["name/44-4",[]],["text/44-4",[]],["component/44-4",[]],["title/44-5",[181,19.791,441,15.918,976,31.641,1362,27.848]],["name/44-5",[]],["text/44-5",[]],["component/44-5",[]],["title/44-6",[181,19.791,441,15.918,1362,27.848,1363,32.057]],["name/44-6",[]],["text/44-6",[]],["component/44-6",[]],["title/44-7",[181,18.017,441,22.586,1364,27.113,1365,27.113]],["name/44-7",[]],["text/44-7",[]],["component/44-7",[]],["title/44-8",[1141,64.834]],["name/44-8",[]],["text/44-8",[]],["component/44-8",[]],["title/44-9",[262,31.393,334,24.298,535,27.941,1232,39.709]],["name/44-9",[]],["text/44-9",[]],["component/44-9",[]],["title/44-10",[5,11.885,132,23.829,260,29.281,262,24.348,462,18.457,2138,41.005]],["name/44-10",[]],["text/44-10",[]],["component/44-10",[]],["title/44",[9,9.349,226,12.861,262,24.348,893,28.46,1396,23.667,2139,36.32]],["name/44",[2139,1.385,2140,1.564]],["text/44",[2,1.652,5,1.845,10,4.252,12,0.602,22,0.657,24,1.681,28,1.379,33,0.831,36,0.768,44,1.159,46,2.384,48,0.632,50,1.384,52,0.498,59,1.008,60,0.868,87,2.018,89,1.749,91,1.966,92,1.787,93,1.581,95,2.323,98,0.768,100,1.678,107,1.515,109,0.562,112,0.625,114,0.756,120,1.339,126,0.429,132,0.914,133,0.527,137,0.48,147,0.712,155,0.744,171,1.242,177,0.839,178,1.746,181,0.788,202,2.146,203,2.119,204,0.75,207,1.274,208,1.615,209,3.381,211,1.077,217,0.738,218,2.363,223,0.795,225,0.666,235,0.635,237,0.799,244,1.964,246,0.814,257,1.401,259,2.717,260,2.048,262,5.627,271,1.231,272,0.81,310,0.963,313,1.028,319,1.99,320,1.08,321,0.475,329,3.502,334,1.817,344,1.557,350,1.018,351,0.94,363,3.779,368,1.339,382,0.666,399,0.55,405,1.282,409,2.018,428,1.064,433,0.971,441,0.542,447,0.849,461,1.231,462,3.38,463,0.998,467,1.091,471,0.659,474,0.778,478,0.971,493,2.08,500,2.465,501,0.775,502,0.92,505,0.788,510,1.178,518,1.469,522,0.868,535,4.654,551,0.895,560,1.633,577,1.051,618,1.339,625,1.14,627,1.464,637,2.365,640,0.768,641,0.901,705,1.392,718,0.989,722,0.765,723,0.884,726,1.464,731,1.339,740,1.159,763,2.197,785,0.795,805,1.181,888,1.028,893,1.99,903,1.159,921,1.181,922,1.548,924,0.835,927,0.765,942,3.068,949,0.814,957,1.655,960,0.868,968,2.759,972,1.091,993,0.753,1032,1.171,1035,1.729,1040,1.964,1044,1.122,1113,1.181,1124,0.914,1136,2.423,1141,1.99,1176,0.814,1177,1.159,1190,1.204,1205,0.89,1215,0.61,1220,1.261,1232,2.154,1253,1.091,1347,1.392,1358,1.392,1378,1.028,1379,1.028,1380,0.92,1388,1.091,1393,1.122,1396,2.282,1399,2.614,1409,1.99,1411,1.181,1415,2.018,1419,1.339,1435,1.392,1476,1.339,1488,4.261,1497,1.464,1503,2.154,1529,1.339,1532,1.392,1550,2.197,1551,1.464,1570,1.464,1572,4.155,1591,3.538,1606,1.392,1607,1.231,1644,1.028,1702,1.464,1729,1.181,1730,1.181,1731,1.204,1800,1.261,1814,1.051,1858,1.464,1883,1.204,1884,1.204,1920,2.018,1979,2.54,2000,1.297,2016,1.392,2022,1.008,2069,1.261,2088,0.895,2106,1.231,2123,2.298,2141,1.572,2142,1.572,2143,1.392,2144,2.868,2145,0.989,2146,1.572,2147,1.091,2148,1.572,2149,4.878,2150,6.973,2151,1.572,2152,1.392,2153,2.868,2154,1.572,2155,1.572,2156,1.297,2157,1.572,2158,1.572,2159,1.572,2160,1.572,2161,1.392,2162,1.572,2163,1.572,2164,1.392,2165,1.896,2166,1.572,2167,1.572,2168,1.572,2169,1.572,2170,1.572,2171,1.339,2172,1.339,2173,1.339,2174,1.572,2175,1.572,2176,1.572,2177,1.572,2178,1.572,2179,1.572,2180,1.297]],["component/44",[190,1.552]],["title/45-1",[484,35.206,949,32.019,1359,36.174]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[474,36.818,1360,37.641]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45-3",[334,28.408,655,29.148,1424,47.353]],["name/45-3",[]],["text/45-3",[]],["component/45-3",[]],["title/45-4",[541,23.565,655,29.148,1424,47.353]],["name/45-4",[]],["text/45-4",[]],["component/45-4",[]],["title/45-5",[106,57.238]],["name/45-5",[]],["text/45-5",[]],["component/45-5",[]],["title/45",[201,21.029,655,24.931,1424,40.502,2181,46.829]],["name/45",[201,0.332,655,0.393,1424,0.639,2181,0.739]],["text/45",[2,0.385,3,0.732,5,2.43,6,0.898,9,0.778,11,1.383,14,0.423,24,0.562,26,1.119,30,1.244,33,1.291,52,0.775,64,0.656,68,2.28,70,1.012,74,0.748,80,0.511,89,1.223,93,1.364,97,0.992,98,2.077,112,0.525,114,2.712,116,1.342,117,0.838,122,0.656,126,0.93,127,0.823,136,1.31,137,0.745,150,1.562,154,0.688,166,0.574,172,3.192,175,0.681,178,1.049,181,2.624,187,1.831,194,0.681,199,1.024,201,3.796,204,1.627,207,0.587,211,0.905,215,0.717,218,0.55,220,0.779,221,0.395,222,0.46,223,1.725,226,0.766,236,1.523,237,1.242,242,0.633,243,1.012,254,1.23,260,0.943,275,4.63,279,0.546,286,1.584,289,4.653,294,0.873,321,0.399,333,1.1,334,2.86,335,0.574,340,1.598,350,0.855,360,0.784,379,0.467,382,1.446,389,1.51,401,0.568,409,0.929,411,0.855,416,4.111,418,0.883,419,1.562,420,3.397,428,0.894,441,1.175,448,0.674,455,2.309,462,0.595,471,1.024,472,0.929,487,1.089,507,0.967,509,0.938,512,0.883,518,2.506,519,0.974,520,0.659,523,0.568,526,1.225,532,0.969,542,0.565,546,1.03,548,1.161,549,0.607,551,0.752,560,0.752,571,2.282,584,1.334,604,0.917,610,1.034,612,1.089,621,0.883,625,0.958,628,0.674,632,0.992,640,1.194,647,2.208,655,4.5,665,2.082,677,0.599,701,2.698,704,2.984,713,2.367,722,0.643,723,0.743,738,0.958,741,1.918,742,2.165,746,1.831,749,0.883,751,0.883,756,0.929,805,0.992,902,0.992,958,0.674,960,0.729,983,1.725,993,0.633,1030,1.012,1032,2.038,1035,0.796,1041,1.17,1044,0.943,1045,0.976,1156,0.992,1158,0.747,1176,0.684,1177,1.802,1232,0.992,1238,0.709,1242,1.392,1243,1.305,1250,0.816,1283,1.012,1298,2.336,1300,2.543,1302,0.743,1324,1.42,1361,0.855,1380,0.773,1397,1.125,1406,1.06,1415,0.929,1424,7.311,1488,0.992,1554,1.23,1568,0.974,1572,1.125,1591,0.958,1602,2.275,1644,0.864,1689,1.17,1709,1.089,1734,1.23,1740,0.974,1795,1.23,1863,2.275,1883,1.012,1884,1.012,1888,0.974,1909,1.089,1927,1.17,1928,1.17,1981,1.012,1994,1.17,2022,1.566,2074,1.166,2182,1.321,2183,1.321,2184,1.125,2185,1.321,2186,1.321,2187,1.321,2188,1.321,2189,2.082,2190,1.321,2191,1.321,2192,2.736,2193,1.321,2194,6.223,2195,3.621,2196,8.383,2197,4.251,2198,1.125,2199,1.321,2200,1.089,2201,1.674,2202,1.321,2203,0.958,2204,1.321,2205,1.321,2206,1.321,2207,1.17,2208,1.321,2209,1.321,2210,0.894,2211,0.905,2212,0.809,2213,0.929,2214,1.321,2215,1.321,2216,1.321,2217,1.321,2218,1.321,2219,2.444,2220,1.321,2221,1.321,2222,1.321]],["component/45",[190,1.552]],["title/46",[49,47.353,474,30.59,1319,47.353]],["name/46",[205,1.287]],["text/46",[3,2.758,5,3.123,9,1.834,11,1.23,13,1.593,22,2.681,24,1.698,49,4.916,52,2.034,65,3.633,80,2.482,93,1.597,109,1.429,121,2.232,135,1.735,136,1.534,149,1.374,171,1.729,176,1.553,181,1.098,187,2.144,194,3.308,201,1.589,203,2.787,204,1.905,218,1.664,222,1.39,223,2.021,225,1.693,226,2.523,235,2.593,237,2.03,256,2.371,262,2.371,283,2.427,299,4.454,334,1.836,379,1.411,416,1.768,420,2.18,421,4.396,432,1.713,433,2.468,438,1.713,448,2.039,455,1.849,469,2.56,474,3.981,541,1.523,599,2.29,621,2.671,655,1.883,677,1.81,698,1.374,763,2.219,891,2.427,893,2.772,909,1.467,922,2.156,932,2.56,1035,3.869,1129,3.127,1130,2.427,1185,3.06,1319,3.06,1367,3.402,1368,3.537,1396,2.305,1401,3.537,1409,2.772,1424,3.06,1432,3.537,1433,3.719,1454,3.537,1455,3.402,1462,3.294,1485,3.537,1519,3.537,1595,3.537,1618,3.537,1625,3.537,1649,3.537,1650,2.736,1651,2.772,1680,3.537,1726,3.537,1727,3.537,1786,3.537,1879,3.402,1923,3.537,1956,3.537,1957,3.719,2018,3.537,2051,3.537,2116,3.402,2117,4.654,2120,3.402,2139,3.537,2181,3.537]],["component/46",[190,1.552]],["title/47-1",[484,35.206,949,32.019,1359,36.174]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47-2",[474,36.818,1360,37.641]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["title/47-3",[441,25.639,608,44.175]],["name/47-3",[]],["text/47-3",[]],["component/47-3",[]],["title/47-4",[474,36.818,1361,48.161]],["name/47-4",[]],["text/47-4",[]],["component/47-4",[]],["title/47-5",[976,50.966,1362,44.856]],["name/47-5",[]],["text/47-5",[]],["component/47-5",[]],["title/47-6",[1362,44.856,1363,51.635]],["name/47-6",[]],["text/47-6",[]],["component/47-6",[]],["title/47-7",[1585,82.74]],["name/47-7",[]],["text/47-7",[]],["component/47-7",[]],["title/47-8",[15,33.567]],["name/47-8",[]],["text/47-8",[]],["component/47-8",[]],["title/47-9",[272,38.351,287,41.581]],["name/47-9",[]],["text/47-9",[]],["component/47-9",[]],["title/47-10",[342,57.723]],["name/47-10",[]],["text/47-10",[]],["component/47-10",[]],["title/47",[5,13.387,286,21.458,447,24.934,1408,39.345,2223,43.006]],["name/47",[2224,1.564,2225,1.564]],["text/47",[3,1.586,5,2.318,12,2.619,15,1.136,36,2.589,81,1.329,95,2.494,99,6.101,102,2.225,116,1.736,118,1.789,170,1.778,178,0.973,181,2.448,204,1.508,207,2.353,220,1.008,222,1.844,242,1.514,244,2.166,246,1.638,249,2.694,261,1.229,271,2.476,272,4.123,277,1.971,283,1.922,286,3.176,287,3.821,294,2.091,299,2.195,333,1.423,379,1.117,405,1.414,421,2.166,435,1.365,441,1.09,447,3.69,469,3.395,474,2.622,500,3.302,541,1.205,546,1.333,556,1.989,563,1.539,582,1.813,590,1.6,595,2.537,598,1.813,608,1.878,636,2.332,641,1.813,648,1.971,680,1.778,698,1.088,733,3.629,744,1.736,763,1.757,866,2.944,892,2.195,893,3.677,902,2.375,922,1.707,932,3.395,942,6.751,953,2.537,966,2.384,1035,3.194,1143,2.225,1176,1.638,1231,4.369,1300,1.892,1364,2.091,1365,2.091,1380,1.85,1382,1.938,1399,5.888,1408,5.823,1409,3.677,1455,2.694,1475,2.801,1516,4.513,1542,2.422,1563,2.537,1568,2.332,1572,2.694,1585,7.888,1666,1.71,1677,2.608,1714,2.801,1735,2.258,1736,2.537,1778,2.801,1800,2.537,1855,2.944,1864,2.422,1945,4.058,1946,2.944,1994,2.801,2102,2.944,2147,2.195,2226,5.297,2227,6.836,2228,3.162,2229,3.162,2230,5.297,2231,5.297,2232,3.162,2233,3.162,2234,2.944,2235,3.162,2236,2.694,2237,3.162]],["component/47",[190,1.552]],["title/48-1",[484,35.206,949,32.019,1359,36.174]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["title/48-2",[181,19.791,441,15.918,474,22.858,1360,23.369]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["title/48-3",[441,25.639,608,44.175]],["name/48-3",[]],["text/48-3",[]],["component/48-3",[]],["title/48-4",[474,36.818,1361,48.161]],["name/48-4",[]],["text/48-4",[]],["component/48-4",[]],["title/48-5",[976,50.966,1362,44.856]],["name/48-5",[]],["text/48-5",[]],["component/48-5",[]],["title/48-6",[1362,44.856,1363,51.635]],["name/48-6",[]],["text/48-6",[]],["component/48-6",[]],["title/48-7",[441,21.302,1364,40.871,1365,40.871]],["name/48-7",[]],["text/48-7",[]],["component/48-7",[]],["title/48-8",[2238,86.978]],["name/48-8",[]],["text/48-8",[]],["component/48-8",[]],["title/48-9",[229,33.554,255,32.667,256,36.703]],["name/48-9",[]],["text/48-9",[]],["component/48-9",[]],["title/48-10",[2239,86.978]],["name/48-10",[]],["text/48-10",[]],["component/48-10",[]],["title/48-11",[342,57.723]],["name/48-11",[]],["text/48-11",[]],["component/48-11",[]],["title/48",[268,49.589,442,33.188,1611,44.834]],["name/48",[2240,1.564,2241,1.564]],["text/48",[3,0.534,5,0.932,9,0.407,12,0.683,16,1.367,18,0.522,22,1.834,23,1.143,25,1.641,28,1.546,29,1.471,30,0.651,33,1.699,43,2.414,46,2.625,48,0.717,52,1.019,61,1.059,63,1.036,74,0.546,77,0.957,78,1.059,80,1.243,87,2.262,89,0.639,91,0.719,95,2.75,96,1.005,99,4.249,100,1.043,112,1.279,114,0.857,118,1.819,128,1.051,130,1.831,154,0.928,164,2.32,166,1.906,171,1.392,178,1.652,181,2.835,194,1.657,195,0.782,198,1.154,207,1.428,218,1.339,220,0.568,223,0.902,229,3.755,234,0.871,237,2.73,244,2.202,245,1.66,246,0.924,252,3.166,255,3.656,256,4.107,257,0.871,260,1.273,262,1.059,268,4.976,271,1.396,275,1.775,277,2.004,279,1.328,294,2.902,299,1.237,304,2.847,305,1.396,308,1.396,320,0.672,321,1.325,331,1.237,334,0.819,342,2.712,399,0.623,409,3.779,425,1.206,431,1.009,441,1.851,442,4.826,443,0.717,462,2.418,464,1.255,469,1.143,470,0.919,472,1.255,474,3.07,476,1.084,478,1.102,500,2.736,510,0.732,522,0.985,525,3.046,535,2.32,537,1.067,546,1.355,584,0.973,587,1.315,591,1.396,595,1.43,618,1.519,641,1.022,646,1.519,655,0.841,678,1.015,680,1.003,682,1.43,700,1.366,703,1.396,723,1.003,745,2.262,763,0.99,764,1.154,767,1.66,772,0.973,885,1.237,893,1.237,903,1.315,905,1.66,921,1.339,923,1.132,932,1.143,934,1.519,942,4.741,960,1.775,962,2.738,966,0.803,991,0.973,1000,2.738,1035,1.938,1116,2.004,1143,1.255,1176,0.924,1213,1.339,1238,0.957,1304,1.132,1318,1.293,1319,1.366,1360,0.902,1370,1.396,1371,1.396,1372,1.237,1373,1.237,1374,1.43,1375,1.43,1376,1.366,1377,1.366,1378,1.166,1379,1.166,1380,1.043,1396,1.029,1399,5.343,1409,3.728,1411,1.339,1415,2.262,1416,1.315,1439,1.66,1457,1.66,1458,1.66,1488,1.339,1515,1.179,1521,1.579,1530,1.166,1553,2.738,1557,1.43,1563,1.43,1568,1.315,1650,1.221,1670,1.111,1716,2.738,1771,1.579,1864,1.366,1932,2.847,1945,1.366,2022,2.06,2087,1.66,2156,2.651,2198,1.519,2223,1.66,2234,1.66,2238,4.087,2239,4.087,2242,1.783,2243,1.783,2244,1.783,2245,1.783,2246,1.783,2247,1.783,2248,1.783,2249,1.783,2250,1.783,2251,1.783,2252,1.783,2253,1.783,2254,3.215,2255,1.783,2256,1.783,2257,4.389,2258,1.783,2259,1.783,2260,1.783,2261,1.783,2262,1.783,2263,1.783]],["component/48",[190,1.552]],["title/49-1",[25,31.564,401,26.599,2145,38.876]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["title/49-2",[1542,71.562]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["title/49-3",[25,31.564,960,34.136,2145,38.876]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["title/49-4",[25,31.564,262,36.703,401,26.599]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["title/49-5",[1542,71.562]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["title/49-6",[25,31.564,262,36.703,960,34.136]],["name/49-6",[]],["text/49-6",[]],["component/49-6",[]],["title/49-7",[25,31.564,209,32.837,401,26.599]],["name/49-7",[]],["text/49-7",[]],["component/49-7",[]],["title/49-8",[1542,71.562]],["name/49-8",[]],["text/49-8",[]],["component/49-8",[]],["title/49-9",[25,31.564,209,32.837,960,34.136]],["name/49-9",[]],["text/49-9",[]],["component/49-9",[]],["title/49",[966,42.048]],["name/49",[966,1.252]],["text/49",[2,0.646,5,1.827,9,1.95,10,3.223,11,1.377,22,0.927,24,1.661,25,3.669,26,2.887,30,2.622,37,1.637,42,1.737,48,0.892,49,2.993,50,1.886,51,1.849,52,1.659,71,2.881,87,1.561,93,3.989,95,1.425,96,1.221,109,2.255,112,0.883,113,4.862,114,2.516,116,2.145,118,2.211,122,1.103,127,1.383,132,1.29,133,2.409,151,1.039,171,0.961,178,1.939,207,0.986,208,0.906,209,5.081,220,0.707,226,1.641,233,1.815,235,0.897,237,1.986,257,1.084,261,0.863,262,5.679,283,1.349,292,6.121,293,1.584,305,1.737,310,2.394,335,1.697,352,1.637,379,2.538,386,1.409,399,0.776,401,3.41,411,1.436,418,1.484,462,3.85,471,1.637,485,1.54,492,1.155,523,0.955,546,2.656,571,1.191,582,1.272,652,1.637,654,3.043,664,1.584,682,1.78,709,1.185,722,1.901,727,5.199,733,2.676,765,1.83,766,1.965,785,1.123,907,2.711,960,3.968,961,1.561,963,1.78,966,3.234,986,1.584,991,1.211,998,2.583,1040,1.52,1118,3.499,1178,1.83,1238,4.592,1324,1.29,1385,1.667,1542,1.7,1678,2.066,1689,1.965,1742,1.609,1979,4.635,2065,2.583,2145,7.208,2264,2.219,2265,2.219,2266,3.907,2267,1.78,2268,7.185,2269,5.233,2270,3.354,2271,2.219,2272,2.219,2273,3.907,2274,2.219,2275,1.609,2276,2.219,2277,2.219]],["component/49",[10,1.318]],["title/50-1",[11,17.906]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["title/50-2",[262,55.467]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["title/50-3",[2145,58.751]],["name/50-3",[]],["text/50-3",[]],["component/50-3",[]],["title/50",[10,41.906]],["name/50",[205,1.287]],["text/50",[2,3.506,3,2.178,5,2.765,6,1.004,8,2.07,9,2.396,10,4.28,11,1.829,12,1.047,13,1.867,18,1.797,19,2.401,22,1.955,24,1.162,26,3.747,28,2.25,30,3.835,37,4.529,46,2.287,48,1.098,52,2.306,80,1.057,84,1.849,95,2.654,96,0.854,109,0.978,112,1.862,117,1.735,121,1.527,124,1.688,138,2.702,147,1.238,149,3.069,154,1.422,164,2.474,169,2.25,177,1.459,207,2.727,209,5.789,214,1.376,221,1.836,223,1.382,225,1.158,242,1.309,243,2.093,251,1.467,259,1.309,261,1.062,262,6.471,264,2.544,293,1.951,315,1.459,320,1.763,321,0.825,378,1.674,382,1.158,386,2.971,387,1.284,434,2.666,441,1.613,475,1.577,518,1.015,521,1.896,524,2.052,541,1.042,557,1.807,561,2.093,584,2.555,612,2.254,652,3.452,722,1.33,723,1.537,741,1.537,763,1.518,775,1.483,982,1.951,983,1.382,1113,2.052,1158,1.546,1215,1.06,1304,4.618,1308,1.896,1309,1.849,1313,1.896,1541,1.577,1580,2.139,2106,3.665,2123,1.588,2145,6.328,2278,2.254,2279,1.735,2280,2.732,2281,2.732,2282,2.42]],["component/50",[10,1.318]],["title/51-1",[1123,47.353,1460,49.589,2279,39.239]],["name/51-1",[]],["text/51-1",[]],["component/51-1",[]],["title/51-2",[693,52.864]],["name/51-2",[]],["text/51-2",[]],["component/51-2",[]],["title/51-3",[1820,79.574]],["name/51-3",[]],["text/51-3",[]],["component/51-3",[]],["title/51-4",[2283,86.978]],["name/51-4",[]],["text/51-4",[]],["component/51-4",[]],["title/51-5",[10,27.73,51,29.259,234,30.206]],["name/51-5",[]],["text/51-5",[]],["component/51-5",[]],["title/51-6",[126,16.865,1300,36.981,1643,49.589]],["name/51-6",[]],["text/51-6",[]],["component/51-6",[]],["title/51-7",[2284,74.941]],["name/51-7",[]],["text/51-7",[]],["component/51-7",[]],["title/51-8",[2285,86.978]],["name/51-8",[]],["text/51-8",[]],["component/51-8",[]],["title/51-9",[2286,86.978]],["name/51-9",[]],["text/51-9",[]],["component/51-9",[]],["title/51-10",[2287,86.978]],["name/51-10",[]],["text/51-10",[]],["component/51-10",[]],["title/51",[2,27.205]],["name/51",[2,0.81]],["text/51",[2,1.647,4,1.17,5,1.639,9,0.357,10,5.8,20,1.204,25,0.799,28,1.894,36,0.765,37,1.155,46,1.396,50,1.902,51,2.677,60,2.176,62,0.875,63,2.29,64,0.778,77,1.534,85,1.199,93,2.538,95,2.734,96,2.173,97,1.176,98,0.765,107,0.827,112,1.136,114,1.373,123,2.799,128,2.866,132,2.825,143,1.256,147,2.563,149,2.576,164,0.827,166,0.68,178,0.482,181,3.257,182,1.024,186,1.135,204,0.747,209,2.583,218,1.19,220,0.499,221,0.468,222,0.995,223,0.792,231,1.333,233,0.727,234,4.896,252,0.923,257,0.765,261,1.111,279,1.627,318,2.866,319,5.83,321,0.473,325,0.976,326,1.118,330,2.188,331,1.983,335,0.68,348,1.333,354,2.107,358,0.855,362,1.291,399,0.547,401,1.695,405,1.277,429,1.458,466,0.855,469,1.003,470,0.807,491,1.059,496,0.897,518,0.582,546,0.66,571,1.534,604,1.086,630,0.668,654,0.756,693,2.751,780,0.727,891,0.951,927,0.762,949,0.811,968,0.575,1043,6.381,1119,1.291,1120,1.984,1123,6.435,1130,0.951,1215,0.607,1300,6.525,1430,2.356,1460,5.092,1501,1.072,1643,1.256,1650,1.072,1704,1.458,1714,3.49,1718,2.292,1806,2.237,1807,1.458,1820,3.356,2278,1.291,2279,0.994,2283,3.669,2284,5.092,2285,5.266,2286,5.266,2287,3.669,2288,1.565,2289,1.565,2290,5.656,2291,2.857,2292,1.565,2293,1.565,2294,3.526,2295,2.356,2296,3.94,2297,2.857,2298,1.565,2299,1.565,2300,2.433,2301,4.862,2302,4.862,2303,1.565,2304,2.857,2305,2.857,2306,1.565,2307,1.386,2308,1.565,2309,1.565,2310,1.386,2311,6.347,2312,3.94,2313,2.857,2314,1.565,2315,2.857,2316,1.256,2317,1.565,2318,1.565,2319,1.565,2320,3.94,2321,1.565,2322,1.333,2323,1.565,2324,1.565,2325,1.199,2326,1.102,2327,1.565]],["component/51",[10,1.318]],["title/52-1",[192,77.046]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["title/52-2",[2,21.667,10,33.375]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["title/52-3",[162,46.426,546,26.048,2145,38.876]],["name/52-3",[]],["text/52-3",[]],["component/52-3",[]],["title/52-4",[2,21.667,2145,46.791]],["name/52-4",[]],["text/52-4",[]],["component/52-4",[]],["title/52-5",[3,15.832,5,15.324,18,15.472,237,26.872]],["name/52-5",[]],["text/52-5",[]],["component/52-5",[]],["title/52-6",[5,15.324,6,19.422,18,15.472,492,27.521]],["name/52-6",[]],["text/52-6",[]],["component/52-6",[]],["title/52-7",[2145,46.791,2328,65.895]],["name/52-7",[]],["text/52-7",[]],["component/52-7",[]],["title/52",[138,53.915]],["name/52",[138,1.605]],["text/52",[0,1.074,2,3.801,3,1.649,4,1.197,5,1.437,6,1.821,8,0.373,9,1.369,10,2.896,11,2.098,13,1.467,15,0.745,16,1.85,17,0.959,18,1.889,20,0.466,24,0.47,25,0.565,26,2.271,30,3.726,36,0.541,50,0.534,52,0.927,69,0.831,78,0.657,79,0.888,91,0.446,95,0.404,96,1.36,107,0.585,112,0.824,114,0.997,117,0.703,118,0.626,126,0.566,128,0.652,133,1.459,135,1.27,137,0.338,138,0.639,149,1.705,164,0.585,169,0.532,176,0.806,178,0.34,181,3.702,194,1.896,195,0.909,196,1.722,197,0.997,199,0.868,200,0.949,201,0.824,202,3.345,203,4.361,204,0.989,209,1.101,214,1.044,215,0.601,221,1.1,223,0.56,225,2.545,226,3.432,241,0.652,242,0.53,251,0.594,261,0.43,262,3.269,265,0.913,269,0.768,279,0.457,282,1.125,290,0.913,320,0.417,335,0.481,355,3.591,376,1.71,386,0.703,387,1.373,388,0.879,395,0.866,399,0.387,405,0.495,416,2.858,417,0.643,420,0.604,436,3.798,443,0.833,444,2.218,446,2.432,449,1.588,452,1.663,454,1.623,463,0.703,484,1.181,490,0.427,500,0.69,518,0.77,524,0.831,528,0.594,538,0.866,541,0.422,542,0.887,546,2.089,548,0.985,549,0.509,557,0.732,632,0.831,643,0.709,645,0.573,654,0.534,678,1.181,722,0.539,740,0.816,763,0.615,803,1.292,888,0.724,909,0.407,916,0.848,960,0.611,987,0.803,1031,1.03,1113,0.831,1180,0.703,1183,0.803,1300,0.662,1304,1.316,1538,0.98,1550,0.848,1790,0.913,1820,0.943,1920,0.779,2145,6.621,2328,0.98,2329,1.107,2330,1.03,2331,5.85,2332,0.98,2333,0.848,2334,1.663,2335,2.073,2336,1.107,2337,6.825,2338,0.913,2339,0.913,2340,0.866,2341,0.768,2342,1.03,2343,1.03,2344,1.03,2345,1.03]],["component/52",[10,1.318]],["title/53-1",[68,30.063,69,55.878]],["name/53-1",[]],["text/53-1",[]],["component/53-1",[]],["title/53-2",[363,36.703,968,22.707,2114,52.655]],["name/53-2",[]],["text/53-2",[]],["component/53-2",[]],["title/53-3",[93,24.715,2114,52.655,2346,61.812]],["name/53-3",[]],["text/53-3",[]],["component/53-3",[]],["title/53-4",[229,20.013,1310,21.576,2307,32.656,2347,34.328,2348,36.868,2349,34.328,2350,25.589]],["name/53-4",[]],["text/53-4",[]],["component/53-4",[]],["title/53",[2351,86.978]],["name/53",[2351,2.59]],["text/53",[5,1.164,8,1.354,9,2.107,10,4.538,11,1.939,13,1.601,68,1.623,69,3.016,93,4.537,94,2.192,95,2.352,96,2.014,116,2.205,164,3.406,166,1.744,178,2.484,180,5.922,181,1.772,209,5.374,218,1.673,225,5.159,226,2.898,229,2.18,257,1.962,262,4.793,398,3.739,399,1.404,435,3.988,471,2.7,491,2.717,492,2.09,546,1.692,652,2.962,764,2.599,927,1.954,968,1.475,998,6.109,1238,4.961,1310,4.724,1311,4.908,1719,3.739,2065,2.655,2114,7.87,2145,5.077,2307,3.557,2347,3.739,2349,3.739,2350,2.787,2352,4.015,2353,6.444,2354,4.015,2355,4.015,2356,4.015,2357,4.015,2358,6.444,2359,4.015,2360,6.444,2361,4.015,2362,4.015,2363,4.015]],["component/53",[10,1.318]],["title/54-1",[162,46.426,546,26.048,2145,38.876]],["name/54-1",[]],["text/54-1",[]],["component/54-1",[]],["title/54-2",[2,21.667,2145,46.791]],["name/54-2",[]],["text/54-2",[]],["component/54-2",[]],["title/54-3",[3,15.832,5,15.324,18,15.472,237,26.872]],["name/54-3",[]],["text/54-3",[]],["component/54-3",[]],["title/54-4",[5,15.324,6,19.422,18,15.472,492,27.521]],["name/54-4",[]],["text/54-4",[]],["component/54-4",[]],["title/54-5",[12,23.679,13,24.65,225,26.202]],["name/54-5",[]],["text/54-5",[]],["component/54-5",[]],["title/54-6",[262,44.175,2364,55.878]],["name/54-6",[]],["text/54-6",[]],["component/54-6",[]],["title/54",[2145,58.751]],["name/54",[2145,1.749]],["text/54",[2,3.69,3,1.399,4,1.117,5,0.998,6,1.717,8,0.345,9,1.297,10,2.75,11,2.039,13,2.268,15,0.692,16,1.739,17,0.891,18,1.794,20,0.431,25,0.983,26,2.14,30,3.668,36,0.5,50,0.494,52,1.296,74,1.252,77,0.549,78,0.607,79,0.821,96,1.076,112,0.407,114,0.926,117,0.649,126,0.525,133,1.566,135,1.184,137,0.312,149,1.406,155,0.484,170,1.937,171,0.834,174,1.104,176,0.748,178,0.315,181,3.667,194,1.775,195,0.844,196,1.618,197,0.926,199,0.807,200,1.873,201,0.766,202,3.92,203,4.561,204,0.488,209,1.023,217,0.481,218,0.426,221,0.815,222,0.356,225,2.411,226,3.376,241,0.603,242,0.49,251,1.034,262,3.641,265,0.844,279,0.423,282,0.555,290,0.844,303,0.511,307,0.546,321,0.309,355,3.403,376,1.588,382,0.434,386,0.649,387,0.904,388,0.816,395,0.801,405,0.457,416,3.216,417,1.119,420,1.051,435,0.442,436,3.58,443,1.384,444,2.076,446,2.277,449,1.475,452,1.545,454,1.507,484,1.097,490,0.395,505,0.965,518,0.38,524,0.768,528,1.034,538,0.801,541,0.39,542,0.823,546,0.811,548,0.915,557,0.676,632,0.768,643,0.656,645,0.53,654,0.494,660,1.553,678,1.097,740,0.755,741,1.534,803,1.7,888,1.259,909,0.376,916,0.784,987,0.742,1045,0.551,1113,0.768,1158,1.09,1170,0.627,1180,0.649,1182,0.73,1183,0.742,1242,0.583,1243,1.028,1300,0.612,1304,1.222,1308,0.71,1309,0.692,1321,2.393,1413,0.768,1538,0.906,1550,0.784,1695,0.594,1790,1.588,1920,0.72,2145,6.219,2331,6.027,2332,1.705,2333,1.475,2334,1.545,2337,6.724,2338,0.844,2339,0.844,2340,0.801,2341,0.71,2342,0.952,2343,0.952,2344,0.952,2345,0.952,2364,0.768,2365,0.952,2366,1.023,2367,1.023,2368,0.801,2369,0.906,2370,0.906,2371,0.906,2372,0.906,2373,0.906,2374,0.906,2375,0.906,2376,0.906,2377,0.742,2378,0.906,2379,0.784]],["component/54",[10,1.318]],["title/55-1",[11,11.848,162,46.426,546,26.048]],["name/55-1",[]],["text/55-1",[]],["component/55-1",[]],["title/55-2",[2,21.667,11,14.261]],["name/55-2",[]],["text/55-2",[]],["component/55-2",[]],["title/55-3",[2,18.002,11,11.848,225,26.202]],["name/55-3",[]],["text/55-3",[]],["component/55-3",[]],["title/55-4",[11,14.261,2364,55.878]],["name/55-4",[]],["text/55-4",[]],["component/55-4",[]],["title/55",[11,17.906]],["name/55",[11,0.533]],["text/55",[2,3.348,3,1.578,4,1.287,5,1.141,6,1.935,8,0.755,9,1.735,10,2.845,11,2.432,12,1.203,14,0.385,15,0.432,16,0.511,17,0.556,18,2.114,20,1.324,24,0.511,26,2.904,28,0.578,30,2.483,33,0.635,45,0.823,48,0.483,50,1.9,52,0.709,71,0.886,74,0.962,78,0.713,79,0.964,80,0.866,84,1.514,95,0.438,96,1.45,102,0.845,112,0.478,114,1.076,117,1.421,118,0.68,126,0.611,133,0.75,135,1.364,149,2.739,151,0.562,166,0.522,176,2.809,181,3.412,195,3.492,196,0.475,197,0.578,199,0.503,200,0.55,201,0.89,202,0.528,203,0.522,207,0.994,209,1.669,211,2.152,217,0.564,218,0.5,221,0.939,225,1.668,226,3.255,233,0.558,251,0.645,257,0.587,259,0.575,261,0.467,266,0.527,279,0.496,282,0.652,315,0.642,333,0.541,345,1.846,351,1.339,355,3.489,360,0.713,372,0.676,374,0.539,382,1.967,386,0.763,388,3.063,395,0.941,401,0.517,405,0.537,418,0.803,434,1.275,436,7.519,443,0.483,444,4.802,446,6.863,449,0.92,452,1.795,454,5.959,471,0.503,484,1.275,518,0.831,538,0.941,542,0.514,546,0.506,549,0.552,640,0.587,643,0.77,645,0.622,654,0.58,678,1.789,763,0.667,764,0.778,909,0.441,958,0.613,963,0.964,977,1.064,983,1.132,991,0.656,1045,0.344,1047,1.119,1113,0.902,1120,1.127,1158,1.266,1168,4.625,1176,0.622,1182,0.858,1253,0.834,1310,2.303,1385,0.902,1670,0.749,1872,2.407,2015,1.023,2071,5.905,2143,2.782,2337,4.718,2338,0.991,2339,0.991,2364,4.381,2380,1.064,2381,2.238,2382,1.681,2383,1.201,2384,1.201,2385,1.201,2386,1.201,2387,1.201,2388,1.201,2389,1.201,2390,1.201,2391,1.201,2392,1.201,2393,1.201,2394,1.201,2395,1.201,2396,2.238,2397,1.201,2398,1.201,2399,1.201,2400,1.201,2401,1.201,2402,1.201,2403,1.201,2404,1.119,2405,1.201,2406,1.201,2407,1.201,2408,0.902,2409,1.201,2410,2.925,2411,2.676,2412,1.201,2413,1.201]],["component/55",[10,1.318]],["title/56-1",[162,46.426,209,32.837,546,26.048]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["title/56-2",[2,21.667,209,39.522]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["title/56-3",[209,39.522,2364,55.878]],["name/56-3",[]],["text/56-3",[]],["component/56-3",[]],["title/56",[209,49.624]],["name/56",[209,1.477]],["text/56",[2,3.41,3,1.201,4,1.093,5,0.545,6,1.685,8,0.337,9,1.165,10,2.293,11,2.425,12,2.982,15,1.441,16,1.705,17,1.856,18,1.765,20,0.421,26,2.1,30,1.674,34,1.552,50,0.908,52,0.846,74,2.383,78,0.593,79,0.801,96,0.834,109,0.357,112,0.397,114,0.905,117,0.634,122,0.496,126,0.513,133,0.631,135,1.159,149,1.758,166,0.434,176,1.559,181,3.688,195,1.758,196,1.587,197,1.928,199,1.68,200,1.836,201,1.595,202,1.764,203,1.742,208,0.769,209,4.904,211,5.705,217,0.469,221,1.009,225,1.131,226,3.493,233,0.464,251,0.536,257,0.919,259,0.478,261,0.388,265,0.823,279,0.412,282,0.542,303,0.498,307,0.533,355,4.982,360,0.593,376,4.975,382,0.798,386,0.634,388,1.7,395,0.782,405,0.446,434,0.569,436,5.485,443,1.612,444,3.371,446,3.697,449,2.585,452,2.707,454,2.641,484,1.072,518,0.371,538,0.782,542,1.715,546,0.793,643,0.64,645,0.517,654,0.482,678,1.072,775,0.542,888,1.231,909,0.367,1045,0.286,1113,0.75,1154,0.617,1158,1.065,1176,0.517,1253,1.306,1310,1.101,1347,1.666,1353,1.752,1380,1.101,1686,0.85,1872,5.963,2143,6.894,2180,0.823,2337,6.753,2338,0.823,2339,0.823,2340,0.782,2364,6.615,2408,0.75,2410,7.248,2411,6.631,2414,0.998,2415,0.998,2416,0.998,2417,0.998,2418,0.998,2419,0.998,2420,0.998,2421,0.998,2422,0.998,2423,0.998,2424,0.998,2425,0.998,2426,0.998,2427,0.998]],["component/56",[10,1.318]],["title/57-1",[13,24.65,221,18.479,225,26.202]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["title/57",[13,37.252]],["name/57",[13,1.109]],["text/57",[2,0.746,3,0.767,5,0.743,9,1.01,10,2.625,13,4.703,20,1.867,24,1.09,26,1.174,28,1.232,30,1.616,36,1.252,50,1.237,52,2.928,57,1.086,68,1.036,69,1.925,73,2.642,74,3.25,87,1.804,89,0.919,96,1.384,110,1.676,137,1.351,149,1.524,151,2.073,155,2.097,164,1.354,170,5.491,171,3.017,172,2.097,174,4.512,181,1.218,200,3.944,202,3.788,203,3.741,215,1.391,218,1.845,221,2.353,225,2.48,226,2.897,233,1.191,275,1.415,320,0.966,387,1.204,435,1.106,443,2.801,484,1.46,490,0.989,502,1.5,518,0.952,540,2.114,584,1.399,629,1.57,640,1.252,652,1.89,660,4.905,661,1.45,722,2.156,741,3.918,997,1.399,1045,2.252,1124,1.489,1125,1.963,1154,1.584,1170,2.714,1242,3.332,1243,3.721,1268,2.056,1279,1.89,1287,1.89,1293,1.83,1308,3.075,1309,2.997,1321,6.213,1324,1.489,1695,2.574,1920,1.804,2074,2.113,2081,2.183,2156,2.114,2337,2.432,2364,1.925,2369,2.27,2370,2.27,2371,2.27,2372,2.27,2373,2.27,2374,2.27,2375,2.27,2376,2.27,2377,3.213,2378,2.27,2379,1.963,2428,1.779,2429,1.659,2430,2.563,2431,4.43,2432,2.27,2433,2.386,2434,2.183,2435,2.386,2436,2.386,2437,2.386,2438,2.386,2439,2.386,2440,2.386,2441,2.386,2442,2.386]],["component/57",[10,1.318]],["title/58-1",[162,46.426,262,36.703,546,26.048]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["title/58-2",[2,21.667,262,44.175]],["name/58-2",[]],["text/58-2",[]],["component/58-2",[]],["title/58-3",[3,15.832,5,15.324,18,15.472,237,26.872]],["name/58-3",[]],["text/58-3",[]],["component/58-3",[]],["title/58-4",[5,15.324,6,19.422,18,15.472,492,27.521]],["name/58-4",[]],["text/58-4",[]],["component/58-4",[]],["title/58-5",[12,23.679,13,24.65,225,26.202]],["name/58-5",[]],["text/58-5",[]],["component/58-5",[]],["title/58-6",[262,44.175,2364,55.878]],["name/58-6",[]],["text/58-6",[]],["component/58-6",[]],["title/58",[262,55.467]],["name/58",[262,1.651]],["text/58",[2,3.698,3,1.416,4,1.315,5,0.93,6,1.97,9,1.469,10,2.661,11,2.198,13,1.886,15,0.823,16,0.973,17,1.06,18,2.022,20,0.519,26,2.456,30,2.352,50,0.594,52,0.726,74,1.447,77,0.661,78,0.731,79,0.988,96,1.255,109,1.148,112,0.49,114,1.101,117,0.782,126,0.625,133,0.767,135,1.394,137,0.376,149,1.626,155,0.583,170,2.258,171,0.991,174,1.313,176,0.89,178,0.379,181,3.735,194,1.18,195,1.761,196,3.656,197,1.101,199,0.959,200,2.165,201,0.911,202,4.363,203,2.054,207,0.547,209,2.512,217,0.578,218,0.513,221,0.959,222,0.429,225,1.702,226,3.597,243,1.754,251,0.661,262,6.222,265,1.015,279,0.509,282,0.668,303,0.615,307,0.658,321,0.691,355,3.856,376,3.9,382,0.522,386,0.782,387,0.578,388,0.971,395,0.964,405,0.55,416,3.574,435,0.531,436,4.109,443,1.614,444,2.421,446,2.655,449,1.754,452,1.837,454,1.793,484,1.304,505,1.148,518,0.457,538,0.964,542,0.979,546,0.965,600,0.742,612,1.015,643,0.789,645,0.638,654,0.594,660,1.828,678,1.304,741,3.016,888,1.498,909,0.452,1045,0.655,1113,0.925,1158,1.296,1170,0.754,1182,0.879,1242,0.701,1243,1.223,1308,1.589,1309,1.549,1321,2.767,1413,0.925,1695,0.715,1920,0.866,2123,0.715,2337,6.816,2338,1.015,2339,1.015,2340,0.964,2364,0.925,2365,1.146,2369,1.091,2370,1.091,2371,1.091,2372,1.091,2373,1.091,2374,1.091,2375,1.091,2376,1.091,2377,0.893,2378,1.091,2379,0.943]],["component/58",[10,1.318]],["title/59",[2145,58.751]],["name/59",[205,1.287]],["text/59",[0,6.323,2,2.84,5,2.827,9,2.224,96,3.048,138,5.629,149,3.354,178,3.001,214,4.912,223,4.934,233,4.531,415,4.806,455,4.514,2145,8.381]],["component/59",[10,1.318]],["title/60-1",[9,12.054,12,20.253,13,21.084,225,22.411]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["title/60-2",[16,26.28,30,22.555,2428,42.901]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["title/60-3",[196,36.964]],["name/60-3",[]],["text/60-3",[]],["component/60-3",[]],["title/60-4",[241,36.434,548,29.371,2429,40.015]],["name/60-4",[]],["text/60-4",[]],["component/60-4",[]],["title/60-5",[30,22.555,234,30.206,303,30.857]],["name/60-5",[]],["text/60-5",[]],["component/60-5",[]],["title/60-6",[202,41.089]],["name/60-6",[]],["text/60-6",[]],["component/60-6",[]],["title/60-7",[803,46.373,2429,48.161]],["name/60-7",[]],["text/60-7",[]],["component/60-7",[]],["title/60-8",[363,44.175,2429,48.161]],["name/60-8",[]],["text/60-8",[]],["component/60-8",[]],["title/60-9",[236,28.79,1033,25.815,1388,32.057,2334,37.054,2429,29.9]],["name/60-9",[]],["text/60-9",[]],["component/60-9",[]],["title/60-10",[123,26.165,287,29.55,481,35.773,1359,30.94]],["name/60-10",[]],["text/60-10",[]],["component/60-10",[]],["title/60-11",[741,52.533]],["name/60-11",[]],["text/60-11",[]],["component/60-11",[]],["title/60-12",[1641,79.574]],["name/60-12",[]],["text/60-12",[]],["component/60-12",[]],["title/60-13",[98,36.355,132,43.234]],["name/60-13",[]],["text/60-13",[]],["component/60-13",[]],["title/60-14",[123,26.165,287,29.55,481,35.773,1359,30.94]],["name/60-14",[]],["text/60-14",[]],["component/60-14",[]],["title/60-15",[133,20.72,803,38.529,1238,33.188]],["name/60-15",[]],["text/60-15",[]],["component/60-15",[]],["title/60-16",[30,22.555,417,35.921,1238,33.188]],["name/60-16",[]],["text/60-16",[]],["component/60-16",[]],["title/60",[16,22.478,30,19.292,196,20.921,2334,42.415]],["name/60",[16,0.355,30,0.304,196,0.33,2334,0.669]],["text/60",[0,0.343,2,1.202,5,1.979,8,0.43,9,0.29,10,1.06,11,0.127,12,0.254,13,1.488,15,0.458,16,3.496,20,1.393,22,0.768,24,0.542,25,0.339,26,1.082,30,3.843,32,0.508,36,2.018,44,1.357,50,0.32,51,0.871,52,1.048,53,0.508,58,0.547,60,1.305,61,0.394,68,0.515,69,0.498,73,0.831,74,0.873,77,0.988,78,0.394,82,0.575,87,0.466,93,0.509,95,0.242,96,1.407,98,0.324,99,0.454,100,0.388,107,0.35,109,0.456,110,0.434,112,1.134,114,0.319,115,0.466,117,0.809,118,0.375,120,0.565,121,0.371,123,0.91,124,0.41,127,1.473,132,0.385,133,1.251,137,0.202,147,0.3,149,1.42,151,1.547,155,0.603,162,0.498,164,0.673,166,2.862,169,0.319,170,1.859,171,0.552,174,1.355,175,1.923,177,1.262,178,0.566,180,0.425,181,1.669,182,0.833,185,0.498,187,0.684,196,3.665,202,2.671,204,0.608,207,0.566,208,0.271,211,0.454,214,0.334,215,0.998,217,0.311,221,1.451,225,1.401,229,2.025,233,1.098,234,2.2,236,1.777,238,0.397,240,1.085,241,3.736,242,0.317,243,1.409,246,0.343,251,0.356,257,0.324,259,0.317,269,0.46,271,2.588,272,0.657,273,0.547,274,1.085,275,0.366,277,0.413,279,0.76,286,1.325,287,3.238,289,1.517,290,3.077,293,1.313,294,0.438,301,1.949,303,1.18,307,0.354,309,0.59,316,0.498,320,0.25,321,0.2,326,0.473,335,0.553,354,2.103,363,2.882,374,0.297,378,1.127,379,0.45,382,0.281,386,0.421,387,0.311,393,0.473,399,0.826,405,0.296,416,1.046,420,0.362,433,0.41,435,0.286,440,1.546,455,0.307,470,0.948,471,0.278,481,1.245,494,0.519,496,0.38,499,0.726,502,0.746,509,0.489,510,1.994,518,0.246,520,0.331,528,0.356,529,0.787,539,1.364,540,0.547,544,0.438,546,0.775,548,1.571,551,0.378,557,0.438,559,0.508,571,0.356,577,0.852,598,0.38,601,0.46,604,0.46,640,0.324,641,0.38,644,1.26,648,0.794,652,0.489,654,0.615,657,0.305,660,0.378,661,0.375,663,0.347,664,2.036,666,0.519,680,1.859,697,1.277,703,0.288,708,0.768,721,0.508,722,0.895,735,0.454,741,1.859,770,0.375,774,0.873,785,0.335,792,0.957,803,3.427,888,0.434,900,4.336,907,0.343,922,0.358,929,0.532,935,0.41,943,0.519,952,0.443,963,0.532,981,0.547,987,0.481,989,0.532,991,0.362,1028,0.519,1033,0.712,1037,1.1,1045,0.365,1048,0.565,1110,0.587,1125,0.508,1129,0.519,1154,1.461,1161,0.596,1170,0.781,1182,0.473,1183,0.481,1202,0.587,1238,0.684,1242,2.352,1250,1.137,1302,1.034,1307,0.998,1308,0.46,1309,0.449,1313,0.46,1319,4.855,1321,2.635,1345,1.629,1352,0.617,1359,1.669,1380,0.388,1411,0.498,1496,0.438,1530,2.945,1531,1.567,1541,0.383,1556,0.449,1562,0.617,1600,0.489,1613,0.498,1630,0.519,1638,0.794,1670,0.413,1695,0.385,1742,0.481,1789,1.476,1790,3.077,1827,0.547,1831,0.466,1834,0.852,1853,0.449,1872,0.508,2017,1.381,2145,3.261,2195,1.567,2275,2.398,2334,8.23,2337,0.364,2377,0.924,2379,0.976,2408,0.957,2411,0.565,2432,2.093,2443,2.655,2444,0.532,2445,0.617,2446,1.274,2447,1.713,2448,1.949,2449,0.663,2450,0.663,2451,0.498,2452,0.663,2453,0.498,2454,0.663,2455,0.852,2456,1.274,2457,2.851,2458,1.274,2459,0.663,2460,0.663,2461,1.274,2462,0.532,2463,0.825,2464,2.816,2465,2.013,2466,0.663,2467,2.201,2468,0.663,2469,2.429,2470,0.897,2471,0.617,2472,1.381,2473,1.839,2474,0.663,2475,0.663,2476,0.663,2477,1.186,2478,0.663,2479,0.663,2480,0.663,2481,0.663,2482,0.663,2483,0.663,2484,0.663,2485,0.663,2486,0.663,2487,0.663,2488,0.663,2489,0.663,2490,0.663,2491,0.663,2492,0.663,2493,0.663,2494,0.438,2495,1.186,2496,1.517,2497,0.617,2498,1.274,2499,1.274,2500,0.663,2501,0.617,2502,0.663,2503,0.663,2504,0.663,2505,1.629,2506,0.587,2507,1.216,2508,4.597,2509,0.617,2510,0.617,2511,0.617,2512,2.352,2513,1.186,2514,1.517,2515,0.663,2516,0.663,2517,0.617,2518,0.617,2519,0.617,2520,0.481,2521,1.713,2522,1.274,2523,1.186,2524,1.274,2525,1.051,2526,0.842,2527,0.587,2528,2.364,2529,0.617,2530,0.663,2531,0.587,2532,0.663,2533,0.617,2534,0.617,2535,0.617,2536,0.663,2537,0.663,2538,0.519,2539,0.663,2540,0.587,2541,0.547,2542,0.519,2543,0.663,2544,0.403,2545,0.378,2546,0.617,2547,0.663,2548,0.587,2549,0.663,2550,0.663]],["component/60",[10,1.318]],["title/61-1",[9,12.054,12,20.253,13,21.084,225,22.411]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["title/61-2",[16,26.28,30,22.555,2428,42.901]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["title/61-3",[225,26.202,546,26.048,900,44.139]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["title/61-4",[722,30.081,1319,47.353,2551,45.592]],["name/61-4",[]],["text/61-4",[]],["component/61-4",[]],["title/61-5",[196,36.964]],["name/61-5",[]],["text/61-5",[]],["component/61-5",[]],["title/61-6",[241,36.434,548,29.371,2429,40.015]],["name/61-6",[]],["text/61-6",[]],["component/61-6",[]],["title/61-7",[30,22.555,234,30.206,303,30.857]],["name/61-7",[]],["text/61-7",[]],["component/61-7",[]],["title/61-8",[202,41.089]],["name/61-8",[]],["text/61-8",[]],["component/61-8",[]],["title/61-9",[803,46.373,2429,48.161]],["name/61-9",[]],["text/61-9",[]],["component/61-9",[]],["title/61-10",[363,44.175,2429,48.161]],["name/61-10",[]],["text/61-10",[]],["component/61-10",[]],["title/61-11",[236,28.79,1033,25.815,1388,32.057,2429,29.9,2552,43.006]],["name/61-11",[]],["text/61-11",[]],["component/61-11",[]],["title/61-12",[123,26.165,287,29.55,481,35.773,1359,30.94]],["name/61-12",[]],["text/61-12",[]],["component/61-12",[]],["title/61-13",[741,52.533]],["name/61-13",[]],["text/61-13",[]],["component/61-13",[]],["title/61-14",[1641,79.574]],["name/61-14",[]],["text/61-14",[]],["component/61-14",[]],["title/61-15",[98,36.355,132,43.234]],["name/61-15",[]],["text/61-15",[]],["component/61-15",[]],["title/61-16",[123,26.165,287,29.55,481,35.773,1359,30.94]],["name/61-16",[]],["text/61-16",[]],["component/61-16",[]],["title/61-17",[133,20.72,803,38.529,1238,33.188]],["name/61-17",[]],["text/61-17",[]],["component/61-17",[]],["title/61-18",[30,22.555,417,35.921,1238,33.188]],["name/61-18",[]],["text/61-18",[]],["component/61-18",[]],["title/61",[16,19.637,30,16.854,196,18.276,250,22.76,2553,40.91]],["name/61",[16,0.287,30,0.247,196,0.268,250,0.333,2553,0.599]],["text/61",[0,0.241,2,0.992,5,1.633,8,0.157,9,0.206,10,0.936,11,0.089,12,0.178,13,1.236,15,0.325,16,2.933,20,1.306,22,1.019,24,0.384,25,0.874,26,0.784,28,0.434,30,3.674,32,0.356,33,0.246,36,1.944,44,0.666,48,0.187,51,0.624,52,0.774,53,0.356,57,0.197,58,0.383,60,0.728,61,0.536,68,0.365,69,0.349,73,0.596,74,0.638,77,0.708,78,0.276,82,0.21,85,0.356,87,0.327,93,0.361,95,0.761,96,1.156,98,0.837,99,0.318,100,0.272,107,0.246,109,1.109,110,0.304,112,0.971,115,0.327,117,0.837,118,0.263,121,0.737,122,0.449,123,0.653,124,0.558,127,1.067,130,0.265,132,0.525,133,1.039,134,0.84,137,0.142,149,1.066,151,1.142,155,0.428,162,0.349,164,0.697,166,2.357,169,0.223,170,1.372,171,0.391,174,0.982,175,1.598,177,1.303,178,0.406,180,0.579,181,2.551,182,1.12,185,0.349,187,0.485,196,3.269,202,2.088,204,0.629,207,0.401,208,0.369,211,0.318,214,0.234,215,0.716,217,0.218,221,1.189,223,0.235,225,1.177,229,1.682,233,0.969,234,1.807,236,0.822,238,0.278,240,0.77,241,3.77,242,0.433,243,1.01,246,0.241,250,1.96,251,0.249,257,0.227,259,0.223,261,0.181,269,0.322,271,1.911,272,0.466,273,0.383,274,0.77,275,0.257,277,0.29,279,0.545,286,1.29,287,2.516,289,1.088,290,2.809,293,0.942,294,0.307,301,1.412,303,1.041,307,0.483,309,0.793,316,0.679,320,0.175,321,0.14,326,0.332,335,0.573,340,0.304,354,2.512,363,2.196,374,0.208,378,0.808,379,0.605,381,0.29,382,0.197,386,0.295,387,0.218,393,0.645,395,1.341,399,0.599,405,0.208,416,0.758,420,0.254,433,0.287,435,0.569,440,1.12,455,0.215,470,0.883,471,0.195,475,0.268,477,0.311,478,0.287,481,0.892,483,0.322,494,0.364,495,0.349,496,0.266,499,0.515,500,0.29,502,0.529,509,0.347,510,1.849,516,0.247,518,0.173,520,0.232,523,0.2,527,0.311,528,0.708,529,0.558,539,1.408,540,0.383,541,0.177,546,0.879,548,1.473,549,1.424,551,0.265,556,0.568,557,0.307,559,0.692,561,0.356,571,0.249,577,0.311,584,0.72,590,0.235,601,0.627,604,0.627,632,0.349,636,0.343,640,0.442,644,1.429,648,0.563,652,0.343,654,0.436,657,0.415,660,0.265,661,0.263,663,0.243,664,1.489,666,0.364,680,1.915,697,1.188,698,0.589,703,0.202,708,0.551,721,0.356,722,1.015,735,0.318,741,1.372,763,0.258,770,0.263,774,0.619,785,0.235,792,0.679,803,2.646,888,0.304,900,5.251,907,0.241,922,0.251,929,0.373,934,0.396,935,0.287,943,0.364,952,0.311,963,1.058,973,0.433,981,0.745,987,0.337,989,0.373,991,0.254,1028,0.364,1033,0.505,1037,0.789,1045,0.259,1110,0.412,1125,0.356,1154,1.058,1161,0.617,1163,0.841,1170,0.554,1182,0.645,1183,0.337,1238,0.485,1242,1.765,1250,1.058,1302,0.742,1303,0.433,1307,1.033,1308,0.322,1309,0.314,1313,0.322,1318,0.655,1319,5.286,1321,1.993,1335,0.433,1359,1.22,1366,0.412,1380,0.272,1386,0.26,1411,0.349,1428,0.383,1488,0.679,1496,0.307,1530,2.027,1531,1.459,1541,0.761,1543,0.304,1556,0.314,1560,0.412,1594,0.383,1600,0.343,1611,0.337,1613,0.349,1630,0.707,1638,0.822,1670,0.29,1677,0.745,1686,0.396,1695,0.27,1733,0.373,1738,0.337,1742,0.337,1800,0.373,1827,0.383,1831,0.327,1834,0.604,1995,0.433,2017,0.679,2022,0.298,2145,3.134,2195,1.123,2275,2.248,2330,1.228,2337,0.255,2340,2.175,2377,0.655,2379,0.692,2404,0.433,2408,1.286,2411,0.396,2432,1.517,2443,2.586,2445,0.433,2447,0.433,2448,1.438,2451,0.679,2453,0.349,2455,0.604,2462,0.373,2463,0.585,2464,2.64,2465,2.079,2467,2.586,2469,2.901,2470,1.205,2471,0.841,2472,1.833,2477,1.228,2494,0.597,2495,1.594,2496,2.809,2497,0.841,2501,0.433,2505,1.517,2506,0.412,2507,0.872,2508,3.443,2509,0.433,2510,0.433,2511,0.841,2512,1.72,2513,0.841,2514,1.088,2517,0.433,2518,0.433,2519,0.433,2520,0.337,2521,1.228,2523,0.433,2525,1.412,2526,0.597,2527,0.412,2529,0.433,2533,0.433,2534,0.433,2535,0.433,2540,0.412,2541,0.383,2542,0.364,2544,0.282,2545,0.265,2546,0.433,2548,0.412,2552,8.198,2553,5.341,2554,0.904,2555,1.319,2556,8.722,2557,0.465,2558,0.904,2559,0.465,2560,0.465,2561,0.465,2562,0.465,2563,0.904,2564,2.778,2565,0.904,2566,0.465,2567,0.465,2568,0.904,2569,0.383,2570,0.465,2571,0.465,2572,1.341,2573,1.319,2574,2.086,2575,2.086,2576,2.086,2577,2.086,2578,2.086,2579,0.904,2580,2.44,2581,1.712,2582,2.44,2583,0.904,2584,1.319,2585,1.319,2586,1.712,2587,0.904,2588,1.319,2589,0.904,2590,2.44,2591,0.465,2592,0.465,2593,0.465,2594,0.465,2595,0.465,2596,0.465,2597,0.904,2598,0.465,2599,0.465,2600,0.465,2601,0.904,2602,0.904,2603,1.712,2604,0.465,2605,0.904,2606,0.465,2607,0.343,2608,0.465,2609,1.319,2610,0.465,2611,0.904,2612,0.465,2613,0.465,2614,0.465,2615,0.904,2616,0.904,2617,0.383,2618,0.465,2619,0.465,2620,0.465,2621,0.465,2622,0.465,2623,0.356,2624,1.01,2625,0.465,2626,0.433,2627,0.465,2628,0.465,2629,0.301,2630,0.904,2631,0.465,2632,0.465,2633,0.465,2634,0.465,2635,0.904,2636,0.904,2637,0.904,2638,0.465,2639,0.904,2640,1.319,2641,1.319,2642,1.319,2643,0.465,2644,0.904,2645,0.465,2646,0.904,2647,0.465,2648,0.465,2649,0.433,2650,0.465,2651,0.465,2652,0.465]],["component/61",[10,1.318]],["title/62-1",[9,12.054,12,20.253,13,21.084,225,22.411]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["title/62-2",[30,22.555,416,27.365,2428,42.901]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["title/62-3",[5,17.915,203,26.847,2463,40.015]],["name/62-3",[]],["text/62-3",[]],["component/62-3",[]],["title/62-4",[5,17.915,202,27.189,2463,40.015]],["name/62-4",[]],["text/62-4",[]],["component/62-4",[]],["title/62-5",[803,46.373,2429,48.161]],["name/62-5",[]],["text/62-5",[]],["component/62-5",[]],["title/62-6",[123,26.165,287,29.55,481,35.773,1359,30.94]],["name/62-6",[]],["text/62-6",[]],["component/62-6",[]],["title/62-7",[1641,79.574]],["name/62-7",[]],["text/62-7",[]],["component/62-7",[]],["title/62-8",[98,36.355,132,43.234]],["name/62-8",[]],["text/62-8",[]],["component/62-8",[]],["title/62-9",[123,26.165,287,29.55,481,35.773,1359,30.94]],["name/62-9",[]],["text/62-9",[]],["component/62-9",[]],["title/62-10",[133,20.72,803,38.529,1238,33.188]],["name/62-10",[]],["text/62-10",[]],["component/62-10",[]],["title/62-11",[30,22.555,417,35.921,1238,33.188]],["name/62-11",[]],["text/62-11",[]],["component/62-11",[]],["title/62-12",[68,16.57,203,17.81,322,23.509,399,14.335,1040,28.091,2653,38.18]],["name/62-12",[]],["text/62-12",[]],["component/62-12",[]],["title/62",[30,22.555,203,26.847,2331,45.592]],["name/62",[30,0.397,203,0.472,2331,0.802]],["text/62",[0,0.368,2,1.148,5,1.758,9,0.31,10,0.879,11,0.136,12,0.272,13,1.572,14,0.228,19,0.364,20,1.275,22,0.819,24,0.302,25,1.283,26,0.325,29,0.586,30,3.387,36,0.665,37,1.004,44,0.524,48,0.286,50,0.657,51,0.928,52,1.11,58,0.586,60,0.752,61,0.422,62,0.397,68,0.287,69,0.534,73,0.615,74,0.926,77,0.381,80,0.275,82,0.615,87,0.958,93,1.21,94,0.388,96,1.361,98,0.665,99,0.487,107,0.375,109,0.487,110,0.465,112,0.542,114,0.655,117,0.451,118,0.402,120,1.16,121,0.397,123,1.497,127,1.567,132,0.413,133,1.46,134,0.79,137,0.217,147,0.322,149,0.864,151,1.416,155,0.644,162,0.534,164,0.72,166,2.217,170,2.449,171,0.849,174,1.734,175,1.296,177,1.047,178,0.219,180,0.873,181,3.537,187,1.053,200,1.385,202,2.793,203,3.191,204,1.199,207,0.605,214,0.686,221,0.751,225,0.831,228,0.46,229,2.364,232,1.066,233,1.168,234,0.665,236,0.849,237,0.361,238,0.425,240,0.605,242,0.34,243,1.043,246,0.705,255,1.036,256,0.422,257,0.347,259,0.34,262,0.422,268,1.092,269,0.493,272,0.702,274,0.605,279,0.81,283,0.432,286,1.405,287,3.978,288,0.443,299,0.493,301,2.073,302,0.586,303,1.968,304,0.629,307,0.379,309,0.63,313,0.891,319,0.493,320,0.268,321,0.215,322,0.407,334,0.326,363,0.808,370,0.586,374,0.319,379,0.251,384,0.534,386,0.451,387,0.334,399,0.879,416,1.745,417,0.791,420,0.743,427,0.661,442,0.381,443,0.788,455,0.329,461,0.556,462,0.32,470,0.366,478,0.439,481,0.921,486,0.515,499,0.775,502,0.797,509,0.523,510,1.619,516,0.377,518,0.264,520,0.355,528,1.624,529,1.211,530,0.524,539,2.514,540,0.586,546,0.299,551,0.405,556,0.856,559,0.544,571,0.381,575,0.407,640,0.347,644,0.933,648,0.849,654,0.343,660,1.431,661,1.109,664,1.4,667,0.425,680,1.102,697,1.361,703,0.309,721,0.544,722,0.663,724,0.47,733,0.487,741,2.217,785,0.359,796,0.586,803,2.956,888,0.465,899,0.422,901,0.57,907,0.705,929,0.57,935,0.439,943,0.556,957,0.41,964,0.57,972,0.493,983,0.359,1009,0.5,1028,0.556,1035,0.428,1045,0.39,1080,2.023,1125,1.502,1143,0.5,1150,1.123,1154,0.841,1170,0.834,1175,0.661,1183,0.515,1215,0.275,1230,0.629,1238,0.731,1242,1.994,1243,0.727,1302,0.766,1304,0.451,1306,0.661,1308,0.493,1309,0.481,1313,0.493,1319,1.043,1321,2.307,1322,0.447,1336,1.825,1337,3.259,1339,1.206,1341,0.57,1343,0.661,1344,0.629,1345,1.206,1359,2.048,1385,0.534,1393,0.507,1411,0.534,1430,0.586,1515,0.47,1530,1.282,1556,0.481,1601,0.661,1638,0.443,1677,0.586,1695,0.413,1732,3.1,1743,0.57,1790,1.617,1802,0.57,1831,0.5,1834,0.475,1849,0.451,1885,1.825,1887,0.661,1917,0.629,2145,3.994,2184,2.141,2195,0.605,2210,0.481,2275,0.988,2322,0.605,2331,4.251,2332,1.206,2333,1.925,2337,0.39,2368,0.556,2377,0.988,2379,1.043,2429,1.269,2433,0.661,2435,0.661,2436,0.661,2437,1.268,2438,0.661,2439,0.661,2440,1.268,2441,0.661,2442,1.268,2444,0.57,2463,0.46,2470,0.5,2496,1.123,2505,0.629,2506,0.629,2507,1.662,2508,1.823,2512,1.123,2514,0.586,2525,1.123,2526,1.296,2527,0.629,2540,0.629,2541,0.586,2542,0.556,2548,0.629,2556,0.661,2626,0.661,2649,0.661,2653,0.661,2654,1.362,2655,2.513,2656,3.71,2657,1.16,2658,2.073,2659,1.362,2660,0.71,2661,0.71,2662,1.362,2663,1.362,2664,0.71,2665,0.71,2666,0.534,2667,0.493,2668,0.71,2669,3.943,2670,0.71,2671,0.71,2672,0.71,2673,0.71,2674,0.71,2675,0.71,2676,0.71,2677,2.513,2678,0.71,2679,0.71,2680,0.71,2681,0.71,2682,1.362,2683,0.71,2684,0.71,2685,3.5,2686,1.362,2687,1.023,2688,1.362,2689,1.362,2690,1.362,2691,0.71,2692,0.71,2693,0.71,2694,0.71,2695,0.71,2696,0.71,2697,0.71,2698,0.586,2699,0.71,2700,0.71,2701,0.71,2702,0.71,2703,0.71,2704,0.629,2705,0.71,2706,0.71,2707,0.71,2708,0.71,2709,0.534,2710,0.71,2711,0.71,2712,0.71,2713,1.96,2714,3.5,2715,2.513,2716,1.362,2717,1.96,2718,2.513,2719,1.96,2720,3.025,2721,3.5,2722,0.71,2723,0.71,2724,0.71,2725,1.96,2726,1.96,2727,0.71,2728,0.71,2729,0.71,2730,0.71,2731,0.71,2732,0.556,2733,0.71,2734,0.71,2735,0.71,2736,0.71,2737,0.605,2738,0.71,2739,0.71,2740,1.96,2741,1.362,2742,0.71,2743,0.71,2744,0.71,2745,0.71,2746,0.71,2747,0.71,2748,0.71,2749,0.71,2750,0.71,2751,1.362,2752,1.362,2753,1.362,2754,0.71,2755,0.71,2756,0.71,2757,1.96,2758,1.362,2759,2.495,2760,0.586,2761,0.71,2762,0.71,2763,0.71,2764,1.362,2765,0.71,2766,0.71,2767,0.71,2768,0.71,2769,0.71,2770,0.71,2771,0.71,2772,0.71,2773,0.71,2774,0.71]],["component/62",[10,1.318]],["title/63-1",[431,52.864]],["name/63-1",[]],["text/63-1",[]],["component/63-1",[]],["title/63-2",[2775,74.941]],["name/63-2",[]],["text/63-2",[]],["component/63-2",[]],["title/63-3",[785,37.641,2022,47.683]],["name/63-3",[]],["text/63-3",[]],["component/63-3",[]],["title/63",[1878,58.227]],["name/63",[1878,1.734]],["text/63",[5,1.358,6,2.407,11,0.37,13,0.77,24,0.821,52,1.485,65,2.574,68,0.78,74,1.057,81,3.321,82,3.287,89,2.044,95,0.705,96,1.464,98,0.944,100,1.13,109,0.691,126,0.527,133,1.158,134,2.933,135,0.839,137,3.164,147,0.875,150,3.62,151,0.904,166,1.5,170,1.086,171,2.837,172,2.698,174,2.685,176,3.073,178,2.239,181,1.567,204,0.921,214,0.973,215,1.048,218,0.804,221,0.577,222,0.672,224,3.112,233,1.604,309,0.894,335,1.5,379,0.682,410,1.71,431,6.53,432,2.01,441,0.665,447,1.042,448,2.911,490,1.333,501,0.952,505,0.968,507,2.593,508,0.991,509,2.516,510,2.99,514,0.722,516,3.028,523,1.486,526,0.968,532,2.261,559,1.479,560,1.1,575,3.268,577,2.309,655,3.727,703,0.839,709,1.031,721,1.479,722,0.94,746,5.569,747,1.226,748,1.164,753,1.183,754,1.25,755,1.277,775,1.048,785,0.977,788,1.031,923,1.226,946,2.505,1045,1.34,1124,2.007,1158,1.954,1238,1.037,1341,2.77,1413,3.518,1615,1.71,1644,2.259,1650,1.323,1671,3.059,1744,1.45,1752,1.549,1796,1.34,1808,2.397,1814,1.291,1849,2.192,1853,2.337,1878,4.084,1888,2.547,1896,4.833,1898,5.049,1901,6.374,1903,2.848,1974,1.307,1975,1.479,1976,1.323,2022,1.238,2035,3.455,2526,2.283,2544,1.174,2775,5.839,2776,3.215,2777,5.582,2778,3.99,2779,3.215,2780,1.798,2781,1.645,2782,1.798,2783,1.798,2784,1.798,2785,1.798,2786,1.798,2787,3.215,2788,1.798,2789,1.798,2790,1.798,2791,1.798]],["component/63",[11,0.319,388,0.705]],["title/64-1",[149,21.259,708,25.823,1215,23.97]],["name/64-1",[]],["text/64-1",[]],["component/64-1",[]],["title/64",[126,25.488]],["name/64",[126,0.759]],["text/64",[11,2.184,149,3.919,708,4.761,993,5.457,1215,4.419,1814,7.62]],["component/64",[11,0.319,388,0.705]],["title/65",[9,14.093,11,11.848,388,26.202]],["name/65",[205,1.287]],["text/65",[3,3.263,9,2.484,11,2.088,26,4.99,30,3.976,80,4.215,178,3.352,388,4.618,703,4.732]],["component/65",[11,0.319,388,0.705]],["title/66-1",[968,34.315]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["title/66-2",[11,11.848,51,29.259,234,30.206]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["title/66",[2,27.205]],["name/66",[2,0.81]],["text/66",[2,3.117,3,2.875,4,2.157,5,2.308,9,2.62,11,2.536,12,3.678,24,2.239,51,2.493,80,2.037,91,3.869,96,2.488,105,1.7,109,1.884,149,2.738,181,3.159,208,2.151,218,2.194,221,3.436,234,2.573,235,2.128,318,3.104,358,4.346,388,4.536,401,2.266,432,4.119,501,2.595,549,2.42,645,2.728,927,3.875,968,4.44,1037,3.15,1119,4.343,1161,2.465,1310,3.082,1311,2.797,2792,3.2,2793,4.664]],["component/66",[11,0.319,388,0.705]],["title/67-1",[541,35.613]],["name/67-1",[]],["text/67-1",[]],["component/67-1",[]],["title/67-2",[135,32.312,163,53.124]],["name/67-2",[]],["text/67-2",[]],["component/67-2",[]],["title/67",[490,28.709,2794,56.993]],["name/67",[490,0.603,2794,1.198]],["text/67",[3,1.949,5,2.697,9,1.484,11,1.248,16,2.768,45,4.46,59,4.172,60,3.595,64,3.236,76,4.987,95,2.375,135,2.827,155,3.081,163,8.463,169,3.13,194,3.356,199,2.727,221,1.946,279,2.689,307,3.477,388,2.76,401,2.801,490,4.573,505,3.264,518,2.419,526,3.264,600,3.925,639,5.369,686,4.46,703,4.717,946,4.722,972,4.518,994,5.369,1896,6.864,1967,4.987,2448,3.837,2794,4.987,2795,5.545,2796,5.545,2797,6.061,2798,6.061,2799,4.581,2800,6.061,2801,6.061,2802,6.061]],["component/67",[11,0.319,388,0.705]],["title/68-1",[490,36.047]],["name/68-1",[]],["text/68-1",[]],["component/68-1",[]],["title/68-2",[1380,43.538,2803,59.685]],["name/68-2",[]],["text/68-2",[]],["component/68-2",[]],["title/68-3",[1748,58.227]],["name/68-3",[]],["text/68-3",[]],["component/68-3",[]],["title/68-4",[126,20.299,1443,65.895]],["name/68-4",[]],["text/68-4",[]],["component/68-4",[]],["title/68",[1626,64.834]],["name/68",[1626,1.93]],["text/68",[9,1.008,11,0.847,18,1.294,36,2.16,60,2.441,64,3.458,77,2.374,78,4.131,91,1.782,126,2.347,151,3.256,169,2.126,171,1.914,176,1.719,211,3.029,218,1.842,223,3.52,225,2.949,242,2.117,335,1.92,365,2.991,379,1.562,388,1.874,438,1.897,490,4.347,502,2.587,505,3.488,518,3.196,522,2.441,526,2.217,534,2.956,601,3.068,613,2.806,641,2.535,645,2.29,703,3.736,709,2.361,745,3.111,907,2.29,922,2.387,924,2.349,967,3.916,1111,4.75,1118,2.956,1407,3.261,1626,8.179,1675,3.157,1741,3.261,1748,6.08,1789,3.547,2799,6.053,2803,8.51,2804,6.9,2805,6.477,2806,2.806,2807,4.116,2808,4.116,2809,6.477,2810,6.477,2811,5.581,2812,4.116,2813,4.116,2814,4.116,2815,4.116,2816,4.116,2817,4.116,2818,2.471,2819,6.477]],["component/68",[11,0.319,388,0.705]],["title/69-1",[1974,63.206]],["name/69-1",[]],["text/69-1",[]],["component/69-1",[]],["title/69-2",[1974,63.206]],["name/69-2",[]],["text/69-2",[]],["component/69-2",[]],["title/69-3",[655,35.081,1974,50.339]],["name/69-3",[]],["text/69-3",[]],["component/69-3",[]],["title/69-4",[1974,50.339,2027,58.249]],["name/69-4",[]],["text/69-4",[]],["component/69-4",[]],["title/69",[448,47.701]],["name/69",[448,1.42]],["text/69",[5,3.521,9,1.216,11,0.611,13,1.272,22,1.332,25,1.629,33,1.685,52,1.691,60,1.761,65,2.41,68,2.779,75,3.754,81,1.34,89,2.883,95,2.51,96,0.997,109,1.909,117,2.024,124,1.971,128,1.88,130,1.816,133,2.306,164,1.685,169,1.533,176,1.24,178,2.116,181,2.46,216,1.592,222,1.11,231,2.717,233,1.482,261,2.674,279,1.317,382,1.352,388,1.352,416,2.362,431,1.805,432,1.368,448,6.707,455,2.47,496,1.828,501,2.629,518,1.185,546,1.344,654,3.32,655,5.45,744,3.776,746,4.317,799,2.109,958,1.629,1057,3.528,1158,1.805,1302,1.793,1309,2.158,1322,7.041,1382,3.269,1384,2.63,1743,2.559,1752,4.28,1814,2.133,1954,4.165,1963,2.244,1974,7.575,1975,4.087,1976,7.038,2022,2.044,2026,2.825,2027,4.177,2028,2.825,2037,2.497,2038,2.497,2039,2.497,2507,2.109,2709,2.395,2775,4.28]],["component/69",[11,0.319,388,0.705]],["title/70",[541,35.613]],["name/70",[541,1.06]],["text/70",[5,3.163,11,1.795,24,2.792,52,2.082,60,3.627,65,4.23,68,2.654,78,6.481,94,5.112,96,2.053,128,3.871,147,2.976,307,3.507,321,1.983,379,3.308,388,2.784,401,2.826,425,4.444,431,3.717,432,5.105,448,4.782,455,3.04,490,4.212,501,3.236,559,5.031,560,3.741,703,4.067,721,5.031,1158,6.177,1626,6.5,1650,4.499,1666,2.12,1744,4.933,1878,4.094,2794,5.031,2795,5.594]],["component/70",[11,0.319,388,0.705]],["title/71-1",[431,52.864]],["name/71-1",[]],["text/71-1",[]],["component/71-1",[]],["title/71-2",[2775,74.941]],["name/71-2",[]],["text/71-2",[]],["component/71-2",[]],["title/71-3",[785,37.641,2022,47.683]],["name/71-3",[]],["text/71-3",[]],["component/71-3",[]],["title/71",[1878,58.227]],["name/71",[1878,1.734]],["text/71",[5,1.358,6,2.407,11,0.37,13,0.77,24,0.821,52,1.485,65,2.574,68,0.78,74,1.057,81,3.321,82,3.287,89,2.044,95,0.705,96,1.464,98,0.944,100,1.13,109,0.691,126,0.527,133,1.158,134,2.933,135,0.839,137,3.164,147,0.875,150,3.62,151,0.904,166,1.5,170,1.086,171,2.837,172,2.698,174,2.685,176,3.073,178,2.239,181,1.567,204,0.921,214,0.973,215,1.048,218,0.804,221,0.577,222,0.672,224,3.112,233,1.604,309,0.894,335,1.5,379,0.682,410,1.71,431,6.53,432,2.01,441,0.665,447,1.042,448,2.911,490,1.333,501,0.952,505,0.968,507,2.593,508,0.991,509,2.516,510,2.99,514,0.722,516,3.028,523,1.486,526,0.968,532,2.261,559,1.479,560,1.1,575,3.268,577,2.309,655,3.727,703,0.839,709,1.031,721,1.479,722,0.94,746,5.569,747,1.226,748,1.164,753,1.183,754,1.25,755,1.277,775,1.048,785,0.977,788,1.031,923,1.226,946,2.505,1045,1.34,1124,2.007,1158,1.954,1238,1.037,1341,2.77,1413,3.518,1615,1.71,1644,2.259,1650,1.323,1671,3.059,1744,1.45,1752,1.549,1796,1.34,1808,2.397,1814,1.291,1849,2.192,1853,2.337,1878,4.084,1888,2.547,1896,4.833,1898,5.049,1901,6.374,1903,2.848,1974,1.307,1975,1.479,1976,1.323,2022,1.238,2035,3.455,2526,2.283,2544,1.174,2775,5.839,2776,3.215,2777,5.582,2778,3.99,2779,3.215,2780,1.798,2781,1.645,2782,1.798,2783,1.798,2784,1.798,2785,1.798,2786,1.798,2787,3.215,2788,1.798,2789,1.798,2790,1.798,2791,1.798]],["component/71",[11,0.319,388,0.705]],["title/72-1",[149,21.259,708,25.823,1215,23.97]],["name/72-1",[]],["text/72-1",[]],["component/72-1",[]],["title/72",[126,25.488]],["name/72",[126,0.759]],["text/72",[11,2.184,149,3.919,708,4.761,993,5.457,1215,4.419,1814,7.62]],["component/72",[11,0.319,388,0.705]],["title/73",[9,14.093,11,11.848,388,26.202]],["name/73",[205,1.287]],["text/73",[3,3.263,9,2.484,11,2.088,26,4.99,30,3.976,80,4.215,178,3.352,388,4.618,703,4.732]],["component/73",[11,0.319,388,0.705]],["title/74-1",[968,34.315]],["name/74-1",[]],["text/74-1",[]],["component/74-1",[]],["title/74-2",[11,11.848,51,29.259,234,30.206]],["name/74-2",[]],["text/74-2",[]],["component/74-2",[]],["title/74",[2,27.205]],["name/74",[2,0.81]],["text/74",[2,3.117,3,2.875,4,2.157,5,2.308,9,2.62,11,2.536,12,3.678,24,2.239,51,2.493,80,2.037,91,3.869,96,2.488,105,1.7,109,1.884,149,2.738,181,3.159,208,2.151,218,2.194,221,3.436,234,2.573,235,2.128,318,3.104,358,4.346,388,4.536,401,2.266,432,4.119,501,2.595,549,2.42,645,2.728,927,3.875,968,4.44,1037,3.15,1119,4.343,1161,2.465,1310,3.082,1311,2.797,2792,3.2,2793,4.664]],["component/74",[11,0.319,388,0.705]],["title/75-1",[541,35.613]],["name/75-1",[]],["text/75-1",[]],["component/75-1",[]],["title/75-2",[135,32.312,163,53.124]],["name/75-2",[]],["text/75-2",[]],["component/75-2",[]],["title/75",[490,28.709,2794,56.993]],["name/75",[490,0.603,2794,1.198]],["text/75",[3,1.949,5,2.697,9,1.484,11,1.248,16,2.768,45,4.46,59,4.172,60,3.595,64,3.236,76,4.987,95,2.375,135,2.827,155,3.081,163,8.463,169,3.13,194,3.356,199,2.727,221,1.946,279,2.689,307,3.477,388,2.76,401,2.801,490,4.573,505,3.264,518,2.419,526,3.264,600,3.925,639,5.369,686,4.46,703,4.717,946,4.722,972,4.518,994,5.369,1896,6.864,1967,4.987,2448,3.837,2794,4.987,2795,5.545,2796,5.545,2797,6.061,2798,6.061,2799,4.581,2800,6.061,2801,6.061,2802,6.061]],["component/75",[11,0.319,388,0.705]],["title/76-1",[490,36.047]],["name/76-1",[]],["text/76-1",[]],["component/76-1",[]],["title/76-2",[1380,43.538,2803,59.685]],["name/76-2",[]],["text/76-2",[]],["component/76-2",[]],["title/76-3",[1748,58.227]],["name/76-3",[]],["text/76-3",[]],["component/76-3",[]],["title/76-4",[126,20.299,1443,65.895]],["name/76-4",[]],["text/76-4",[]],["component/76-4",[]],["title/76",[1626,64.834]],["name/76",[1626,1.93]],["text/76",[9,1.008,11,0.847,18,1.294,36,2.16,60,2.441,64,3.458,77,2.374,78,4.131,91,1.782,126,2.347,151,3.256,169,2.126,171,1.914,176,1.719,211,3.029,218,1.842,223,3.52,225,2.949,242,2.117,335,1.92,365,2.991,379,1.562,388,1.874,438,1.897,490,4.347,502,2.587,505,3.488,518,3.196,522,2.441,526,2.217,534,2.956,601,3.068,613,2.806,641,2.535,645,2.29,703,3.736,709,2.361,745,3.111,907,2.29,922,2.387,924,2.349,967,3.916,1111,4.75,1118,2.956,1407,3.261,1626,8.179,1675,3.157,1741,3.261,1748,6.08,1789,3.547,2799,6.053,2803,8.51,2804,6.9,2805,6.477,2806,2.806,2807,4.116,2808,4.116,2809,6.477,2810,6.477,2811,5.581,2812,4.116,2813,4.116,2814,4.116,2815,4.116,2816,4.116,2817,4.116,2818,2.471,2819,6.477]],["component/76",[11,0.319,388,0.705]],["title/77-1",[1974,63.206]],["name/77-1",[]],["text/77-1",[]],["component/77-1",[]],["title/77-2",[1974,63.206]],["name/77-2",[]],["text/77-2",[]],["component/77-2",[]],["title/77-3",[655,35.081,1974,50.339]],["name/77-3",[]],["text/77-3",[]],["component/77-3",[]],["title/77-4",[1974,50.339,2027,58.249]],["name/77-4",[]],["text/77-4",[]],["component/77-4",[]],["title/77",[448,47.701]],["name/77",[448,1.42]],["text/77",[5,3.521,9,1.216,11,0.611,13,1.272,22,1.332,25,1.629,33,1.685,52,1.691,60,1.761,65,2.41,68,2.779,75,3.754,81,1.34,89,2.883,95,2.51,96,0.997,109,1.909,117,2.024,124,1.971,128,1.88,130,1.816,133,2.306,164,1.685,169,1.533,176,1.24,178,2.116,181,2.46,216,1.592,222,1.11,231,2.717,233,1.482,261,2.674,279,1.317,382,1.352,388,1.352,416,2.362,431,1.805,432,1.368,448,6.707,455,2.47,496,1.828,501,2.629,518,1.185,546,1.344,654,3.32,655,5.45,744,3.776,746,4.317,799,2.109,958,1.629,1057,3.528,1158,1.805,1302,1.793,1309,2.158,1322,7.041,1382,3.269,1384,2.63,1743,2.559,1752,4.28,1814,2.133,1954,4.165,1963,2.244,1974,7.575,1975,4.087,1976,7.038,2022,2.044,2026,2.825,2027,4.177,2028,2.825,2037,2.497,2038,2.497,2039,2.497,2507,2.109,2709,2.395,2775,4.28]],["component/77",[11,0.319,388,0.705]],["title/78",[541,35.613]],["name/78",[541,1.06]],["text/78",[5,3.163,11,1.795,24,2.792,52,2.082,60,3.627,65,4.23,68,2.654,78,6.481,94,5.112,96,2.053,128,3.871,147,2.976,307,3.507,321,1.983,379,3.308,388,2.784,401,2.826,425,4.444,431,3.717,432,5.105,448,4.782,455,3.04,490,4.212,501,3.236,559,5.031,560,3.741,703,4.067,721,5.031,1158,6.177,1626,6.5,1650,4.499,1666,2.12,1744,4.933,1878,4.094,2794,5.031,2795,5.594]],["component/78",[11,0.319,388,0.705]],["title/79-1",[105,30.154]],["name/79-1",[]],["text/79-1",[]],["component/79-1",[]],["title/79-2",[2820,79.574]],["name/79-2",[]],["text/79-2",[]],["component/79-2",[]],["title/79-3",[2821,79.574]],["name/79-3",[]],["text/79-3",[]],["component/79-3",[]],["title/79",[11,14.261,51,35.215]],["name/79",[51,1.316]],["text/79",[2,0.551,3,1.015,4,1.389,5,1.873,6,2.639,11,1.497,12,2.752,18,1.348,24,0.804,36,1.657,46,0.924,51,4.868,63,1.97,64,0.94,74,0.579,84,1.28,91,0.762,93,0.756,95,0.69,96,0.591,105,2.988,109,1.213,112,2.233,114,2.699,116,1.861,117,1.201,123,1.678,133,0.634,135,3.392,137,0.577,147,1.537,149,1.584,169,0.91,176,2.182,178,1.043,181,3.782,182,1.237,186,2.459,207,0.84,209,1.005,221,2.335,222,1.18,225,0.802,226,0.593,244,1.296,266,1.486,286,0.879,319,2.353,321,1.024,334,0.869,352,2.501,358,1.851,360,2.735,363,2.013,401,1.459,417,3.262,432,0.812,434,1.077,435,1.988,475,1.092,483,1.313,490,0.73,492,1.765,509,0.726,518,0.703,527,1.265,549,0.869,551,1.077,552,2.421,596,1.704,629,1.159,634,1.099,644,1.296,645,2.386,648,1.179,667,1.132,668,1.676,674,1.159,725,1.676,745,1.331,763,1.051,780,0.879,891,2.8,909,3.54,922,1.021,968,0.695,981,1.56,1000,1.611,1007,2.267,1120,0.953,1123,1.449,1127,1.28,1140,1.481,1161,3.363,1166,1.676,1170,1.159,1253,1.313,1310,1.107,1331,1.611,1380,2.696,1390,2.654,1481,1.518,1517,1.611,1586,1.481,1626,2.353,1695,1.099,1741,1.395,1751,1.676,1779,1.481,1892,1.518,2032,1.351,2067,1.676,2106,1.481,2294,1.372,2472,1.421,2572,1.481,2820,8.208,2821,3.924,2822,1.761,2823,5.227,2824,3.157,2825,1.761,2826,1.761,2827,3.157,2828,3.157,2829,1.761,2830,1.761,2831,3.157,2832,1.761,2833,1.761,2834,3.157,2835,1.761,2836,1.313,2837,3.157,2838,3.157,2839,1.761,2840,1.761,2841,1.395,2842,1.761,2843,3.157,2844,1.761,2845,3.157,2846,1.761,2847,1.761,2848,1.611,2849,4.289,2850,1.761,2851,1.449,2852,1.449]],["component/79",[11,0.319,176,0.647]],["title/80-1",[552,53.124,1242,42.373]],["name/80-1",[]],["text/80-1",[]],["component/80-1",[]],["title/80",[]],["name/80",[2853,1.51]],["text/80",[11,1.869,109,3.489,220,3.108,286,4.531,321,2.945,379,3.445,514,3.649,526,4.89,551,5.555,571,5.236,698,3.354,971,8.044,1039,3.497,1295,7.325,1566,8.044,2854,8.308,2855,8.308]],["component/80",[11,0.319,176,0.647]],["title/81-1",[149,21.259,708,25.823,1215,23.97]],["name/81-1",[]],["text/81-1",[]],["component/81-1",[]],["title/81-2",[552,53.124,1242,42.373]],["name/81-2",[]],["text/81-2",[]],["component/81-2",[]],["title/81",[126,25.488]],["name/81",[126,0.759]],["text/81",[11,2.23,96,2.826,109,3.235,149,3.11,220,2.882,286,4.201,321,2.73,379,3.194,514,3.383,526,4.534,551,5.15,571,4.854,698,3.11,708,3.777,971,7.457,993,4.33,1039,3.242,1215,3.506,1295,6.791,1566,7.457,2854,7.702,2855,7.702]],["component/81",[11,0.319,176,0.647]],["title/82",[9,14.093,11,11.848,176,24.03]],["name/82",[205,1.287]],["text/82",[3,3.982,11,2.151,176,4.363,490,4.331,550,6.877,1758,8.598]],["component/82",[11,0.319,176,0.647]],["title/83-1",[968,34.315]],["name/83-1",[]],["text/83-1",[]],["component/83-1",[]],["title/83-2",[11,11.848,51,29.259,234,30.206]],["name/83-2",[]],["text/83-2",[]],["component/83-2",[]],["title/83",[2,27.205]],["name/83",[2,0.81]],["text/83",[2,3.294,3,3.073,9,2.747,11,2.561,12,4.333,24,2.505,48,2.368,51,4.098,71,4.345,80,2.279,91,2.374,105,1.902,109,3.097,166,2.559,176,4.397,181,2.38,208,2.407,218,2.454,221,1.761,234,2.879,235,2.381,307,3.146,318,3.473,387,2.768,401,2.535,405,2.634,432,2.527,501,2.903,549,2.708,645,3.052,927,2.867,968,4.628,1037,3.525,1310,3.448,1311,3.13,2792,3.58,2856,4.859]],["component/83",[11,0.319,176,0.647]],["title/84-1",[222,25.902,1644,48.663]],["name/84-1",[]],["text/84-1",[]],["component/84-1",[]],["title/84-2",[135,40.572]],["name/84-2",[]],["text/84-2",[]],["component/84-2",[]],["title/84-3",[490,36.047]],["name/84-3",[]],["text/84-3",[]],["component/84-3",[]],["title/84-4",[13,37.252]],["name/84-4",[]],["text/84-4",[]],["component/84-4",[]],["title/84-5",[89,33.495]],["name/84-5",[]],["text/84-5",[]],["component/84-5",[]],["title/84",[1644,61.102]],["name/84",[1644,1.819]],["text/84",[3,2.054,5,1.259,9,0.99,11,0.833,13,3.391,22,1.815,42,3.401,76,5.256,89,2.46,96,1.357,109,1.554,135,4.568,137,3.41,163,3.102,172,2.056,176,3.306,218,3.542,221,1.299,247,3.057,257,2.123,260,4.899,320,1.636,382,1.841,412,3.262,425,2.939,447,3.704,448,3.503,455,2.011,471,1.82,484,2.474,490,4.517,539,2.507,550,2.661,560,2.474,563,2.114,577,2.905,657,1.996,698,1.494,703,3.693,765,3.582,788,2.32,936,3.485,966,1.955,982,3.102,991,2.371,1010,5.844,1295,5.153,1322,2.732,1384,3.582,1613,3.262,1644,7.657,1695,2.524,1738,4.976,1744,3.262,1748,2.707,2031,3.015,2198,5.844,2544,2.64,2848,5.844,2857,4.044,2858,4.044,2859,5.844,2860,3.7,2861,4.044,2862,4.044,2863,4.044,2864,4.044,2865,4.044,2866,4.044,2867,4.044,2868,4.044]],["component/84",[11,0.319,176,0.647]],["title/85-1",[447,50.428]],["name/85-1",[]],["text/85-1",[]],["component/85-1",[]],["title/85-2",[2031,64.834]],["name/85-2",[]],["text/85-2",[]],["component/85-2",[]],["title/85-3",[523,40.197]],["name/85-3",[]],["text/85-3",[]],["component/85-3",[]],["title/85-4",[754,60.472]],["name/85-4",[]],["text/85-4",[]],["component/85-4",[]],["title/85-5",[523,40.197]],["name/85-5",[]],["text/85-5",[]],["component/85-5",[]],["title/85-6",[907,48.388]],["name/85-6",[]],["text/85-6",[]],["component/85-6",[]],["title/85-7",[448,47.701]],["name/85-7",[]],["text/85-7",[]],["component/85-7",[]],["title/85",[746,50.154]],["name/85",[746,1.493]],["text/85",[3,0.984,5,2.374,6,1.207,11,1.048,13,0.728,18,1.601,22,2.285,25,0.933,43,1.372,45,2.251,56,1.347,64,2.225,74,1.006,77,0.981,80,0.707,82,1.484,89,0.655,93,1.79,95,0.667,96,1.027,109,0.654,118,1.034,122,1.633,126,1.492,133,0.612,134,1.324,137,2.333,147,1.489,155,0.865,169,1.58,175,0.942,176,4.662,178,1.011,181,1.734,204,0.871,208,0.746,218,0.761,230,3.351,233,0.849,237,0.928,248,2.149,266,3.081,275,1.009,335,0.793,362,1.507,388,0.774,401,0.786,419,0.572,421,1.251,442,2.937,447,5.302,448,3.588,462,1.479,469,1.171,471,0.765,490,3.346,493,1.325,505,1.647,507,0.723,509,0.701,510,1.839,518,0.679,523,0.786,526,1.647,532,1.776,534,2.197,539,2.584,542,0.781,545,3.906,550,5.02,560,1.871,563,0.889,573,1.251,596,0.676,606,1.556,607,1.556,641,1.047,677,1.489,680,1.027,703,3.322,744,2.458,746,3.387,753,1.119,754,4.549,755,2.172,764,1.183,774,1.251,788,0.976,901,1.465,907,4.244,932,2.106,965,1.556,969,1.015,991,0.997,1006,0.904,1023,1.465,1033,1.021,1045,2.344,1144,1.183,1158,1.034,1238,0.981,1310,1.069,1316,1.399,1322,6.86,1341,2.636,1380,1.069,1407,1.347,1413,1.372,1483,2.636,1563,1.465,1600,1.347,1644,3.578,1699,1.183,1712,2.251,1724,1.556,1725,1.556,1976,4.814,2022,1.171,2027,1.43,2031,4.378,2032,2.346,2033,2.346,2037,2.572,2038,1.43,2039,2.572,2112,1.618,2156,1.507,2275,1.325,2341,1.268,2544,1.11,2667,3.108,2803,1.465,2859,1.556,2869,1.701,2870,1.701,2871,1.701,2872,1.701,2873,1.701,2874,1.701,2875,1.701,2876,1.701,2877,1.701,2878,1.701,2879,1.701,2880,1.701,2881,3.059,2882,1.701,2883,1.701,2884,1.701,2885,1.701,2886,1.701,2887,1.701,2888,4.169]],["component/85",[11,0.319,176,0.647]],["title/86",[541,35.613]],["name/86",[541,1.06]],["text/86",[3,1.364,6,2.617,11,0.873,30,1.663,74,1.395,89,2.554,96,1.424,109,1.63,137,3.636,143,5.715,175,2.349,176,4.929,230,2.792,233,2.117,248,2.98,286,2.117,333,2.051,419,1.427,447,2.46,448,6.087,462,2.051,490,2.749,493,3.305,507,2.819,508,2.338,509,3.368,510,1.872,526,4.397,532,3.479,552,3.254,563,4.268,564,3.361,568,3.162,569,3.162,596,1.685,703,1.979,746,4.709,747,2.892,753,2.792,774,6.008,885,3.162,909,1.674,1045,1.304,1322,4.48,1360,2.305,1758,3.491,1976,6.793,2031,3.162,2032,5.086,2033,3.254,2799,3.206,2889,6.068,2890,3.881,2891,3.881,2892,3.655,2893,4.242,2894,4.242,2895,3.655,2896,3.655,2897,3.013,2898,3.013]],["component/86",[11,0.319,176,0.647]],["title/87-1",[2022,59.872]],["name/87-1",[]],["text/87-1",[]],["component/87-1",[]],["title/87-2",[747,59.299]],["name/87-2",[]],["text/87-2",[]],["component/87-2",[]],["title/87-3",[2892,74.941]],["name/87-3",[]],["text/87-3",[]],["component/87-3",[]],["title/87",[563,45.46]],["name/87",[563,1.353]],["text/87",[3,2.262,5,1.726,6,1.338,9,0.83,11,1.141,13,1.452,74,1.115,82,2.689,89,2.708,109,2.703,134,2.4,135,2.586,137,3.324,143,2.922,154,1.896,176,4.917,178,2.324,181,1.637,207,1.618,222,2.073,248,2.382,275,3.288,286,1.692,321,2.281,333,1.639,350,2.358,379,1.287,419,1.14,439,3.437,448,4.455,471,1.526,490,2.915,507,1.441,508,1.868,509,2.287,510,3.103,514,1.362,516,4.013,518,2.212,522,2.011,526,1.826,532,2.362,539,2.102,550,2.232,563,5.025,564,2.686,568,2.528,569,2.528,575,3.414,596,2.794,674,2.232,698,1.253,703,1.582,708,1.521,717,2.735,723,3.349,746,3.197,747,2.312,774,4.079,932,2.334,1048,3.102,1130,2.213,1644,6.292,1758,2.79,1892,2.922,2322,3.102,2667,2.528,2799,2.563,2806,3.78,2860,3.102,2889,3.102,2890,5.072,2891,3.102,2892,2.922,2897,2.408,2898,2.408,2899,3.391,2900,3.391,2901,3.391,2902,3.004]],["component/87",[11,0.319,176,0.647]],["title/88-1",[105,30.154]],["name/88-1",[]],["text/88-1",[]],["component/88-1",[]],["title/88-2",[2820,79.574]],["name/88-2",[]],["text/88-2",[]],["component/88-2",[]],["title/88-3",[2821,79.574]],["name/88-3",[]],["text/88-3",[]],["component/88-3",[]],["title/88",[11,14.261,51,35.215]],["name/88",[51,1.316]],["text/88",[2,0.551,3,1.015,4,1.389,5,1.873,6,2.639,11,1.497,12,2.752,18,1.348,24,0.804,36,1.657,46,0.924,51,4.868,63,1.97,64,0.94,74,0.579,84,1.28,91,0.762,93,0.756,95,0.69,96,0.591,105,2.988,109,1.213,112,2.233,114,2.699,116,1.861,117,1.201,123,1.678,133,0.634,135,3.392,137,0.577,147,1.537,149,1.584,169,0.91,176,2.182,178,1.043,181,3.782,182,1.237,186,2.459,207,0.84,209,1.005,221,2.335,222,1.18,225,0.802,226,0.593,244,1.296,266,1.486,286,0.879,319,2.353,321,1.024,334,0.869,352,2.501,358,1.851,360,2.735,363,2.013,401,1.459,417,3.262,432,0.812,434,1.077,435,1.988,475,1.092,483,1.313,490,0.73,492,1.765,509,0.726,518,0.703,527,1.265,549,0.869,551,1.077,552,2.421,596,1.704,629,1.159,634,1.099,644,1.296,645,2.386,648,1.179,667,1.132,668,1.676,674,1.159,725,1.676,745,1.331,763,1.051,780,0.879,891,2.8,909,3.54,922,1.021,968,0.695,981,1.56,1000,1.611,1007,2.267,1120,0.953,1123,1.449,1127,1.28,1140,1.481,1161,3.363,1166,1.676,1170,1.159,1253,1.313,1310,1.107,1331,1.611,1380,2.696,1390,2.654,1481,1.518,1517,1.611,1586,1.481,1626,2.353,1695,1.099,1741,1.395,1751,1.676,1779,1.481,1892,1.518,2032,1.351,2067,1.676,2106,1.481,2294,1.372,2472,1.421,2572,1.481,2820,8.208,2821,3.924,2822,1.761,2823,5.227,2824,3.157,2825,1.761,2826,1.761,2827,3.157,2828,3.157,2829,1.761,2830,1.761,2831,3.157,2832,1.761,2833,1.761,2834,3.157,2835,1.761,2836,1.313,2837,3.157,2838,3.157,2839,1.761,2840,1.761,2841,1.395,2842,1.761,2843,3.157,2844,1.761,2845,3.157,2846,1.761,2847,1.761,2848,1.611,2849,4.289,2850,1.761,2851,1.449,2852,1.449]],["component/88",[11,0.319,176,0.647]],["title/89-1",[552,53.124,1242,42.373]],["name/89-1",[]],["text/89-1",[]],["component/89-1",[]],["title/89",[]],["name/89",[2853,1.51]],["text/89",[11,1.869,109,3.489,220,3.108,286,4.531,321,2.945,379,3.445,514,3.649,526,4.89,551,5.555,571,5.236,698,3.354,971,8.044,1039,3.497,1295,7.325,1566,8.044,2854,8.308,2855,8.308]],["component/89",[11,0.319,176,0.647]],["title/90-1",[149,21.259,708,25.823,1215,23.97]],["name/90-1",[]],["text/90-1",[]],["component/90-1",[]],["title/90-2",[552,53.124,1242,42.373]],["name/90-2",[]],["text/90-2",[]],["component/90-2",[]],["title/90",[126,25.488]],["name/90",[126,0.759]],["text/90",[11,2.23,96,2.826,109,3.235,149,3.11,220,2.882,286,4.201,321,2.73,379,3.194,514,3.383,526,4.534,551,5.15,571,4.854,698,3.11,708,3.777,971,7.457,993,4.33,1039,3.242,1215,3.506,1295,6.791,1566,7.457,2854,7.702,2855,7.702]],["component/90",[11,0.319,176,0.647]],["title/91",[9,14.093,11,11.848,176,24.03]],["name/91",[205,1.287]],["text/91",[3,3.982,11,2.151,176,4.363,490,4.331,550,6.877,1758,8.598]],["component/91",[11,0.319,176,0.647]],["title/92-1",[968,34.315]],["name/92-1",[]],["text/92-1",[]],["component/92-1",[]],["title/92-2",[11,11.848,51,29.259,234,30.206]],["name/92-2",[]],["text/92-2",[]],["component/92-2",[]],["title/92",[2,27.205]],["name/92",[2,0.81]],["text/92",[2,3.294,3,3.073,9,2.747,11,2.561,12,4.333,24,2.505,48,2.368,51,4.098,71,4.345,80,2.279,91,2.374,105,1.902,109,3.097,166,2.559,176,4.397,181,2.38,208,2.407,218,2.454,221,1.761,234,2.879,235,2.381,307,3.146,318,3.473,387,2.768,401,2.535,405,2.634,432,2.527,501,2.903,549,2.708,645,3.052,927,2.867,968,4.628,1037,3.525,1310,3.448,1311,3.13,2792,3.58,2856,4.859]],["component/92",[11,0.319,176,0.647]],["title/93-1",[222,25.902,1644,48.663]],["name/93-1",[]],["text/93-1",[]],["component/93-1",[]],["title/93-2",[135,40.572]],["name/93-2",[]],["text/93-2",[]],["component/93-2",[]],["title/93-3",[490,36.047]],["name/93-3",[]],["text/93-3",[]],["component/93-3",[]],["title/93-4",[13,37.252]],["name/93-4",[]],["text/93-4",[]],["component/93-4",[]],["title/93-5",[89,33.495]],["name/93-5",[]],["text/93-5",[]],["component/93-5",[]],["title/93",[1644,61.102]],["name/93",[1644,1.819]],["text/93",[3,2.054,5,1.259,9,0.99,11,0.833,13,3.391,22,1.815,42,3.401,76,5.256,89,2.46,96,1.357,109,1.554,135,4.568,137,3.41,163,3.102,172,2.056,176,3.306,218,3.542,221,1.299,247,3.057,257,2.123,260,4.899,320,1.636,382,1.841,412,3.262,425,2.939,447,3.704,448,3.503,455,2.011,471,1.82,484,2.474,490,4.517,539,2.507,550,2.661,560,2.474,563,2.114,577,2.905,657,1.996,698,1.494,703,3.693,765,3.582,788,2.32,936,3.485,966,1.955,982,3.102,991,2.371,1010,5.844,1295,5.153,1322,2.732,1384,3.582,1613,3.262,1644,7.657,1695,2.524,1738,4.976,1744,3.262,1748,2.707,2031,3.015,2198,5.844,2544,2.64,2848,5.844,2857,4.044,2858,4.044,2859,5.844,2860,3.7,2861,4.044,2862,4.044,2863,4.044,2864,4.044,2865,4.044,2866,4.044,2867,4.044,2868,4.044]],["component/93",[11,0.319,176,0.647]],["title/94-1",[447,50.428]],["name/94-1",[]],["text/94-1",[]],["component/94-1",[]],["title/94-2",[2031,64.834]],["name/94-2",[]],["text/94-2",[]],["component/94-2",[]],["title/94-3",[523,40.197]],["name/94-3",[]],["text/94-3",[]],["component/94-3",[]],["title/94-4",[754,60.472]],["name/94-4",[]],["text/94-4",[]],["component/94-4",[]],["title/94-5",[523,40.197]],["name/94-5",[]],["text/94-5",[]],["component/94-5",[]],["title/94-6",[907,48.388]],["name/94-6",[]],["text/94-6",[]],["component/94-6",[]],["title/94-7",[448,47.701]],["name/94-7",[]],["text/94-7",[]],["component/94-7",[]],["title/94",[746,50.154]],["name/94",[746,1.493]],["text/94",[3,0.984,5,2.374,6,1.207,11,1.048,13,0.728,18,1.601,22,2.285,25,0.933,43,1.372,45,2.251,56,1.347,64,2.225,74,1.006,77,0.981,80,0.707,82,1.484,89,0.655,93,1.79,95,0.667,96,1.027,109,0.654,118,1.034,122,1.633,126,1.492,133,0.612,134,1.324,137,2.333,147,1.489,155,0.865,169,1.58,175,0.942,176,4.662,178,1.011,181,1.734,204,0.871,208,0.746,218,0.761,230,3.351,233,0.849,237,0.928,248,2.149,266,3.081,275,1.009,335,0.793,362,1.507,388,0.774,401,0.786,419,0.572,421,1.251,442,2.937,447,5.302,448,3.588,462,1.479,469,1.171,471,0.765,490,3.346,493,1.325,505,1.647,507,0.723,509,0.701,510,1.839,518,0.679,523,0.786,526,1.647,532,1.776,534,2.197,539,2.584,542,0.781,545,3.906,550,5.02,560,1.871,563,0.889,573,1.251,596,0.676,606,1.556,607,1.556,641,1.047,677,1.489,680,1.027,703,3.322,744,2.458,746,3.387,753,1.119,754,4.549,755,2.172,764,1.183,774,1.251,788,0.976,901,1.465,907,4.244,932,2.106,965,1.556,969,1.015,991,0.997,1006,0.904,1023,1.465,1033,1.021,1045,2.344,1144,1.183,1158,1.034,1238,0.981,1310,1.069,1316,1.399,1322,6.86,1341,2.636,1380,1.069,1407,1.347,1413,1.372,1483,2.636,1563,1.465,1600,1.347,1644,3.578,1699,1.183,1712,2.251,1724,1.556,1725,1.556,1976,4.814,2022,1.171,2027,1.43,2031,4.378,2032,2.346,2033,2.346,2037,2.572,2038,1.43,2039,2.572,2112,1.618,2156,1.507,2275,1.325,2341,1.268,2544,1.11,2667,3.108,2803,1.465,2859,1.556,2869,1.701,2870,1.701,2871,1.701,2872,1.701,2873,1.701,2874,1.701,2875,1.701,2876,1.701,2877,1.701,2878,1.701,2879,1.701,2880,1.701,2881,3.059,2882,1.701,2883,1.701,2884,1.701,2885,1.701,2886,1.701,2887,1.701,2888,4.169]],["component/94",[11,0.319,176,0.647]],["title/95",[541,35.613]],["name/95",[541,1.06]],["text/95",[3,1.364,6,2.617,11,0.873,30,1.663,74,1.395,89,2.554,96,1.424,109,1.63,137,3.636,143,5.715,175,2.349,176,4.929,230,2.792,233,2.117,248,2.98,286,2.117,333,2.051,419,1.427,447,2.46,448,6.087,462,2.051,490,2.749,493,3.305,507,2.819,508,2.338,509,3.368,510,1.872,526,4.397,532,3.479,552,3.254,563,4.268,564,3.361,568,3.162,569,3.162,596,1.685,703,1.979,746,4.709,747,2.892,753,2.792,774,6.008,885,3.162,909,1.674,1045,1.304,1322,4.48,1360,2.305,1758,3.491,1976,6.793,2031,3.162,2032,5.086,2033,3.254,2799,3.206,2889,6.068,2890,3.881,2891,3.881,2892,3.655,2893,4.242,2894,4.242,2895,3.655,2896,3.655,2897,3.013,2898,3.013]],["component/95",[11,0.319,176,0.647]],["title/96-1",[2022,59.872]],["name/96-1",[]],["text/96-1",[]],["component/96-1",[]],["title/96-2",[747,59.299]],["name/96-2",[]],["text/96-2",[]],["component/96-2",[]],["title/96-3",[2892,74.941]],["name/96-3",[]],["text/96-3",[]],["component/96-3",[]],["title/96",[563,45.46]],["name/96",[563,1.353]],["text/96",[3,2.262,5,1.726,6,1.338,9,0.83,11,1.141,13,1.452,74,1.115,82,2.689,89,2.708,109,2.703,134,2.4,135,2.586,137,3.324,143,2.922,154,1.896,176,4.917,178,2.324,181,1.637,207,1.618,222,2.073,248,2.382,275,3.288,286,1.692,321,2.281,333,1.639,350,2.358,379,1.287,419,1.14,439,3.437,448,4.455,471,1.526,490,2.915,507,1.441,508,1.868,509,2.287,510,3.103,514,1.362,516,4.013,518,2.212,522,2.011,526,1.826,532,2.362,539,2.102,550,2.232,563,5.025,564,2.686,568,2.528,569,2.528,575,3.414,596,2.794,674,2.232,698,1.253,703,1.582,708,1.521,717,2.735,723,3.349,746,3.197,747,2.312,774,4.079,932,2.334,1048,3.102,1130,2.213,1644,6.292,1758,2.79,1892,2.922,2322,3.102,2667,2.528,2799,2.563,2806,3.78,2860,3.102,2889,3.102,2890,5.072,2891,3.102,2892,2.922,2897,2.408,2898,2.408,2899,3.391,2900,3.391,2901,3.391,2902,3.004]],["component/96",[11,0.319,176,0.647]],["title/97-1",[52,23.584,139,24.374]],["name/97-1",[]],["text/97-1",[]],["component/97-1",[]],["title/97-2",[1045,21.29,1666,24.015]],["name/97-2",[]],["text/97-2",[]],["component/97-2",[]],["title/97",[]],["name/97",[2853,1.51]],["text/97",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,195,4.566,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2903,5.461,2904,3.223,2905,3.223,2906,3.62]],["component/97",[195,1.288]],["title/98-1",[149,21.259,708,25.823,1215,23.97]],["name/98-1",[]],["text/98-1",[]],["component/98-1",[]],["title/98-2",[52,23.584,139,24.374]],["name/98-2",[]],["text/98-2",[]],["component/98-2",[]],["title/98-3",[1045,21.29,1666,24.015]],["name/98-3",[]],["text/98-3",[]],["component/98-3",[]],["title/98-4",[220,23.711,1039,26.676]],["name/98-4",[]],["text/98-4",[]],["component/98-4",[]],["title/98-5",[2907,44.56]],["name/98-5",[]],["text/98-5",[]],["component/98-5",[]],["title/98-6",[2908,42.932]],["name/98-6",[]],["text/98-6",[]],["component/98-6",[]],["title/98",[126,25.488]],["name/98",[126,0.759]],["text/98",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,195,4.679,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2903,4.504,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2914,4.378,2915,2.766,2916,2.899]],["component/98",[195,1.288]],["title/99-1",[2907,44.56]],["name/99-1",[]],["text/99-1",[]],["component/99-1",[]],["title/99-2",[2908,42.932]],["name/99-2",[]],["text/99-2",[]],["component/99-2",[]],["title/99",[]],["name/99",[2917,1.545]],["text/99",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,195,4.692,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2903,3.76,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2914,5.526,2915,3.491,2916,3.659]],["component/99",[195,1.288]],["title/100-1",[222,25.902,226,23.333]],["name/100-1",[]],["text/100-1",[]],["component/100-1",[]],["title/100-2",[105,30.154]],["name/100-2",[]],["text/100-2",[]],["component/100-2",[]],["title/100",[9,12.054,11,10.134,14,16.942,195,23.181]],["name/100",[205,1.287]],["text/100",[3,2.495,9,2.819,11,2.37,14,3.535,18,2.439,26,3.816,30,3.041,33,4.404,80,3.223,96,2.604,105,2.69,195,5.422,222,2.901,226,2.613,235,3.367,261,3.239,435,3.597,909,3.061,941,4.474,1255,6.524,1256,6.258,1257,6.044,2914,5.783]],["component/100",[195,1.288]],["title/101-1",[968,34.315]],["name/101-1",[]],["text/101-1",[]],["component/101-1",[]],["title/101-2",[105,30.154]],["name/101-2",[]],["text/101-2",[]],["component/101-2",[]],["title/101-3",[11,11.848,51,29.259,234,30.206]],["name/101-3",[]],["text/101-3",[]],["component/101-3",[]],["title/101",[2,27.205]],["name/101",[2,0.81]],["text/101",[2,2.993,3,2.866,4,3.073,5,1.045,9,2.582,11,2.498,12,3.323,13,1.438,14,2.779,24,1.533,36,1.762,51,1.707,57,1.529,80,1.395,91,3.496,95,1.316,105,3.318,109,2.684,116,1.98,136,1.385,137,1.1,149,1.24,181,3.316,195,5.14,208,1.473,209,1.916,218,1.502,220,1.149,221,2.593,234,1.762,235,2.387,282,1.958,315,1.926,318,2.126,387,1.694,401,1.552,405,1.613,432,3.219,475,2.082,501,1.777,546,1.52,565,2.041,596,1.334,634,2.096,645,1.868,887,2.412,891,3.59,909,1.325,927,1.755,968,3.776,1037,2.158,1088,1.557,1120,1.817,1161,3.511,1310,3.457,1311,1.916,1326,1.969,1451,2.471,2792,2.192,2911,1.581,2913,1.581,2914,4.1,2915,1.581,2918,3.358,2919,3.358,2920,3.358,2921,3.072]],["component/101",[195,1.288]],["title/102-1",[30,13.453,155,17.451,195,16.165,320,13.89,548,17.519,2462,29.578,2922,34.328]],["name/102-1",[]],["text/102-1",[]],["component/102-1",[]],["title/102-2",[172,29.259,176,24.03,195,27.102]],["name/102-2",[]],["text/102-2",[]],["component/102-2",[]],["title/102-3",[18,18.089,195,27.102,1112,43.497]],["name/102-3",[]],["text/102-3",[]],["component/102-3",[]],["title/102-4",[389,41.355]],["name/102-4",[]],["text/102-4",[]],["component/102-4",[]],["title/102-5",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/102-5",[]],["text/102-5",[]],["component/102-5",[]],["title/102-6",[126,20.299,1032,30.391]],["name/102-6",[]],["text/102-6",[]],["component/102-6",[]],["title/102-7",[220,23.711,1039,26.676]],["name/102-7",[]],["text/102-7",[]],["component/102-7",[]],["title/102-8",[195,27.102,272,31.864,1396,35.676]],["name/102-8",[]],["text/102-8",[]],["component/102-8",[]],["title/102-9",[5,21.563,195,32.619]],["name/102-9",[]],["text/102-9",[]],["component/102-9",[]],["title/102-10",[389,41.355]],["name/102-10",[]],["text/102-10",[]],["component/102-10",[]],["title/102-11",[437,49.191,596,27.515]],["name/102-11",[]],["text/102-11",[]],["component/102-11",[]],["title/102-12",[399,26.009,438,31.917]],["name/102-12",[]],["text/102-12",[]],["component/102-12",[]],["title/102-13",[399,26.009,439,42.939]],["name/102-13",[]],["text/102-13",[]],["component/102-13",[]],["title/102",[541,35.613]],["name/102",[541,1.06]],["text/102",[2,0.334,3,0.343,4,0.243,5,1.913,6,1.253,8,0.2,9,0.488,11,0.22,18,1.211,20,0.7,22,1.259,23,0.38,24,0.706,28,0.285,30,0.418,36,0.29,45,0.407,48,1.041,50,0.553,62,0.928,64,1.064,68,0.671,73,0.967,74,1.952,80,0.443,81,0.9,82,1.17,89,1.081,93,0.856,94,0.625,95,0.606,96,0.358,105,0.37,106,0.364,107,0.314,109,1.22,112,0.456,118,0.336,122,0.295,123,0.294,125,0.818,126,1.388,130,0.652,133,1.01,134,1.525,135,0.498,136,0.228,137,2.465,147,0.269,149,0.891,150,0.76,154,0.596,155,1.959,164,0.314,166,0.93,169,0.798,170,1.204,171,0.719,172,1.614,173,0.431,175,0.591,176,1.007,178,0.511,181,3.009,182,1.086,194,1.336,195,4.169,208,0.468,214,0.577,216,0.829,217,0.538,218,0.247,220,0.826,221,0.901,222,0.399,223,0.3,225,0.486,226,1.596,229,0.622,235,0.463,236,0.37,242,0.549,247,0.418,250,0.293,251,0.319,253,0.446,261,0.231,266,1.321,267,0.465,269,0.412,272,2.305,286,0.276,287,0.64,307,0.317,309,0.768,310,0.364,314,0.32,320,0.432,321,0.346,325,1.035,326,1.185,330,0.455,331,0.795,333,0.267,334,0.273,335,0.721,351,0.355,354,0.845,360,0.352,365,0.402,374,0.266,378,0.364,379,0.405,381,0.37,382,0.486,384,1.608,386,0.377,389,0.507,391,1.51,399,0.4,401,0.493,411,0.742,413,0.615,417,0.345,419,1.068,422,1.54,428,0.775,434,0.338,435,0.256,437,5.984,438,0.712,439,1.969,447,0.32,455,0.53,462,1.166,471,0.48,492,0.596,502,0.347,505,0.298,507,1.35,508,0.852,509,1.717,510,2.524,512,1.733,514,1.127,516,1.137,518,2.096,520,0.829,522,0.328,523,0.493,526,0.298,529,0.367,532,1.196,535,0.314,537,0.685,541,0.226,543,1.416,546,0.902,548,2.417,549,0.273,558,1.086,560,0.338,561,0.455,562,0.438,563,2.476,568,0.412,569,0.412,571,1.391,575,1.485,582,0.34,590,0.58,596,1.261,600,2.056,617,0.367,620,0.455,628,1.323,630,0.253,640,0.811,641,0.34,642,3.24,643,1.931,648,0.37,657,2.2,674,0.364,677,1.366,690,2.141,694,0.388,698,0.736,709,0.887,717,0.86,735,0.407,748,0.358,758,0.407,772,0.324,780,1.204,785,0.3,788,0.317,803,0.37,885,0.412,899,0.352,909,1.253,915,0.38,924,0.315,927,0.289,946,0.431,949,0.307,950,0.361,958,0.303,961,0.418,966,0.964,968,0.786,974,0.476,982,0.424,983,0.58,986,0.424,997,0.906,1006,0.294,1032,0.678,1033,1.684,1039,0.929,1052,1.579,1088,0.494,1111,0.328,1120,0.299,1122,0.455,1127,0.402,1143,0.418,1144,0.384,1158,1.212,1205,0.648,1215,0.23,1243,0.612,1247,0.727,1252,0.993,1256,0.86,1257,0.431,1282,0.795,1304,1.359,1321,0.347,1334,0.476,1382,0.364,1386,0.332,1388,0.412,1390,0.465,1393,0.424,1396,0.661,1416,0.438,1427,0.446,1444,0.49,1499,0.49,1501,0.407,1502,0.438,1578,0.49,1638,0.714,1699,0.384,1718,0.476,1733,0.919,1747,0.49,1796,0.795,1802,0.919,1808,1.486,1814,0.397,1834,0.397,1849,1.645,1853,2.561,1869,0.424,1889,0.324,1950,0.49,1953,0.897,2036,0.49,2088,0.338,2123,1.506,2165,0.393,2200,0.49,2284,0.919,2294,0.431,2325,0.455,2341,0.412,2470,1.168,2494,0.393,2507,0.757,2508,0.431,2551,0.438,2607,0.438,2624,0.455,2667,0.412,2806,0.377,2811,0.919,2818,0.332,2851,0.455,2897,2.255,2898,1.416,2909,0.667,2923,0.976,2924,0.553,2925,0.553,2926,0.976,2927,1.717,2928,0.795,2929,0.407,2930,0.506,2931,0.506,2932,0.506,2933,0.506,2934,0.506,2935,0.506,2936,0.465,2937,0.465,2938,0.465,2939,0.465,2940,0.465,2941,0.506,2942,0.465,2943,0.897,2944,0.465,2945,0.897,2946,0.506,2947,0.976,2948,0.976,2949,0.506,2950,0.976,2951,0.553,2952,0.506,2953,0.465,2954,0.506,2955,0.465,2956,1.332,2957,1.332,2958,0.553,2959,1.332,2960,1.247,2961,1.247,2962,1.026,2963,1.717,2964,1.717,2965,1.717,2966,1.608,2967,0.347,2968,0.338,2969,0.38,2970,0.393,2971,0.465,2972,0.465,2973,0.476,2974,0.506,2975,0.506,2976,0.506,2977,0.506,2978,0.455,2979,0.553,2980,2.103,2981,0.976,2982,0.506,2983,0.506,2984,0.506,2985,0.465,2986,0.919,2987,0.476,2988,0.506,2989,0.976,2990,0.506,2991,0.506,2992,2.207,2993,0.506,2994,0.976,2995,0.506,2996,0.506,2997,0.506,2998,0.506,2999,0.506,3000,0.506,3001,0.506,3002,0.506,3003,0.506,3004,1.824,3005,0.506,3006,0.976,3007,1.414,3008,0.506,3009,1.824,3010,0.506,3011,0.506,3012,0.506,3013,0.506,3014,0.506,3015,0.976,3016,0.976,3017,0.506,3018,0.976,3019,0.976,3020,0.976,3021,0.976,3022,0.506,3023,0.476,3024,0.506,3025,0.506,3026,0.506,3027,0.506,3028,0.506,3029,0.506,3030,0.506,3031,0.976,3032,2.567,3033,0.506,3034,0.418,3035,0.845,3036,0.976,3037,0.476,3038,0.446,3039,0.446,3040,0.795,3041,0.506,3042,0.506,3043,0.976,3044,0.976,3045,2.207,3046,3.224,3047,0.506,3048,0.506,3049,0.506,3050,0.506,3051,0.506,3052,0.506,3053,0.506,3054,0.506,3055,0.506,3056,0.506,3057,0.506,3058,0.506,3059,0.506]],["component/102",[195,1.288]],["title/103-1",[52,23.584,139,24.374]],["name/103-1",[]],["text/103-1",[]],["component/103-1",[]],["title/103-2",[1045,21.29,1666,24.015]],["name/103-2",[]],["text/103-2",[]],["component/103-2",[]],["title/103",[]],["name/103",[2853,1.51]],["text/103",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,195,4.566,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2903,5.461,2904,3.223,2905,3.223,2906,3.62]],["component/103",[195,1.288]],["title/104-1",[149,21.259,708,25.823,1215,23.97]],["name/104-1",[]],["text/104-1",[]],["component/104-1",[]],["title/104-2",[52,23.584,139,24.374]],["name/104-2",[]],["text/104-2",[]],["component/104-2",[]],["title/104-3",[1045,21.29,1666,24.015]],["name/104-3",[]],["text/104-3",[]],["component/104-3",[]],["title/104-4",[220,23.711,1039,26.676]],["name/104-4",[]],["text/104-4",[]],["component/104-4",[]],["title/104-5",[2907,44.56]],["name/104-5",[]],["text/104-5",[]],["component/104-5",[]],["title/104-6",[2908,42.932]],["name/104-6",[]],["text/104-6",[]],["component/104-6",[]],["title/104",[126,25.488]],["name/104",[126,0.759]],["text/104",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,195,4.679,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2903,4.504,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2914,4.378,2915,2.766,2916,2.899]],["component/104",[195,1.288]],["title/105-1",[2907,44.56]],["name/105-1",[]],["text/105-1",[]],["component/105-1",[]],["title/105-2",[2908,42.932]],["name/105-2",[]],["text/105-2",[]],["component/105-2",[]],["title/105",[]],["name/105",[2917,1.545]],["text/105",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,195,4.692,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2903,3.76,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2914,5.526,2915,3.491,2916,3.659]],["component/105",[195,1.288]],["title/106-1",[222,25.902,226,23.333]],["name/106-1",[]],["text/106-1",[]],["component/106-1",[]],["title/106-2",[105,30.154]],["name/106-2",[]],["text/106-2",[]],["component/106-2",[]],["title/106",[9,12.054,11,10.134,14,16.942,195,23.181]],["name/106",[205,1.287]],["text/106",[3,2.495,9,2.819,11,2.37,14,3.535,18,2.439,26,3.816,30,3.041,33,4.404,80,3.223,96,2.604,105,2.69,195,5.422,222,2.901,226,2.613,235,3.367,261,3.239,435,3.597,909,3.061,941,4.474,1255,6.524,1256,6.258,1257,6.044,2914,5.783]],["component/106",[195,1.288]],["title/107-1",[968,34.315]],["name/107-1",[]],["text/107-1",[]],["component/107-1",[]],["title/107-2",[105,30.154]],["name/107-2",[]],["text/107-2",[]],["component/107-2",[]],["title/107-3",[11,11.848,51,29.259,234,30.206]],["name/107-3",[]],["text/107-3",[]],["component/107-3",[]],["title/107",[2,27.205]],["name/107",[2,0.81]],["text/107",[2,2.993,3,2.866,4,3.073,5,1.045,9,2.582,11,2.498,12,3.323,13,1.438,14,2.779,24,1.533,36,1.762,51,1.707,57,1.529,80,1.395,91,3.496,95,1.316,105,3.318,109,2.684,116,1.98,136,1.385,137,1.1,149,1.24,181,3.316,195,5.14,208,1.473,209,1.916,218,1.502,220,1.149,221,2.593,234,1.762,235,2.387,282,1.958,315,1.926,318,2.126,387,1.694,401,1.552,405,1.613,432,3.219,475,2.082,501,1.777,546,1.52,565,2.041,596,1.334,634,2.096,645,1.868,887,2.412,891,3.59,909,1.325,927,1.755,968,3.776,1037,2.158,1088,1.557,1120,1.817,1161,3.511,1310,3.457,1311,1.916,1326,1.969,1451,2.471,2792,2.192,2911,1.581,2913,1.581,2914,4.1,2915,1.581,2918,3.358,2919,3.358,2920,3.358,2921,3.072]],["component/107",[195,1.288]],["title/108-1",[30,13.453,155,17.451,195,16.165,320,13.89,548,17.519,2462,29.578,2922,34.328]],["name/108-1",[]],["text/108-1",[]],["component/108-1",[]],["title/108-2",[172,29.259,176,24.03,195,27.102]],["name/108-2",[]],["text/108-2",[]],["component/108-2",[]],["title/108-3",[18,18.089,195,27.102,1112,43.497]],["name/108-3",[]],["text/108-3",[]],["component/108-3",[]],["title/108-4",[389,41.355]],["name/108-4",[]],["text/108-4",[]],["component/108-4",[]],["title/108-5",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/108-5",[]],["text/108-5",[]],["component/108-5",[]],["title/108-6",[126,20.299,1032,30.391]],["name/108-6",[]],["text/108-6",[]],["component/108-6",[]],["title/108-7",[220,23.711,1039,26.676]],["name/108-7",[]],["text/108-7",[]],["component/108-7",[]],["title/108-8",[195,27.102,272,31.864,1396,35.676]],["name/108-8",[]],["text/108-8",[]],["component/108-8",[]],["title/108-9",[5,21.563,195,32.619]],["name/108-9",[]],["text/108-9",[]],["component/108-9",[]],["title/108-10",[389,41.355]],["name/108-10",[]],["text/108-10",[]],["component/108-10",[]],["title/108-11",[437,49.191,596,27.515]],["name/108-11",[]],["text/108-11",[]],["component/108-11",[]],["title/108-12",[399,26.009,438,31.917]],["name/108-12",[]],["text/108-12",[]],["component/108-12",[]],["title/108-13",[399,26.009,439,42.939]],["name/108-13",[]],["text/108-13",[]],["component/108-13",[]],["title/108",[541,35.613]],["name/108",[541,1.06]],["text/108",[2,0.334,3,0.343,4,0.243,5,1.913,6,1.253,8,0.2,9,0.488,11,0.22,18,1.211,20,0.7,22,1.259,23,0.38,24,0.706,28,0.285,30,0.418,36,0.29,45,0.407,48,1.041,50,0.553,62,0.928,64,1.064,68,0.671,73,0.967,74,1.952,80,0.443,81,0.9,82,1.17,89,1.081,93,0.856,94,0.625,95,0.606,96,0.358,105,0.37,106,0.364,107,0.314,109,1.22,112,0.456,118,0.336,122,0.295,123,0.294,125,0.818,126,1.388,130,0.652,133,1.01,134,1.525,135,0.498,136,0.228,137,2.465,147,0.269,149,0.891,150,0.76,154,0.596,155,1.959,164,0.314,166,0.93,169,0.798,170,1.204,171,0.719,172,1.614,173,0.431,175,0.591,176,1.007,178,0.511,181,3.009,182,1.086,194,1.336,195,4.169,208,0.468,214,0.577,216,0.829,217,0.538,218,0.247,220,0.826,221,0.901,222,0.399,223,0.3,225,0.486,226,1.596,229,0.622,235,0.463,236,0.37,242,0.549,247,0.418,250,0.293,251,0.319,253,0.446,261,0.231,266,1.321,267,0.465,269,0.412,272,2.305,286,0.276,287,0.64,307,0.317,309,0.768,310,0.364,314,0.32,320,0.432,321,0.346,325,1.035,326,1.185,330,0.455,331,0.795,333,0.267,334,0.273,335,0.721,351,0.355,354,0.845,360,0.352,365,0.402,374,0.266,378,0.364,379,0.405,381,0.37,382,0.486,384,1.608,386,0.377,389,0.507,391,1.51,399,0.4,401,0.493,411,0.742,413,0.615,417,0.345,419,1.068,422,1.54,428,0.775,434,0.338,435,0.256,437,5.984,438,0.712,439,1.969,447,0.32,455,0.53,462,1.166,471,0.48,492,0.596,502,0.347,505,0.298,507,1.35,508,0.852,509,1.717,510,2.524,512,1.733,514,1.127,516,1.137,518,2.096,520,0.829,522,0.328,523,0.493,526,0.298,529,0.367,532,1.196,535,0.314,537,0.685,541,0.226,543,1.416,546,0.902,548,2.417,549,0.273,558,1.086,560,0.338,561,0.455,562,0.438,563,2.476,568,0.412,569,0.412,571,1.391,575,1.485,582,0.34,590,0.58,596,1.261,600,2.056,617,0.367,620,0.455,628,1.323,630,0.253,640,0.811,641,0.34,642,3.24,643,1.931,648,0.37,657,2.2,674,0.364,677,1.366,690,2.141,694,0.388,698,0.736,709,0.887,717,0.86,735,0.407,748,0.358,758,0.407,772,0.324,780,1.204,785,0.3,788,0.317,803,0.37,885,0.412,899,0.352,909,1.253,915,0.38,924,0.315,927,0.289,946,0.431,949,0.307,950,0.361,958,0.303,961,0.418,966,0.964,968,0.786,974,0.476,982,0.424,983,0.58,986,0.424,997,0.906,1006,0.294,1032,0.678,1033,1.684,1039,0.929,1052,1.579,1088,0.494,1111,0.328,1120,0.299,1122,0.455,1127,0.402,1143,0.418,1144,0.384,1158,1.212,1205,0.648,1215,0.23,1243,0.612,1247,0.727,1252,0.993,1256,0.86,1257,0.431,1282,0.795,1304,1.359,1321,0.347,1334,0.476,1382,0.364,1386,0.332,1388,0.412,1390,0.465,1393,0.424,1396,0.661,1416,0.438,1427,0.446,1444,0.49,1499,0.49,1501,0.407,1502,0.438,1578,0.49,1638,0.714,1699,0.384,1718,0.476,1733,0.919,1747,0.49,1796,0.795,1802,0.919,1808,1.486,1814,0.397,1834,0.397,1849,1.645,1853,2.561,1869,0.424,1889,0.324,1950,0.49,1953,0.897,2036,0.49,2088,0.338,2123,1.506,2165,0.393,2200,0.49,2284,0.919,2294,0.431,2325,0.455,2341,0.412,2470,1.168,2494,0.393,2507,0.757,2508,0.431,2551,0.438,2607,0.438,2624,0.455,2667,0.412,2806,0.377,2811,0.919,2818,0.332,2851,0.455,2897,2.255,2898,1.416,2909,0.667,2923,0.976,2924,0.553,2925,0.553,2926,0.976,2927,1.717,2928,0.795,2929,0.407,2930,0.506,2931,0.506,2932,0.506,2933,0.506,2934,0.506,2935,0.506,2936,0.465,2937,0.465,2938,0.465,2939,0.465,2940,0.465,2941,0.506,2942,0.465,2943,0.897,2944,0.465,2945,0.897,2946,0.506,2947,0.976,2948,0.976,2949,0.506,2950,0.976,2951,0.553,2952,0.506,2953,0.465,2954,0.506,2955,0.465,2956,1.332,2957,1.332,2958,0.553,2959,1.332,2960,1.247,2961,1.247,2962,1.026,2963,1.717,2964,1.717,2965,1.717,2966,1.608,2967,0.347,2968,0.338,2969,0.38,2970,0.393,2971,0.465,2972,0.465,2973,0.476,2974,0.506,2975,0.506,2976,0.506,2977,0.506,2978,0.455,2979,0.553,2980,2.103,2981,0.976,2982,0.506,2983,0.506,2984,0.506,2985,0.465,2986,0.919,2987,0.476,2988,0.506,2989,0.976,2990,0.506,2991,0.506,2992,2.207,2993,0.506,2994,0.976,2995,0.506,2996,0.506,2997,0.506,2998,0.506,2999,0.506,3000,0.506,3001,0.506,3002,0.506,3003,0.506,3004,1.824,3005,0.506,3006,0.976,3007,1.414,3008,0.506,3009,1.824,3010,0.506,3011,0.506,3012,0.506,3013,0.506,3014,0.506,3015,0.976,3016,0.976,3017,0.506,3018,0.976,3019,0.976,3020,0.976,3021,0.976,3022,0.506,3023,0.476,3024,0.506,3025,0.506,3026,0.506,3027,0.506,3028,0.506,3029,0.506,3030,0.506,3031,0.976,3032,2.567,3033,0.506,3034,0.418,3035,0.845,3036,0.976,3037,0.476,3038,0.446,3039,0.446,3040,0.795,3041,0.506,3042,0.506,3043,0.976,3044,0.976,3045,2.207,3046,3.224,3047,0.506,3048,0.506,3049,0.506,3050,0.506,3051,0.506,3052,0.506,3053,0.506,3054,0.506,3055,0.506,3056,0.506,3057,0.506,3058,0.506,3059,0.506]],["component/108",[195,1.288]],["title/109-1",[52,23.584,139,24.374]],["name/109-1",[]],["text/109-1",[]],["component/109-1",[]],["title/109-2",[1045,21.29,1666,24.015]],["name/109-2",[]],["text/109-2",[]],["component/109-2",[]],["title/109",[]],["name/109",[2853,1.51]],["text/109",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,195,4.566,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2903,5.461,2904,3.223,2905,3.223,2906,3.62]],["component/109",[195,1.288]],["title/110-1",[149,21.259,708,25.823,1215,23.97]],["name/110-1",[]],["text/110-1",[]],["component/110-1",[]],["title/110-2",[52,23.584,139,24.374]],["name/110-2",[]],["text/110-2",[]],["component/110-2",[]],["title/110-3",[1045,21.29,1666,24.015]],["name/110-3",[]],["text/110-3",[]],["component/110-3",[]],["title/110-4",[220,23.711,1039,26.676]],["name/110-4",[]],["text/110-4",[]],["component/110-4",[]],["title/110-5",[2907,44.56]],["name/110-5",[]],["text/110-5",[]],["component/110-5",[]],["title/110-6",[2908,42.932]],["name/110-6",[]],["text/110-6",[]],["component/110-6",[]],["title/110",[126,25.488]],["name/110",[126,0.759]],["text/110",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,195,4.679,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2903,4.504,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2914,4.378,2915,2.766,2916,2.899]],["component/110",[195,1.288]],["title/111-1",[2907,44.56]],["name/111-1",[]],["text/111-1",[]],["component/111-1",[]],["title/111-2",[2908,42.932]],["name/111-2",[]],["text/111-2",[]],["component/111-2",[]],["title/111",[]],["name/111",[2917,1.545]],["text/111",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,195,4.692,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2903,3.76,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2914,5.526,2915,3.491,2916,3.659]],["component/111",[195,1.288]],["title/112-1",[222,25.902,226,23.333]],["name/112-1",[]],["text/112-1",[]],["component/112-1",[]],["title/112-2",[105,30.154]],["name/112-2",[]],["text/112-2",[]],["component/112-2",[]],["title/112",[9,12.054,11,10.134,14,16.942,195,23.181]],["name/112",[205,1.287]],["text/112",[3,2.495,9,2.819,11,2.37,14,3.535,18,2.439,26,3.816,30,3.041,33,4.404,80,3.223,96,2.604,105,2.69,195,5.422,222,2.901,226,2.613,235,3.367,261,3.239,435,3.597,909,3.061,941,4.474,1255,6.524,1256,6.258,1257,6.044,2914,5.783]],["component/112",[195,1.288]],["title/113-1",[389,41.355]],["name/113-1",[]],["text/113-1",[]],["component/113-1",[]],["title/113-2",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/113-2",[]],["text/113-2",[]],["component/113-2",[]],["title/113-3",[126,20.299,1032,30.391]],["name/113-3",[]],["text/113-3",[]],["component/113-3",[]],["title/113-4",[220,23.711,1039,26.676]],["name/113-4",[]],["text/113-4",[]],["component/113-4",[]],["title/113-5",[195,27.102,272,31.864,1396,35.676]],["name/113-5",[]],["text/113-5",[]],["component/113-5",[]],["title/113-6",[5,21.563,195,32.619]],["name/113-6",[]],["text/113-6",[]],["component/113-6",[]],["title/113-7",[65,42.191]],["name/113-7",[]],["text/113-7",[]],["component/113-7",[]],["title/113-8",[2463,60.472]],["name/113-8",[]],["text/113-8",[]],["component/113-8",[]],["title/113-9",[431,52.864]],["name/113-9",[]],["text/113-9",[]],["component/113-9",[]],["title/113-10",[442,50.154]],["name/113-10",[]],["text/113-10",[]],["component/113-10",[]],["title/113-11",[2463,60.472]],["name/113-11",[]],["text/113-11",[]],["component/113-11",[]],["title/113-12",[431,52.864]],["name/113-12",[]],["text/113-12",[]],["component/113-12",[]],["title/113-13",[389,41.355]],["name/113-13",[]],["text/113-13",[]],["component/113-13",[]],["title/113-14",[437,49.191,596,27.515]],["name/113-14",[]],["text/113-14",[]],["component/113-14",[]],["title/113-15",[399,26.009,438,31.917]],["name/113-15",[]],["text/113-15",[]],["component/113-15",[]],["title/113-16",[399,26.009,439,42.939]],["name/113-16",[]],["text/113-16",[]],["component/113-16",[]],["title/113-17",[135,32.312,539,42.939]],["name/113-17",[]],["text/113-17",[]],["component/113-17",[]],["title/113-18",[91,24.912,419,19.352,966,27.823]],["name/113-18",[]],["text/113-18",[]],["component/113-18",[]],["title/113-19",[3,15.832,18,15.472,68,21.365,462,23.798]],["name/113-19",[]],["text/113-19",[]],["component/113-19",[]],["title/113-20",[18,10.789,133,12.359,195,16.165,419,11.543,422,16.652,462,16.595,647,23.867]],["name/113-20",[]],["text/113-20",[]],["component/113-20",[]],["title/113-21",[252,43.851,437,49.191]],["name/113-21",[]],["text/113-21",[]],["component/113-21",[]],["title/113",[541,35.613]],["name/113",[541,1.06]],["text/113",[3,1.033,4,0.159,5,1.55,6,1.443,9,0.173,11,0.213,14,0.243,18,1.279,20,0.878,22,0.606,23,0.486,24,0.473,27,0.461,30,0.142,36,0.19,43,0.292,45,0.266,48,0.583,64,0.553,65,0.801,67,0.458,68,0.842,73,0.502,74,1.691,77,0.209,78,0.231,80,0.294,81,0.609,82,1.075,89,1.053,91,0.306,93,1.174,95,0.142,96,0.121,106,0.238,109,0.139,112,0.442,114,0.535,118,0.22,122,0.193,125,1.266,126,1.133,127,0.904,129,0.441,130,0.221,133,0.798,134,1.289,135,0.33,136,0.149,137,2.143,147,0.344,149,0.383,150,0.509,154,0.202,155,1.126,166,0.63,169,0.535,170,0.816,171,1.599,172,0.839,176,0.295,177,0.207,178,0.342,179,0.331,181,3.469,182,0.728,187,1.43,194,0.914,195,3.782,201,0.577,204,0.185,208,0.159,215,0.211,216,0.885,217,0.356,220,0.664,221,0.227,222,0.505,223,0.897,225,0.165,226,0.921,228,0.251,229,0.412,233,0.18,236,0.693,237,0.197,238,0.232,246,0.201,250,0.191,252,0.656,253,0.292,261,0.295,263,0.527,266,0.778,269,0.27,272,0.748,275,0.215,279,0.599,282,0.211,285,0.312,286,0.18,299,0.27,307,0.207,309,1.101,314,0.21,321,0.438,322,0.435,325,0.693,326,0.794,330,0.298,331,0.527,333,0.175,334,0.179,335,0.483,339,0.287,354,0.56,360,0.231,374,0.174,378,0.238,379,0.268,381,0.242,382,0.615,384,1.089,388,0.165,389,0.922,391,1.053,399,0.832,401,0.167,405,0.174,411,0.491,413,0.407,417,0.226,419,1.434,422,1.974,428,0.513,431,1.507,434,0.221,435,0.328,437,5.644,438,0.477,439,1.537,441,0.134,455,0.351,462,1.322,467,0.27,470,0.573,471,0.318,475,0.224,476,0.236,478,0.896,483,0.772,484,0.826,490,0.293,492,0.395,496,0.223,502,0.227,505,0.195,507,1.266,508,0.389,509,1.228,510,2.474,512,2.626,514,1.099,516,1.106,518,1.189,520,0.555,522,0.215,523,0.479,524,0.292,526,0.195,529,0.24,531,0.231,532,1.057,535,0.205,537,0.666,539,0.438,541,0.289,543,0.959,544,0.257,546,0.611,548,2.176,549,0.349,558,0.728,560,0.221,561,0.298,562,0.287,563,1.798,565,0.22,568,0.27,569,0.27,571,1.118,573,0.266,575,1.364,576,1.228,577,0.26,586,0.344,587,0.287,590,0.197,596,1.086,598,0.435,599,0.831,600,1.256,609,0.32,617,0.24,620,0.298,621,0.26,628,0.741,630,0.324,631,0.212,634,0.441,640,0.544,641,0.638,642,3.251,643,1.335,644,0.52,647,3.096,654,0.188,655,0.183,657,1.698,663,0.397,674,0.682,677,0.944,678,0.221,690,1.652,691,0.216,694,0.254,698,0.61,703,0.169,709,0.405,717,0.292,722,0.189,723,0.218,735,0.266,745,0.273,758,0.266,780,0.517,783,0.454,799,0.257,803,0.242,885,0.27,898,0.263,907,0.201,909,0.279,913,0.672,915,0.249,925,0.981,949,0.201,952,0.26,957,0.438,960,0.215,961,0.273,966,1.071,983,0.197,997,0.414,1032,0.454,1033,1.164,1036,0.266,1039,0.747,1045,1.057,1052,1.07,1057,1.173,1069,2.601,1080,1.591,1088,0.328,1111,0.215,1114,0.344,1122,0.298,1124,0.226,1127,0.263,1136,0.682,1143,0.273,1144,0.251,1158,1.004,1176,0.576,1180,0.482,1205,0.429,1215,0.431,1238,0.209,1243,0.405,1247,0.482,1252,1.246,1255,0.304,1256,0.292,1257,0.55,1282,0.772,1304,1.126,1316,0.298,1321,0.227,1360,0.384,1383,0.304,1386,0.217,1388,0.27,1396,0.642,1416,0.287,1427,0.292,1430,0.32,1437,0.344,1444,0.32,1473,2.833,1499,0.32,1501,0.52,1502,0.287,1515,0.257,1578,0.32,1586,0.304,1605,0.312,1638,0.473,1650,0.266,1669,0.292,1691,0.266,1699,0.251,1709,0.626,1718,0.312,1733,0.609,1747,0.32,1769,0.331,1796,0.27,1800,0.312,1802,0.609,1808,1.446,1814,0.26,1834,0.26,1849,1.51,1853,1.802,1878,0.473,1889,0.212,1895,0.287,1901,0.542,1904,0.331,1935,0.344,1937,0.312,1945,0.298,1950,0.32,1953,0.304,2022,0.249,2036,0.32,2069,0.312,2074,0.185,2123,0.226,2152,0.344,2200,0.32,2201,0.266,2207,0.672,2210,0.263,2211,0.266,2213,0.273,2284,0.609,2294,0.55,2310,0.672,2341,0.27,2350,0.527,2429,0.939,2470,1.02,2494,0.257,2507,0.502,2508,0.55,2541,0.626,2542,0.594,2544,0.236,2666,0.57,2704,0.672,2806,1.322,2811,1.163,2818,0.217,2851,0.298,2897,1.573,2898,0.959,2909,0.305,2956,1.163,2957,1.423,2959,1.163,2960,0.835,2961,0.835,2962,0.896,2963,0.892,2964,0.892,2965,0.892,2966,0.835,2980,2.052,2981,0.646,2982,0.331,2983,0.331,2984,0.331,2985,0.304,2986,0.609,2987,0.312,2988,0.331,2989,0.646,2990,0.646,2991,0.331,2992,1.511,2993,0.331,2994,0.646,2995,0.331,2996,0.646,2997,0.646,2998,0.646,2999,0.646,3000,0.646,3001,0.331,3002,0.646,3003,0.646,3004,1.235,3005,0.331,3006,0.646,3007,0.948,3008,0.331,3009,1.235,3010,0.331,3011,0.331,3012,0.331,3013,0.331,3014,0.331,3015,0.646,3016,0.646,3017,0.331,3018,0.646,3019,0.646,3020,0.646,3021,0.646,3022,0.331,3023,0.312,3024,0.331,3025,0.331,3026,0.948,3027,0.331,3028,0.331,3029,0.331,3030,0.331,3031,0.646,3032,2.027,3033,0.331,3034,0.273,3035,0.56,3036,0.646,3037,0.312,3038,0.292,3039,0.292,3040,0.527,3041,0.331,3042,0.331,3043,0.646,3044,0.646,3045,1.511,3046,2.502,3047,0.331,3048,0.331,3049,0.331,3050,0.331,3051,0.331,3052,0.331,3053,0.331,3054,0.331,3055,0.331,3056,0.331,3057,0.331,3058,0.331,3059,0.331,3060,0.32,3061,0.362,3062,0.362,3063,0.312,3064,0.32,3065,0.32,3066,0.362,3067,0.331,3068,1.35,3069,1.35,3070,0.362,3071,0.707,3072,1.2,3073,1.036,3074,1.036,3075,0.362,3076,0.362,3077,0.362,3078,0.707,3079,0.362,3080,0.362,3081,0.331,3082,0.527,3083,0.254,3084,0.27,3085,0.27,3086,0.331,3087,0.27,3088,0.27,3089,0.527,3090,0.331,3091,0.331,3092,1.35,3093,0.707,3094,0.707,3095,0.707,3096,0.362,3097,1.135,3098,0.362,3099,0.362,3100,0.362,3101,0.362,3102,0.362,3103,0.707,3104,0.362,3105,1.036,3106,0.362,3107,0.362,3108,0.362,3109,0.362,3110,0.362,3111,0.362,3112,0.362,3113,0.362,3114,0.362,3115,3.213,3116,1.35,3117,1.939,3118,0.707,3119,1.939,3120,1.939,3121,0.707,3122,0.707,3123,0.362,3124,0.362,3125,0.362,3126,0.362,3127,1.651,3128,0.707,3129,0.707,3130,0.707,3131,0.707,3132,0.707,3133,0.707,3134,0.362,3135,0.707,3136,0.707,3137,0.707,3138,0.707,3139,0.362,3140,0.362,3141,0.362,3142,0.707,3143,0.362,3144,0.362,3145,0.707,3146,0.707,3147,0.362,3148,0.362,3149,0.707,3150,0.362,3151,1.651,3152,1.036,3153,0.362,3154,0.362,3155,0.362,3156,0.362,3157,0.362,3158,0.707,3159,0.362,3160,0.362,3161,0.707,3162,1.036,3163,0.362,3164,0.362,3165,0.362,3166,2.48,3167,0.707,3168,0.362,3169,0.362,3170,0.707,3171,0.362,3172,0.362,3173,0.707,3174,0.362,3175,0.362,3176,0.362,3177,0.362,3178,1.036,3179,0.362,3180,0.362,3181,0.362,3182,0.362,3183,0.362,3184,0.362,3185,0.646,3186,0.362,3187,1.036,3188,0.362,3189,0.362,3190,0.362,3191,0.362,3192,0.362,3193,0.362,3194,0.362,3195,0.362,3196,0.362,3197,0.362,3198,0.362,3199,0.707,3200,0.362,3201,0.362,3202,0.362,3203,0.362,3204,0.707,3205,0.362,3206,0.707,3207,0.362,3208,0.707,3209,0.362,3210,0.331,3211,0.362,3212,0.362,3213,0.362,3214,0.362,3215,0.362]],["component/113",[195,1.288]],["title/114-1",[310,57.238]],["name/114-1",[]],["text/114-1",[]],["component/114-1",[]],["title/114-2",[172,29.259,176,24.03,195,27.102]],["name/114-2",[]],["text/114-2",[]],["component/114-2",[]],["title/114-3",[195,40.957]],["name/114-3",[]],["text/114-3",[]],["component/114-3",[]],["title/114-4",[195,27.102,272,31.864,1396,35.676]],["name/114-4",[]],["text/114-4",[]],["component/114-4",[]],["title/114-5",[261,28.922,1954,38.537]],["name/114-5",[]],["text/114-5",[]],["component/114-5",[]],["title/114-6",[374,33.375,707,35.628]],["name/114-6",[]],["text/114-6",[]],["component/114-6",[]],["title/114",[208,30.391,630,31.725]],["name/114",[3216,1.734]],["text/114",[2,1.177,3,0.568,4,2.108,5,2.349,6,0.697,8,0.34,9,0.775,11,0.193,12,0.386,14,0.323,18,2.29,20,0.8,22,1.421,28,1.294,34,0.831,44,0.743,48,0.763,50,0.486,62,1.061,64,0.943,65,0.455,67,0.608,68,1.633,73,0.455,74,1.982,81,0.798,89,1.449,91,1.371,93,1.076,95,0.693,96,0.841,98,0.492,105,0.613,107,0.533,109,1.653,112,0.755,114,0.485,115,0.709,121,0.563,123,0.499,126,0.518,129,0.586,130,0.574,133,2.171,134,0.406,135,1.169,136,0.387,137,1.852,147,0.457,149,1.17,150,0.869,151,0.472,154,0.988,155,0.899,157,1.336,164,0.533,166,0.438,168,0.893,169,0.485,170,2.598,171,2.228,172,1.912,173,0.731,175,0.979,176,1.322,178,0.828,181,1.884,185,1.426,194,0.519,195,4.801,207,0.448,208,0.775,214,1.355,215,0.547,216,0.948,221,1.683,222,0.351,225,0.427,226,1.765,229,1.03,233,0.882,235,0.407,236,0.628,242,0.909,247,0.709,251,1.019,257,0.492,261,0.738,269,0.699,272,3.129,279,0.416,287,1.061,307,0.538,313,1.242,315,0.538,320,1.281,321,0.573,325,1.677,334,0.463,335,0.438,351,0.603,365,0.682,381,0.628,387,1.264,399,0.352,405,1.203,415,0.497,417,1.103,419,0.315,431,0.57,437,5.534,441,0.654,447,0.544,455,0.466,469,0.646,470,0.519,471,0.422,478,1.173,483,0.699,490,1.312,492,0.525,496,1.543,502,0.59,505,0.505,507,0.751,508,0.517,509,1.552,510,0.78,514,1.272,518,1.912,521,0.699,526,1.349,529,0.623,530,0.743,532,0.4,539,1.096,541,0.384,546,0.8,548,3.256,551,0.574,554,0.731,565,0.57,590,0.51,598,1.088,600,2.05,625,0.731,628,0.515,630,1.147,640,0.492,642,3.617,643,1.725,645,0.983,648,0.628,657,1.563,678,0.574,690,1.203,709,0.538,722,0.924,744,1.042,748,0.608,763,0.56,772,0.55,775,0.547,780,1.58,785,0.51,788,0.538,898,0.682,899,0.598,909,1.484,924,0.535,925,0.682,950,0.612,958,0.515,972,0.699,974,0.808,982,0.72,983,0.51,1006,1.683,1039,0.361,1120,0.508,1154,0.623,1161,0.888,1176,0.983,1183,0.731,1215,0.391,1224,0.893,1247,1.205,1250,0.623,1252,1.61,1257,0.731,1282,0.699,1300,1.61,1302,0.567,1334,0.808,1357,0.55,1382,0.617,1396,1.963,1397,0.858,1407,1.985,1427,2.554,1504,0.808,1515,0.666,1530,0.659,1691,0.69,1695,0.586,1699,0.652,1748,1.183,1796,0.699,1834,0.674,1869,0.72,1889,0.55,1953,1.486,1954,1.762,2088,0.574,2123,1.564,2145,0.634,2325,0.772,2341,0.699,2428,0.699,2507,1.255,2508,1.377,2512,0.831,2514,0.831,2545,1.081,2572,1.486,2607,0.743,2624,0.772,2667,0.699,2806,1.205,2851,1.454,2909,0.405,2923,0.858,2926,0.858,2927,3.241,2936,0.789,2937,0.789,2938,0.789,2939,0.789,2940,0.789,2941,0.858,2942,0.789,2943,1.486,2944,0.789,2945,1.486,2946,0.858,2947,1.617,2948,1.617,2949,0.858,2950,1.617,2952,0.858,2953,0.789,2954,0.858,2955,0.789,2956,0.808,2957,0.808,2959,0.808,2960,0.757,2961,0.757,2962,0.623,2963,1.523,2964,0.808,2965,0.808,2966,0.757,2967,0.59,2968,0.574,2969,0.646,2970,1.255,2971,0.789,2972,0.789,2973,0.808,2974,0.858,2975,0.858,2976,0.858,2977,0.858,2978,0.772,2986,1.523,2987,0.808,3035,0.743,3187,1.921,3217,0.893,3218,1.454,3219,0.938,3220,0.72,3221,1.767,3222,0.938,3223,0.938,3224,0.938,3225,0.831,3226,0.938,3227,0.858,3228,0.808,3229,0.808,3230,0.808,3231,3.539,3232,0.938,3233,3.166,3234,2.505,3235,0.789,3236,0.808,3237,0.938,3238,0.72,3239,0.699,3240,2.505,3241,0.938,3242,0.938,3243,2.505,3244,2.159,3245,2.292,3246,0.938,3247,0.938,3248,0.938,3249,0.938,3250,0.938,3251,0.938,3252,0.938,3253,0.938,3254,0.808,3255,0.938]],["component/114",[195,1.288]],["title/115-1",[344,50.708]],["name/115-1",[]],["text/115-1",[]],["component/115-1",[]],["title/115-2",[374,33.375,707,35.628]],["name/115-2",[]],["text/115-2",[]],["component/115-2",[]],["title/115",[19,38.169,20,31.351]],["name/115",[205,1.287]],["text/115",[0,5.884,2,2.872,3,2.116,4,2.895,5,2.048,9,1.611,11,2.177,18,3.324,20,2.978,22,2.952,68,2.855,89,3.536,95,2.578,112,3.922,181,1.943,195,4.98,208,2.887,221,2.948,267,5.533,320,2.662,437,6.52,465,4.366,470,3.643,518,3.664,549,3.248,630,3.013,637,5.828,638,6.259,639,5.828,968,2.596,1357,3.858,2429,4.574]],["component/115",[195,1.288]],["title/116-1",[320,35.193]],["name/116-1",[]],["text/116-1",[]],["component/116-1",[]],["title/116-2",[9,16.962,11,14.261]],["name/116-2",[]],["text/116-2",[]],["component/116-2",[]],["title/116-3",[10,41.906]],["name/116-3",[]],["text/116-3",[]],["component/116-3",[]],["title/116-4",[968,34.315]],["name/116-4",[]],["text/116-4",[]],["component/116-4",[]],["title/116-5",[374,33.375,707,35.628]],["name/116-5",[]],["text/116-5",[]],["component/116-5",[]],["title/116",[2,27.205]],["name/116",[2,0.81]],["text/116",[2,3.603,3,1.677,5,2.417,6,0.889,9,2.363,10,3.408,11,2.456,12,2.146,14,0.776,18,1.961,24,1.793,26,1.109,33,1.28,39,1.427,46,2.06,48,0.973,89,1.512,91,0.976,96,1.318,98,1.183,112,0.963,118,1.37,133,0.812,134,0.976,138,1.397,149,1.45,151,1.133,175,1.248,176,2.177,181,3.034,194,2.174,195,4.701,207,2.488,216,1.209,221,2.003,226,2.615,235,0.978,242,1.159,248,1.584,251,1.3,261,0.941,320,1.589,321,1.691,355,1.449,372,2.371,382,1.026,387,1.137,388,2.374,401,2.41,405,1.083,415,1.193,418,1.619,432,1.809,437,3.703,444,1.46,446,1.601,509,0.93,518,3.098,546,1.02,548,1.15,593,1.756,600,1.46,630,1.032,722,1.178,772,1.322,802,1.388,927,2.052,966,1.09,968,4.054,983,1.225,1168,5.068,1215,0.939,1311,1.286,1687,1.896,1954,1.254,2123,3.894,2165,1.601,2270,1.552,2279,1.537,2337,3.075,2428,1.68,2462,1.942,2545,4.327,2927,5.376,2928,1.68,2929,1.659,2930,2.062,2931,2.062,2932,2.062,2933,2.062,2934,2.062,2935,2.062,3256,2.254,3257,2.254,3258,2.254,3259,1.537,3260,1.537,3261,2.254,3262,1.68,3263,1.537,3264,1.523,3265,2.254]],["component/116",[195,1.288]],["title/117-1",[52,23.584,139,24.374]],["name/117-1",[]],["text/117-1",[]],["component/117-1",[]],["title/117-2",[1045,21.29,1666,24.015]],["name/117-2",[]],["text/117-2",[]],["component/117-2",[]],["title/117",[]],["name/117",[2853,1.51]],["text/117",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,195,4.566,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2903,5.461,2904,3.223,2905,3.223,2906,3.62]],["component/117",[195,1.288]],["title/118-1",[149,21.259,708,25.823,1215,23.97]],["name/118-1",[]],["text/118-1",[]],["component/118-1",[]],["title/118-2",[52,23.584,139,24.374]],["name/118-2",[]],["text/118-2",[]],["component/118-2",[]],["title/118-3",[1045,21.29,1666,24.015]],["name/118-3",[]],["text/118-3",[]],["component/118-3",[]],["title/118-4",[220,23.711,1039,26.676]],["name/118-4",[]],["text/118-4",[]],["component/118-4",[]],["title/118-5",[2907,44.56]],["name/118-5",[]],["text/118-5",[]],["component/118-5",[]],["title/118-6",[2908,42.932]],["name/118-6",[]],["text/118-6",[]],["component/118-6",[]],["title/118",[126,25.488]],["name/118",[126,0.759]],["text/118",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,195,4.679,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2903,4.504,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2914,4.378,2915,2.766,2916,2.899]],["component/118",[195,1.288]],["title/119-1",[2907,44.56]],["name/119-1",[]],["text/119-1",[]],["component/119-1",[]],["title/119-2",[2908,42.932]],["name/119-2",[]],["text/119-2",[]],["component/119-2",[]],["title/119",[]],["name/119",[2917,1.545]],["text/119",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,195,4.692,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2903,3.76,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2914,5.526,2915,3.491,2916,3.659]],["component/119",[195,1.288]],["title/120-1",[222,25.902,226,23.333]],["name/120-1",[]],["text/120-1",[]],["component/120-1",[]],["title/120-2",[105,30.154]],["name/120-2",[]],["text/120-2",[]],["component/120-2",[]],["title/120",[9,12.054,11,10.134,14,16.942,195,23.181]],["name/120",[205,1.287]],["text/120",[3,2.495,9,2.819,11,2.37,14,3.535,18,2.439,26,3.816,30,3.041,33,4.404,80,3.223,96,2.604,105,2.69,195,5.422,222,2.901,226,2.613,235,3.367,261,3.239,435,3.597,909,3.061,941,4.474,1255,6.524,1256,6.258,1257,6.044,2914,5.783]],["component/120",[195,1.288]],["title/121-1",[389,41.355]],["name/121-1",[]],["text/121-1",[]],["component/121-1",[]],["title/121-2",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/121-2",[]],["text/121-2",[]],["component/121-2",[]],["title/121-3",[126,20.299,1032,30.391]],["name/121-3",[]],["text/121-3",[]],["component/121-3",[]],["title/121-4",[220,23.711,1039,26.676]],["name/121-4",[]],["text/121-4",[]],["component/121-4",[]],["title/121-5",[195,27.102,272,31.864,1396,35.676]],["name/121-5",[]],["text/121-5",[]],["component/121-5",[]],["title/121-6",[5,21.563,195,32.619]],["name/121-6",[]],["text/121-6",[]],["component/121-6",[]],["title/121-7",[65,42.191]],["name/121-7",[]],["text/121-7",[]],["component/121-7",[]],["title/121-8",[2463,60.472]],["name/121-8",[]],["text/121-8",[]],["component/121-8",[]],["title/121-9",[431,52.864]],["name/121-9",[]],["text/121-9",[]],["component/121-9",[]],["title/121-10",[442,50.154]],["name/121-10",[]],["text/121-10",[]],["component/121-10",[]],["title/121-11",[2463,60.472]],["name/121-11",[]],["text/121-11",[]],["component/121-11",[]],["title/121-12",[431,52.864]],["name/121-12",[]],["text/121-12",[]],["component/121-12",[]],["title/121-13",[389,41.355]],["name/121-13",[]],["text/121-13",[]],["component/121-13",[]],["title/121-14",[437,49.191,596,27.515]],["name/121-14",[]],["text/121-14",[]],["component/121-14",[]],["title/121-15",[399,26.009,438,31.917]],["name/121-15",[]],["text/121-15",[]],["component/121-15",[]],["title/121-16",[399,26.009,439,42.939]],["name/121-16",[]],["text/121-16",[]],["component/121-16",[]],["title/121-17",[135,32.312,539,42.939]],["name/121-17",[]],["text/121-17",[]],["component/121-17",[]],["title/121-18",[91,24.912,419,19.352,966,27.823]],["name/121-18",[]],["text/121-18",[]],["component/121-18",[]],["title/121-19",[3,15.832,18,15.472,68,21.365,462,23.798]],["name/121-19",[]],["text/121-19",[]],["component/121-19",[]],["title/121-20",[18,10.789,133,12.359,195,16.165,419,11.543,422,16.652,462,16.595,647,23.867]],["name/121-20",[]],["text/121-20",[]],["component/121-20",[]],["title/121-21",[252,43.851,437,49.191]],["name/121-21",[]],["text/121-21",[]],["component/121-21",[]],["title/121",[541,35.613]],["name/121",[541,1.06]],["text/121",[3,1.033,4,0.159,5,1.55,6,1.443,9,0.173,11,0.213,14,0.243,18,1.279,20,0.878,22,0.606,23,0.486,24,0.473,27,0.461,30,0.142,36,0.19,43,0.292,45,0.266,48,0.583,64,0.553,65,0.801,67,0.458,68,0.842,73,0.502,74,1.691,77,0.209,78,0.231,80,0.294,81,0.609,82,1.075,89,1.053,91,0.306,93,1.174,95,0.142,96,0.121,106,0.238,109,0.139,112,0.442,114,0.535,118,0.22,122,0.193,125,1.266,126,1.133,127,0.904,129,0.441,130,0.221,133,0.798,134,1.289,135,0.33,136,0.149,137,2.143,147,0.344,149,0.383,150,0.509,154,0.202,155,1.126,166,0.63,169,0.535,170,0.816,171,1.599,172,0.839,176,0.295,177,0.207,178,0.342,179,0.331,181,3.469,182,0.728,187,1.43,194,0.914,195,3.782,201,0.577,204,0.185,208,0.159,215,0.211,216,0.885,217,0.356,220,0.664,221,0.227,222,0.505,223,0.897,225,0.165,226,0.921,228,0.251,229,0.412,233,0.18,236,0.693,237,0.197,238,0.232,246,0.201,250,0.191,252,0.656,253,0.292,261,0.295,263,0.527,266,0.778,269,0.27,272,0.748,275,0.215,279,0.599,282,0.211,285,0.312,286,0.18,299,0.27,307,0.207,309,1.101,314,0.21,321,0.438,322,0.435,325,0.693,326,0.794,330,0.298,331,0.527,333,0.175,334,0.179,335,0.483,339,0.287,354,0.56,360,0.231,374,0.174,378,0.238,379,0.268,381,0.242,382,0.615,384,1.089,388,0.165,389,0.922,391,1.053,399,0.832,401,0.167,405,0.174,411,0.491,413,0.407,417,0.226,419,1.434,422,1.974,428,0.513,431,1.507,434,0.221,435,0.328,437,5.644,438,0.477,439,1.537,441,0.134,455,0.351,462,1.322,467,0.27,470,0.573,471,0.318,475,0.224,476,0.236,478,0.896,483,0.772,484,0.826,490,0.293,492,0.395,496,0.223,502,0.227,505,0.195,507,1.266,508,0.389,509,1.228,510,2.474,512,2.626,514,1.099,516,1.106,518,1.189,520,0.555,522,0.215,523,0.479,524,0.292,526,0.195,529,0.24,531,0.231,532,1.057,535,0.205,537,0.666,539,0.438,541,0.289,543,0.959,544,0.257,546,0.611,548,2.176,549,0.349,558,0.728,560,0.221,561,0.298,562,0.287,563,1.798,565,0.22,568,0.27,569,0.27,571,1.118,573,0.266,575,1.364,576,1.228,577,0.26,586,0.344,587,0.287,590,0.197,596,1.086,598,0.435,599,0.831,600,1.256,609,0.32,617,0.24,620,0.298,621,0.26,628,0.741,630,0.324,631,0.212,634,0.441,640,0.544,641,0.638,642,3.251,643,1.335,644,0.52,647,3.096,654,0.188,655,0.183,657,1.698,663,0.397,674,0.682,677,0.944,678,0.221,690,1.652,691,0.216,694,0.254,698,0.61,703,0.169,709,0.405,717,0.292,722,0.189,723,0.218,735,0.266,745,0.273,758,0.266,780,0.517,783,0.454,799,0.257,803,0.242,885,0.27,898,0.263,907,0.201,909,0.279,913,0.672,915,0.249,925,0.981,949,0.201,952,0.26,957,0.438,960,0.215,961,0.273,966,1.071,983,0.197,997,0.414,1032,0.454,1033,1.164,1036,0.266,1039,0.747,1045,1.057,1052,1.07,1057,1.173,1069,2.601,1080,1.591,1088,0.328,1111,0.215,1114,0.344,1122,0.298,1124,0.226,1127,0.263,1136,0.682,1143,0.273,1144,0.251,1158,1.004,1176,0.576,1180,0.482,1205,0.429,1215,0.431,1238,0.209,1243,0.405,1247,0.482,1252,1.246,1255,0.304,1256,0.292,1257,0.55,1282,0.772,1304,1.126,1316,0.298,1321,0.227,1360,0.384,1383,0.304,1386,0.217,1388,0.27,1396,0.642,1416,0.287,1427,0.292,1430,0.32,1437,0.344,1444,0.32,1473,2.833,1499,0.32,1501,0.52,1502,0.287,1515,0.257,1578,0.32,1586,0.304,1605,0.312,1638,0.473,1650,0.266,1669,0.292,1691,0.266,1699,0.251,1709,0.626,1718,0.312,1733,0.609,1747,0.32,1769,0.331,1796,0.27,1800,0.312,1802,0.609,1808,1.446,1814,0.26,1834,0.26,1849,1.51,1853,1.802,1878,0.473,1889,0.212,1895,0.287,1901,0.542,1904,0.331,1935,0.344,1937,0.312,1945,0.298,1950,0.32,1953,0.304,2022,0.249,2036,0.32,2069,0.312,2074,0.185,2123,0.226,2152,0.344,2200,0.32,2201,0.266,2207,0.672,2210,0.263,2211,0.266,2213,0.273,2284,0.609,2294,0.55,2310,0.672,2341,0.27,2350,0.527,2429,0.939,2470,1.02,2494,0.257,2507,0.502,2508,0.55,2541,0.626,2542,0.594,2544,0.236,2666,0.57,2704,0.672,2806,1.322,2811,1.163,2818,0.217,2851,0.298,2897,1.573,2898,0.959,2909,0.305,2956,1.163,2957,1.423,2959,1.163,2960,0.835,2961,0.835,2962,0.896,2963,0.892,2964,0.892,2965,0.892,2966,0.835,2980,2.052,2981,0.646,2982,0.331,2983,0.331,2984,0.331,2985,0.304,2986,0.609,2987,0.312,2988,0.331,2989,0.646,2990,0.646,2991,0.331,2992,1.511,2993,0.331,2994,0.646,2995,0.331,2996,0.646,2997,0.646,2998,0.646,2999,0.646,3000,0.646,3001,0.331,3002,0.646,3003,0.646,3004,1.235,3005,0.331,3006,0.646,3007,0.948,3008,0.331,3009,1.235,3010,0.331,3011,0.331,3012,0.331,3013,0.331,3014,0.331,3015,0.646,3016,0.646,3017,0.331,3018,0.646,3019,0.646,3020,0.646,3021,0.646,3022,0.331,3023,0.312,3024,0.331,3025,0.331,3026,0.948,3027,0.331,3028,0.331,3029,0.331,3030,0.331,3031,0.646,3032,2.027,3033,0.331,3034,0.273,3035,0.56,3036,0.646,3037,0.312,3038,0.292,3039,0.292,3040,0.527,3041,0.331,3042,0.331,3043,0.646,3044,0.646,3045,1.511,3046,2.502,3047,0.331,3048,0.331,3049,0.331,3050,0.331,3051,0.331,3052,0.331,3053,0.331,3054,0.331,3055,0.331,3056,0.331,3057,0.331,3058,0.331,3059,0.331,3060,0.32,3061,0.362,3062,0.362,3063,0.312,3064,0.32,3065,0.32,3066,0.362,3067,0.331,3068,1.35,3069,1.35,3070,0.362,3071,0.707,3072,1.2,3073,1.036,3074,1.036,3075,0.362,3076,0.362,3077,0.362,3078,0.707,3079,0.362,3080,0.362,3081,0.331,3082,0.527,3083,0.254,3084,0.27,3085,0.27,3086,0.331,3087,0.27,3088,0.27,3089,0.527,3090,0.331,3091,0.331,3092,1.35,3093,0.707,3094,0.707,3095,0.707,3096,0.362,3097,1.135,3098,0.362,3099,0.362,3100,0.362,3101,0.362,3102,0.362,3103,0.707,3104,0.362,3105,1.036,3106,0.362,3107,0.362,3108,0.362,3109,0.362,3110,0.362,3111,0.362,3112,0.362,3113,0.362,3114,0.362,3115,3.213,3116,1.35,3117,1.939,3118,0.707,3119,1.939,3120,1.939,3121,0.707,3122,0.707,3123,0.362,3124,0.362,3125,0.362,3126,0.362,3127,1.651,3128,0.707,3129,0.707,3130,0.707,3131,0.707,3132,0.707,3133,0.707,3134,0.362,3135,0.707,3136,0.707,3137,0.707,3138,0.707,3139,0.362,3140,0.362,3141,0.362,3142,0.707,3143,0.362,3144,0.362,3145,0.707,3146,0.707,3147,0.362,3148,0.362,3149,0.707,3150,0.362,3151,1.651,3152,1.036,3153,0.362,3154,0.362,3155,0.362,3156,0.362,3157,0.362,3158,0.707,3159,0.362,3160,0.362,3161,0.707,3162,1.036,3163,0.362,3164,0.362,3165,0.362,3166,2.48,3167,0.707,3168,0.362,3169,0.362,3170,0.707,3171,0.362,3172,0.362,3173,0.707,3174,0.362,3175,0.362,3176,0.362,3177,0.362,3178,1.036,3179,0.362,3180,0.362,3181,0.362,3182,0.362,3183,0.362,3184,0.362,3185,0.646,3186,0.362,3187,1.036,3188,0.362,3189,0.362,3190,0.362,3191,0.362,3192,0.362,3193,0.362,3194,0.362,3195,0.362,3196,0.362,3197,0.362,3198,0.362,3199,0.707,3200,0.362,3201,0.362,3202,0.362,3203,0.362,3204,0.707,3205,0.362,3206,0.707,3207,0.362,3208,0.707,3209,0.362,3210,0.331,3211,0.362,3212,0.362,3213,0.362,3214,0.362,3215,0.362]],["component/121",[195,1.288]],["title/122-1",[310,57.238]],["name/122-1",[]],["text/122-1",[]],["component/122-1",[]],["title/122-2",[172,29.259,176,24.03,195,27.102]],["name/122-2",[]],["text/122-2",[]],["component/122-2",[]],["title/122-3",[195,40.957]],["name/122-3",[]],["text/122-3",[]],["component/122-3",[]],["title/122-4",[195,27.102,272,31.864,1396,35.676]],["name/122-4",[]],["text/122-4",[]],["component/122-4",[]],["title/122-5",[261,28.922,1954,38.537]],["name/122-5",[]],["text/122-5",[]],["component/122-5",[]],["title/122-6",[374,33.375,707,35.628]],["name/122-6",[]],["text/122-6",[]],["component/122-6",[]],["title/122",[208,30.391,630,31.725]],["name/122",[3216,1.734]],["text/122",[2,1.177,3,0.568,4,2.108,5,2.349,6,0.697,8,0.34,9,0.775,11,0.193,12,0.386,14,0.323,18,2.29,20,0.8,22,1.421,28,1.294,34,0.831,44,0.743,48,0.763,50,0.486,62,1.061,64,0.943,65,0.455,67,0.608,68,1.633,73,0.455,74,1.982,81,0.798,89,1.449,91,1.371,93,1.076,95,0.693,96,0.841,98,0.492,105,0.613,107,0.533,109,1.653,112,0.755,114,0.485,115,0.709,121,0.563,123,0.499,126,0.518,129,0.586,130,0.574,133,2.171,134,0.406,135,1.169,136,0.387,137,1.852,147,0.457,149,1.17,150,0.869,151,0.472,154,0.988,155,0.899,157,1.336,164,0.533,166,0.438,168,0.893,169,0.485,170,2.598,171,2.228,172,1.912,173,0.731,175,0.979,176,1.322,178,0.828,181,1.884,185,1.426,194,0.519,195,4.801,207,0.448,208,0.775,214,1.355,215,0.547,216,0.948,221,1.683,222,0.351,225,0.427,226,1.765,229,1.03,233,0.882,235,0.407,236,0.628,242,0.909,247,0.709,251,1.019,257,0.492,261,0.738,269,0.699,272,3.129,279,0.416,287,1.061,307,0.538,313,1.242,315,0.538,320,1.281,321,0.573,325,1.677,334,0.463,335,0.438,351,0.603,365,0.682,381,0.628,387,1.264,399,0.352,405,1.203,415,0.497,417,1.103,419,0.315,431,0.57,437,5.534,441,0.654,447,0.544,455,0.466,469,0.646,470,0.519,471,0.422,478,1.173,483,0.699,490,1.312,492,0.525,496,1.543,502,0.59,505,0.505,507,0.751,508,0.517,509,1.552,510,0.78,514,1.272,518,1.912,521,0.699,526,1.349,529,0.623,530,0.743,532,0.4,539,1.096,541,0.384,546,0.8,548,3.256,551,0.574,554,0.731,565,0.57,590,0.51,598,1.088,600,2.05,625,0.731,628,0.515,630,1.147,640,0.492,642,3.617,643,1.725,645,0.983,648,0.628,657,1.563,678,0.574,690,1.203,709,0.538,722,0.924,744,1.042,748,0.608,763,0.56,772,0.55,775,0.547,780,1.58,785,0.51,788,0.538,898,0.682,899,0.598,909,1.484,924,0.535,925,0.682,950,0.612,958,0.515,972,0.699,974,0.808,982,0.72,983,0.51,1006,1.683,1039,0.361,1120,0.508,1154,0.623,1161,0.888,1176,0.983,1183,0.731,1215,0.391,1224,0.893,1247,1.205,1250,0.623,1252,1.61,1257,0.731,1282,0.699,1300,1.61,1302,0.567,1334,0.808,1357,0.55,1382,0.617,1396,1.963,1397,0.858,1407,1.985,1427,2.554,1504,0.808,1515,0.666,1530,0.659,1691,0.69,1695,0.586,1699,0.652,1748,1.183,1796,0.699,1834,0.674,1869,0.72,1889,0.55,1953,1.486,1954,1.762,2088,0.574,2123,1.564,2145,0.634,2325,0.772,2341,0.699,2428,0.699,2507,1.255,2508,1.377,2512,0.831,2514,0.831,2545,1.081,2572,1.486,2607,0.743,2624,0.772,2667,0.699,2806,1.205,2851,1.454,2909,0.405,2923,0.858,2926,0.858,2927,3.241,2936,0.789,2937,0.789,2938,0.789,2939,0.789,2940,0.789,2941,0.858,2942,0.789,2943,1.486,2944,0.789,2945,1.486,2946,0.858,2947,1.617,2948,1.617,2949,0.858,2950,1.617,2952,0.858,2953,0.789,2954,0.858,2955,0.789,2956,0.808,2957,0.808,2959,0.808,2960,0.757,2961,0.757,2962,0.623,2963,1.523,2964,0.808,2965,0.808,2966,0.757,2967,0.59,2968,0.574,2969,0.646,2970,1.255,2971,0.789,2972,0.789,2973,0.808,2974,0.858,2975,0.858,2976,0.858,2977,0.858,2978,0.772,2986,1.523,2987,0.808,3035,0.743,3187,1.921,3217,0.893,3218,1.454,3219,0.938,3220,0.72,3221,1.767,3222,0.938,3223,0.938,3224,0.938,3225,0.831,3226,0.938,3227,0.858,3228,0.808,3229,0.808,3230,0.808,3231,3.539,3232,0.938,3233,3.166,3234,2.505,3235,0.789,3236,0.808,3237,0.938,3238,0.72,3239,0.699,3240,2.505,3241,0.938,3242,0.938,3243,2.505,3244,2.159,3245,2.292,3246,0.938,3247,0.938,3248,0.938,3249,0.938,3250,0.938,3251,0.938,3252,0.938,3253,0.938,3254,0.808,3255,0.938]],["component/122",[195,1.288]],["title/123-1",[344,50.708]],["name/123-1",[]],["text/123-1",[]],["component/123-1",[]],["title/123-2",[374,33.375,707,35.628]],["name/123-2",[]],["text/123-2",[]],["component/123-2",[]],["title/123",[19,38.169,20,31.351]],["name/123",[205,1.287]],["text/123",[0,5.884,2,2.872,3,2.116,4,2.895,5,2.048,9,1.611,11,2.177,18,3.324,20,2.978,22,2.952,68,2.855,89,3.536,95,2.578,112,3.922,181,1.943,195,4.98,208,2.887,221,2.948,267,5.533,320,2.662,437,6.52,465,4.366,470,3.643,518,3.664,549,3.248,630,3.013,637,5.828,638,6.259,639,5.828,968,2.596,1357,3.858,2429,4.574]],["component/123",[195,1.288]],["title/124-1",[320,35.193]],["name/124-1",[]],["text/124-1",[]],["component/124-1",[]],["title/124-2",[9,16.962,11,14.261]],["name/124-2",[]],["text/124-2",[]],["component/124-2",[]],["title/124-3",[10,41.906]],["name/124-3",[]],["text/124-3",[]],["component/124-3",[]],["title/124-4",[968,34.315]],["name/124-4",[]],["text/124-4",[]],["component/124-4",[]],["title/124-5",[374,33.375,707,35.628]],["name/124-5",[]],["text/124-5",[]],["component/124-5",[]],["title/124",[2,27.205]],["name/124",[2,0.81]],["text/124",[2,3.603,3,1.677,5,2.417,6,0.889,9,2.363,10,3.408,11,2.456,12,2.146,14,0.776,18,1.961,24,1.793,26,1.109,33,1.28,39,1.427,46,2.06,48,0.973,89,1.512,91,0.976,96,1.318,98,1.183,112,0.963,118,1.37,133,0.812,134,0.976,138,1.397,149,1.45,151,1.133,175,1.248,176,2.177,181,3.034,194,2.174,195,4.701,207,2.488,216,1.209,221,2.003,226,2.615,235,0.978,242,1.159,248,1.584,251,1.3,261,0.941,320,1.589,321,1.691,355,1.449,372,2.371,382,1.026,387,1.137,388,2.374,401,2.41,405,1.083,415,1.193,418,1.619,432,1.809,437,3.703,444,1.46,446,1.601,509,0.93,518,3.098,546,1.02,548,1.15,593,1.756,600,1.46,630,1.032,722,1.178,772,1.322,802,1.388,927,2.052,966,1.09,968,4.054,983,1.225,1168,5.068,1215,0.939,1311,1.286,1687,1.896,1954,1.254,2123,3.894,2165,1.601,2270,1.552,2279,1.537,2337,3.075,2428,1.68,2462,1.942,2545,4.327,2927,5.376,2928,1.68,2929,1.659,2930,2.062,2931,2.062,2932,2.062,2933,2.062,2934,2.062,2935,2.062,3256,2.254,3257,2.254,3258,2.254,3259,1.537,3260,1.537,3261,2.254,3262,1.68,3263,1.537,3264,1.523,3265,2.254]],["component/124",[195,1.288]],["title/125-1",[52,23.584,139,24.374]],["name/125-1",[]],["text/125-1",[]],["component/125-1",[]],["title/125-2",[1045,21.29,1666,24.015]],["name/125-2",[]],["text/125-2",[]],["component/125-2",[]],["title/125",[]],["name/125",[2853,1.51]],["text/125",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,196,4.121,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3266,4.951]],["component/125",[196,1.162]],["title/126-1",[149,21.259,708,25.823,1215,23.97]],["name/126-1",[]],["text/126-1",[]],["component/126-1",[]],["title/126-2",[52,23.584,139,24.374]],["name/126-2",[]],["text/126-2",[]],["component/126-2",[]],["title/126-3",[1045,21.29,1666,24.015]],["name/126-3",[]],["text/126-3",[]],["component/126-3",[]],["title/126-4",[220,23.711,1039,26.676]],["name/126-4",[]],["text/126-4",[]],["component/126-4",[]],["title/126-5",[2907,44.56]],["name/126-5",[]],["text/126-5",[]],["component/126-5",[]],["title/126-6",[2908,42.932]],["name/126-6",[]],["text/126-6",[]],["component/126-6",[]],["title/126",[126,25.488]],["name/126",[126,0.759]],["text/126",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,196,4.223,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3266,4.083,3267,4.439]],["component/126",[196,1.162]],["title/127-1",[89,33.495]],["name/127-1",[]],["text/127-1",[]],["component/127-1",[]],["title/127-2",[1006,46.229]],["name/127-2",[]],["text/127-2",[]],["component/127-2",[]],["title/127",[390,39.954]],["name/127",[390,1.19]],["text/127",[5,1.158,6,1.467,9,1.834,11,1.23,13,2.559,14,2.056,18,2.953,46,1.952,52,1.266,64,1.985,68,4.077,81,3.38,96,2.005,109,3.296,126,1.751,133,1.339,134,2.586,137,2.81,181,1.098,196,5.29,218,1.664,246,2.069,257,1.952,259,3.073,279,3.322,287,2.232,322,2.29,390,4.315,438,4.328,499,2.275,507,1.58,509,1.534,510,2.636,532,1.584,544,2.641,654,1.928,716,2.772,736,2.81,780,4.279,781,2.702,788,2.133,991,2.18,997,2.18,1045,2.302,1242,2.275,1326,2.18,1360,2.021,1541,2.305,2377,2.897,2455,5.378,3268,7.859,3269,4.654,3270,2.772,3271,2.946,3272,2.946,3273,3.294,3274,3.294,3275,3.294,3276,3.294,3277,3.294,3278,3.294,3279,3.294,3280,2.946,3281,3.294]],["component/127",[196,1.162]],["title/128-1",[2907,44.56]],["name/128-1",[]],["text/128-1",[]],["component/128-1",[]],["title/128-2",[2908,42.932]],["name/128-2",[]],["text/128-2",[]],["component/128-2",[]],["title/128",[]],["name/128",[2917,1.545]],["text/128",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,196,4.234,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3266,3.409,3267,5.603]],["component/128",[196,1.162]],["title/129-1",[222,25.902,226,23.333]],["name/129-1",[]],["text/129-1",[]],["component/129-1",[]],["title/129",[9,12.054,11,10.134,14,16.942,196,20.921]],["name/129",[205,1.287]],["text/129",[3,2.959,9,2.253,11,2.359,14,3.944,18,2.892,80,3.823,96,3.088,196,5.305,222,3.441,226,3.099,435,4.266,1258,7.571]],["component/129",[196,1.162]],["title/130-1",[968,34.315]],["name/130-1",[]],["text/130-1",[]],["component/130-1",[]],["title/130-2",[105,30.154]],["name/130-2",[]],["text/130-2",[]],["component/130-2",[]],["title/130-3",[11,11.848,51,29.259,234,30.206]],["name/130-3",[]],["text/130-3",[]],["component/130-3",[]],["title/130",[2,27.205]],["name/130",[2,0.81]],["text/130",[2,3.145,3,2.767,4,1.645,5,1.868,9,2.462,11,2.491,12,3.092,13,1.601,14,3.242,24,1.707,51,3.05,57,1.702,91,2.597,95,1.465,105,3.266,109,2.306,116,2.205,136,1.542,137,1.225,149,1.381,181,3.243,196,4.491,208,1.64,209,2.133,218,1.673,220,1.28,221,2.413,234,1.962,235,2.604,318,2.367,358,2.192,387,1.886,401,1.728,405,1.795,432,2.765,475,2.318,501,1.979,546,1.692,549,1.845,565,2.272,596,1.485,634,2.333,645,2.08,887,2.685,891,3.917,909,1.475,927,1.954,968,3.968,1037,2.402,1088,1.733,1120,2.022,1161,1.879,1310,3.771,1311,2.133,1326,2.192,1451,2.751,2792,2.44,2911,1.761,2913,1.761,2915,1.761,3267,4.535,3282,3.557,3283,3.557]],["component/130",[196,1.162]],["title/131-1",[310,45.585,344,40.385]],["name/131-1",[]],["text/131-1",[]],["component/131-1",[]],["title/131-2",[11,14.261,15,26.734]],["name/131-2",[]],["text/131-2",[]],["component/131-2",[]],["title/131-3",[11,11.848,199,25.898,441,21.302]],["name/131-3",[]],["text/131-3",[]],["component/131-3",[]],["title/131-4",[272,38.351,287,41.581]],["name/131-4",[]],["text/131-4",[]],["component/131-4",[]],["title/131-5",[18,18.089,133,20.72,196,24.459]],["name/131-5",[]],["text/131-5",[]],["component/131-5",[]],["title/131-6",[5,21.563,416,32.936]],["name/131-6",[]],["text/131-6",[]],["component/131-6",[]],["title/131-7",[241,43.851,416,32.936]],["name/131-7",[]],["text/131-7",[]],["component/131-7",[]],["title/131-8",[286,28.717,416,27.365,440,40.432]],["name/131-8",[]],["text/131-8",[]],["component/131-8",[]],["title/131-9",[5,11.885,229,22.259,255,21.67,256,24.348,442,22.016,443,16.482]],["name/131-9",[]],["text/131-9",[]],["component/131-9",[]],["title/131-10",[453,53.961,462,33.487]],["name/131-10",[]],["text/131-10",[]],["component/131-10",[]],["title/131-11",[13,24.65,68,24.978,196,24.459]],["name/131-11",[]],["text/131-11",[]],["component/131-11",[]],["title/131-12",[389,41.355]],["name/131-12",[]],["text/131-12",[]],["component/131-12",[]],["title/131-13",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/131-13",[]],["text/131-13",[]],["component/131-13",[]],["title/131-14",[126,20.299,1032,30.391]],["name/131-14",[]],["text/131-14",[]],["component/131-14",[]],["title/131-15",[220,23.711,1039,26.676]],["name/131-15",[]],["text/131-15",[]],["component/131-15",[]],["title/131",[541,35.613]],["name/131",[541,1.06]],["text/131",[2,0.267,3,0.275,4,0.376,5,2.151,6,0.639,8,0.835,9,0.396,11,1.168,12,0.352,13,0.987,14,0.294,15,0.625,18,1.542,22,1.034,26,0.42,30,1.569,48,1.728,50,0.443,64,0.864,65,0.785,68,3.219,73,1.118,74,1.978,77,0.493,80,0.355,81,2.019,82,2.17,89,1.344,91,0.37,94,0.501,95,0.903,96,0.774,98,0.449,106,0.563,107,0.485,109,1.538,112,0.691,122,0.456,124,0.567,126,1.438,129,0.534,130,0.523,133,1.053,134,2.124,136,1.845,137,2.43,139,2.334,147,0.788,150,2.2,151,0.814,154,1.289,158,1.093,166,0.399,169,0.441,171,1.072,172,1.487,174,0.526,176,0.357,178,0.283,181,2.494,196,4.038,199,1.316,202,0.404,204,0.829,207,1.1,214,0.876,215,0.944,217,2.02,218,0.382,220,0.554,221,0.52,222,0.862,223,1.253,224,0.501,225,0.389,226,0.288,229,0.498,235,0.371,238,0.549,241,1.852,242,0.44,250,0.857,255,1.661,256,0.545,272,1.62,279,0.718,282,0.944,286,1.46,303,1.236,307,1.322,309,1.455,314,0.496,320,0.346,321,0.748,333,0.413,334,0.799,335,1.075,344,0.498,360,0.545,363,0.545,382,0.737,386,0.583,388,0.389,389,0.406,391,1.391,393,1.241,401,1.065,413,0.493,415,0.452,416,3.154,417,0.534,419,2.131,420,4.052,422,2.574,432,0.746,438,0.746,440,1.619,441,1.656,442,1.329,443,2.45,447,1.337,448,0.469,453,1.261,455,0.805,462,0.783,466,1.352,470,0.473,471,1.57,474,1.225,475,0.53,476,2.277,477,0.614,482,0.607,485,1.718,499,0.523,507,0.688,509,0.668,510,3.56,516,1.669,518,2.117,520,1.569,522,0.507,523,2.452,525,0.637,528,0.493,532,1.706,533,0.646,548,0.436,549,0.799,582,0.526,590,0.465,598,1.419,617,0.567,628,0.469,640,0.449,641,0.526,657,2.619,659,0.666,660,0.523,667,0.549,690,2.548,698,0.316,701,0.583,702,0.614,703,1.075,704,1.88,710,0.607,713,1.207,716,1.207,718,0.577,723,0.516,736,0.646,737,1.897,741,1.767,742,1.104,744,0.955,746,1.329,763,0.51,770,0.52,780,1.15,781,1.176,785,0.88,787,1.15,793,0.504,802,0.526,907,0.476,925,0.621,927,0.447,949,0.476,968,0.909,995,0.607,1032,1.011,1039,0.623,1111,0.507,1116,0.572,1133,2.637,1161,0.43,1205,0.52,1242,2.134,1243,0.49,1252,1.481,1258,0.703,1297,1.125,1302,1.392,1321,1.017,1324,0.534,1329,0.69,1360,0.465,1386,0.513,2123,1.826,2147,1.718,2165,0.607,2448,0.541,2451,0.69,2453,0.69,2455,4.075,2520,1.796,2551,0.677,2629,0.594,2687,1.86,2792,0.558,2818,0.513,2909,0.369,2928,1.718,2929,0.629,2980,0.966,3266,0.594,3271,0.677,3272,0.677,3280,0.677,3284,0.703,3285,0.757,3286,0.757,3287,0.757,3288,0.757,3289,0.757,3290,0.719,3291,0.656,3292,0.656,3293,0.757,3294,0.757,3295,0.757,3296,0.813,3297,0.813,3298,0.813,3299,0.757,3300,0.757,3301,0.757,3302,0.719,3303,0.719,3304,0.757,3305,0.757,3306,0.757,3307,0.757,3308,0.757,3309,0.757,3310,0.757,3311,1.384,3312,2.042,3313,2.042,3314,0.545,3315,1.04,3316,1.093]],["component/131",[196,1.162]],["title/132-1",[52,23.584,139,24.374]],["name/132-1",[]],["text/132-1",[]],["component/132-1",[]],["title/132-2",[1045,21.29,1666,24.015]],["name/132-2",[]],["text/132-2",[]],["component/132-2",[]],["title/132",[]],["name/132",[2853,1.51]],["text/132",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,196,4.121,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3266,4.951]],["component/132",[196,1.162]],["title/133-1",[149,21.259,708,25.823,1215,23.97]],["name/133-1",[]],["text/133-1",[]],["component/133-1",[]],["title/133-2",[52,23.584,139,24.374]],["name/133-2",[]],["text/133-2",[]],["component/133-2",[]],["title/133-3",[1045,21.29,1666,24.015]],["name/133-3",[]],["text/133-3",[]],["component/133-3",[]],["title/133-4",[220,23.711,1039,26.676]],["name/133-4",[]],["text/133-4",[]],["component/133-4",[]],["title/133-5",[2907,44.56]],["name/133-5",[]],["text/133-5",[]],["component/133-5",[]],["title/133-6",[2908,42.932]],["name/133-6",[]],["text/133-6",[]],["component/133-6",[]],["title/133",[126,25.488]],["name/133",[126,0.759]],["text/133",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,196,4.223,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3266,4.083,3267,4.439]],["component/133",[196,1.162]],["title/134-1",[89,33.495]],["name/134-1",[]],["text/134-1",[]],["component/134-1",[]],["title/134-2",[1006,46.229]],["name/134-2",[]],["text/134-2",[]],["component/134-2",[]],["title/134",[390,39.954]],["name/134",[390,1.19]],["text/134",[5,1.158,6,1.467,9,1.834,11,1.23,13,2.559,14,2.056,18,2.953,46,1.952,52,1.266,64,1.985,68,4.077,81,3.38,96,2.005,109,3.296,126,1.751,133,1.339,134,2.586,137,2.81,181,1.098,196,5.29,218,1.664,246,2.069,257,1.952,259,3.073,279,3.322,287,2.232,322,2.29,390,4.315,438,4.328,499,2.275,507,1.58,509,1.534,510,2.636,532,1.584,544,2.641,654,1.928,716,2.772,736,2.81,780,4.279,781,2.702,788,2.133,991,2.18,997,2.18,1045,2.302,1242,2.275,1326,2.18,1360,2.021,1541,2.305,2377,2.897,2455,5.378,3268,7.859,3269,4.654,3270,2.772,3271,2.946,3272,2.946,3273,3.294,3274,3.294,3275,3.294,3276,3.294,3277,3.294,3278,3.294,3279,3.294,3280,2.946,3281,3.294]],["component/134",[196,1.162]],["title/135-1",[2907,44.56]],["name/135-1",[]],["text/135-1",[]],["component/135-1",[]],["title/135-2",[2908,42.932]],["name/135-2",[]],["text/135-2",[]],["component/135-2",[]],["title/135",[]],["name/135",[2917,1.545]],["text/135",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,196,4.234,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3266,3.409,3267,5.603]],["component/135",[196,1.162]],["title/136-1",[222,25.902,226,23.333]],["name/136-1",[]],["text/136-1",[]],["component/136-1",[]],["title/136",[9,12.054,11,10.134,14,16.942,196,20.921]],["name/136",[205,1.287]],["text/136",[3,2.959,9,2.253,11,2.359,14,3.944,18,2.892,80,3.823,96,3.088,196,5.305,222,3.441,226,3.099,435,4.266,1258,7.571]],["component/136",[196,1.162]],["title/137-1",[968,34.315]],["name/137-1",[]],["text/137-1",[]],["component/137-1",[]],["title/137-2",[105,30.154]],["name/137-2",[]],["text/137-2",[]],["component/137-2",[]],["title/137-3",[11,11.848,51,29.259,234,30.206]],["name/137-3",[]],["text/137-3",[]],["component/137-3",[]],["title/137",[2,27.205]],["name/137",[2,0.81]],["text/137",[2,3.145,3,2.767,4,1.645,5,1.868,9,2.462,11,2.491,12,3.092,13,1.601,14,3.242,24,1.707,51,3.05,57,1.702,91,2.597,95,1.465,105,3.266,109,2.306,116,2.205,136,1.542,137,1.225,149,1.381,181,3.243,196,4.491,208,1.64,209,2.133,218,1.673,220,1.28,221,2.413,234,1.962,235,2.604,318,2.367,358,2.192,387,1.886,401,1.728,405,1.795,432,2.765,475,2.318,501,1.979,546,1.692,549,1.845,565,2.272,596,1.485,634,2.333,645,2.08,887,2.685,891,3.917,909,1.475,927,1.954,968,3.968,1037,2.402,1088,1.733,1120,2.022,1161,1.879,1310,3.771,1311,2.133,1326,2.192,1451,2.751,2792,2.44,2911,1.761,2913,1.761,2915,1.761,3267,4.535,3282,3.557,3283,3.557]],["component/137",[196,1.162]],["title/138-1",[310,45.585,344,40.385]],["name/138-1",[]],["text/138-1",[]],["component/138-1",[]],["title/138-2",[11,14.261,15,26.734]],["name/138-2",[]],["text/138-2",[]],["component/138-2",[]],["title/138-3",[11,11.848,199,25.898,441,21.302]],["name/138-3",[]],["text/138-3",[]],["component/138-3",[]],["title/138-4",[272,38.351,287,41.581]],["name/138-4",[]],["text/138-4",[]],["component/138-4",[]],["title/138-5",[18,18.089,133,20.72,196,24.459]],["name/138-5",[]],["text/138-5",[]],["component/138-5",[]],["title/138-6",[5,21.563,416,32.936]],["name/138-6",[]],["text/138-6",[]],["component/138-6",[]],["title/138-7",[241,43.851,416,32.936]],["name/138-7",[]],["text/138-7",[]],["component/138-7",[]],["title/138-8",[286,28.717,416,27.365,440,40.432]],["name/138-8",[]],["text/138-8",[]],["component/138-8",[]],["title/138-9",[5,11.885,229,22.259,255,21.67,256,24.348,442,22.016,443,16.482]],["name/138-9",[]],["text/138-9",[]],["component/138-9",[]],["title/138-10",[453,53.961,462,33.487]],["name/138-10",[]],["text/138-10",[]],["component/138-10",[]],["title/138-11",[13,24.65,68,24.978,196,24.459]],["name/138-11",[]],["text/138-11",[]],["component/138-11",[]],["title/138-12",[389,41.355]],["name/138-12",[]],["text/138-12",[]],["component/138-12",[]],["title/138-13",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/138-13",[]],["text/138-13",[]],["component/138-13",[]],["title/138-14",[126,20.299,1032,30.391]],["name/138-14",[]],["text/138-14",[]],["component/138-14",[]],["title/138-15",[220,23.711,1039,26.676]],["name/138-15",[]],["text/138-15",[]],["component/138-15",[]],["title/138",[541,35.613]],["name/138",[541,1.06]],["text/138",[2,0.267,3,0.275,4,0.376,5,2.151,6,0.639,8,0.835,9,0.396,11,1.168,12,0.352,13,0.987,14,0.294,15,0.625,18,1.542,22,1.034,26,0.42,30,1.569,48,1.728,50,0.443,64,0.864,65,0.785,68,3.219,73,1.118,74,1.978,77,0.493,80,0.355,81,2.019,82,2.17,89,1.344,91,0.37,94,0.501,95,0.903,96,0.774,98,0.449,106,0.563,107,0.485,109,1.538,112,0.691,122,0.456,124,0.567,126,1.438,129,0.534,130,0.523,133,1.053,134,2.124,136,1.845,137,2.43,139,2.334,147,0.788,150,2.2,151,0.814,154,1.289,158,1.093,166,0.399,169,0.441,171,1.072,172,1.487,174,0.526,176,0.357,178,0.283,181,2.494,196,4.038,199,1.316,202,0.404,204,0.829,207,1.1,214,0.876,215,0.944,217,2.02,218,0.382,220,0.554,221,0.52,222,0.862,223,1.253,224,0.501,225,0.389,226,0.288,229,0.498,235,0.371,238,0.549,241,1.852,242,0.44,250,0.857,255,1.661,256,0.545,272,1.62,279,0.718,282,0.944,286,1.46,303,1.236,307,1.322,309,1.455,314,0.496,320,0.346,321,0.748,333,0.413,334,0.799,335,1.075,344,0.498,360,0.545,363,0.545,382,0.737,386,0.583,388,0.389,389,0.406,391,1.391,393,1.241,401,1.065,413,0.493,415,0.452,416,3.154,417,0.534,419,2.131,420,4.052,422,2.574,432,0.746,438,0.746,440,1.619,441,1.656,442,1.329,443,2.45,447,1.337,448,0.469,453,1.261,455,0.805,462,0.783,466,1.352,470,0.473,471,1.57,474,1.225,475,0.53,476,2.277,477,0.614,482,0.607,485,1.718,499,0.523,507,0.688,509,0.668,510,3.56,516,1.669,518,2.117,520,1.569,522,0.507,523,2.452,525,0.637,528,0.493,532,1.706,533,0.646,548,0.436,549,0.799,582,0.526,590,0.465,598,1.419,617,0.567,628,0.469,640,0.449,641,0.526,657,2.619,659,0.666,660,0.523,667,0.549,690,2.548,698,0.316,701,0.583,702,0.614,703,1.075,704,1.88,710,0.607,713,1.207,716,1.207,718,0.577,723,0.516,736,0.646,737,1.897,741,1.767,742,1.104,744,0.955,746,1.329,763,0.51,770,0.52,780,1.15,781,1.176,785,0.88,787,1.15,793,0.504,802,0.526,907,0.476,925,0.621,927,0.447,949,0.476,968,0.909,995,0.607,1032,1.011,1039,0.623,1111,0.507,1116,0.572,1133,2.637,1161,0.43,1205,0.52,1242,2.134,1243,0.49,1252,1.481,1258,0.703,1297,1.125,1302,1.392,1321,1.017,1324,0.534,1329,0.69,1360,0.465,1386,0.513,2123,1.826,2147,1.718,2165,0.607,2448,0.541,2451,0.69,2453,0.69,2455,4.075,2520,1.796,2551,0.677,2629,0.594,2687,1.86,2792,0.558,2818,0.513,2909,0.369,2928,1.718,2929,0.629,2980,0.966,3266,0.594,3271,0.677,3272,0.677,3280,0.677,3284,0.703,3285,0.757,3286,0.757,3287,0.757,3288,0.757,3289,0.757,3290,0.719,3291,0.656,3292,0.656,3293,0.757,3294,0.757,3295,0.757,3296,0.813,3297,0.813,3298,0.813,3299,0.757,3300,0.757,3301,0.757,3302,0.719,3303,0.719,3304,0.757,3305,0.757,3306,0.757,3307,0.757,3308,0.757,3309,0.757,3310,0.757,3311,1.384,3312,2.042,3313,2.042,3314,0.545,3315,1.04,3316,1.093]],["component/138",[196,1.162]],["title/139-1",[52,23.584,139,24.374]],["name/139-1",[]],["text/139-1",[]],["component/139-1",[]],["title/139-2",[1045,21.29,1666,24.015]],["name/139-2",[]],["text/139-2",[]],["component/139-2",[]],["title/139",[]],["name/139",[2853,1.51]],["text/139",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,196,4.121,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3266,4.951]],["component/139",[196,1.162]],["title/140-1",[149,21.259,708,25.823,1215,23.97]],["name/140-1",[]],["text/140-1",[]],["component/140-1",[]],["title/140-2",[52,23.584,139,24.374]],["name/140-2",[]],["text/140-2",[]],["component/140-2",[]],["title/140-3",[1045,21.29,1666,24.015]],["name/140-3",[]],["text/140-3",[]],["component/140-3",[]],["title/140-4",[220,23.711,1039,26.676]],["name/140-4",[]],["text/140-4",[]],["component/140-4",[]],["title/140-5",[2907,44.56]],["name/140-5",[]],["text/140-5",[]],["component/140-5",[]],["title/140-6",[2908,42.932]],["name/140-6",[]],["text/140-6",[]],["component/140-6",[]],["title/140",[126,25.488]],["name/140",[126,0.759]],["text/140",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,196,4.223,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3266,4.083,3267,4.439]],["component/140",[196,1.162]],["title/141-1",[89,33.495]],["name/141-1",[]],["text/141-1",[]],["component/141-1",[]],["title/141-2",[1006,46.229]],["name/141-2",[]],["text/141-2",[]],["component/141-2",[]],["title/141",[390,39.954]],["name/141",[390,1.19]],["text/141",[5,1.158,6,1.467,9,1.834,11,1.23,13,2.559,14,2.056,18,2.953,46,1.952,52,1.266,64,1.985,68,4.077,81,3.38,96,2.005,109,3.296,126,1.751,133,1.339,134,2.586,137,2.81,181,1.098,196,5.29,218,1.664,246,2.069,257,1.952,259,3.073,279,3.322,287,2.232,322,2.29,390,4.315,438,4.328,499,2.275,507,1.58,509,1.534,510,2.636,532,1.584,544,2.641,654,1.928,716,2.772,736,2.81,780,4.279,781,2.702,788,2.133,991,2.18,997,2.18,1045,2.302,1242,2.275,1326,2.18,1360,2.021,1541,2.305,2377,2.897,2455,5.378,3268,7.859,3269,4.654,3270,2.772,3271,2.946,3272,2.946,3273,3.294,3274,3.294,3275,3.294,3276,3.294,3277,3.294,3278,3.294,3279,3.294,3280,2.946,3281,3.294]],["component/141",[196,1.162]],["title/142-1",[2907,44.56]],["name/142-1",[]],["text/142-1",[]],["component/142-1",[]],["title/142-2",[2908,42.932]],["name/142-2",[]],["text/142-2",[]],["component/142-2",[]],["title/142",[]],["name/142",[2917,1.545]],["text/142",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,196,4.234,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3266,3.409,3267,5.603]],["component/142",[196,1.162]],["title/143-1",[222,25.902,226,23.333]],["name/143-1",[]],["text/143-1",[]],["component/143-1",[]],["title/143",[9,12.054,11,10.134,14,16.942,196,20.921]],["name/143",[205,1.287]],["text/143",[3,2.92,9,2.224,11,2.34,14,3.912,18,2.854,80,3.773,96,3.048,196,5.273,222,3.395,226,3.059,435,4.21,1258,7.471,1259,7.325]],["component/143",[196,1.162]],["title/144-1",[968,34.315]],["name/144-1",[]],["text/144-1",[]],["component/144-1",[]],["title/144-2",[105,30.154]],["name/144-2",[]],["text/144-2",[]],["component/144-2",[]],["title/144-3",[11,11.848,51,29.259,234,30.206]],["name/144-3",[]],["text/144-3",[]],["component/144-3",[]],["title/144",[2,27.205]],["name/144",[2,0.81]],["text/144",[2,3.145,3,2.767,4,1.645,5,1.868,9,2.462,11,2.491,12,3.092,13,1.601,14,3.242,24,1.707,51,3.05,57,1.702,91,2.597,95,1.465,105,3.266,109,2.306,116,2.205,136,1.542,137,1.225,149,1.381,181,3.243,196,4.491,208,1.64,209,2.133,218,1.673,220,1.28,221,2.413,234,1.962,235,2.604,318,2.367,358,2.192,387,1.886,401,1.728,405,1.795,432,2.765,475,2.318,501,1.979,546,1.692,549,1.845,565,2.272,596,1.485,634,2.333,645,2.08,887,2.685,891,3.917,909,1.475,927,1.954,968,3.968,1037,2.402,1088,1.733,1120,2.022,1161,1.879,1310,3.771,1311,2.133,1326,2.192,1451,2.751,2792,2.44,2911,1.761,2913,1.761,2915,1.761,3267,4.535,3282,3.557,3283,3.557]],["component/144",[196,1.162]],["title/145-1",[310,45.585,344,40.385]],["name/145-1",[]],["text/145-1",[]],["component/145-1",[]],["title/145-2",[11,14.261,15,26.734]],["name/145-2",[]],["text/145-2",[]],["component/145-2",[]],["title/145-3",[11,11.848,199,25.898,441,21.302]],["name/145-3",[]],["text/145-3",[]],["component/145-3",[]],["title/145-4",[272,38.351,287,41.581]],["name/145-4",[]],["text/145-4",[]],["component/145-4",[]],["title/145-5",[18,18.089,133,20.72,196,24.459]],["name/145-5",[]],["text/145-5",[]],["component/145-5",[]],["title/145-6",[5,21.563,416,32.936]],["name/145-6",[]],["text/145-6",[]],["component/145-6",[]],["title/145-7",[241,43.851,416,32.936]],["name/145-7",[]],["text/145-7",[]],["component/145-7",[]],["title/145-8",[286,28.717,416,27.365,440,40.432]],["name/145-8",[]],["text/145-8",[]],["component/145-8",[]],["title/145-9",[172,35.215,416,32.936]],["name/145-9",[]],["text/145-9",[]],["component/145-9",[]],["title/145-10",[5,11.885,229,22.259,255,21.67,256,24.348,442,22.016,443,16.482]],["name/145-10",[]],["text/145-10",[]],["component/145-10",[]],["title/145-11",[453,53.961,462,33.487]],["name/145-11",[]],["text/145-11",[]],["component/145-11",[]],["title/145-12",[13,24.65,68,24.978,196,24.459]],["name/145-12",[]],["text/145-12",[]],["component/145-12",[]],["title/145-13",[389,41.355]],["name/145-13",[]],["text/145-13",[]],["component/145-13",[]],["title/145-14",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/145-14",[]],["text/145-14",[]],["component/145-14",[]],["title/145-15",[126,20.299,1032,30.391]],["name/145-15",[]],["text/145-15",[]],["component/145-15",[]],["title/145-16",[220,23.711,1039,26.676]],["name/145-16",[]],["text/145-16",[]],["component/145-16",[]],["title/145",[541,35.613]],["name/145",[541,1.06]],["text/145",[2,0.235,3,0.242,4,0.331,5,2.074,6,1.033,8,0.743,9,0.641,11,1.071,12,0.309,13,0.879,14,0.259,15,0.553,18,1.404,22,0.921,24,0.343,26,0.37,28,0.388,30,1.417,48,1.561,50,1.064,64,0.765,65,0.695,68,3.363,73,0.996,74,1.819,77,0.434,80,0.312,81,1.831,82,1.968,89,1.209,91,0.325,94,0.441,95,1.23,96,0.481,98,0.752,106,0.495,107,0.813,109,1.559,112,0.612,122,0.401,123,0.4,124,0.499,126,1.309,129,0.469,130,0.46,133,0.943,134,1.934,136,1.842,137,2.337,139,2.158,147,0.999,150,1.996,151,0.72,154,1.147,158,0.968,166,0.351,169,0.388,171,0.954,172,3.117,174,0.463,176,1.31,178,0.248,181,2.621,196,3.884,199,1.178,202,0.355,204,0.734,207,0.979,214,1.417,215,0.835,216,0.403,217,1.583,218,0.336,220,0.49,221,0.46,222,0.767,223,1.965,224,0.441,225,0.652,226,1.505,229,0.438,235,0.326,238,0.483,241,1.658,242,0.737,250,0.758,255,1.486,256,0.48,272,1.45,279,1.162,282,0.835,286,1.307,303,1.1,307,1.177,309,1.302,314,0.436,320,0.304,321,0.666,333,0.363,334,0.707,335,1.222,344,0.438,360,0.48,363,0.48,382,0.652,386,0.513,388,0.342,389,0.358,391,1.245,393,1.574,401,0.949,413,0.434,416,3.168,417,0.469,419,1.86,420,3.755,422,2.351,432,0.66,438,0.66,440,1.442,441,1.502,442,1.184,443,2.246,447,1.518,448,0.412,453,1.116,455,0.712,462,0.992,466,1.203,470,0.416,471,2.341,474,1.091,475,0.466,476,2.048,477,0.54,482,0.534,485,1.53,490,0.312,491,0.546,499,0.46,505,0.772,507,1.113,508,0.414,509,1.08,510,3.5,516,1.494,518,1.934,520,1.404,522,0.446,523,2.404,525,0.56,528,0.434,532,1.729,533,0.568,546,0.649,548,0.384,549,0.707,576,1.299,582,0.463,590,0.409,598,1.264,617,0.499,628,0.412,640,0.752,657,2.393,659,0.586,660,0.46,667,0.483,690,2.328,698,0.278,701,0.513,702,0.54,703,1.222,704,2.324,709,0.431,710,0.534,713,1.068,716,1.068,718,0.508,723,0.865,736,0.568,737,1.689,741,0.865,742,0.977,743,0.666,744,1.21,745,0.568,746,2.085,747,0.513,748,0.487,749,0.54,750,0.666,751,0.54,753,0.495,754,0.523,755,0.534,763,0.449,770,0.457,780,1.024,781,1.041,785,0.779,787,1.86,793,0.443,802,0.463,907,0.418,909,0.81,924,0.429,925,0.546,927,0.393,949,0.418,958,0.412,968,0.81,995,0.534,1032,0.901,1039,0.552,1111,0.446,1116,0.503,1120,0.407,1133,2.372,1161,0.378,1205,0.457,1242,1.256,1243,0.431,1252,1.319,1259,0.607,1297,0.996,1302,1.24,1321,0.901,1324,0.469,1329,0.607,1360,0.409,1386,0.451,1889,0.441,2074,0.385,2088,0.46,2123,1.634,2147,1.53,2165,0.534,2448,0.476,2451,0.607,2453,0.607,2455,3.736,2520,1.599,2551,0.596,2629,0.523,2687,1.656,2792,0.491,2818,0.451,2909,0.325,2928,1.53,2929,0.553,2967,0.473,2968,0.46,2980,0.855,3266,0.523,3271,0.596,3272,0.596,3280,0.596,3284,0.619,3285,0.666,3286,0.666,3287,0.666,3288,0.666,3289,0.666,3290,0.632,3291,0.577,3292,0.577,3293,0.666,3294,0.666,3295,0.666,3296,0.715,3297,0.715,3298,0.715,3299,0.666,3300,0.666,3301,0.666,3304,0.666,3305,0.666,3306,0.666,3307,0.666,3308,0.666,3309,0.666,3310,0.666,3311,1.232,3312,1.818,3313,1.818,3314,0.48,3315,0.921,3316,0.968,3317,0.715]],["component/145",[196,1.162]],["title/146-1",[52,23.584,139,24.374]],["name/146-1",[]],["text/146-1",[]],["component/146-1",[]],["title/146-2",[1045,21.29,1666,24.015]],["name/146-2",[]],["text/146-2",[]],["component/146-2",[]],["title/146",[]],["name/146",[2853,1.51]],["text/146",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,196,4.121,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3266,4.951]],["component/146",[196,1.162]],["title/147-1",[149,21.259,708,25.823,1215,23.97]],["name/147-1",[]],["text/147-1",[]],["component/147-1",[]],["title/147-2",[52,23.584,139,24.374]],["name/147-2",[]],["text/147-2",[]],["component/147-2",[]],["title/147-3",[1045,21.29,1666,24.015]],["name/147-3",[]],["text/147-3",[]],["component/147-3",[]],["title/147-4",[220,23.711,1039,26.676]],["name/147-4",[]],["text/147-4",[]],["component/147-4",[]],["title/147-5",[2907,44.56]],["name/147-5",[]],["text/147-5",[]],["component/147-5",[]],["title/147-6",[2908,42.932]],["name/147-6",[]],["text/147-6",[]],["component/147-6",[]],["title/147",[126,25.488]],["name/147",[126,0.759]],["text/147",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,196,4.223,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3266,4.083,3267,4.439]],["component/147",[196,1.162]],["title/148-1",[89,33.495]],["name/148-1",[]],["text/148-1",[]],["component/148-1",[]],["title/148-2",[1006,46.229]],["name/148-2",[]],["text/148-2",[]],["component/148-2",[]],["title/148",[390,39.954]],["name/148",[390,1.19]],["text/148",[5,1.158,6,1.467,9,1.834,11,1.23,13,2.559,14,2.056,18,2.953,46,1.952,52,1.266,64,1.985,68,4.077,81,3.38,96,2.005,109,3.296,126,1.751,133,1.339,134,2.586,137,2.81,181,1.098,196,5.29,218,1.664,246,2.069,257,1.952,259,3.073,279,3.322,287,2.232,322,2.29,390,4.315,438,4.328,499,2.275,507,1.58,509,1.534,510,2.636,532,1.584,544,2.641,654,1.928,716,2.772,736,2.81,780,4.279,781,2.702,788,2.133,991,2.18,997,2.18,1045,2.302,1242,2.275,1326,2.18,1360,2.021,1541,2.305,2377,2.897,2455,5.378,3268,7.859,3269,4.654,3270,2.772,3271,2.946,3272,2.946,3273,3.294,3274,3.294,3275,3.294,3276,3.294,3277,3.294,3278,3.294,3279,3.294,3280,2.946,3281,3.294]],["component/148",[196,1.162]],["title/149-1",[2907,44.56]],["name/149-1",[]],["text/149-1",[]],["component/149-1",[]],["title/149-2",[2908,42.932]],["name/149-2",[]],["text/149-2",[]],["component/149-2",[]],["title/149",[]],["name/149",[2917,1.545]],["text/149",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,196,4.234,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3266,3.409,3267,5.603]],["component/149",[196,1.162]],["title/150-1",[222,25.902,226,23.333]],["name/150-1",[]],["text/150-1",[]],["component/150-1",[]],["title/150",[9,12.054,11,10.134,14,16.942,196,20.921]],["name/150",[205,1.287]],["text/150",[3,2.92,9,2.224,11,2.34,14,3.912,18,2.854,80,3.773,96,3.048,196,5.273,222,3.395,226,3.059,435,4.21,1258,7.471,1259,7.325]],["component/150",[196,1.162]],["title/151-1",[310,45.585,344,40.385]],["name/151-1",[]],["text/151-1",[]],["component/151-1",[]],["title/151-2",[11,14.261,15,26.734]],["name/151-2",[]],["text/151-2",[]],["component/151-2",[]],["title/151-3",[11,11.848,199,25.898,441,21.302]],["name/151-3",[]],["text/151-3",[]],["component/151-3",[]],["title/151-4",[272,38.351,287,41.581]],["name/151-4",[]],["text/151-4",[]],["component/151-4",[]],["title/151-5",[18,18.089,133,20.72,196,24.459]],["name/151-5",[]],["text/151-5",[]],["component/151-5",[]],["title/151-6",[5,21.563,416,32.936]],["name/151-6",[]],["text/151-6",[]],["component/151-6",[]],["title/151-7",[241,43.851,416,32.936]],["name/151-7",[]],["text/151-7",[]],["component/151-7",[]],["title/151-8",[286,28.717,416,27.365,440,40.432]],["name/151-8",[]],["text/151-8",[]],["component/151-8",[]],["title/151-9",[172,35.215,416,32.936]],["name/151-9",[]],["text/151-9",[]],["component/151-9",[]],["title/151-10",[199,25.898,286,28.717,440,40.432]],["name/151-10",[]],["text/151-10",[]],["component/151-10",[]],["title/151-11",[5,11.885,229,22.259,255,21.67,256,24.348,442,22.016,443,16.482]],["name/151-11",[]],["text/151-11",[]],["component/151-11",[]],["title/151-12",[453,53.961,462,33.487]],["name/151-12",[]],["text/151-12",[]],["component/151-12",[]],["title/151-13",[13,24.65,68,24.978,196,24.459]],["name/151-13",[]],["text/151-13",[]],["component/151-13",[]],["title/151-14",[389,41.355]],["name/151-14",[]],["text/151-14",[]],["component/151-14",[]],["title/151-15",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/151-15",[]],["text/151-15",[]],["component/151-15",[]],["title/151-16",[126,20.299,1032,30.391]],["name/151-16",[]],["text/151-16",[]],["component/151-16",[]],["title/151-17",[220,23.711,1039,26.676]],["name/151-17",[]],["text/151-17",[]],["component/151-17",[]],["title/151",[541,35.613]],["name/151",[541,1.06]],["text/151",[2,0.224,3,0.231,4,0.316,5,2.092,6,0.992,8,0.712,9,0.739,11,1.037,12,0.295,13,0.842,14,0.247,15,0.529,18,1.583,22,0.883,24,0.328,26,0.353,28,0.371,30,1.534,48,1.504,50,1.02,64,0.732,65,0.665,68,3.283,73,0.954,74,1.762,77,0.414,80,0.298,81,2.115,82,1.899,89,1.162,91,0.311,94,0.421,95,1.365,96,0.46,98,0.719,106,0.472,107,0.778,109,1.658,112,0.585,122,0.383,123,0.381,124,0.476,126,1.264,129,0.448,130,0.439,133,0.905,134,2.18,136,1.779,137,2.347,139,2.19,147,0.957,150,1.925,151,0.689,154,1.1,158,0.926,166,0.335,169,0.371,171,0.915,172,3.027,174,0.442,175,0.397,176,1.26,178,0.453,181,2.607,196,4.007,199,2.266,202,0.339,204,0.702,207,0.938,214,1.36,215,0.799,216,0.385,217,1.523,218,0.321,220,0.469,221,0.44,222,0.736,223,1.893,224,0.421,225,0.624,226,1.453,229,0.418,235,0.311,238,0.461,241,1.592,242,0.705,250,0.725,255,1.427,256,0.458,272,1.392,279,1.115,282,0.799,286,1.506,303,1.055,307,1.128,309,1.25,314,0.416,320,0.29,321,0.638,333,0.347,334,0.676,335,1.173,344,0.418,360,0.458,363,0.458,382,0.624,386,0.489,388,0.327,389,0.341,390,0.33,391,1.195,393,1.509,401,0.909,413,0.414,416,3.081,417,0.448,419,1.803,420,3.94,422,2.274,432,0.631,438,0.631,440,1.766,441,1.449,442,1.134,443,2.174,447,1.75,448,0.394,453,1.068,455,0.681,462,0.951,466,1.153,467,0.535,470,0.397,471,2.266,474,1.046,475,0.445,476,1.97,477,0.515,482,0.51,485,1.466,490,0.297,491,0.522,499,0.439,505,0.738,507,1.068,508,0.395,509,1.037,510,3.57,516,1.434,518,1.87,520,1.348,522,0.426,523,2.327,525,0.535,528,0.414,532,1.838,533,1.487,546,0.62,548,0.366,549,0.676,565,0.436,576,1.245,582,0.442,590,0.39,598,1.211,617,0.476,628,0.394,640,0.719,657,2.314,659,0.559,660,0.439,667,0.461,690,2.251,698,0.265,701,0.489,702,0.515,703,1.173,704,2.238,709,0.412,710,0.51,713,1.022,716,1.022,718,0.485,723,0.828,736,0.542,737,2.069,741,0.828,742,0.934,743,0.636,744,1.16,745,0.542,746,2.008,747,0.489,748,0.465,749,0.515,750,0.636,751,0.515,753,0.472,754,0.499,755,0.51,763,0.428,770,0.436,780,0.981,781,0.996,783,0.461,784,0.934,785,0.745,787,1.785,793,0.423,802,0.442,907,0.399,909,0.776,924,0.409,925,0.522,927,0.375,949,0.399,958,0.394,968,0.776,995,0.51,1032,0.863,1033,0.431,1039,0.528,1111,0.426,1116,0.48,1120,0.388,1130,1.284,1133,2.281,1161,0.361,1205,0.436,1242,1.203,1243,0.412,1252,1.264,1259,0.579,1297,0.953,1302,1.188,1321,0.861,1324,0.448,1329,0.579,1360,0.39,1386,0.431,1889,0.421,2074,0.368,2088,0.439,2123,1.569,2147,1.466,2165,0.51,2448,0.454,2451,0.579,2453,0.579,2455,3.616,2520,1.532,2551,0.568,2629,0.499,2687,1.587,2792,0.468,2818,0.431,2909,0.31,2928,1.466,2929,0.528,2967,0.451,2968,0.439,2980,0.818,3266,0.499,3271,0.568,3272,0.568,3280,0.568,3284,0.59,3285,0.636,3286,0.636,3287,0.636,3288,0.636,3289,0.636,3290,0.603,3291,0.55,3292,0.55,3293,0.636,3294,0.636,3295,0.636,3299,0.636,3300,0.636,3301,0.636,3304,0.636,3305,0.636,3306,0.636,3307,0.636,3308,0.636,3309,0.636,3310,0.636,3311,1.181,3312,1.742,3313,1.742,3314,0.458,3315,0.881,3316,0.926,3317,0.683]],["component/151",[196,1.162]],["title/152-1",[310,57.238]],["name/152-1",[]],["text/152-1",[]],["component/152-1",[]],["title/152-2",[15,33.567]],["name/152-2",[]],["text/152-2",[]],["component/152-2",[]],["title/152-3",[199,39.137]],["name/152-3",[]],["text/152-3",[]],["component/152-3",[]],["title/152-4",[196,36.964]],["name/152-4",[]],["text/152-4",[]],["component/152-4",[]],["title/152-5",[261,28.922,1954,38.537]],["name/152-5",[]],["text/152-5",[]],["component/152-5",[]],["title/152-6",[30,22.555,89,22.164,241,36.434]],["name/152-6",[]],["text/152-6",[]],["component/152-6",[]],["title/152-7",[30,27.147,303,37.139]],["name/152-7",[]],["text/152-7",[]],["component/152-7",[]],["title/152-8",[374,33.375,707,35.628]],["name/152-8",[]],["text/152-8",[]],["component/152-8",[]],["title/152",[208,30.391,630,31.725]],["name/152",[3216,1.734]],["text/152",[0,0.524,1,0.636,2,0.994,4,1.66,5,1.496,6,1.489,11,0.518,12,0.388,15,0.364,18,0.999,22,0.423,28,0.486,30,1.691,48,0.407,63,0.588,64,0.503,73,1.22,74,2.78,77,0.543,81,3.817,82,0.861,89,0.968,91,2.08,92,1.683,93,2.064,95,0.369,96,1.613,97,0.76,110,0.662,112,0.402,114,0.486,115,0.712,121,1.065,123,0.501,128,1.123,129,0.588,132,0.588,133,2.303,134,0.408,136,0.389,137,2.478,138,0.584,139,1.518,149,1.174,150,1.237,154,3.576,157,0.712,166,0.439,171,0.825,177,1.018,181,3.427,185,1.431,187,0.543,196,3.416,199,2.55,208,0.778,223,0.512,226,0.847,229,0.549,233,0.47,241,3.043,242,0.485,246,0.524,251,0.543,261,0.393,266,0.444,286,0.885,303,3.038,309,0.468,315,0.54,320,0.381,325,1.683,331,1.323,340,0.662,348,0.862,374,1.211,385,0.835,387,1.269,405,0.852,415,1.998,416,0.448,417,1.107,419,0.597,440,1.246,442,0.543,443,0.407,447,0.546,450,1.711,455,1.25,462,0.858,470,0.522,478,1.177,483,0.702,490,0.735,496,0.58,507,1.604,509,1.557,510,2.12,514,0.379,518,0.376,528,0.543,530,0.746,532,1.838,533,0.712,539,0.584,541,0.386,548,0.905,551,2.94,558,0.662,582,0.58,631,3.323,655,0.899,657,2.797,660,1.085,678,0.576,685,1.289,686,1.305,687,1.405,688,0.702,689,0.702,690,2.721,691,3.381,692,3.513,693,3.444,697,0.702,698,0.348,699,0.76,716,0.702,722,0.927,736,0.712,737,0.775,763,1.059,769,0.592,770,1.931,771,1.519,775,0.549,793,1.046,803,0.631,907,0.524,938,1.688,950,1.158,960,0.559,972,1.323,991,0.552,1006,2.293,1032,0.778,1045,0.29,1057,0.669,1118,0.677,1130,0.615,1132,0.862,1154,0.625,1161,1.264,1170,0.62,1205,0.573,1215,1.047,1247,1.21,1250,0.625,1259,0.76,1265,0.812,1288,0.723,1302,2.28,1321,0.592,1357,1.474,1515,1.26,1541,0.584,1638,0.631,1670,0.631,1675,0.723,1748,1.188,1759,0.896,1833,0.896,1869,2.895,1954,0.524,2069,0.812,2074,0.483,2077,0.896,2270,0.649,2340,0.792,2444,0.812,2448,1.123,2451,1.431,2453,1.431,2455,2.282,2494,0.669,2496,0.835,2507,0.669,2508,0.734,2520,0.734,2525,0.835,2531,2.392,3067,0.862,3187,1.361,3231,3.954,3236,0.812,3238,0.723,3239,0.702,3244,1.529,3245,1.623,3268,0.702,3290,0.792,3291,0.723,3292,0.723,3318,1.46,3319,0.775,3320,1.078,3321,1.131,3322,1.529,3323,0.942,3324,0.76,3325,0.746,3326,0.792,3327,0.792,3328,0.792,3329,0.792,3330,0.792,3331,0.792,3332,0.792,3333,0.792,3334,0.792,3335,0.792,3336,0.792,3337,0.792,3338,0.792,3339,0.792,3340,0.792,3341,0.792,3342,1.774,3343,0.942,3344,0.942,3345,0.942,3346,3.105,3347,2.514,3348,0.812,3349,0.812,3350,0.775,3351,0.942,3352,0.942,3353,1.774,3354,2.514,3355,0.942,3356,0.942,3357,0.942,3358,0.942,3359,0.942,3360,0.942,3361,0.942,3362,0.942,3363,0.942,3364,0.942,3365,0.942,3366,0.942,3367,0.942,3368,0.942,3369,0.942,3370,0.942,3371,0.942,3372,0.942,3373,0.942,3374,0.942,3375,0.942,3376,0.942,3377,0.942,3378,0.942,3379,0.942,3380,0.942,3381,0.942,3382,0.942,3383,0.942,3384,0.942,3385,1.774,3386,0.942,3387,0.942,3388,0.942,3389,0.942,3390,1.774,3391,1.572,3392,0.942,3393,0.862]],["component/152",[196,1.162]],["title/153-1",[344,50.708]],["name/153-1",[]],["text/153-1",[]],["component/153-1",[]],["title/153-2",[374,33.375,707,35.628]],["name/153-2",[]],["text/153-2",[]],["component/153-2",[]],["title/153",[19,38.169,20,31.351]],["name/153",[205,1.287]],["text/153",[0,6.006,2,2.95,3,2.2,4,3.009,5,2.129,9,1.675,11,2.223,18,2.15,20,3.095,30,4.231,68,2.968,73,4.575,89,3.632,95,2.68,112,4.029,196,4.588,208,3.001,241,4.33,303,5.057,320,2.767,417,4.269,441,2.531,465,4.539,518,3.764,549,3.376,630,3.132,968,2.698,1357,4.01]],["component/153",[196,1.162]],["title/154-1",[9,16.962,11,14.261]],["name/154-1",[]],["text/154-1",[]],["component/154-1",[]],["title/154-2",[10,41.906]],["name/154-2",[]],["text/154-2",[]],["component/154-2",[]],["title/154-3",[968,34.315]],["name/154-3",[]],["text/154-3",[]],["component/154-3",[]],["title/154-4",[374,33.375,707,35.628]],["name/154-4",[]],["text/154-4",[]],["component/154-4",[]],["title/154",[2,27.205]],["name/154",[2,0.81]],["text/154",[2,3.759,3,1.447,5,2.161,9,2.665,10,3.753,11,2.673,12,2.419,13,1.131,14,1.549,15,2.269,18,0.83,24,2.055,26,1.299,30,1.763,39,1.672,46,2.362,48,1.14,89,1.017,91,1.143,96,1.51,112,1.128,134,1.143,138,1.637,149,1.662,176,2.455,181,3.04,196,3.845,199,2.645,207,2.147,221,1.445,226,2.624,235,1.146,241,1.672,251,1.523,303,1.416,320,1.821,321,1.459,355,1.697,372,2.718,387,1.333,388,2.676,401,2.08,405,1.268,415,1.398,432,2.073,444,1.71,446,1.876,518,1.054,630,1.21,722,1.38,772,1.548,802,1.626,927,1.38,968,4.063,983,1.435,1168,6.721,1215,1.1,1311,1.507,2337,4.593,2382,2.13,2545,4.764,3259,1.801,3260,1.801,3263,1.801,3264,1.784,3394,2.025,3395,2.276,3396,2.641,3397,2.025,3398,2.025,3399,2.276,3400,2.641]],["component/154",[196,1.162]],["title/155-1",[52,23.584,139,24.374]],["name/155-1",[]],["text/155-1",[]],["component/155-1",[]],["title/155-2",[1045,21.29,1666,24.015]],["name/155-2",[]],["text/155-2",[]],["component/155-2",[]],["title/155",[]],["name/155",[2853,1.51]],["text/155",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,196,4.121,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3266,4.951]],["component/155",[196,1.162]],["title/156-1",[149,21.259,708,25.823,1215,23.97]],["name/156-1",[]],["text/156-1",[]],["component/156-1",[]],["title/156-2",[52,23.584,139,24.374]],["name/156-2",[]],["text/156-2",[]],["component/156-2",[]],["title/156-3",[1045,21.29,1666,24.015]],["name/156-3",[]],["text/156-3",[]],["component/156-3",[]],["title/156-4",[220,23.711,1039,26.676]],["name/156-4",[]],["text/156-4",[]],["component/156-4",[]],["title/156-5",[2907,44.56]],["name/156-5",[]],["text/156-5",[]],["component/156-5",[]],["title/156-6",[2908,42.932]],["name/156-6",[]],["text/156-6",[]],["component/156-6",[]],["title/156",[126,25.488]],["name/156",[126,0.759]],["text/156",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,196,4.223,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3266,4.083,3267,4.439]],["component/156",[196,1.162]],["title/157-1",[89,33.495]],["name/157-1",[]],["text/157-1",[]],["component/157-1",[]],["title/157-2",[1006,46.229]],["name/157-2",[]],["text/157-2",[]],["component/157-2",[]],["title/157",[390,39.954]],["name/157",[390,1.19]],["text/157",[5,1.158,6,1.467,9,1.834,11,1.23,13,2.559,14,2.056,18,2.953,46,1.952,52,1.266,64,1.985,68,4.077,81,3.38,96,2.005,109,3.296,126,1.751,133,1.339,134,2.586,137,2.81,181,1.098,196,5.29,218,1.664,246,2.069,257,1.952,259,3.073,279,3.322,287,2.232,322,2.29,390,4.315,438,4.328,499,2.275,507,1.58,509,1.534,510,2.636,532,1.584,544,2.641,654,1.928,716,2.772,736,2.81,780,4.279,781,2.702,788,2.133,991,2.18,997,2.18,1045,2.302,1242,2.275,1326,2.18,1360,2.021,1541,2.305,2377,2.897,2455,5.378,3268,7.859,3269,4.654,3270,2.772,3271,2.946,3272,2.946,3273,3.294,3274,3.294,3275,3.294,3276,3.294,3277,3.294,3278,3.294,3279,3.294,3280,2.946,3281,3.294]],["component/157",[196,1.162]],["title/158-1",[2907,44.56]],["name/158-1",[]],["text/158-1",[]],["component/158-1",[]],["title/158-2",[2908,42.932]],["name/158-2",[]],["text/158-2",[]],["component/158-2",[]],["title/158",[]],["name/158",[2917,1.545]],["text/158",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,196,4.234,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3266,3.409,3267,5.603]],["component/158",[196,1.162]],["title/159-1",[222,25.902,226,23.333]],["name/159-1",[]],["text/159-1",[]],["component/159-1",[]],["title/159",[9,12.054,11,10.134,14,16.942,196,20.921]],["name/159",[205,1.287]],["text/159",[3,2.92,9,2.224,11,2.34,14,3.912,18,2.854,80,3.773,96,3.048,196,5.273,222,3.395,226,3.059,435,4.21,1258,7.471,1259,7.325]],["component/159",[196,1.162]],["title/160-1",[310,45.585,344,40.385]],["name/160-1",[]],["text/160-1",[]],["component/160-1",[]],["title/160-2",[11,14.261,15,26.734]],["name/160-2",[]],["text/160-2",[]],["component/160-2",[]],["title/160-3",[11,11.848,199,25.898,441,21.302]],["name/160-3",[]],["text/160-3",[]],["component/160-3",[]],["title/160-4",[272,38.351,287,41.581]],["name/160-4",[]],["text/160-4",[]],["component/160-4",[]],["title/160-5",[18,18.089,133,20.72,196,24.459]],["name/160-5",[]],["text/160-5",[]],["component/160-5",[]],["title/160-6",[5,21.563,416,32.936]],["name/160-6",[]],["text/160-6",[]],["component/160-6",[]],["title/160-7",[241,43.851,416,32.936]],["name/160-7",[]],["text/160-7",[]],["component/160-7",[]],["title/160-8",[286,28.717,416,27.365,440,40.432]],["name/160-8",[]],["text/160-8",[]],["component/160-8",[]],["title/160-9",[172,35.215,416,32.936]],["name/160-9",[]],["text/160-9",[]],["component/160-9",[]],["title/160-10",[199,25.898,286,28.717,440,40.432]],["name/160-10",[]],["text/160-10",[]],["component/160-10",[]],["title/160-11",[5,11.885,229,22.259,255,21.67,256,24.348,442,22.016,443,16.482]],["name/160-11",[]],["text/160-11",[]],["component/160-11",[]],["title/160-12",[453,53.961,462,33.487]],["name/160-12",[]],["text/160-12",[]],["component/160-12",[]],["title/160-13",[13,24.65,68,24.978,196,24.459]],["name/160-13",[]],["text/160-13",[]],["component/160-13",[]],["title/160-14",[389,41.355]],["name/160-14",[]],["text/160-14",[]],["component/160-14",[]],["title/160-15",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/160-15",[]],["text/160-15",[]],["component/160-15",[]],["title/160-16",[126,20.299,1032,30.391]],["name/160-16",[]],["text/160-16",[]],["component/160-16",[]],["title/160-17",[220,23.711,1039,26.676]],["name/160-17",[]],["text/160-17",[]],["component/160-17",[]],["title/160",[541,35.613]],["name/160",[541,1.06]],["text/160",[2,0.224,3,0.231,4,0.316,5,2.092,6,0.992,8,0.712,9,0.739,11,1.037,12,0.295,13,0.842,14,0.247,15,0.529,18,1.583,22,0.883,24,0.328,26,0.353,28,0.371,30,1.534,48,1.504,50,1.02,64,0.732,65,0.665,68,3.283,73,0.954,74,1.762,77,0.414,80,0.298,81,2.115,82,1.899,89,1.162,91,0.311,94,0.421,95,1.365,96,0.46,98,0.719,106,0.472,107,0.778,109,1.658,112,0.585,122,0.383,123,0.381,124,0.476,126,1.264,129,0.448,130,0.439,133,0.905,134,2.18,136,1.779,137,2.347,139,2.19,147,0.957,150,1.925,151,0.689,154,1.1,158,0.926,166,0.335,169,0.371,171,0.915,172,3.027,174,0.442,175,0.397,176,1.26,178,0.453,181,2.607,196,4.007,199,2.266,202,0.339,204,0.702,207,0.938,214,1.36,215,0.799,216,0.385,217,1.523,218,0.321,220,0.469,221,0.44,222,0.736,223,1.893,224,0.421,225,0.624,226,1.453,229,0.418,235,0.311,238,0.461,241,1.592,242,0.705,250,0.725,255,1.427,256,0.458,272,1.392,279,1.115,282,0.799,286,1.506,303,1.055,307,1.128,309,1.25,314,0.416,320,0.29,321,0.638,333,0.347,334,0.676,335,1.173,344,0.418,360,0.458,363,0.458,382,0.624,386,0.489,388,0.327,389,0.341,390,0.33,391,1.195,393,1.509,401,0.909,413,0.414,416,3.081,417,0.448,419,1.803,420,3.94,422,2.274,432,0.631,438,0.631,440,1.766,441,1.449,442,1.134,443,2.174,447,1.75,448,0.394,453,1.068,455,0.681,462,0.951,466,1.153,467,0.535,470,0.397,471,2.266,474,1.046,475,0.445,476,1.97,477,0.515,482,0.51,485,1.466,490,0.297,491,0.522,499,0.439,505,0.738,507,1.068,508,0.395,509,1.037,510,3.57,516,1.434,518,1.87,520,1.348,522,0.426,523,2.327,525,0.535,528,0.414,532,1.838,533,1.487,546,0.62,548,0.366,549,0.676,565,0.436,576,1.245,582,0.442,590,0.39,598,1.211,617,0.476,628,0.394,640,0.719,657,2.314,659,0.559,660,0.439,667,0.461,690,2.251,698,0.265,701,0.489,702,0.515,703,1.173,704,2.238,709,0.412,710,0.51,713,1.022,716,1.022,718,0.485,723,0.828,736,0.542,737,2.069,741,0.828,742,0.934,743,0.636,744,1.16,745,0.542,746,2.008,747,0.489,748,0.465,749,0.515,750,0.636,751,0.515,753,0.472,754,0.499,755,0.51,763,0.428,770,0.436,780,0.981,781,0.996,783,0.461,784,0.934,785,0.745,787,1.785,793,0.423,802,0.442,907,0.399,909,0.776,924,0.409,925,0.522,927,0.375,949,0.399,958,0.394,968,0.776,995,0.51,1032,0.863,1033,0.431,1039,0.528,1111,0.426,1116,0.48,1120,0.388,1130,1.284,1133,2.281,1161,0.361,1205,0.436,1242,1.203,1243,0.412,1252,1.264,1259,0.579,1297,0.953,1302,1.188,1321,0.861,1324,0.448,1329,0.579,1360,0.39,1386,0.431,1889,0.421,2074,0.368,2088,0.439,2123,1.569,2147,1.466,2165,0.51,2448,0.454,2451,0.579,2453,0.579,2455,3.616,2520,1.532,2551,0.568,2629,0.499,2687,1.587,2792,0.468,2818,0.431,2909,0.31,2928,1.466,2929,0.528,2967,0.451,2968,0.439,2980,0.818,3266,0.499,3271,0.568,3272,0.568,3280,0.568,3284,0.59,3285,0.636,3286,0.636,3287,0.636,3288,0.636,3289,0.636,3290,0.603,3291,0.55,3292,0.55,3293,0.636,3294,0.636,3295,0.636,3299,0.636,3300,0.636,3301,0.636,3304,0.636,3305,0.636,3306,0.636,3307,0.636,3308,0.636,3309,0.636,3310,0.636,3311,1.181,3312,1.742,3313,1.742,3314,0.458,3315,0.881,3316,0.926,3317,0.683]],["component/160",[196,1.162]],["title/161-1",[310,57.238]],["name/161-1",[]],["text/161-1",[]],["component/161-1",[]],["title/161-2",[15,33.567]],["name/161-2",[]],["text/161-2",[]],["component/161-2",[]],["title/161-3",[199,39.137]],["name/161-3",[]],["text/161-3",[]],["component/161-3",[]],["title/161-4",[196,36.964]],["name/161-4",[]],["text/161-4",[]],["component/161-4",[]],["title/161-5",[261,28.922,1954,38.537]],["name/161-5",[]],["text/161-5",[]],["component/161-5",[]],["title/161-6",[30,22.555,89,22.164,241,36.434]],["name/161-6",[]],["text/161-6",[]],["component/161-6",[]],["title/161-7",[30,27.147,303,37.139]],["name/161-7",[]],["text/161-7",[]],["component/161-7",[]],["title/161-8",[374,33.375,707,35.628]],["name/161-8",[]],["text/161-8",[]],["component/161-8",[]],["title/161",[208,30.391,630,31.725]],["name/161",[3216,1.734]],["text/161",[0,0.524,1,0.636,2,0.994,4,1.66,5,1.496,6,1.489,11,0.518,12,0.388,15,0.364,18,0.999,22,0.423,28,0.486,30,1.691,48,0.407,63,0.588,64,0.503,73,1.22,74,2.78,77,0.543,81,3.817,82,0.861,89,0.968,91,2.08,92,1.683,93,2.064,95,0.369,96,1.613,97,0.76,110,0.662,112,0.402,114,0.486,115,0.712,121,1.065,123,0.501,128,1.123,129,0.588,132,0.588,133,2.303,134,0.408,136,0.389,137,2.478,138,0.584,139,1.518,149,1.174,150,1.237,154,3.576,157,0.712,166,0.439,171,0.825,177,1.018,181,3.427,185,1.431,187,0.543,196,3.416,199,2.55,208,0.778,223,0.512,226,0.847,229,0.549,233,0.47,241,3.043,242,0.485,246,0.524,251,0.543,261,0.393,266,0.444,286,0.885,303,3.038,309,0.468,315,0.54,320,0.381,325,1.683,331,1.323,340,0.662,348,0.862,374,1.211,385,0.835,387,1.269,405,0.852,415,1.998,416,0.448,417,1.107,419,0.597,440,1.246,442,0.543,443,0.407,447,0.546,450,1.711,455,1.25,462,0.858,470,0.522,478,1.177,483,0.702,490,0.735,496,0.58,507,1.604,509,1.557,510,2.12,514,0.379,518,0.376,528,0.543,530,0.746,532,1.838,533,0.712,539,0.584,541,0.386,548,0.905,551,2.94,558,0.662,582,0.58,631,3.323,655,0.899,657,2.797,660,1.085,678,0.576,685,1.289,686,1.305,687,1.405,688,0.702,689,0.702,690,2.721,691,3.381,692,3.513,693,3.444,697,0.702,698,0.348,699,0.76,716,0.702,722,0.927,736,0.712,737,0.775,763,1.059,769,0.592,770,1.931,771,1.519,775,0.549,793,1.046,803,0.631,907,0.524,938,1.688,950,1.158,960,0.559,972,1.323,991,0.552,1006,2.293,1032,0.778,1045,0.29,1057,0.669,1118,0.677,1130,0.615,1132,0.862,1154,0.625,1161,1.264,1170,0.62,1205,0.573,1215,1.047,1247,1.21,1250,0.625,1259,0.76,1265,0.812,1288,0.723,1302,2.28,1321,0.592,1357,1.474,1515,1.26,1541,0.584,1638,0.631,1670,0.631,1675,0.723,1748,1.188,1759,0.896,1833,0.896,1869,2.895,1954,0.524,2069,0.812,2074,0.483,2077,0.896,2270,0.649,2340,0.792,2444,0.812,2448,1.123,2451,1.431,2453,1.431,2455,2.282,2494,0.669,2496,0.835,2507,0.669,2508,0.734,2520,0.734,2525,0.835,2531,2.392,3067,0.862,3187,1.361,3231,3.954,3236,0.812,3238,0.723,3239,0.702,3244,1.529,3245,1.623,3268,0.702,3290,0.792,3291,0.723,3292,0.723,3318,1.46,3319,0.775,3320,1.078,3321,1.131,3322,1.529,3323,0.942,3324,0.76,3325,0.746,3326,0.792,3327,0.792,3328,0.792,3329,0.792,3330,0.792,3331,0.792,3332,0.792,3333,0.792,3334,0.792,3335,0.792,3336,0.792,3337,0.792,3338,0.792,3339,0.792,3340,0.792,3341,0.792,3342,1.774,3343,0.942,3344,0.942,3345,0.942,3346,3.105,3347,2.514,3348,0.812,3349,0.812,3350,0.775,3351,0.942,3352,0.942,3353,1.774,3354,2.514,3355,0.942,3356,0.942,3357,0.942,3358,0.942,3359,0.942,3360,0.942,3361,0.942,3362,0.942,3363,0.942,3364,0.942,3365,0.942,3366,0.942,3367,0.942,3368,0.942,3369,0.942,3370,0.942,3371,0.942,3372,0.942,3373,0.942,3374,0.942,3375,0.942,3376,0.942,3377,0.942,3378,0.942,3379,0.942,3380,0.942,3381,0.942,3382,0.942,3383,0.942,3384,0.942,3385,1.774,3386,0.942,3387,0.942,3388,0.942,3389,0.942,3390,1.774,3391,1.572,3392,0.942,3393,0.862]],["component/161",[196,1.162]],["title/162-1",[344,50.708]],["name/162-1",[]],["text/162-1",[]],["component/162-1",[]],["title/162-2",[374,33.375,707,35.628]],["name/162-2",[]],["text/162-2",[]],["component/162-2",[]],["title/162",[19,38.169,20,31.351]],["name/162",[205,1.287]],["text/162",[0,6.006,2,2.95,3,2.2,4,3.009,5,2.129,9,1.675,11,2.223,18,2.15,20,3.095,30,4.231,68,2.968,73,4.575,89,3.632,95,2.68,112,4.029,196,4.588,208,3.001,241,4.33,303,5.057,320,2.767,417,4.269,441,2.531,465,4.539,518,3.764,549,3.376,630,3.132,968,2.698,1357,4.01]],["component/162",[196,1.162]],["title/163-1",[9,16.962,11,14.261]],["name/163-1",[]],["text/163-1",[]],["component/163-1",[]],["title/163-2",[10,41.906]],["name/163-2",[]],["text/163-2",[]],["component/163-2",[]],["title/163-3",[968,34.315]],["name/163-3",[]],["text/163-3",[]],["component/163-3",[]],["title/163-4",[374,33.375,707,35.628]],["name/163-4",[]],["text/163-4",[]],["component/163-4",[]],["title/163",[2,27.205]],["name/163",[2,0.81]],["text/163",[2,3.759,3,1.447,5,2.161,9,2.665,10,3.753,11,2.673,12,2.419,13,1.131,14,1.549,15,2.269,18,0.83,24,2.055,26,1.299,30,1.763,39,1.672,46,2.362,48,1.14,89,1.017,91,1.143,96,1.51,112,1.128,134,1.143,138,1.637,149,1.662,176,2.455,181,3.04,196,3.845,199,2.645,207,2.147,221,1.445,226,2.624,235,1.146,241,1.672,251,1.523,303,1.416,320,1.821,321,1.459,355,1.697,372,2.718,387,1.333,388,2.676,401,2.08,405,1.268,415,1.398,432,2.073,444,1.71,446,1.876,518,1.054,630,1.21,722,1.38,772,1.548,802,1.626,927,1.38,968,4.063,983,1.435,1168,6.721,1215,1.1,1311,1.507,2337,4.593,2382,2.13,2545,4.764,3259,1.801,3260,1.801,3263,1.801,3264,1.784,3394,2.025,3395,2.276,3396,2.641,3397,2.025,3398,2.025,3399,2.276,3400,2.641]],["component/163",[196,1.162]],["title/164-1",[52,23.584,139,24.374]],["name/164-1",[]],["text/164-1",[]],["component/164-1",[]],["title/164-2",[1045,21.29,1666,24.015]],["name/164-2",[]],["text/164-2",[]],["component/164-2",[]],["title/164",[]],["name/164",[2853,1.51]],["text/164",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,197,5.007,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3401,5.744]],["component/164",[197,1.412]],["title/165-1",[149,21.259,708,25.823,1215,23.97]],["name/165-1",[]],["text/165-1",[]],["component/165-1",[]],["title/165-2",[52,23.584,139,24.374]],["name/165-2",[]],["text/165-2",[]],["component/165-2",[]],["title/165-3",[1045,21.29,1666,24.015]],["name/165-3",[]],["text/165-3",[]],["component/165-3",[]],["title/165-4",[220,23.711,1039,26.676]],["name/165-4",[]],["text/165-4",[]],["component/165-4",[]],["title/165-5",[2907,44.56]],["name/165-5",[]],["text/165-5",[]],["component/165-5",[]],["title/165-6",[2908,42.932]],["name/165-6",[]],["text/165-6",[]],["component/165-6",[]],["title/165",[126,25.488]],["name/165",[126,0.759]],["text/165",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,197,5.131,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3401,4.738,3402,4.653]],["component/165",[197,1.412]],["title/166-1",[89,33.495]],["name/166-1",[]],["text/166-1",[]],["component/166-1",[]],["title/166-2",[1006,46.229]],["name/166-2",[]],["text/166-2",[]],["component/166-2",[]],["title/166",[390,39.954]],["name/166",[390,1.19]],["text/166",[6,1.783,9,1.107,11,0.93,14,2.397,15,2.688,18,3.426,30,1.771,47,5.858,81,2.039,82,3.379,93,1.941,96,1.517,109,1.737,126,1.324,133,1.627,134,3.015,137,3.721,139,1.59,197,5.865,198,3.142,199,3.134,218,3.117,259,2.324,279,3.09,321,1.466,390,4.388,438,5.404,450,2.434,490,1.873,499,2.764,507,1.921,509,1.864,510,3.073,516,3.974,532,1.926,596,1.795,654,2.343,677,2.2,698,1.669,784,3.081,789,3.645,790,3.645,791,3.645,793,2.665,907,2.514,997,2.65,1002,3.718,1032,1.983,1045,2.612,1326,2.65,1541,2.801,3403,3.718,3404,3.8,3405,3.175,3406,4.299]],["component/166",[197,1.412]],["title/167-1",[2907,44.56]],["name/167-1",[]],["text/167-1",[]],["component/167-1",[]],["title/167-2",[2908,42.932]],["name/167-2",[]],["text/167-2",[]],["component/167-2",[]],["title/167",[]],["name/167",[2917,1.545]],["text/167",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,197,5.145,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3401,3.955,3402,5.872]],["component/167",[197,1.412]],["title/168-1",[222,25.902,226,23.333]],["name/168-1",[]],["text/168-1",[]],["component/168-1",[]],["title/168-2",[19,31.713,105,19.953,909,22.707]],["name/168-2",[]],["text/168-2",[]],["component/168-2",[]],["title/168",[9,12.054,11,10.134,14,16.942,197,25.419]],["name/168",[205,1.287]],["text/168",[3,2.388,9,2.758,11,2.319,14,3.877,18,2.334,26,3.652,30,2.91,33,4.215,80,3.085,96,2.493,105,2.574,181,2.192,197,5.816,222,2.777,226,2.501,235,3.223,261,3.1,435,3.442,909,2.93,941,4.282,1260,6.794,1261,6.794,1262,6.794,1263,6.794,1264,5.99,3402,5.882]],["component/168",[197,1.412]],["title/169-1",[968,34.315]],["name/169-1",[]],["text/169-1",[]],["component/169-1",[]],["title/169-2",[105,30.154]],["name/169-2",[]],["text/169-2",[]],["component/169-2",[]],["title/169-3",[11,11.848,51,29.259,234,30.206]],["name/169-3",[]],["text/169-3",[]],["component/169-3",[]],["title/169",[2,27.205]],["name/169",[2,0.81]],["text/169",[2,3.028,3,2.903,4,2.469,5,1.071,9,2.607,11,2.514,12,3.372,13,1.474,14,2.821,24,1.571,36,1.806,51,1.75,57,1.567,80,1.43,91,3.075,95,1.349,105,3.356,109,2.73,116,2.029,136,1.419,137,1.128,149,1.271,181,3.252,197,5.687,208,1.51,209,1.964,218,1.54,220,1.178,221,2.631,234,1.806,235,2.435,282,2.006,315,1.974,318,2.179,387,1.736,401,1.591,405,1.653,432,3.274,475,2.133,501,1.821,546,1.558,565,2.092,596,1.367,634,2.148,645,1.915,887,2.472,891,3.663,909,1.358,927,1.799,968,3.82,1037,2.211,1088,1.595,1120,1.862,1161,2.821,1310,3.527,1311,1.964,1326,2.018,1451,2.532,2792,2.246,2911,1.621,2913,1.621,2915,1.621,2921,3.149,3402,4.445,3407,3.696,3408,3.696]],["component/169",[197,1.412]],["title/170-1",[321,28.208]],["name/170-1",[]],["text/170-1",[]],["component/170-1",[]],["title/170-2",[12,20.253,14,16.942,18,15.472,197,25.419]],["name/170-2",[]],["text/170-2",[]],["component/170-2",[]],["title/170-3",[389,41.355]],["name/170-3",[]],["text/170-3",[]],["component/170-3",[]],["title/170-4",[126,20.299,391,32.936]],["name/170-4",[]],["text/170-4",[]],["component/170-4",[]],["title/170-5",[126,20.299,1032,30.391]],["name/170-5",[]],["text/170-5",[]],["component/170-5",[]],["title/170",[541,35.613]],["name/170",[541,1.06]],["text/170",[2,0.62,5,1.092,6,1.384,9,1.595,11,1.341,14,1.962,15,1.354,18,2.263,22,0.89,28,1.024,48,1.515,50,1.819,73,0.962,74,2.367,80,0.824,81,2.94,89,0.764,93,2.026,95,0.777,96,1.178,107,1.126,109,0.762,112,0.847,123,1.054,126,1.67,133,1.698,137,1.546,139,2.739,147,0.965,166,1.637,169,1.024,181,1.036,197,5.636,199,2.565,204,1.797,207,0.946,214,1.898,216,1.063,217,1.001,220,1.201,221,0.637,222,0.742,224,1.163,225,1.597,226,2.792,236,1.328,242,1.02,250,1.857,309,2.345,314,1.15,320,0.802,334,0.979,335,0.925,382,2.148,389,0.943,391,2.71,413,1.144,419,0.667,422,3.776,441,0.734,450,1.889,455,0.986,471,2.123,507,1.491,509,1.447,510,2.874,516,2.692,518,1.883,520,1.881,523,2.18,532,1.495,534,1.424,546,1.588,549,0.979,590,1.078,617,1.316,631,2.766,640,1.041,657,3.215,685,1.441,690,3.128,691,2.815,692,2.924,693,2.867,698,0.733,758,1.459,770,1.205,771,1.198,780,0.99,784,3.886,785,1.078,789,2.83,790,1.6,791,1.6,793,2.069,907,1.103,909,1.861,924,1.132,949,1.103,958,1.088,1032,2.501,1033,3.422,1039,1.351,1111,1.176,1116,1.328,1120,1.073,1243,1.138,1264,1.6,1386,1.19,1889,1.163,1921,1.757,2074,1.016,2088,1.213,2818,1.19,2909,0.856,2967,1.247,2968,1.213,3235,1.668,3311,2.832,3320,1.205,3321,1.265,3403,2.887,3405,1.393,3409,3.338,3410,1.757,3411,5.049,3412,1.887,3413,6.197,3414,1.887,3415,4.488,3416,4.488,3417,1.887,3418,3.338,3419,1.499]],["component/170",[197,1.412]],["title/171-1",[52,23.584,139,24.374]],["name/171-1",[]],["text/171-1",[]],["component/171-1",[]],["title/171-2",[1045,21.29,1666,24.015]],["name/171-2",[]],["text/171-2",[]],["component/171-2",[]],["title/171",[]],["name/171",[2853,1.51]],["text/171",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,197,5.007,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3401,5.744]],["component/171",[197,1.412]],["title/172-1",[149,21.259,708,25.823,1215,23.97]],["name/172-1",[]],["text/172-1",[]],["component/172-1",[]],["title/172-2",[52,23.584,139,24.374]],["name/172-2",[]],["text/172-2",[]],["component/172-2",[]],["title/172-3",[1045,21.29,1666,24.015]],["name/172-3",[]],["text/172-3",[]],["component/172-3",[]],["title/172-4",[220,23.711,1039,26.676]],["name/172-4",[]],["text/172-4",[]],["component/172-4",[]],["title/172-5",[2907,44.56]],["name/172-5",[]],["text/172-5",[]],["component/172-5",[]],["title/172-6",[2908,42.932]],["name/172-6",[]],["text/172-6",[]],["component/172-6",[]],["title/172",[126,25.488]],["name/172",[126,0.759]],["text/172",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,197,5.131,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3401,4.738,3402,4.653]],["component/172",[197,1.412]],["title/173-1",[89,33.495]],["name/173-1",[]],["text/173-1",[]],["component/173-1",[]],["title/173-2",[1006,46.229]],["name/173-2",[]],["text/173-2",[]],["component/173-2",[]],["title/173",[390,39.954]],["name/173",[390,1.19]],["text/173",[6,1.76,9,1.092,11,0.918,14,2.374,15,2.662,18,3.553,30,1.748,47,5.799,81,2.013,82,3.345,93,1.916,96,1.497,109,1.714,126,1.307,133,1.606,134,2.985,137,3.927,139,1.57,197,5.838,198,3.102,199,3.103,218,3.085,259,2.294,279,3.059,321,1.447,390,4.358,438,5.381,450,2.402,490,1.849,499,2.729,507,1.896,509,1.84,510,3.042,516,3.935,532,1.901,596,1.772,654,2.313,677,2.171,698,1.648,784,3.041,789,3.598,790,3.598,791,3.598,793,2.63,907,2.482,997,2.615,1032,1.957,1045,2.591,1326,2.615,1541,2.765,3403,3.67,3405,3.134,3406,4.244,3420,4.461]],["component/173",[197,1.412]],["title/174-1",[2907,44.56]],["name/174-1",[]],["text/174-1",[]],["component/174-1",[]],["title/174-2",[2908,42.932]],["name/174-2",[]],["text/174-2",[]],["component/174-2",[]],["title/174",[]],["name/174",[2917,1.545]],["text/174",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,197,5.145,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3401,3.955,3402,5.872]],["component/174",[197,1.412]],["title/175-1",[222,25.902,226,23.333]],["name/175-1",[]],["text/175-1",[]],["component/175-1",[]],["title/175-2",[19,31.713,105,19.953,909,22.707]],["name/175-2",[]],["text/175-2",[]],["component/175-2",[]],["title/175",[9,12.054,11,10.134,14,16.942,197,25.419]],["name/175",[205,1.287]],["text/175",[3,2.388,9,2.758,11,2.319,14,3.877,18,2.334,26,3.652,30,2.91,33,4.215,80,3.085,96,2.493,105,2.574,181,2.192,197,5.816,222,2.777,226,2.501,235,3.223,261,3.1,435,3.442,909,2.93,941,4.282,1260,6.794,1261,6.794,1262,6.794,1263,6.794,1264,5.99,3402,5.882]],["component/175",[197,1.412]],["title/176-1",[321,28.208]],["name/176-1",[]],["text/176-1",[]],["component/176-1",[]],["title/176-2",[12,20.253,14,16.942,18,15.472,197,25.419]],["name/176-2",[]],["text/176-2",[]],["component/176-2",[]],["title/176-3",[389,41.355]],["name/176-3",[]],["text/176-3",[]],["component/176-3",[]],["title/176-4",[126,20.299,391,32.936]],["name/176-4",[]],["text/176-4",[]],["component/176-4",[]],["title/176-5",[126,20.299,1032,30.391]],["name/176-5",[]],["text/176-5",[]],["component/176-5",[]],["title/176-6",[3421,74.941]],["name/176-6",[]],["text/176-6",[]],["component/176-6",[]],["title/176",[541,35.613]],["name/176",[541,1.06]],["text/176",[2,1.535,5,1.722,6,0.961,9,1.355,11,1.01,14,1.689,15,1.62,18,1.912,20,0.599,22,1.517,28,0.684,33,0.751,36,0.695,48,1.051,50,1.263,68,0.575,73,0.642,74,2,80,0.55,81,2.497,89,0.938,93,1.803,95,1.645,96,1.135,98,0.695,107,0.751,109,0.509,112,0.566,123,0.704,126,1.23,127,0.886,128,0.838,130,0.81,133,2.527,137,1.108,139,2.141,147,1.646,149,0.9,166,1.136,169,0.684,178,0.437,181,1.942,193,0.974,194,0.733,197,5.233,199,1.889,204,1.248,207,0.631,208,0.581,214,1.317,216,0.71,217,0.668,220,1.158,221,0.425,222,0.495,224,0.776,225,1.54,226,2.216,229,0.772,230,0.871,236,0.886,242,0.681,250,1.289,251,1.404,259,1.253,287,2.52,303,1.813,307,1.397,309,1.681,314,0.768,319,4.124,320,1.368,321,0.429,334,0.653,335,0.618,382,1.54,389,0.629,391,1.996,406,1.068,413,0.763,419,0.445,422,2.952,441,0.49,450,1.311,455,0.658,467,2.521,470,1.348,471,1.522,507,1.035,509,1.004,510,2.165,516,1.93,518,1.675,520,1.306,523,1.563,528,3.19,532,1.038,534,0.951,546,1.531,549,0.653,576,0.838,590,0.719,617,0.879,630,0.606,631,1.983,632,1.068,640,0.695,645,0.736,654,2.176,655,0.67,657,2.423,677,0.644,685,0.962,690,2.357,691,2.018,692,2.096,693,2.056,698,0.489,723,0.8,735,0.974,758,0.974,770,0.805,771,0.8,780,1.215,781,0.962,784,3.346,785,0.719,789,1.965,790,1.068,791,1.068,793,1.436,885,0.987,892,1.815,907,0.736,909,1.656,924,0.755,935,0.879,949,0.736,958,0.726,998,0.94,999,1.173,1032,1.842,1033,2.52,1039,1.302,1111,0.785,1116,0.886,1120,0.716,1122,1.089,1135,1.211,1144,0.92,1243,0.759,1252,0.851,1264,1.068,1313,0.987,1386,0.795,1411,1.068,1413,1.068,1453,1.565,1515,0.94,1655,1.089,1691,1.792,1834,0.951,1869,1.015,1889,0.776,1921,1.173,1954,0.736,2017,2.728,2025,1.089,2074,0.678,2088,0.81,2294,1.031,2316,1.141,2341,0.987,2429,0.92,2818,0.795,2909,0.571,2967,0.832,2968,0.81,3034,1,3091,1.211,3235,1.113,3311,2.03,3320,0.805,3321,0.844,3403,2.004,3405,0.93,3409,2.317,3410,1.173,3411,3.718,3412,1.259,3413,4.669,3414,1.259,3415,3.217,3416,3.217,3417,1.259,3418,2.317,3419,1,3421,6.392,3422,1.324,3423,1.211,3424,2.228,3425,1.211,3426,1.211,3427,1.211,3428,1.211,3429,2.228,3430,2.435,3431,1.324,3432,1.324,3433,2.435,3434,1.324,3435,1.324,3436,1.211,3437,1.324]],["component/176",[197,1.412]],["title/177-1",[310,57.238]],["name/177-1",[]],["text/177-1",[]],["component/177-1",[]],["title/177-2",[15,33.567]],["name/177-2",[]],["text/177-2",[]],["component/177-2",[]],["title/177-3",[199,39.137]],["name/177-3",[]],["text/177-3",[]],["component/177-3",[]],["title/177-4",[197,44.912]],["name/177-4",[]],["text/177-4",[]],["component/177-4",[]],["title/177-5",[261,28.922,1954,38.537]],["name/177-5",[]],["text/177-5",[]],["component/177-5",[]],["title/177-6",[374,33.375,707,35.628]],["name/177-6",[]],["text/177-6",[]],["component/177-6",[]],["title/177",[208,30.391,630,31.725]],["name/177",[3216,1.734]],["text/177",[2,0.739,4,3.204,5,1.799,6,1.182,8,0.318,9,0.733,11,0.181,12,0.684,14,0.302,15,0.912,18,2.289,22,1.06,24,0.401,25,0.911,28,1.22,30,0.651,36,1.24,48,0.379,50,0.456,74,2.975,81,3.287,82,0.426,91,1.544,93,1.756,95,0.651,96,0.558,105,0.305,107,0.499,109,0.908,121,0.528,122,0.469,123,0.467,126,0.258,128,1.052,129,0.548,130,0.538,133,2.528,134,0.719,137,2.743,139,0.309,147,0.428,149,0.325,154,0.491,171,1.393,175,0.487,178,0.29,181,3.823,185,0.709,194,0.92,197,4.823,198,0.611,199,2.433,208,1.037,214,0.899,216,0.471,225,1.364,226,2.271,233,0.829,242,0.452,251,0.958,257,0.872,261,0.367,266,0.414,287,0.528,303,0.891,309,0.437,315,0.504,316,0.709,320,0.672,321,0.285,322,0.541,325,2.389,333,0.803,334,0.434,339,0.696,405,1.135,415,0.465,450,1.613,455,0.437,462,0.803,469,0.605,470,1.658,471,0.748,477,2.151,478,1.568,485,0.655,502,0.552,505,0.473,507,1.273,509,1.472,510,2.975,518,0.351,523,0.406,528,3.716,530,0.696,532,1.276,541,0.36,544,0.624,546,0.752,598,0.541,625,0.685,628,0.482,630,0.761,640,0.461,655,1.197,657,2.254,685,2.177,686,2.204,687,2.373,688,0.655,689,0.655,690,2.193,735,0.647,769,0.552,770,1.436,771,1.003,775,0.512,776,0.739,789,0.709,790,0.709,791,0.709,793,0.98,892,0.655,898,1.207,907,0.489,909,1.408,924,0.501,957,0.545,958,1.957,991,0.515,993,1.835,1006,0.467,1009,0.664,1033,0.528,1080,0.631,1112,0.664,1120,0.475,1130,0.574,1144,0.611,1161,1.188,1176,2.275,1182,0.674,1184,0.655,1213,0.709,1250,0.583,1264,0.709,1267,0.685,1291,0.588,1313,0.655,1477,0.836,1515,0.624,1666,1.038,1868,3.623,1889,0.515,1954,0.924,2074,0.45,2081,0.804,2088,0.538,2106,0.739,2279,0.599,2341,1.238,2428,0.655,2470,4.367,2841,2.373,2852,3.365,2967,0.552,2968,0.538,2969,0.605,2970,1.18,3063,1.432,3187,2.736,3235,0.739,3244,3.524,3254,2.581,3320,0.534,3321,0.56,3322,1.432,3324,0.709,3403,0.723,3410,2.093,3411,5.708,3421,3.074,3423,0.804,3424,0.804,3425,0.804,3426,0.804,3427,0.804,3428,0.804,3429,2.162,3438,1.52,3439,0.617,3440,1.316,3441,2.464,3442,0.879,3443,0.879,3444,0.879,3445,0.879,3446,2.995,3447,3,3448,0.879,3449,0.879,3450,0.879,3451,2.363,3452,2.363,3453,0.879,3454,0.879,3455,0.879,3456,0.879,3457,0.879,3458,0.879,3459,0.879,3460,0.879,3461,0.879,3462,0.879,3463,0.879,3464,0.879,3465,0.879,3466,0.879,3467,0.879,3468,0.879,3469,0.879,3470,0.879,3471,0.879,3472,0.879,3473,0.879,3474,0.879,3475,0.879,3476,0.879,3477,0.879,3478,0.879,3479,1.661,3480,0.879,3481,0.804,3482,1.661,3483,2.363,3484,0.879,3485,0.879,3486,0.879,3487,0.879,3488,0.879,3489,0.757,3490,0.879,3491,0.879,3492,0.879,3493,0.879,3494,0.879,3495,0.879,3496,0.879,3497,0.879,3498,0.879,3499,0.879,3500,0.879,3501,0.879]],["component/177",[197,1.412]],["title/178-1",[344,50.708]],["name/178-1",[]],["text/178-1",[]],["component/178-1",[]],["title/178-2",[374,33.375,707,35.628]],["name/178-2",[]],["text/178-2",[]],["component/178-2",[]],["title/178",[19,38.169,20,31.351]],["name/178",[205,1.287]],["text/178",[0,6.069,2,2.991,3,2.244,4,3.069,5,2.172,9,1.708,11,2.416,18,3.429,20,3.158,95,2.734,112,4.085,197,5.633,208,3.061,261,2.913,320,2.823,385,6.18,441,2.582,465,4.63,483,5.201,518,3.816,549,3.444,630,3.195,968,2.753,1357,4.091,1954,5.32,2572,5.867,3502,6.977]],["component/178",[197,1.412]],["title/179-1",[9,16.962,11,14.261]],["name/179-1",[]],["text/179-1",[]],["component/179-1",[]],["title/179-2",[10,41.906]],["name/179-2",[]],["text/179-2",[]],["component/179-2",[]],["title/179-3",[968,34.315]],["name/179-3",[]],["text/179-3",[]],["component/179-3",[]],["title/179-4",[374,33.375,707,35.628]],["name/179-4",[]],["text/179-4",[]],["component/179-4",[]],["title/179",[2,27.205]],["name/179",[2,0.81]],["text/179",[2,3.698,3,1.804,5,2.335,6,0.979,9,2.607,10,3.614,11,2.643,12,2.308,15,2.165,18,2.093,24,1.947,26,1.22,39,1.57,46,2.238,48,1.071,89,0.955,91,1.074,96,1.431,112,1.06,133,0.893,134,1.074,138,1.537,149,1.575,176,2.342,181,2.965,197,4.529,199,2.524,207,2.034,221,1.369,226,3.119,235,1.076,251,1.43,261,1.036,320,1.725,321,1.383,355,2.74,372,2.576,387,1.251,388,2.554,401,1.971,405,1.191,415,1.313,432,1.965,436,3.509,444,2.761,446,3.028,518,0.99,630,1.136,722,1.296,772,1.454,802,1.527,927,1.296,968,3.962,983,1.348,1168,7.39,1215,1.033,1311,1.415,1954,1.38,2270,1.707,2337,4.424,2545,4.589,3259,1.691,3260,1.691,3262,1.849,3263,1.691,3264,1.675,3394,1.902,3395,2.137,3397,1.902,3398,3.27,3399,2.137,3503,2.48,3504,2.48]],["component/179",[197,1.412]],["title/180-1",[52,23.584,139,24.374]],["name/180-1",[]],["text/180-1",[]],["component/180-1",[]],["title/180-2",[1045,21.29,1666,24.015]],["name/180-2",[]],["text/180-2",[]],["component/180-2",[]],["title/180",[]],["name/180",[2853,1.51]],["text/180",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,197,5.007,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3401,5.744]],["component/180",[197,1.412]],["title/181-1",[149,21.259,708,25.823,1215,23.97]],["name/181-1",[]],["text/181-1",[]],["component/181-1",[]],["title/181-2",[52,23.584,139,24.374]],["name/181-2",[]],["text/181-2",[]],["component/181-2",[]],["title/181-3",[1045,21.29,1666,24.015]],["name/181-3",[]],["text/181-3",[]],["component/181-3",[]],["title/181-4",[220,23.711,1039,26.676]],["name/181-4",[]],["text/181-4",[]],["component/181-4",[]],["title/181-5",[2907,44.56]],["name/181-5",[]],["text/181-5",[]],["component/181-5",[]],["title/181-6",[2908,42.932]],["name/181-6",[]],["text/181-6",[]],["component/181-6",[]],["title/181",[126,25.488]],["name/181",[126,0.759]],["text/181",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,197,5.131,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3401,4.738,3402,4.653]],["component/181",[197,1.412]],["title/182-1",[89,33.495]],["name/182-1",[]],["text/182-1",[]],["component/182-1",[]],["title/182-2",[1006,46.229]],["name/182-2",[]],["text/182-2",[]],["component/182-2",[]],["title/182",[390,39.954]],["name/182",[390,1.19]],["text/182",[6,1.76,9,1.092,11,0.918,14,2.374,15,2.662,18,3.553,30,1.748,47,5.799,81,2.013,82,3.345,93,1.916,96,1.497,109,1.714,126,1.307,133,1.606,134,2.985,137,3.927,139,1.57,197,5.838,198,3.102,199,3.103,218,3.085,259,2.294,279,3.059,321,1.447,390,4.358,438,5.381,450,2.402,490,1.849,499,2.729,507,1.896,509,1.84,510,3.042,516,3.935,532,1.901,596,1.772,654,2.313,677,2.171,698,1.648,784,3.041,789,3.598,790,3.598,791,3.598,793,2.63,907,2.482,997,2.615,1032,1.957,1045,2.591,1326,2.615,1541,2.765,3403,3.67,3405,3.134,3406,4.244,3420,4.461]],["component/182",[197,1.412]],["title/183-1",[2907,44.56]],["name/183-1",[]],["text/183-1",[]],["component/183-1",[]],["title/183-2",[2908,42.932]],["name/183-2",[]],["text/183-2",[]],["component/183-2",[]],["title/183",[]],["name/183",[2917,1.545]],["text/183",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,197,5.145,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3401,3.955,3402,5.872]],["component/183",[197,1.412]],["title/184-1",[222,25.902,226,23.333]],["name/184-1",[]],["text/184-1",[]],["component/184-1",[]],["title/184-2",[19,31.713,105,19.953,909,22.707]],["name/184-2",[]],["text/184-2",[]],["component/184-2",[]],["title/184",[9,12.054,11,10.134,14,16.942,197,25.419]],["name/184",[205,1.287]],["text/184",[3,2.388,9,2.758,11,2.319,14,3.877,18,2.334,26,3.652,30,2.91,33,4.215,80,3.085,96,2.493,105,2.574,181,2.192,197,5.816,222,2.777,226,2.501,235,3.223,261,3.1,435,3.442,909,2.93,941,4.282,1260,6.794,1261,6.794,1262,6.794,1263,6.794,1264,5.99,3402,5.882]],["component/184",[197,1.412]],["title/185-1",[321,28.208]],["name/185-1",[]],["text/185-1",[]],["component/185-1",[]],["title/185-2",[12,20.253,14,16.942,18,15.472,197,25.419]],["name/185-2",[]],["text/185-2",[]],["component/185-2",[]],["title/185-3",[389,41.355]],["name/185-3",[]],["text/185-3",[]],["component/185-3",[]],["title/185-4",[126,20.299,391,32.936]],["name/185-4",[]],["text/185-4",[]],["component/185-4",[]],["title/185-5",[126,20.299,1032,30.391]],["name/185-5",[]],["text/185-5",[]],["component/185-5",[]],["title/185-6",[3421,74.941]],["name/185-6",[]],["text/185-6",[]],["component/185-6",[]],["title/185",[541,35.613]],["name/185",[541,1.06]],["text/185",[2,1.535,5,1.722,6,0.961,9,1.355,11,1.01,14,1.689,15,1.62,18,1.912,20,0.599,22,1.517,28,0.684,33,0.751,36,0.695,48,1.051,50,1.263,68,0.575,73,0.642,74,2,80,0.55,81,2.497,89,0.938,93,1.803,95,1.645,96,1.135,98,0.695,107,0.751,109,0.509,112,0.566,123,0.704,126,1.23,127,0.886,128,0.838,130,0.81,133,2.527,137,1.108,139,2.141,147,1.646,149,0.9,166,1.136,169,0.684,178,0.437,181,1.942,193,0.974,194,0.733,197,5.233,199,1.889,204,1.248,207,0.631,208,0.581,214,1.317,216,0.71,217,0.668,220,1.158,221,0.425,222,0.495,224,0.776,225,1.54,226,2.216,229,0.772,230,0.871,236,0.886,242,0.681,250,1.289,251,1.404,259,1.253,287,2.52,303,1.813,307,1.397,309,1.681,314,0.768,319,4.124,320,1.368,321,0.429,334,0.653,335,0.618,382,1.54,389,0.629,391,1.996,406,1.068,413,0.763,419,0.445,422,2.952,441,0.49,450,1.311,455,0.658,467,2.521,470,1.348,471,1.522,507,1.035,509,1.004,510,2.165,516,1.93,518,1.675,520,1.306,523,1.563,528,3.19,532,1.038,534,0.951,546,1.531,549,0.653,576,0.838,590,0.719,617,0.879,630,0.606,631,1.983,632,1.068,640,0.695,645,0.736,654,2.176,655,0.67,657,2.423,677,0.644,685,0.962,690,2.357,691,2.018,692,2.096,693,2.056,698,0.489,723,0.8,735,0.974,758,0.974,770,0.805,771,0.8,780,1.215,781,0.962,784,3.346,785,0.719,789,1.965,790,1.068,791,1.068,793,1.436,885,0.987,892,1.815,907,0.736,909,1.656,924,0.755,935,0.879,949,0.736,958,0.726,998,0.94,999,1.173,1032,1.842,1033,2.52,1039,1.302,1111,0.785,1116,0.886,1120,0.716,1122,1.089,1135,1.211,1144,0.92,1243,0.759,1252,0.851,1264,1.068,1313,0.987,1386,0.795,1411,1.068,1413,1.068,1453,1.565,1515,0.94,1655,1.089,1691,1.792,1834,0.951,1869,1.015,1889,0.776,1921,1.173,1954,0.736,2017,2.728,2025,1.089,2074,0.678,2088,0.81,2294,1.031,2316,1.141,2341,0.987,2429,0.92,2818,0.795,2909,0.571,2967,0.832,2968,0.81,3034,1,3091,1.211,3235,1.113,3311,2.03,3320,0.805,3321,0.844,3403,2.004,3405,0.93,3409,2.317,3410,1.173,3411,3.718,3412,1.259,3413,4.669,3414,1.259,3415,3.217,3416,3.217,3417,1.259,3418,2.317,3419,1,3421,6.392,3422,1.324,3423,1.211,3424,2.228,3425,1.211,3426,1.211,3427,1.211,3428,1.211,3429,2.228,3430,2.435,3431,1.324,3432,1.324,3433,2.435,3434,1.324,3435,1.324,3436,1.211,3437,1.324]],["component/185",[197,1.412]],["title/186-1",[310,57.238]],["name/186-1",[]],["text/186-1",[]],["component/186-1",[]],["title/186-2",[15,33.567]],["name/186-2",[]],["text/186-2",[]],["component/186-2",[]],["title/186-3",[199,39.137]],["name/186-3",[]],["text/186-3",[]],["component/186-3",[]],["title/186-4",[197,44.912]],["name/186-4",[]],["text/186-4",[]],["component/186-4",[]],["title/186-5",[261,28.922,1954,38.537]],["name/186-5",[]],["text/186-5",[]],["component/186-5",[]],["title/186-6",[374,33.375,707,35.628]],["name/186-6",[]],["text/186-6",[]],["component/186-6",[]],["title/186",[208,30.391,630,31.725]],["name/186",[3216,1.734]],["text/186",[2,0.739,4,3.204,5,1.799,6,1.182,8,0.318,9,0.733,11,0.181,12,0.684,14,0.302,15,0.912,18,2.289,22,1.06,24,0.401,25,0.911,28,1.22,30,0.651,36,1.24,48,0.379,50,0.456,74,2.975,81,3.287,82,0.426,91,1.544,93,1.756,95,0.651,96,0.558,105,0.305,107,0.499,109,0.908,121,0.528,122,0.469,123,0.467,126,0.258,128,1.052,129,0.548,130,0.538,133,2.528,134,0.719,137,2.743,139,0.309,147,0.428,149,0.325,154,0.491,171,1.393,175,0.487,178,0.29,181,3.823,185,0.709,194,0.92,197,4.823,198,0.611,199,2.433,208,1.037,214,0.899,216,0.471,225,1.364,226,2.271,233,0.829,242,0.452,251,0.958,257,0.872,261,0.367,266,0.414,287,0.528,303,0.891,309,0.437,315,0.504,316,0.709,320,0.672,321,0.285,322,0.541,325,2.389,333,0.803,334,0.434,339,0.696,405,1.135,415,0.465,450,1.613,455,0.437,462,0.803,469,0.605,470,1.658,471,0.748,477,2.151,478,1.568,485,0.655,502,0.552,505,0.473,507,1.273,509,1.472,510,2.975,518,0.351,523,0.406,528,3.716,530,0.696,532,1.276,541,0.36,544,0.624,546,0.752,598,0.541,625,0.685,628,0.482,630,0.761,640,0.461,655,1.197,657,2.254,685,2.177,686,2.204,687,2.373,688,0.655,689,0.655,690,2.193,735,0.647,769,0.552,770,1.436,771,1.003,775,0.512,776,0.739,789,0.709,790,0.709,791,0.709,793,0.98,892,0.655,898,1.207,907,0.489,909,1.408,924,0.501,957,0.545,958,1.957,991,0.515,993,1.835,1006,0.467,1009,0.664,1033,0.528,1080,0.631,1112,0.664,1120,0.475,1130,0.574,1144,0.611,1161,1.188,1176,2.275,1182,0.674,1184,0.655,1213,0.709,1250,0.583,1264,0.709,1267,0.685,1291,0.588,1313,0.655,1477,0.836,1515,0.624,1666,1.038,1868,3.623,1889,0.515,1954,0.924,2074,0.45,2081,0.804,2088,0.538,2106,0.739,2279,0.599,2341,1.238,2428,0.655,2470,4.367,2841,2.373,2852,3.365,2967,0.552,2968,0.538,2969,0.605,2970,1.18,3063,1.432,3187,2.736,3235,0.739,3244,3.524,3254,2.581,3320,0.534,3321,0.56,3322,1.432,3324,0.709,3403,0.723,3410,2.093,3411,5.708,3421,3.074,3423,0.804,3424,0.804,3425,0.804,3426,0.804,3427,0.804,3428,0.804,3429,2.162,3438,1.52,3439,0.617,3440,1.316,3441,2.464,3442,0.879,3443,0.879,3444,0.879,3445,0.879,3446,2.995,3447,3,3448,0.879,3449,0.879,3450,0.879,3451,2.363,3452,2.363,3453,0.879,3454,0.879,3455,0.879,3456,0.879,3457,0.879,3458,0.879,3459,0.879,3460,0.879,3461,0.879,3462,0.879,3463,0.879,3464,0.879,3465,0.879,3466,0.879,3467,0.879,3468,0.879,3469,0.879,3470,0.879,3471,0.879,3472,0.879,3473,0.879,3474,0.879,3475,0.879,3476,0.879,3477,0.879,3478,0.879,3479,1.661,3480,0.879,3481,0.804,3482,1.661,3483,2.363,3484,0.879,3485,0.879,3486,0.879,3487,0.879,3488,0.879,3489,0.757,3490,0.879,3491,0.879,3492,0.879,3493,0.879,3494,0.879,3495,0.879,3496,0.879,3497,0.879,3498,0.879,3499,0.879,3500,0.879,3501,0.879]],["component/186",[197,1.412]],["title/187-1",[344,50.708]],["name/187-1",[]],["text/187-1",[]],["component/187-1",[]],["title/187-2",[374,33.375,707,35.628]],["name/187-2",[]],["text/187-2",[]],["component/187-2",[]],["title/187",[19,38.169,20,31.351]],["name/187",[205,1.287]],["text/187",[0,6.069,2,2.991,3,2.244,4,3.069,5,2.172,9,1.708,11,2.416,18,3.429,20,3.158,95,2.734,112,4.085,197,5.633,208,3.061,261,2.913,320,2.823,385,6.18,441,2.582,465,4.63,483,5.201,518,3.816,549,3.444,630,3.195,968,2.753,1357,4.091,1954,5.32,2572,5.867,3502,6.977]],["component/187",[197,1.412]],["title/188-1",[9,16.962,11,14.261]],["name/188-1",[]],["text/188-1",[]],["component/188-1",[]],["title/188-2",[10,41.906]],["name/188-2",[]],["text/188-2",[]],["component/188-2",[]],["title/188-3",[968,34.315]],["name/188-3",[]],["text/188-3",[]],["component/188-3",[]],["title/188-4",[374,33.375,707,35.628]],["name/188-4",[]],["text/188-4",[]],["component/188-4",[]],["title/188",[2,27.205]],["name/188",[2,0.81]],["text/188",[2,3.698,3,1.804,5,2.335,6,0.979,9,2.607,10,3.614,11,2.643,12,2.308,15,2.165,18,2.093,24,1.947,26,1.22,39,1.57,46,2.238,48,1.071,89,0.955,91,1.074,96,1.431,112,1.06,133,0.893,134,1.074,138,1.537,149,1.575,176,2.342,181,2.965,197,4.529,199,2.524,207,2.034,221,1.369,226,3.119,235,1.076,251,1.43,261,1.036,320,1.725,321,1.383,355,2.74,372,2.576,387,1.251,388,2.554,401,1.971,405,1.191,415,1.313,432,1.965,436,3.509,444,2.761,446,3.028,518,0.99,630,1.136,722,1.296,772,1.454,802,1.527,927,1.296,968,3.962,983,1.348,1168,7.39,1215,1.033,1311,1.415,1954,1.38,2270,1.707,2337,4.424,2545,4.589,3259,1.691,3260,1.691,3262,1.849,3263,1.691,3264,1.675,3394,1.902,3395,2.137,3397,1.902,3398,3.27,3399,2.137,3503,2.48,3504,2.48]],["component/188",[197,1.412]],["title/189-1",[52,23.584,139,24.374]],["name/189-1",[]],["text/189-1",[]],["component/189-1",[]],["title/189-2",[1045,21.29,1666,24.015]],["name/189-2",[]],["text/189-2",[]],["component/189-2",[]],["title/189",[]],["name/189",[2853,1.51]],["text/189",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,199,4.363,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3505,5.744]],["component/189",[199,1.231]],["title/190-1",[149,21.259,708,25.823,1215,23.97]],["name/190-1",[]],["text/190-1",[]],["component/190-1",[]],["title/190-2",[52,23.584,139,24.374]],["name/190-2",[]],["text/190-2",[]],["component/190-2",[]],["title/190-3",[1045,21.29,1666,24.015]],["name/190-3",[]],["text/190-3",[]],["component/190-3",[]],["title/190-4",[220,23.711,1039,26.676]],["name/190-4",[]],["text/190-4",[]],["component/190-4",[]],["title/190-5",[2907,44.56]],["name/190-5",[]],["text/190-5",[]],["component/190-5",[]],["title/190-6",[2908,42.932]],["name/190-6",[]],["text/190-6",[]],["component/190-6",[]],["title/190",[126,25.488]],["name/190",[126,0.759]],["text/190",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,199,4.471,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3505,4.738,3506,4.939]],["component/190",[199,1.231]],["title/191-1",[89,33.495]],["name/191-1",[]],["text/191-1",[]],["component/191-1",[]],["title/191-2",[1006,46.229]],["name/191-2",[]],["text/191-2",[]],["component/191-2",[]],["title/191",[390,39.954]],["name/191",[390,1.19]],["text/191",[6,1.771,9,1.099,11,0.924,14,2.385,18,2.661,30,1.76,74,2.783,81,2.026,82,3.362,93,1.928,96,1.507,109,2.663,126,1.316,133,1.616,134,3,137,3.119,163,3.443,181,1.326,198,3.122,199,4.892,207,2.142,218,3.101,259,2.309,279,3.075,309,2.232,321,1.456,390,4.373,422,3.362,438,5.009,490,1.861,499,2.747,507,1.908,509,1.852,510,3.058,532,1.913,596,1.783,654,2.328,677,2.185,685,6.152,688,3.347,689,3.347,690,2.156,698,1.658,783,2.885,784,4.725,907,2.498,997,2.632,1002,3.694,1032,3.041,1045,2.602,1321,2.822,1326,2.632,1541,2.783,3404,3.776,3405,3.154,3507,4.271,3508,6.593,3509,4.271,3510,4.271,3511,4.271]],["component/191",[199,1.231]],["title/192-1",[2907,44.56]],["name/192-1",[]],["text/192-1",[]],["component/192-1",[]],["title/192-2",[2908,42.932]],["name/192-2",[]],["text/192-2",[]],["component/192-2",[]],["title/192",[]],["name/192",[2917,1.545]],["text/192",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,199,4.483,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3505,3.955,3506,6.234]],["component/192",[199,1.231]],["title/193-1",[3,22.278,703,32.312]],["name/193-1",[]],["text/193-1",[]],["component/193-1",[]],["title/193-2",[199,39.137]],["name/193-2",[]],["text/193-2",[]],["component/193-2",[]],["title/193-3",[389,41.355]],["name/193-3",[]],["text/193-3",[]],["component/193-3",[]],["title/193",[535,49.367]],["name/193",[535,1.47]],["text/193",[5,2.205,11,1.238,13,2.576,15,1.051,18,2.709,20,2.722,22,1.222,30,3.6,60,1.616,74,0.896,82,2.241,93,1.17,96,0.914,98,1.43,109,1.775,112,1.974,114,1.407,124,1.808,126,1.354,133,1.663,134,1.179,135,5.34,137,2.823,150,2.959,151,1.369,158,3.121,166,1.271,171,1.267,178,0.9,181,1.776,193,2.004,199,3.878,217,1.374,221,0.875,250,1.442,256,1.737,266,2.832,279,1.209,309,2.99,315,1.562,389,1.295,397,1.914,413,1.571,419,1.553,422,3.437,435,1.263,438,1.255,441,1.008,462,2.908,471,1.226,490,1.915,512,1.956,518,1.087,520,2.477,535,1.546,542,3.255,546,2.091,549,1.345,563,2.415,570,2.198,596,1.082,657,2.969,667,1.75,678,1.666,680,2.79,686,2.004,697,2.031,703,1.271,756,3.492,775,1.588,783,1.75,784,3.15,898,3.357,923,3.15,932,1.875,966,2.233,997,3.527,1001,2.413,1007,1.956,1180,1.857,1238,1.571,1242,1.666,1243,3.45,1388,2.031,1441,2.347,1540,2.413,1721,6.482,1748,1.824,1937,2.347,2189,2.492,2538,2.291,2657,2.492,2806,4.101,2836,2.031,2909,1.176,3097,2.291,3512,3.66,3513,2.591,3514,2.591,3515,2.591,3516,2.591,3517,2.591,3518,2.591,3519,2.591,3520,2.591,3521,2.591,3522,2.413]],["component/193",[199,1.231]],["title/194-1",[222,25.902,226,23.333]],["name/194-1",[]],["text/194-1",[]],["component/194-1",[]],["title/194-2",[105,30.154]],["name/194-2",[]],["text/194-2",[]],["component/194-2",[]],["title/194",[9,12.054,11,10.134,14,16.942,199,22.151]],["name/194",[205,1.287]],["text/194",[3,2.612,9,2.592,11,2.424,14,3.643,18,2.553,80,3.375,96,2.726,105,2.816,199,5.298,222,3.037,226,2.736,235,3.525,261,3.391,435,3.765,909,3.205,941,4.684,1265,6.998,1266,7.431,1267,6.327,3523,7.727]],["component/194",[199,1.231]],["title/195-1",[5,21.563,968,27.329]],["name/195-1",[]],["text/195-1",[]],["component/195-1",[]],["title/195-2",[51,35.215,234,36.355]],["name/195-2",[]],["text/195-2",[]],["component/195-2",[]],["title/195",[2,27.205]],["name/195",[2,0.81]],["text/195",[2,2.874,3,2.468,5,2.05,6,2.599,8,1.118,9,2.25,11,2.443,12,3.504,13,1.323,14,2.641,18,2.412,24,1.41,36,1.621,51,3.901,71,2.447,91,1.337,94,1.811,95,1.21,105,2.284,109,1.973,116,1.821,137,1.012,181,2.514,198,2.147,199,4.911,208,1.355,218,1.382,221,1.648,226,1.04,234,2.694,235,1.34,282,1.801,318,1.955,321,1.002,358,1.811,360,1.97,363,3.274,372,1.865,387,1.558,401,1.427,405,2.465,417,3.204,418,2.218,432,1.423,441,1.143,492,4.29,501,1.635,541,2.102,549,1.525,645,1.718,666,2.597,891,2.016,909,3.027,927,2.683,966,1.493,968,4.306,986,2.369,1037,1.985,1120,1.671,1123,2.541,1124,1.928,1158,3.12,1161,1.552,1168,3.351,1311,1.762,1326,1.811,1817,2.597,2316,2.661,2328,2.938,2472,2.491,2792,2.016,2921,2.826,3506,4.317,3524,3.317,3525,3.317,3526,3.317,3527,5.513,3528,3.317,3529,2.736,3530,3.317]],["component/195",[199,1.231]],["title/196-1",[389,41.355]],["name/196-1",[]],["text/196-1",[]],["component/196-1",[]],["title/196-2",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/196-2",[]],["text/196-2",[]],["component/196-2",[]],["title/196-3",[126,20.299,1032,30.391]],["name/196-3",[]],["text/196-3",[]],["component/196-3",[]],["title/196-4",[220,23.711,1039,26.676]],["name/196-4",[]],["text/196-4",[]],["component/196-4",[]],["title/196-5",[30,22.555,286,28.717,563,30.081]],["name/196-5",[]],["text/196-5",[]],["component/196-5",[]],["title/196-6",[333,33.487,663,38.919]],["name/196-6",[]],["text/196-6",[]],["component/196-6",[]],["title/196-7",[333,33.487,669,43.851]],["name/196-7",[]],["text/196-7",[]],["component/196-7",[]],["title/196",[541,35.613]],["name/196",[541,1.06]],["text/196",[2,0.917,3,0.672,4,0.919,5,0.651,6,1.157,9,0.718,11,0.892,14,1.491,15,1.898,18,1.995,20,0.946,22,0.938,27,0.732,28,0.579,30,1.927,33,0.637,48,2.123,50,1.084,59,0.772,62,0.674,73,0.544,74,2.8,80,0.466,81,1.955,82,2.385,89,1.415,91,1.27,93,0.482,95,0.44,107,0.637,109,1.889,112,0.893,114,0.579,123,0.596,126,1.269,128,1.323,129,1.304,133,0.404,134,1.27,135,1.368,137,1.419,139,2.372,147,1.017,150,0.552,151,0.564,166,1.368,169,1.079,171,0.522,175,1.157,181,2.096,187,0.647,198,0.78,199,2.663,204,0.575,207,0.535,214,1.131,216,0.602,217,1.48,219,0.967,220,1.004,221,0.671,222,0.42,223,1.594,224,0.658,225,0.952,226,2.138,228,1.453,242,1.075,246,2.735,250,1.106,266,1.73,277,1.399,283,0.732,286,0.56,309,3.156,314,0.651,321,0.364,333,1.01,334,0.554,335,0.523,382,0.952,389,0.534,391,1.747,413,0.647,419,1.99,422,3.604,434,1.278,439,0.696,441,0.415,450,1.126,455,0.558,462,1.01,471,1.32,490,1.795,492,0.627,507,1.247,509,1.21,510,0.922,518,1.466,520,1.97,523,0.519,532,1.25,537,0.721,546,1.96,556,0.758,563,1.533,565,0.682,566,0.772,575,1.287,582,0.691,590,0.61,596,0.83,599,1.287,613,0.765,628,0.615,629,0.739,631,1.72,640,1.928,655,1.058,657,3.133,660,0.686,661,0.682,663,3.787,669,2.326,677,1.017,678,0.686,685,5.159,686,2.158,687,0.889,688,0.837,689,0.837,690,3.409,691,1.75,692,1.818,693,1.783,694,0.788,696,0.765,697,0.837,698,0.772,699,0.905,718,0.758,719,0.826,724,1.484,758,0.826,769,0.705,770,1.27,771,1.262,773,0.797,780,0.56,783,2.361,784,4.034,785,0.61,793,0.662,899,0.716,907,0.624,909,1.157,922,0.651,924,0.64,958,0.615,966,0.543,968,0.443,1032,2.785,1039,1.13,1045,0.345,1111,1.74,1116,0.751,1120,0.607,1141,0.837,1160,0.765,1161,1.051,1170,0.739,1176,0.624,1180,0.765,1238,0.647,1243,0.644,1267,0.874,1288,0.861,1297,0.78,1314,1.58,1386,0.674,1453,0.721,1496,0.797,1502,0.889,1543,1.468,1889,0.658,1896,0.889,2074,0.575,2088,0.686,2494,0.797,2544,0.732,2818,0.674,2836,0.837,2909,0.484,2967,0.705,2968,0.686,2980,1.247,3311,1.761,3314,0.716,3315,1.343,3316,1.412,3319,0.923,3320,0.682,3321,0.716,3324,0.905,3325,0.889,3326,0.944,3327,0.944,3328,0.944,3329,0.944,3330,0.944,3331,0.944,3332,0.944,3333,0.944,3334,0.944,3335,0.944,3336,0.944,3337,0.944,3338,0.944,3339,0.944,3340,0.944,3341,0.944,3405,0.788,3419,0.848,3531,1.068,3532,1.027,3533,3.09,3534,0.889,3535,1.988,3536,1.988,3537,1.068,3538,1.068,3539,1.068,3540,1.068,3541,1.068,3542,1.988,3543,1.068,3544,1.068,3545,1.068,3546,0.874,3547,0.874,3548,1.068,3549,0.837,3550,0.837,3551,0.837,3552,0.837,3553,0.837,3554,0.837]],["component/196",[199,1.231]],["title/197-1",[52,23.584,139,24.374]],["name/197-1",[]],["text/197-1",[]],["component/197-1",[]],["title/197-2",[1045,21.29,1666,24.015]],["name/197-2",[]],["text/197-2",[]],["component/197-2",[]],["title/197",[]],["name/197",[2853,1.51]],["text/197",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,199,4.363,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3505,5.744]],["component/197",[199,1.231]],["title/198-1",[149,21.259,708,25.823,1215,23.97]],["name/198-1",[]],["text/198-1",[]],["component/198-1",[]],["title/198-2",[52,23.584,139,24.374]],["name/198-2",[]],["text/198-2",[]],["component/198-2",[]],["title/198-3",[1045,21.29,1666,24.015]],["name/198-3",[]],["text/198-3",[]],["component/198-3",[]],["title/198-4",[220,23.711,1039,26.676]],["name/198-4",[]],["text/198-4",[]],["component/198-4",[]],["title/198-5",[2907,44.56]],["name/198-5",[]],["text/198-5",[]],["component/198-5",[]],["title/198-6",[2908,42.932]],["name/198-6",[]],["text/198-6",[]],["component/198-6",[]],["title/198",[126,25.488]],["name/198",[126,0.759]],["text/198",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,199,4.471,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3505,4.738,3506,4.939]],["component/198",[199,1.231]],["title/199-1",[89,33.495]],["name/199-1",[]],["text/199-1",[]],["component/199-1",[]],["title/199-2",[1006,46.229]],["name/199-2",[]],["text/199-2",[]],["component/199-2",[]],["title/199",[390,39.954]],["name/199",[390,1.19]],["text/199",[6,1.771,9,1.099,11,0.924,14,2.385,18,2.661,30,1.76,74,2.783,81,2.026,82,3.362,93,1.928,96,1.507,109,2.663,126,1.316,133,1.616,134,3,137,3.119,163,3.443,181,1.326,198,3.122,199,4.892,207,2.142,218,3.101,259,2.309,279,3.075,309,2.232,321,1.456,390,4.373,422,3.362,438,5.009,490,1.861,499,2.747,507,1.908,509,1.852,510,3.058,532,1.913,596,1.783,654,2.328,677,2.185,685,6.152,688,3.347,689,3.347,690,2.156,698,1.658,783,2.885,784,4.725,907,2.498,997,2.632,1002,3.694,1032,3.041,1045,2.602,1321,2.822,1326,2.632,1541,2.783,3404,3.776,3405,3.154,3507,4.271,3508,6.593,3509,4.271,3510,4.271,3511,4.271]],["component/199",[199,1.231]],["title/200-1",[2907,44.56]],["name/200-1",[]],["text/200-1",[]],["component/200-1",[]],["title/200-2",[2908,42.932]],["name/200-2",[]],["text/200-2",[]],["component/200-2",[]],["title/200",[]],["name/200",[2917,1.545]],["text/200",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,199,4.483,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3505,3.955,3506,6.234]],["component/200",[199,1.231]],["title/201-1",[3,22.278,703,32.312]],["name/201-1",[]],["text/201-1",[]],["component/201-1",[]],["title/201-2",[199,39.137]],["name/201-2",[]],["text/201-2",[]],["component/201-2",[]],["title/201-3",[389,41.355]],["name/201-3",[]],["text/201-3",[]],["component/201-3",[]],["title/201",[535,49.367]],["name/201",[535,1.47]],["text/201",[5,2.205,11,1.238,13,2.576,15,1.051,18,2.709,20,2.722,22,1.222,30,3.6,60,1.616,74,0.896,82,2.241,93,1.17,96,0.914,98,1.43,109,1.775,112,1.974,114,1.407,124,1.808,126,1.354,133,1.663,134,1.179,135,5.34,137,2.823,150,2.959,151,1.369,158,3.121,166,1.271,171,1.267,178,0.9,181,1.776,193,2.004,199,3.878,217,1.374,221,0.875,250,1.442,256,1.737,266,2.832,279,1.209,309,2.99,315,1.562,389,1.295,397,1.914,413,1.571,419,1.553,422,3.437,435,1.263,438,1.255,441,1.008,462,2.908,471,1.226,490,1.915,512,1.956,518,1.087,520,2.477,535,1.546,542,3.255,546,2.091,549,1.345,563,2.415,570,2.198,596,1.082,657,2.969,667,1.75,678,1.666,680,2.79,686,2.004,697,2.031,703,1.271,756,3.492,775,1.588,783,1.75,784,3.15,898,3.357,923,3.15,932,1.875,966,2.233,997,3.527,1001,2.413,1007,1.956,1180,1.857,1238,1.571,1242,1.666,1243,3.45,1388,2.031,1441,2.347,1540,2.413,1721,6.482,1748,1.824,1937,2.347,2189,2.492,2538,2.291,2657,2.492,2806,4.101,2836,2.031,2909,1.176,3097,2.291,3512,3.66,3513,2.591,3514,2.591,3515,2.591,3516,2.591,3517,2.591,3518,2.591,3519,2.591,3520,2.591,3521,2.591,3522,2.413]],["component/201",[199,1.231]],["title/202-1",[222,25.902,226,23.333]],["name/202-1",[]],["text/202-1",[]],["component/202-1",[]],["title/202-2",[105,30.154]],["name/202-2",[]],["text/202-2",[]],["component/202-2",[]],["title/202",[9,12.054,11,10.134,14,16.942,199,22.151]],["name/202",[205,1.287]],["text/202",[3,2.612,9,2.592,11,2.424,14,3.643,18,2.553,80,3.375,96,2.726,105,2.816,199,5.298,222,3.037,226,2.736,235,3.525,261,3.391,435,3.765,909,3.205,941,4.684,1265,6.998,1266,7.431,1267,6.327,3523,7.727]],["component/202",[199,1.231]],["title/203-1",[389,41.355]],["name/203-1",[]],["text/203-1",[]],["component/203-1",[]],["title/203-2",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/203-2",[]],["text/203-2",[]],["component/203-2",[]],["title/203-3",[126,20.299,1032,30.391]],["name/203-3",[]],["text/203-3",[]],["component/203-3",[]],["title/203-4",[220,23.711,1039,26.676]],["name/203-4",[]],["text/203-4",[]],["component/203-4",[]],["title/203-5",[30,22.555,286,28.717,563,30.081]],["name/203-5",[]],["text/203-5",[]],["component/203-5",[]],["title/203-6",[333,33.487,663,38.919]],["name/203-6",[]],["text/203-6",[]],["component/203-6",[]],["title/203-7",[333,33.487,669,43.851]],["name/203-7",[]],["text/203-7",[]],["component/203-7",[]],["title/203",[541,35.613]],["name/203",[541,1.06]],["text/203",[2,0.917,3,0.672,4,0.919,5,0.651,6,1.157,9,0.718,11,0.892,14,1.491,15,1.898,18,1.995,20,0.946,22,0.938,27,0.732,28,0.579,30,1.927,33,0.637,48,2.123,50,1.084,59,0.772,62,0.674,73,0.544,74,2.8,80,0.466,81,1.955,82,2.385,89,1.415,91,1.27,93,0.482,95,0.44,107,0.637,109,1.889,112,0.893,114,0.579,123,0.596,126,1.269,128,1.323,129,1.304,133,0.404,134,1.27,135,1.368,137,1.419,139,2.372,147,1.017,150,0.552,151,0.564,166,1.368,169,1.079,171,0.522,175,1.157,181,2.096,187,0.647,198,0.78,199,2.663,204,0.575,207,0.535,214,1.131,216,0.602,217,1.48,219,0.967,220,1.004,221,0.671,222,0.42,223,1.594,224,0.658,225,0.952,226,2.138,228,1.453,242,1.075,246,2.735,250,1.106,266,1.73,277,1.399,283,0.732,286,0.56,309,3.156,314,0.651,321,0.364,333,1.01,334,0.554,335,0.523,382,0.952,389,0.534,391,1.747,413,0.647,419,1.99,422,3.604,434,1.278,439,0.696,441,0.415,450,1.126,455,0.558,462,1.01,471,1.32,490,1.795,492,0.627,507,1.247,509,1.21,510,0.922,518,1.466,520,1.97,523,0.519,532,1.25,537,0.721,546,1.96,556,0.758,563,1.533,565,0.682,566,0.772,575,1.287,582,0.691,590,0.61,596,0.83,599,1.287,613,0.765,628,0.615,629,0.739,631,1.72,640,1.928,655,1.058,657,3.133,660,0.686,661,0.682,663,3.787,669,2.326,677,1.017,678,0.686,685,5.159,686,2.158,687,0.889,688,0.837,689,0.837,690,3.409,691,1.75,692,1.818,693,1.783,694,0.788,696,0.765,697,0.837,698,0.772,699,0.905,718,0.758,719,0.826,724,1.484,758,0.826,769,0.705,770,1.27,771,1.262,773,0.797,780,0.56,783,2.361,784,4.034,785,0.61,793,0.662,899,0.716,907,0.624,909,1.157,922,0.651,924,0.64,958,0.615,966,0.543,968,0.443,1032,2.785,1039,1.13,1045,0.345,1111,1.74,1116,0.751,1120,0.607,1141,0.837,1160,0.765,1161,1.051,1170,0.739,1176,0.624,1180,0.765,1238,0.647,1243,0.644,1267,0.874,1288,0.861,1297,0.78,1314,1.58,1386,0.674,1453,0.721,1496,0.797,1502,0.889,1543,1.468,1889,0.658,1896,0.889,2074,0.575,2088,0.686,2494,0.797,2544,0.732,2818,0.674,2836,0.837,2909,0.484,2967,0.705,2968,0.686,2980,1.247,3311,1.761,3314,0.716,3315,1.343,3316,1.412,3319,0.923,3320,0.682,3321,0.716,3324,0.905,3325,0.889,3326,0.944,3327,0.944,3328,0.944,3329,0.944,3330,0.944,3331,0.944,3332,0.944,3333,0.944,3334,0.944,3335,0.944,3336,0.944,3337,0.944,3338,0.944,3339,0.944,3340,0.944,3341,0.944,3405,0.788,3419,0.848,3531,1.068,3532,1.027,3533,3.09,3534,0.889,3535,1.988,3536,1.988,3537,1.068,3538,1.068,3539,1.068,3540,1.068,3541,1.068,3542,1.988,3543,1.068,3544,1.068,3545,1.068,3546,0.874,3547,0.874,3548,1.068,3549,0.837,3550,0.837,3551,0.837,3552,0.837,3553,0.837,3554,0.837]],["component/203",[199,1.231]],["title/204-1",[310,57.238]],["name/204-1",[]],["text/204-1",[]],["component/204-1",[]],["title/204-2",[15,33.567]],["name/204-2",[]],["text/204-2",[]],["component/204-2",[]],["title/204-3",[199,39.137]],["name/204-3",[]],["text/204-3",[]],["component/204-3",[]],["title/204-4",[261,28.922,1954,38.537]],["name/204-4",[]],["text/204-4",[]],["component/204-4",[]],["title/204-5",[374,33.375,707,35.628]],["name/204-5",[]],["text/204-5",[]],["component/204-5",[]],["title/204",[208,30.391,630,31.725]],["name/204",[3216,1.734]],["text/204",[2,0.662,4,3.869,5,1.362,6,1.465,8,0.766,9,0.909,11,0.234,12,0.87,15,1.145,18,2.248,22,0.949,25,0.624,28,1.532,30,0.446,48,0.491,50,0.589,74,3.086,81,1.974,82,1.026,91,2.377,93,3.344,95,0.829,96,0.382,105,0.394,107,0.645,109,1.14,111,0.901,112,0.486,121,0.682,123,1.124,126,0.333,127,0.761,128,1.339,129,0.71,130,0.695,133,2.446,134,0.916,137,1.955,147,0.553,149,0.42,153,1.007,154,0.636,164,0.645,178,0.376,181,2.299,187,0.656,194,0.629,198,0.79,199,4.303,208,0.499,214,1.144,216,0.61,225,0.963,226,2.156,230,1.392,233,1.056,242,0.585,261,0.475,266,0.535,309,0.565,313,0.799,315,0.652,316,0.917,320,0.856,321,0.369,325,3.323,339,1.676,389,0.541,405,1.016,415,0.602,419,0.382,450,1.598,455,0.565,462,1.795,470,2.056,471,0.512,478,0.755,485,0.847,490,0.877,492,0.636,502,0.715,505,1.598,507,1.578,509,2.047,510,1.638,518,0.454,523,0.525,526,1.139,532,1.864,541,0.466,546,0.957,549,1.044,598,0.7,599,0.7,601,0.847,620,0.935,630,1.701,631,0.667,640,0.597,654,0.589,655,1.071,656,1.04,657,2.159,664,2.275,677,1.444,685,4.337,686,3.652,687,2.942,688,0.847,689,0.847,690,1.783,691,0.678,698,0.42,699,0.917,735,0.837,769,0.715,770,1.803,771,1.278,775,0.663,776,0.956,793,0.67,898,1.537,909,1.726,915,0.783,917,1.007,924,0.649,957,0.705,958,1.16,998,0.807,1009,0.859,1018,1.935,1032,0.928,1039,0.438,1080,1.519,1120,0.615,1130,1.381,1161,1.867,1170,1.392,1176,3.055,1182,0.872,1209,1.082,1213,0.917,1250,0.755,1267,0.886,1291,0.761,1301,1.082,1307,0.956,1501,1.557,1666,1.517,1670,0.761,1675,2.275,1748,0.761,1754,2.556,1868,4.397,1889,0.667,1918,1.082,1954,1.65,2074,1.084,2088,0.695,2316,0.98,2350,0.847,2470,4.151,2472,1.707,2494,0.807,2841,3.466,2852,3.6,2895,0.98,2896,0.98,2967,0.715,2968,0.695,2969,0.783,2970,1.502,3063,0.98,3187,3.355,3254,1.823,3320,0.691,3321,0.725,3322,1.823,3324,0.917,3325,0.901,3326,0.956,3327,0.956,3328,0.956,3329,0.956,3330,0.956,3331,0.956,3332,0.956,3333,0.956,3334,0.956,3335,0.956,3336,0.956,3337,0.956,3338,0.956,3339,0.956,3340,0.956,3341,0.956,3438,1.935,3439,0.799,3440,1.676,3441,3.056,3447,3.679,3481,1.935,3555,2.116,3556,1.137,3557,7.787,3558,1.137,3559,1.137,3560,1.137,3561,1.137,3562,1.935,3563,1.137,3564,2.116,3565,1.137,3566,1.04,3567,2.967,3568,1.137,3569,1.137,3570,2.116,3571,1.137,3572,1.137,3573,1.137,3574,1.137,3575,1.137,3576,1.137,3577,1.137,3578,1.137,3579,1.137,3580,1.137,3581,1.137,3582,1.137,3583,1.137,3584,1.137,3585,1.137,3586,1.137,3587,1.137,3588,1.137,3589,1.137,3590,1.137,3591,1.137,3592,1.137,3593,1.137]],["component/204",[199,1.231]],["title/205-1",[344,50.708]],["name/205-1",[]],["text/205-1",[]],["component/205-1",[]],["title/205-2",[374,33.375,707,35.628]],["name/205-2",[]],["text/205-2",[]],["component/205-2",[]],["title/205",[19,38.169,20,31.351]],["name/205",[205,1.287]],["text/205",[0,6.199,2,3.076,3,2.338,4,3.198,5,2.263,9,1.78,11,2.458,18,3.502,20,3.29,95,2.849,112,4.201,199,5.014,208,3.19,261,3.035,320,2.942,441,2.691,465,4.825,518,3.924,549,3.588,630,3.33,968,2.868,1357,4.262,1954,5.471]],["component/205",[199,1.231]],["title/206-1",[9,16.962,11,14.261]],["name/206-1",[]],["text/206-1",[]],["component/206-1",[]],["title/206-2",[10,41.906]],["name/206-2",[]],["text/206-2",[]],["component/206-2",[]],["title/206-3",[968,34.315]],["name/206-3",[]],["text/206-3",[]],["component/206-3",[]],["title/206-4",[374,33.375,707,35.628]],["name/206-4",[]],["text/206-4",[]],["component/206-4",[]],["title/206",[2,27.205]],["name/206",[2,0.81]],["text/206",[2,3.726,3,1.98,5,2.515,6,1.11,9,2.657,10,3.893,11,2.659,12,2.533,15,2.376,18,2.273,24,2.167,26,1.383,39,1.781,46,2.491,48,1.214,89,1.083,91,1.217,96,1.593,112,1.202,133,1.013,134,1.217,138,1.744,149,1.753,176,2.571,181,2.893,199,4.197,207,2.264,221,1.524,226,2.436,235,1.221,251,1.622,261,1.174,320,1.921,321,1.539,355,1.807,372,2.867,387,1.419,388,2.803,401,2.194,405,1.351,415,1.489,432,2.187,444,1.821,446,1.997,518,1.122,630,1.288,722,1.47,772,1.649,802,1.732,927,1.47,968,4.025,983,1.528,1168,6.396,1215,1.171,1311,1.605,1954,1.565,2270,1.936,2337,4.265,2545,4.424,3259,1.918,3260,1.918,3262,2.097,3263,1.918,3264,1.9,3394,2.157,3395,2.423,3397,2.157,3398,2.157,3399,2.423]],["component/206",[199,1.231]],["title/207-1",[52,23.584,139,24.374]],["name/207-1",[]],["text/207-1",[]],["component/207-1",[]],["title/207-2",[1045,21.29,1666,24.015]],["name/207-2",[]],["text/207-2",[]],["component/207-2",[]],["title/207",[]],["name/207",[2853,1.51]],["text/207",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,199,4.363,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3505,5.744]],["component/207",[199,1.231]],["title/208-1",[149,21.259,708,25.823,1215,23.97]],["name/208-1",[]],["text/208-1",[]],["component/208-1",[]],["title/208-2",[52,23.584,139,24.374]],["name/208-2",[]],["text/208-2",[]],["component/208-2",[]],["title/208-3",[1045,21.29,1666,24.015]],["name/208-3",[]],["text/208-3",[]],["component/208-3",[]],["title/208-4",[220,23.711,1039,26.676]],["name/208-4",[]],["text/208-4",[]],["component/208-4",[]],["title/208-5",[2907,44.56]],["name/208-5",[]],["text/208-5",[]],["component/208-5",[]],["title/208-6",[2908,42.932]],["name/208-6",[]],["text/208-6",[]],["component/208-6",[]],["title/208",[126,25.488]],["name/208",[126,0.759]],["text/208",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,199,4.471,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3505,4.738,3506,4.939]],["component/208",[199,1.231]],["title/209-1",[89,33.495]],["name/209-1",[]],["text/209-1",[]],["component/209-1",[]],["title/209-2",[1006,46.229]],["name/209-2",[]],["text/209-2",[]],["component/209-2",[]],["title/209",[390,39.954]],["name/209",[390,1.19]],["text/209",[6,1.771,9,1.099,11,0.924,14,2.385,18,2.661,30,1.76,74,2.783,81,2.026,82,3.362,93,1.928,96,1.507,109,2.663,126,1.316,133,1.616,134,3,137,3.119,163,3.443,181,1.326,198,3.122,199,4.892,207,2.142,218,3.101,259,2.309,279,3.075,309,2.232,321,1.456,390,4.373,422,3.362,438,5.009,490,1.861,499,2.747,507,1.908,509,1.852,510,3.058,532,1.913,596,1.783,654,2.328,677,2.185,685,6.152,688,3.347,689,3.347,690,2.156,698,1.658,783,2.885,784,4.725,907,2.498,997,2.632,1002,3.694,1032,3.041,1045,2.602,1321,2.822,1326,2.632,1541,2.783,3404,3.776,3405,3.154,3507,4.271,3508,6.593,3509,4.271,3510,4.271,3511,4.271]],["component/209",[199,1.231]],["title/210-1",[2907,44.56]],["name/210-1",[]],["text/210-1",[]],["component/210-1",[]],["title/210-2",[2908,42.932]],["name/210-2",[]],["text/210-2",[]],["component/210-2",[]],["title/210",[]],["name/210",[2917,1.545]],["text/210",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,199,4.483,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3505,3.955,3506,6.234]],["component/210",[199,1.231]],["title/211-1",[3,22.278,703,32.312]],["name/211-1",[]],["text/211-1",[]],["component/211-1",[]],["title/211-2",[199,39.137]],["name/211-2",[]],["text/211-2",[]],["component/211-2",[]],["title/211-3",[389,41.355]],["name/211-3",[]],["text/211-3",[]],["component/211-3",[]],["title/211",[535,49.367]],["name/211",[535,1.47]],["text/211",[5,2.205,11,1.238,13,2.576,15,1.051,18,2.709,20,2.722,22,1.222,30,3.6,60,1.616,74,0.896,82,2.241,93,1.17,96,0.914,98,1.43,109,1.775,112,1.974,114,1.407,124,1.808,126,1.354,133,1.663,134,1.179,135,5.34,137,2.823,150,2.959,151,1.369,158,3.121,166,1.271,171,1.267,178,0.9,181,1.776,193,2.004,199,3.878,217,1.374,221,0.875,250,1.442,256,1.737,266,2.832,279,1.209,309,2.99,315,1.562,389,1.295,397,1.914,413,1.571,419,1.553,422,3.437,435,1.263,438,1.255,441,1.008,462,2.908,471,1.226,490,1.915,512,1.956,518,1.087,520,2.477,535,1.546,542,3.255,546,2.091,549,1.345,563,2.415,570,2.198,596,1.082,657,2.969,667,1.75,678,1.666,680,2.79,686,2.004,697,2.031,703,1.271,756,3.492,775,1.588,783,1.75,784,3.15,898,3.357,923,3.15,932,1.875,966,2.233,997,3.527,1001,2.413,1007,1.956,1180,1.857,1238,1.571,1242,1.666,1243,3.45,1388,2.031,1441,2.347,1540,2.413,1721,6.482,1748,1.824,1937,2.347,2189,2.492,2538,2.291,2657,2.492,2806,4.101,2836,2.031,2909,1.176,3097,2.291,3512,3.66,3513,2.591,3514,2.591,3515,2.591,3516,2.591,3517,2.591,3518,2.591,3519,2.591,3520,2.591,3521,2.591,3522,2.413]],["component/211",[199,1.231]],["title/212-1",[222,25.902,226,23.333]],["name/212-1",[]],["text/212-1",[]],["component/212-1",[]],["title/212-2",[105,30.154]],["name/212-2",[]],["text/212-2",[]],["component/212-2",[]],["title/212",[9,12.054,11,10.134,14,16.942,199,22.151]],["name/212",[205,1.287]],["text/212",[3,2.612,9,2.592,11,2.424,14,3.643,18,2.553,80,3.375,96,2.726,105,2.816,199,5.298,222,3.037,226,2.736,235,3.525,261,3.391,435,3.765,909,3.205,941,4.684,1265,6.998,1266,7.431,1267,6.327,3523,7.727]],["component/212",[199,1.231]],["title/213-1",[389,41.355]],["name/213-1",[]],["text/213-1",[]],["component/213-1",[]],["title/213-2",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/213-2",[]],["text/213-2",[]],["component/213-2",[]],["title/213-3",[126,20.299,1032,30.391]],["name/213-3",[]],["text/213-3",[]],["component/213-3",[]],["title/213-4",[220,23.711,1039,26.676]],["name/213-4",[]],["text/213-4",[]],["component/213-4",[]],["title/213-5",[30,22.555,286,28.717,563,30.081]],["name/213-5",[]],["text/213-5",[]],["component/213-5",[]],["title/213-6",[333,33.487,663,38.919]],["name/213-6",[]],["text/213-6",[]],["component/213-6",[]],["title/213-7",[333,33.487,669,43.851]],["name/213-7",[]],["text/213-7",[]],["component/213-7",[]],["title/213",[541,35.613]],["name/213",[541,1.06]],["text/213",[2,0.917,3,0.672,4,0.919,5,0.651,6,1.157,9,0.718,11,0.892,14,1.491,15,1.898,18,1.995,20,0.946,22,0.938,27,0.732,28,0.579,30,1.927,33,0.637,48,2.123,50,1.084,59,0.772,62,0.674,73,0.544,74,2.8,80,0.466,81,1.955,82,2.385,89,1.415,91,1.27,93,0.482,95,0.44,107,0.637,109,1.889,112,0.893,114,0.579,123,0.596,126,1.269,128,1.323,129,1.304,133,0.404,134,1.27,135,1.368,137,1.419,139,2.372,147,1.017,150,0.552,151,0.564,166,1.368,169,1.079,171,0.522,175,1.157,181,2.096,187,0.647,198,0.78,199,2.663,204,0.575,207,0.535,214,1.131,216,0.602,217,1.48,219,0.967,220,1.004,221,0.671,222,0.42,223,1.594,224,0.658,225,0.952,226,2.138,228,1.453,242,1.075,246,2.735,250,1.106,266,1.73,277,1.399,283,0.732,286,0.56,309,3.156,314,0.651,321,0.364,333,1.01,334,0.554,335,0.523,382,0.952,389,0.534,391,1.747,413,0.647,419,1.99,422,3.604,434,1.278,439,0.696,441,0.415,450,1.126,455,0.558,462,1.01,471,1.32,490,1.795,492,0.627,507,1.247,509,1.21,510,0.922,518,1.466,520,1.97,523,0.519,532,1.25,537,0.721,546,1.96,556,0.758,563,1.533,565,0.682,566,0.772,575,1.287,582,0.691,590,0.61,596,0.83,599,1.287,613,0.765,628,0.615,629,0.739,631,1.72,640,1.928,655,1.058,657,3.133,660,0.686,661,0.682,663,3.787,669,2.326,677,1.017,678,0.686,685,5.159,686,2.158,687,0.889,688,0.837,689,0.837,690,3.409,691,1.75,692,1.818,693,1.783,694,0.788,696,0.765,697,0.837,698,0.772,699,0.905,718,0.758,719,0.826,724,1.484,758,0.826,769,0.705,770,1.27,771,1.262,773,0.797,780,0.56,783,2.361,784,4.034,785,0.61,793,0.662,899,0.716,907,0.624,909,1.157,922,0.651,924,0.64,958,0.615,966,0.543,968,0.443,1032,2.785,1039,1.13,1045,0.345,1111,1.74,1116,0.751,1120,0.607,1141,0.837,1160,0.765,1161,1.051,1170,0.739,1176,0.624,1180,0.765,1238,0.647,1243,0.644,1267,0.874,1288,0.861,1297,0.78,1314,1.58,1386,0.674,1453,0.721,1496,0.797,1502,0.889,1543,1.468,1889,0.658,1896,0.889,2074,0.575,2088,0.686,2494,0.797,2544,0.732,2818,0.674,2836,0.837,2909,0.484,2967,0.705,2968,0.686,2980,1.247,3311,1.761,3314,0.716,3315,1.343,3316,1.412,3319,0.923,3320,0.682,3321,0.716,3324,0.905,3325,0.889,3326,0.944,3327,0.944,3328,0.944,3329,0.944,3330,0.944,3331,0.944,3332,0.944,3333,0.944,3334,0.944,3335,0.944,3336,0.944,3337,0.944,3338,0.944,3339,0.944,3340,0.944,3341,0.944,3405,0.788,3419,0.848,3531,1.068,3532,1.027,3533,3.09,3534,0.889,3535,1.988,3536,1.988,3537,1.068,3538,1.068,3539,1.068,3540,1.068,3541,1.068,3542,1.988,3543,1.068,3544,1.068,3545,1.068,3546,0.874,3547,0.874,3548,1.068,3549,0.837,3550,0.837,3551,0.837,3552,0.837,3553,0.837,3554,0.837]],["component/213",[199,1.231]],["title/214-1",[310,57.238]],["name/214-1",[]],["text/214-1",[]],["component/214-1",[]],["title/214-2",[15,33.567]],["name/214-2",[]],["text/214-2",[]],["component/214-2",[]],["title/214-3",[199,39.137]],["name/214-3",[]],["text/214-3",[]],["component/214-3",[]],["title/214-4",[261,28.922,1954,38.537]],["name/214-4",[]],["text/214-4",[]],["component/214-4",[]],["title/214-5",[374,33.375,707,35.628]],["name/214-5",[]],["text/214-5",[]],["component/214-5",[]],["title/214",[208,30.391,630,31.725]],["name/214",[3216,1.734]],["text/214",[2,0.662,4,3.869,5,1.362,6,1.465,8,0.766,9,0.909,11,0.234,12,0.87,15,1.145,18,2.248,22,0.949,25,0.624,28,1.532,30,0.446,48,0.491,50,0.589,74,3.086,81,1.974,82,1.026,91,2.377,93,3.344,95,0.829,96,0.382,105,0.394,107,0.645,109,1.14,111,0.901,112,0.486,121,0.682,123,1.124,126,0.333,127,0.761,128,1.339,129,0.71,130,0.695,133,2.446,134,0.916,137,1.955,147,0.553,149,0.42,153,1.007,154,0.636,164,0.645,178,0.376,181,2.299,187,0.656,194,0.629,198,0.79,199,4.303,208,0.499,214,1.144,216,0.61,225,0.963,226,2.156,230,1.392,233,1.056,242,0.585,261,0.475,266,0.535,309,0.565,313,0.799,315,0.652,316,0.917,320,0.856,321,0.369,325,3.323,339,1.676,389,0.541,405,1.016,415,0.602,419,0.382,450,1.598,455,0.565,462,1.795,470,2.056,471,0.512,478,0.755,485,0.847,490,0.877,492,0.636,502,0.715,505,1.598,507,1.578,509,2.047,510,1.638,518,0.454,523,0.525,526,1.139,532,1.864,541,0.466,546,0.957,549,1.044,598,0.7,599,0.7,601,0.847,620,0.935,630,1.701,631,0.667,640,0.597,654,0.589,655,1.071,656,1.04,657,2.159,664,2.275,677,1.444,685,4.337,686,3.652,687,2.942,688,0.847,689,0.847,690,1.783,691,0.678,698,0.42,699,0.917,735,0.837,769,0.715,770,1.803,771,1.278,775,0.663,776,0.956,793,0.67,898,1.537,909,1.726,915,0.783,917,1.007,924,0.649,957,0.705,958,1.16,998,0.807,1009,0.859,1018,1.935,1032,0.928,1039,0.438,1080,1.519,1120,0.615,1130,1.381,1161,1.867,1170,1.392,1176,3.055,1182,0.872,1209,1.082,1213,0.917,1250,0.755,1267,0.886,1291,0.761,1301,1.082,1307,0.956,1501,1.557,1666,1.517,1670,0.761,1675,2.275,1748,0.761,1754,2.556,1868,4.397,1889,0.667,1918,1.082,1954,1.65,2074,1.084,2088,0.695,2316,0.98,2350,0.847,2470,4.151,2472,1.707,2494,0.807,2841,3.466,2852,3.6,2895,0.98,2896,0.98,2967,0.715,2968,0.695,2969,0.783,2970,1.502,3063,0.98,3187,3.355,3254,1.823,3320,0.691,3321,0.725,3322,1.823,3324,0.917,3325,0.901,3326,0.956,3327,0.956,3328,0.956,3329,0.956,3330,0.956,3331,0.956,3332,0.956,3333,0.956,3334,0.956,3335,0.956,3336,0.956,3337,0.956,3338,0.956,3339,0.956,3340,0.956,3341,0.956,3438,1.935,3439,0.799,3440,1.676,3441,3.056,3447,3.679,3481,1.935,3555,2.116,3556,1.137,3557,7.787,3558,1.137,3559,1.137,3560,1.137,3561,1.137,3562,1.935,3563,1.137,3564,2.116,3565,1.137,3566,1.04,3567,2.967,3568,1.137,3569,1.137,3570,2.116,3571,1.137,3572,1.137,3573,1.137,3574,1.137,3575,1.137,3576,1.137,3577,1.137,3578,1.137,3579,1.137,3580,1.137,3581,1.137,3582,1.137,3583,1.137,3584,1.137,3585,1.137,3586,1.137,3587,1.137,3588,1.137,3589,1.137,3590,1.137,3591,1.137,3592,1.137,3593,1.137]],["component/214",[199,1.231]],["title/215-1",[344,50.708]],["name/215-1",[]],["text/215-1",[]],["component/215-1",[]],["title/215-2",[374,33.375,707,35.628]],["name/215-2",[]],["text/215-2",[]],["component/215-2",[]],["title/215",[19,38.169,20,31.351]],["name/215",[205,1.287]],["text/215",[0,6.199,2,3.076,3,2.338,4,3.198,5,2.263,9,1.78,11,2.458,18,3.502,20,3.29,95,2.849,112,4.201,199,5.014,208,3.19,261,3.035,320,2.942,441,2.691,465,4.825,518,3.924,549,3.588,630,3.33,968,2.868,1357,4.262,1954,5.471]],["component/215",[199,1.231]],["title/216-1",[9,16.962,11,14.261]],["name/216-1",[]],["text/216-1",[]],["component/216-1",[]],["title/216-2",[10,41.906]],["name/216-2",[]],["text/216-2",[]],["component/216-2",[]],["title/216-3",[968,34.315]],["name/216-3",[]],["text/216-3",[]],["component/216-3",[]],["title/216-4",[374,33.375,707,35.628]],["name/216-4",[]],["text/216-4",[]],["component/216-4",[]],["title/216",[2,27.205]],["name/216",[2,0.81]],["text/216",[2,3.726,3,1.98,5,2.515,6,1.11,9,2.657,10,3.893,11,2.659,12,2.533,15,2.376,18,2.273,24,2.167,26,1.383,39,1.781,46,2.491,48,1.214,89,1.083,91,1.217,96,1.593,112,1.202,133,1.013,134,1.217,138,1.744,149,1.753,176,2.571,181,2.893,199,4.197,207,2.264,221,1.524,226,2.436,235,1.221,251,1.622,261,1.174,320,1.921,321,1.539,355,1.807,372,2.867,387,1.419,388,2.803,401,2.194,405,1.351,415,1.489,432,2.187,444,1.821,446,1.997,518,1.122,630,1.288,722,1.47,772,1.649,802,1.732,927,1.47,968,4.025,983,1.528,1168,6.396,1215,1.171,1311,1.605,1954,1.565,2270,1.936,2337,4.265,2545,4.424,3259,1.918,3260,1.918,3262,2.097,3263,1.918,3264,1.9,3394,2.157,3395,2.423,3397,2.157,3398,2.157,3399,2.423]],["component/216",[199,1.231]],["title/217-1",[52,23.584,139,24.374]],["name/217-1",[]],["text/217-1",[]],["component/217-1",[]],["title/217-2",[1045,21.29,1666,24.015]],["name/217-2",[]],["text/217-2",[]],["component/217-2",[]],["title/217",[]],["name/217",[2853,1.51]],["text/217",[8,3.347,9,2.263,11,2.188,52,2.262,74,3.039,89,2.558,139,2.337,178,3.513,200,4.546,221,2.968,321,2.998,379,3.507,419,2.234,514,4.618,698,4.245,1045,3.713,1666,3.984,2904,3.006,2905,3.006,2906,3.377,3594,5.358]],["component/217",[200,1.345]],["title/218-1",[149,21.259,708,25.823,1215,23.97]],["name/218-1",[]],["text/218-1",[]],["component/218-1",[]],["title/218-2",[52,23.584,139,24.374]],["name/218-2",[]],["text/218-2",[]],["component/218-2",[]],["title/218-3",[1045,21.29,1666,24.015]],["name/218-3",[]],["text/218-3",[]],["component/218-3",[]],["title/218-4",[220,23.711,1039,26.676]],["name/218-4",[]],["text/218-4",[]],["component/218-4",[]],["title/218-5",[2907,44.56]],["name/218-5",[]],["text/218-5",[]],["component/218-5",[]],["title/218-6",[2908,42.932]],["name/218-6",[]],["text/218-6",[]],["component/218-6",[]],["title/218",[126,25.488]],["name/218",[126,0.759]],["text/218",[8,2.609,9,2.031,11,2.347,52,1.195,57,2.597,74,2.727,89,1.352,96,1.915,105,2.875,136,2.352,137,1.869,139,1.236,149,1.297,178,2.741,181,3.512,200,4.807,220,1.202,221,3.138,321,2.69,379,3.147,399,2.142,419,1.918,514,4.311,596,2.266,698,3.963,708,1.575,993,2.934,1039,1.352,1045,3.165,1088,3.845,1215,1.462,1666,3.162,2904,2.582,2905,2.582,2906,1.785,2909,2.462,2910,1.799,2911,2.686,2912,1.799,2913,2.686,2915,2.686,2916,2.816,3594,4.601,3595,4.519]],["component/218",[200,1.345]],["title/219-1",[89,33.495]],["name/219-1",[]],["text/219-1",[]],["component/219-1",[]],["title/219-2",[1006,46.229]],["name/219-2",[]],["text/219-2",[]],["component/219-2",[]],["title/219",[390,39.954]],["name/219",[390,1.19]],["text/219",[3,1.118,5,1.082,6,1.371,9,0.851,11,1.165,13,2.423,14,2.462,18,2.852,22,1.56,46,1.824,52,1.183,68,2.455,73,1.686,74,1.143,82,2.744,96,1.899,109,2.174,126,1.658,127,2.327,133,1.251,134,2.449,137,2.973,151,1.747,181,1.026,200,5.257,218,1.555,246,1.934,257,1.824,259,2.91,266,1.637,279,3.657,288,7.939,309,3.557,335,1.621,390,4.168,422,4.402,438,4.181,499,2.126,507,1.477,509,1.434,510,2.496,532,1.481,549,1.716,560,2.126,654,1.802,657,1.716,690,4.357,780,3.57,788,1.994,997,2.038,1002,4.655,1042,2.708,1045,2.789,1326,2.038,1541,2.155,1888,2.754,2538,2.923,3270,2.591,3404,4.757,3596,4.875,3597,2.86,3598,2.86,3599,6.805,3600,5.382,3601,6.805,3602,3.307,3603,3.079]],["component/219",[200,1.345]],["title/220-1",[2907,44.56]],["name/220-1",[]],["text/220-1",[]],["component/220-1",[]],["title/220-2",[2908,42.932]],["name/220-2",[]],["text/220-2",[]],["component/220-2",[]],["title/220",[]],["name/220",[2917,1.545]],["text/220",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,200,4.901,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3594,3.955,3595,5.872]],["component/220",[200,1.345]],["title/221-1",[222,25.902,226,23.333]],["name/221-1",[]],["text/221-1",[]],["component/221-1",[]],["title/221-2",[105,30.154]],["name/221-2",[]],["text/221-2",[]],["component/221-2",[]],["title/221",[9,12.054,11,10.134,14,16.942,200,24.213]],["name/221",[205,1.287]],["text/221",[3,2.582,9,2.572,11,2.41,14,3.615,80,3.335,96,2.695,105,2.783,200,6.109,222,3.928,226,2.704,235,3.484,261,3.352,288,5.374,435,4.87,909,3.167,941,4.629,1268,6.917,3595,6.36]],["component/221",[200,1.345]],["title/222-1",[968,34.315]],["name/222-1",[]],["text/222-1",[]],["component/222-1",[]],["title/222-2",[105,30.154]],["name/222-2",[]],["text/222-2",[]],["component/222-2",[]],["title/222-3",[11,11.848,51,29.259,234,30.206]],["name/222-3",[]],["text/222-3",[]],["component/222-3",[]],["title/222",[2,27.205]],["name/222",[2,0.81]],["text/222",[2,3.042,3,2.918,4,2.489,5,1.082,9,2.511,11,2.441,12,3.392,13,1.489,14,3.123,24,1.587,36,1.824,51,1.767,57,1.583,80,1.444,91,3.097,95,1.362,105,3.372,109,2.749,116,2.05,136,1.434,137,1.139,149,1.284,181,3.027,200,5.043,208,1.525,209,1.983,218,1.555,220,1.19,221,3.123,234,1.824,235,2.455,282,2.027,315,1.994,318,2.2,358,3.317,387,1.754,401,1.606,405,1.669,432,3.296,475,2.155,501,1.84,546,1.573,565,2.113,596,1.381,634,2.17,645,1.934,887,2.496,891,3.693,909,1.371,927,1.817,968,3.838,1037,2.234,1088,1.611,1120,1.88,1161,2.844,1310,3.556,1311,1.983,1326,2.038,1451,2.558,2792,2.269,2911,1.637,2913,1.637,2915,1.637,3595,4.482,3604,3.733,3605,3.733,3606,3.733]],["component/222",[200,1.345]],["title/223-1",[321,28.208]],["name/223-1",[]],["text/223-1",[]],["component/223-1",[]],["title/223-2",[222,25.902,416,32.936]],["name/223-2",[]],["text/223-2",[]],["component/223-2",[]],["title/223-3",[389,41.355]],["name/223-3",[]],["text/223-3",[]],["component/223-3",[]],["title/223-4",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/223-4",[]],["text/223-4",[]],["component/223-4",[]],["title/223-5",[126,20.299,1032,30.391]],["name/223-5",[]],["text/223-5",[]],["component/223-5",[]],["title/223-6",[220,23.711,1039,26.676]],["name/223-6",[]],["text/223-6",[]],["component/223-6",[]],["title/223-7",[89,33.495]],["name/223-7",[]],["text/223-7",[]],["component/223-7",[]],["title/223",[541,35.613]],["name/223",[541,1.06]],["text/223",[2,0.928,4,0.5,5,1.858,6,1.726,9,0.518,11,0.436,12,1.221,14,1.708,18,1.375,22,0.51,24,0.519,25,0.624,28,0.587,30,0.829,48,0.913,50,1.097,52,0.387,63,0.71,64,0.607,65,0.552,66,0.742,68,0.918,73,1.026,74,1.962,80,0.472,81,2.478,85,0.935,89,0.815,93,0.488,95,1.455,107,0.645,109,0.437,112,0.486,122,1.584,123,0.604,126,1.088,133,1.787,135,1.384,136,0.469,137,1.433,139,2.252,147,0.553,150,1.827,151,0.571,154,0.636,166,0.987,167,0.935,169,0.587,171,1.727,172,0.578,174,2.694,175,1.643,176,2.492,177,0.652,178,0.376,181,2.209,200,4.931,207,0.542,214,2.009,216,0.61,217,1.067,220,0.724,222,1.856,224,0.667,225,0.963,226,2.717,229,0.663,230,1.392,242,0.585,250,1.12,261,0.883,272,3.304,279,1.941,288,5.401,309,1.846,314,0.659,321,0.369,334,0.561,335,0.53,337,0.872,382,0.963,389,0.541,391,1.766,399,0.427,413,0.656,416,2.838,419,0.382,420,1.24,422,3.105,435,0.527,441,0.421,447,0.659,455,0.565,470,0.629,471,1.335,490,0.471,501,0.602,505,0.612,507,1.859,508,0.626,509,1.804,510,2.423,518,2.382,520,1.991,523,0.978,528,0.656,532,1.582,546,1.681,571,0.656,576,1.878,582,0.7,590,0.618,598,0.7,617,0.755,628,0.624,631,1.739,640,0.597,657,2.711,690,2.637,691,1.77,692,1.839,693,1.803,698,0.42,703,0.987,704,0.731,718,0.768,741,3.866,742,0.775,744,2.927,746,1.22,747,0.775,748,0.736,749,0.817,751,0.817,753,0.748,754,0.79,755,0.807,758,0.837,780,0.567,781,1.537,784,2.023,785,0.618,899,0.725,907,0.633,909,1.17,922,0.659,924,0.649,927,0.594,949,0.633,958,0.624,968,1.17,983,0.618,987,0.886,989,0.98,1009,0.859,1032,1.629,1039,0.815,1111,0.674,1116,0.761,1120,1.144,1150,1.874,1183,0.886,1220,0.98,1243,0.652,1247,1.442,1252,0.731,1268,2.556,1298,0.837,1302,0.687,1321,0.715,1360,1.15,1386,0.682,1556,0.826,1637,2.393,1638,1.986,1663,1.04,1754,1.823,1779,0.956,1832,1.04,1889,0.667,2088,0.695,2123,3.725,2147,1.577,2165,0.807,2278,1.007,2434,2.714,2818,0.682,2909,0.491,2929,0.837,2967,0.715,2968,0.695,2980,1.262,2985,0.956,3268,4.094,3291,2.275,3292,2.275,3311,1.781,3314,0.725,3315,1.359,3316,1.429,3405,0.799,3419,0.859,3597,2.441,3598,2.441,3607,2.822,3608,1.082,3609,2.012,3610,1.082,3611,1.082,3612,1.082,3613,1.082,3614,1.082,3615,1.082,3616,1.082,3617,1.082,3618,1.082,3619,1.082,3620,1.082,3621,1.082,3622,1.082,3623,1.007,3624,1.007,3625,1.007,3626,1.007,3627,1.082,3628,1.082]],["component/223",[200,1.345]],["title/224-1",[52,23.584,139,24.374]],["name/224-1",[]],["text/224-1",[]],["component/224-1",[]],["title/224-2",[1045,21.29,1666,24.015]],["name/224-2",[]],["text/224-2",[]],["component/224-2",[]],["title/224",[]],["name/224",[2853,1.51]],["text/224",[8,3.347,9,2.263,11,2.188,52,2.262,74,3.039,89,2.558,139,2.337,178,3.513,200,4.546,221,2.968,321,2.998,379,3.507,419,2.234,514,4.618,698,4.245,1045,3.713,1666,3.984,2904,3.006,2905,3.006,2906,3.377,3594,5.358]],["component/224",[200,1.345]],["title/225-1",[149,21.259,708,25.823,1215,23.97]],["name/225-1",[]],["text/225-1",[]],["component/225-1",[]],["title/225-2",[52,23.584,139,24.374]],["name/225-2",[]],["text/225-2",[]],["component/225-2",[]],["title/225-3",[1045,21.29,1666,24.015]],["name/225-3",[]],["text/225-3",[]],["component/225-3",[]],["title/225-4",[220,23.711,1039,26.676]],["name/225-4",[]],["text/225-4",[]],["component/225-4",[]],["title/225-5",[2907,44.56]],["name/225-5",[]],["text/225-5",[]],["component/225-5",[]],["title/225-6",[2908,42.932]],["name/225-6",[]],["text/225-6",[]],["component/225-6",[]],["title/225",[126,25.488]],["name/225",[126,0.759]],["text/225",[8,2.609,9,2.031,11,2.347,52,1.195,57,2.597,74,2.727,89,1.352,96,1.915,105,2.875,136,2.352,137,1.869,139,1.236,149,1.297,178,2.741,181,3.512,200,4.807,220,1.202,221,3.138,321,2.69,379,3.147,399,2.142,419,1.918,514,4.311,596,2.266,698,3.963,708,1.575,993,2.934,1039,1.352,1045,3.165,1088,3.845,1215,1.462,1666,3.162,2904,2.582,2905,2.582,2906,1.785,2909,2.462,2910,1.799,2911,2.686,2912,1.799,2913,2.686,2915,2.686,2916,2.816,3594,4.601,3595,4.519]],["component/225",[200,1.345]],["title/226-1",[89,33.495]],["name/226-1",[]],["text/226-1",[]],["component/226-1",[]],["title/226-2",[1006,46.229]],["name/226-2",[]],["text/226-2",[]],["component/226-2",[]],["title/226",[390,39.954]],["name/226",[390,1.19]],["text/226",[3,1.118,5,1.082,6,1.371,9,0.851,11,1.165,13,2.423,14,2.462,18,2.852,22,1.56,46,1.824,52,1.183,68,2.455,73,1.686,74,1.143,82,2.744,96,1.899,109,2.174,126,1.658,127,2.327,133,1.251,134,2.449,137,2.973,151,1.747,181,1.026,200,5.257,218,1.555,246,1.934,257,1.824,259,2.91,266,1.637,279,3.657,288,7.939,309,3.557,335,1.621,390,4.168,422,4.402,438,4.181,499,2.126,507,1.477,509,1.434,510,2.496,532,1.481,549,1.716,560,2.126,654,1.802,657,1.716,690,4.357,780,3.57,788,1.994,997,2.038,1002,4.655,1042,2.708,1045,2.789,1326,2.038,1541,2.155,1888,2.754,2538,2.923,3270,2.591,3404,4.757,3596,4.875,3597,2.86,3598,2.86,3599,6.805,3600,5.382,3601,6.805,3602,3.307,3603,3.079]],["component/226",[200,1.345]],["title/227-1",[2907,44.56]],["name/227-1",[]],["text/227-1",[]],["component/227-1",[]],["title/227-2",[2908,42.932]],["name/227-2",[]],["text/227-2",[]],["component/227-2",[]],["title/227",[]],["name/227",[2917,1.545]],["text/227",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,200,4.901,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3594,3.955,3595,5.872]],["component/227",[200,1.345]],["title/228-1",[222,25.902,226,23.333]],["name/228-1",[]],["text/228-1",[]],["component/228-1",[]],["title/228-2",[105,30.154]],["name/228-2",[]],["text/228-2",[]],["component/228-2",[]],["title/228",[9,12.054,11,10.134,14,16.942,200,24.213]],["name/228",[205,1.287]],["text/228",[3,2.552,9,2.553,11,2.397,14,3.588,80,3.297,96,2.664,105,2.751,200,6.082,222,3.898,226,2.673,235,3.444,261,3.314,288,5.313,435,4.833,909,3.131,941,4.576,1268,6.838,1269,6.674,3595,6.287]],["component/228",[200,1.345]],["title/229-1",[321,28.208]],["name/229-1",[]],["text/229-1",[]],["component/229-1",[]],["title/229-2",[222,25.902,416,32.936]],["name/229-2",[]],["text/229-2",[]],["component/229-2",[]],["title/229-3",[389,41.355]],["name/229-3",[]],["text/229-3",[]],["component/229-3",[]],["title/229-4",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/229-4",[]],["text/229-4",[]],["component/229-4",[]],["title/229-5",[126,20.299,1032,30.391]],["name/229-5",[]],["text/229-5",[]],["component/229-5",[]],["title/229-6",[220,23.711,1039,26.676]],["name/229-6",[]],["text/229-6",[]],["component/229-6",[]],["title/229-7",[89,33.495]],["name/229-7",[]],["text/229-7",[]],["component/229-7",[]],["title/229",[541,35.613]],["name/229",[541,1.06]],["text/229",[2,0.928,4,0.5,5,1.858,6,1.726,9,0.518,11,0.436,12,1.221,14,1.708,18,1.375,22,0.51,24,0.519,25,0.624,28,0.587,30,0.829,48,0.913,50,1.097,52,0.387,63,0.71,64,0.607,65,0.552,66,0.742,68,0.918,73,1.026,74,1.962,80,0.472,81,2.478,85,0.935,89,0.815,93,0.488,95,1.455,107,0.645,109,0.437,112,0.486,122,1.584,123,0.604,126,1.088,133,1.787,135,1.384,136,0.469,137,1.433,139,2.252,147,0.553,150,1.827,151,0.571,154,0.636,166,0.987,167,0.935,169,0.587,171,1.727,172,0.578,174,2.694,175,1.643,176,2.492,177,0.652,178,0.376,181,2.209,200,4.931,207,0.542,214,2.009,216,0.61,217,1.067,220,0.724,222,1.856,224,0.667,225,0.963,226,2.717,229,0.663,230,1.392,242,0.585,250,1.12,261,0.883,272,3.304,279,1.941,288,5.401,309,1.846,314,0.659,321,0.369,334,0.561,335,0.53,337,0.872,382,0.963,389,0.541,391,1.766,399,0.427,413,0.656,416,2.838,419,0.382,420,1.24,422,3.105,435,0.527,441,0.421,447,0.659,455,0.565,470,0.629,471,1.335,490,0.471,501,0.602,505,0.612,507,1.859,508,0.626,509,1.804,510,2.423,518,2.382,520,1.991,523,0.978,528,0.656,532,1.582,546,1.681,571,0.656,576,1.878,582,0.7,590,0.618,598,0.7,617,0.755,628,0.624,631,1.739,640,0.597,657,2.711,690,2.637,691,1.77,692,1.839,693,1.803,698,0.42,703,0.987,704,0.731,718,0.768,741,3.866,742,0.775,744,2.927,746,1.22,747,0.775,748,0.736,749,0.817,751,0.817,753,0.748,754,0.79,755,0.807,758,0.837,780,0.567,781,1.537,784,2.023,785,0.618,899,0.725,907,0.633,909,1.17,922,0.659,924,0.649,927,0.594,949,0.633,958,0.624,968,1.17,983,0.618,987,0.886,989,0.98,1009,0.859,1032,1.629,1039,0.815,1111,0.674,1116,0.761,1120,1.144,1150,1.874,1183,0.886,1220,0.98,1243,0.652,1247,1.442,1252,0.731,1269,2.495,1298,0.837,1302,0.687,1321,0.715,1360,1.15,1386,0.682,1556,0.826,1637,2.393,1638,1.986,1663,1.04,1754,1.823,1779,0.956,1832,1.04,1889,0.667,2074,1.52,2088,0.695,2123,3.725,2147,1.577,2165,0.807,2278,1.007,2818,0.682,2909,0.491,2929,0.837,2967,0.715,2968,0.695,2980,1.262,2985,0.956,3268,4.094,3291,2.275,3292,2.275,3311,1.781,3314,0.725,3315,1.359,3316,1.429,3405,0.799,3419,0.859,3597,2.441,3598,2.441,3607,2.822,3608,1.082,3609,2.012,3610,1.082,3611,1.082,3612,1.082,3613,1.082,3614,1.082,3615,1.082,3616,1.082,3617,1.082,3618,1.082,3619,1.082,3620,1.082,3621,1.082,3622,1.082,3623,1.007,3624,1.007,3625,1.007,3626,1.007,3627,1.082,3628,1.082]],["component/229",[200,1.345]],["title/230-1",[310,57.238]],["name/230-1",[]],["text/230-1",[]],["component/230-1",[]],["title/230-2",[701,59.299]],["name/230-2",[]],["text/230-2",[]],["component/230-2",[]],["title/230-3",[261,28.922,1954,38.537]],["name/230-3",[]],["text/230-3",[]],["component/230-3",[]],["title/230-4",[374,33.375,707,35.628]],["name/230-4",[]],["text/230-4",[]],["component/230-4",[]],["title/230",[208,30.391,630,31.725]],["name/230",[3216,1.734]],["text/230",[0,1.226,2,2.181,4,3.068,5,0.686,6,2.423,8,0.798,9,0.54,11,1.578,12,0.907,14,0.759,18,1.611,22,0.989,28,1.138,48,0.952,52,0.75,63,1.376,68,2.224,74,1.266,91,3.018,93,2.201,95,0.864,114,1.138,118,1.34,121,1.323,129,1.376,132,1.376,133,1.845,136,0.909,137,2.285,139,0.776,150,1.084,157,1.666,164,2.185,171,1.025,172,3.896,174,1.357,176,3.652,177,2.208,181,0.651,187,1.271,200,5.893,203,1.796,216,1.182,226,0.742,233,1.1,261,0.92,272,1.22,288,4.112,320,0.892,321,0.715,322,1.357,334,1.088,340,1.548,387,2.586,388,1.003,399,0.828,405,1.058,415,1.167,416,4.703,447,1.278,455,1.096,462,1.066,463,1.503,490,2.124,505,1.187,507,2.61,508,1.215,509,2.533,510,0.972,523,1.779,528,1.271,532,2.184,541,0.902,544,2.734,571,1.271,576,3.244,631,1.292,654,1.143,657,1.088,678,1.348,690,1.058,691,1.315,692,1.366,693,1.34,701,3.494,703,1.028,710,1.565,722,1.152,741,6.705,742,1.503,746,2.955,747,1.503,748,1.427,749,1.583,751,1.583,753,1.45,754,1.532,755,1.565,775,1.285,983,1.198,1154,1.463,1161,3.088,1227,2.017,1250,1.463,1269,1.853,1298,1.622,1357,1.292,1670,1.476,1748,2.577,1954,1.226,2074,1.129,2123,1.376,2147,5.198,3218,3.167,3231,1.813,3291,1.69,3292,1.69,3597,1.813,3598,1.813,3629,2.204,3630,3.85,3631,2.017,3632,3.85,3633,3.85,3634,2.204,3635,2.204]],["component/230",[200,1.345]],["title/231-1",[344,50.708]],["name/231-1",[]],["text/231-1",[]],["component/231-1",[]],["title/231-2",[374,33.375,707,35.628]],["name/231-2",[]],["text/231-2",[]],["component/231-2",[]],["title/231",[19,38.169,20,31.351]],["name/231",[205,1.287]],["text/231",[0,6.166,2,3.054,3,2.314,4,3.165,5,2.24,9,1.762,11,2.282,14,2.476,18,2.261,20,3.256,73,4.736,95,2.819,112,4.171,200,5.452,208,3.156,288,6.537,320,2.911,441,2.663,465,4.775,518,3.896,549,3.551,630,3.295,741,4.345,968,2.838,1357,4.218,2123,4.49]],["component/231",[200,1.345]],["title/232-1",[320,35.193]],["name/232-1",[]],["text/232-1",[]],["component/232-1",[]],["title/232-2",[10,41.906]],["name/232-2",[]],["text/232-2",[]],["component/232-2",[]],["title/232-3",[968,34.315]],["name/232-3",[]],["text/232-3",[]],["component/232-3",[]],["title/232-4",[741,52.533]],["name/232-4",[]],["text/232-4",[]],["component/232-4",[]],["title/232-5",[3636,86.978]],["name/232-5",[]],["text/232-5",[]],["component/232-5",[]],["title/232-6",[9,16.962,11,14.261]],["name/232-6",[]],["text/232-6",[]],["component/232-6",[]],["title/232-7",[10,41.906]],["name/232-7",[]],["text/232-7",[]],["component/232-7",[]],["title/232-8",[968,34.315]],["name/232-8",[]],["text/232-8",[]],["component/232-8",[]],["title/232-9",[374,33.375,707,35.628]],["name/232-9",[]],["text/232-9",[]],["component/232-9",[]],["title/232",[2,27.205]],["name/232",[2,0.81]],["text/232",[2,3.292,3,0.864,5,2.029,8,0.533,9,1.719,10,3.963,11,2.134,12,2.183,13,1.15,14,1.826,18,0.463,20,0.667,24,2.084,26,0.724,39,0.932,46,1.409,48,0.636,52,0.501,63,0.919,73,0.715,74,0.883,75,1.113,91,0.638,92,0.986,93,1.589,94,1.575,95,1.052,96,1.242,109,0.566,112,0.629,133,0.53,134,1.162,137,1.739,138,0.913,149,1.367,154,1.501,158,3.083,171,0.685,172,0.749,176,1.121,177,1.54,181,3.395,200,4.487,207,0.703,208,0.646,209,2.112,211,1.084,221,1.188,223,0.8,226,2.649,235,0.639,251,0.849,255,1.524,261,1.121,262,3.384,288,1.798,320,2.408,321,0.871,333,0.712,355,1.726,363,1.713,372,1.622,384,1.188,387,0.743,388,1.223,399,1.39,401,1.241,405,0.707,415,0.78,416,0.7,419,0.495,420,0.864,432,1.237,441,0.994,444,1.739,501,0.78,505,0.793,518,3.531,524,1.188,537,0.946,549,1.326,630,0.675,640,0.773,663,0.828,696,1.004,717,1.188,722,0.77,741,5.345,749,1.058,751,1.058,772,0.864,802,0.907,888,1.887,927,2.774,968,3.788,983,0.8,998,1.907,1045,0.825,1133,1.113,1136,0.969,1168,4.873,1170,0.969,1215,0.613,1238,1.549,1311,0.84,1428,1.305,1447,2.379,1611,1.147,1638,0.986,2123,4.659,2147,3.402,2161,1.401,2164,2.555,2165,1.907,2184,1.348,2337,2.182,2379,1.212,2382,2.166,2545,2.264,2709,2.166,2928,1.098,3259,1.004,3260,1.004,3263,1.004,3264,0.995,3562,3.386,3623,1.305,3624,1.305,3625,1.305,3626,1.305,3631,1.348,3637,2.686,3638,2.686,3639,2.686,3640,2.686,3641,2.686,3642,1.473,3643,1.473,3644,1.473,3645,1.473,3646,1.473,3647,1.473,3648,1.473,3649,1.473,3650,1.473,3651,1.473,3652,1.473,3653,1.473,3654,1.473,3655,1.473,3656,1.473,3657,1.473,3658,1.473,3659,1.473,3660,1.473]],["component/232",[200,1.345]],["title/233-1",[52,23.584,139,24.374]],["name/233-1",[]],["text/233-1",[]],["component/233-1",[]],["title/233-2",[1045,21.29,1666,24.015]],["name/233-2",[]],["text/233-2",[]],["component/233-2",[]],["title/233",[]],["name/233",[2853,1.51]],["text/233",[8,3.347,9,2.263,11,2.188,52,2.262,74,3.039,89,2.558,139,2.337,178,3.513,200,4.546,221,2.968,321,2.998,379,3.507,419,2.234,514,4.618,698,4.245,1045,3.713,1666,3.984,2904,3.006,2905,3.006,2906,3.377,3594,5.358]],["component/233",[200,1.345]],["title/234-1",[149,21.259,708,25.823,1215,23.97]],["name/234-1",[]],["text/234-1",[]],["component/234-1",[]],["title/234-2",[52,23.584,139,24.374]],["name/234-2",[]],["text/234-2",[]],["component/234-2",[]],["title/234-3",[1045,21.29,1666,24.015]],["name/234-3",[]],["text/234-3",[]],["component/234-3",[]],["title/234-4",[220,23.711,1039,26.676]],["name/234-4",[]],["text/234-4",[]],["component/234-4",[]],["title/234-5",[2907,44.56]],["name/234-5",[]],["text/234-5",[]],["component/234-5",[]],["title/234-6",[2908,42.932]],["name/234-6",[]],["text/234-6",[]],["component/234-6",[]],["title/234",[126,25.488]],["name/234",[126,0.759]],["text/234",[8,2.609,9,2.031,11,2.347,52,1.195,57,2.597,74,2.727,89,1.352,96,1.915,105,2.875,136,2.352,137,1.869,139,1.236,149,1.297,178,2.741,181,3.512,200,4.807,220,1.202,221,3.138,321,2.69,379,3.147,399,2.142,419,1.918,514,4.311,596,2.266,698,3.963,708,1.575,993,2.934,1039,1.352,1045,3.165,1088,3.845,1215,1.462,1666,3.162,2904,2.582,2905,2.582,2906,1.785,2909,2.462,2910,1.799,2911,2.686,2912,1.799,2913,2.686,2915,2.686,2916,2.816,3594,4.601,3595,4.519]],["component/234",[200,1.345]],["title/235-1",[89,33.495]],["name/235-1",[]],["text/235-1",[]],["component/235-1",[]],["title/235-2",[1006,46.229]],["name/235-2",[]],["text/235-2",[]],["component/235-2",[]],["title/235",[390,39.954]],["name/235",[390,1.19]],["text/235",[3,1.118,5,1.082,6,1.371,9,0.851,11,1.165,13,2.423,14,2.462,18,2.852,22,1.56,46,1.824,52,1.183,68,2.455,73,1.686,74,1.143,82,2.744,96,1.899,109,2.174,126,1.658,127,2.327,133,1.251,134,2.449,137,2.973,151,1.747,181,1.026,200,5.257,218,1.555,246,1.934,257,1.824,259,2.91,266,1.637,279,3.657,288,7.939,309,3.557,335,1.621,390,4.168,422,4.402,438,4.181,499,2.126,507,1.477,509,1.434,510,2.496,532,1.481,549,1.716,560,2.126,654,1.802,657,1.716,690,4.357,780,3.57,788,1.994,997,2.038,1002,4.655,1042,2.708,1045,2.789,1326,2.038,1541,2.155,1888,2.754,2538,2.923,3270,2.591,3404,4.757,3596,4.875,3597,2.86,3598,2.86,3599,6.805,3600,5.382,3601,6.805,3602,3.307,3603,3.079]],["component/235",[200,1.345]],["title/236-1",[2907,44.56]],["name/236-1",[]],["text/236-1",[]],["component/236-1",[]],["title/236-2",[2908,42.932]],["name/236-2",[]],["text/236-2",[]],["component/236-2",[]],["title/236",[]],["name/236",[2917,1.545]],["text/236",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,200,4.901,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3594,3.955,3595,5.872]],["component/236",[200,1.345]],["title/237-1",[222,25.902,226,23.333]],["name/237-1",[]],["text/237-1",[]],["component/237-1",[]],["title/237-2",[105,30.154]],["name/237-2",[]],["text/237-2",[]],["component/237-2",[]],["title/237",[9,12.054,11,10.134,14,16.942,200,24.213]],["name/237",[205,1.287]],["text/237",[3,2.552,9,2.553,11,2.397,14,3.588,80,3.297,96,2.664,105,2.751,200,6.082,222,3.898,226,2.673,235,3.444,261,3.314,288,5.313,435,4.833,909,3.131,941,4.576,1268,6.838,1269,6.674,3595,6.287]],["component/237",[200,1.345]],["title/238-1",[321,28.208]],["name/238-1",[]],["text/238-1",[]],["component/238-1",[]],["title/238-2",[222,25.902,416,32.936]],["name/238-2",[]],["text/238-2",[]],["component/238-2",[]],["title/238-3",[389,41.355]],["name/238-3",[]],["text/238-3",[]],["component/238-3",[]],["title/238-4",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/238-4",[]],["text/238-4",[]],["component/238-4",[]],["title/238-5",[126,20.299,1032,30.391]],["name/238-5",[]],["text/238-5",[]],["component/238-5",[]],["title/238-6",[220,23.711,1039,26.676]],["name/238-6",[]],["text/238-6",[]],["component/238-6",[]],["title/238-7",[89,33.495]],["name/238-7",[]],["text/238-7",[]],["component/238-7",[]],["title/238",[541,35.613]],["name/238",[541,1.06]],["text/238",[2,0.928,4,0.5,5,1.858,6,1.726,9,0.518,11,0.436,12,1.221,14,1.708,18,1.375,22,0.51,24,0.519,25,0.624,28,0.587,30,0.829,48,0.913,50,1.097,52,0.387,63,0.71,64,0.607,65,0.552,66,0.742,68,0.918,73,1.026,74,1.962,80,0.472,81,2.478,85,0.935,89,0.815,93,0.488,95,1.455,107,0.645,109,0.437,112,0.486,122,1.584,123,0.604,126,1.088,133,1.787,135,1.384,136,0.469,137,1.433,139,2.252,147,0.553,150,1.827,151,0.571,154,0.636,166,0.987,167,0.935,169,0.587,171,1.727,172,0.578,174,2.694,175,1.643,176,2.492,177,0.652,178,0.376,181,2.209,200,4.931,207,0.542,214,2.009,216,0.61,217,1.067,220,0.724,222,1.856,224,0.667,225,0.963,226,2.717,229,0.663,230,1.392,242,0.585,250,1.12,261,0.883,272,3.304,279,1.941,288,5.401,309,1.846,314,0.659,321,0.369,334,0.561,335,0.53,337,0.872,382,0.963,389,0.541,391,1.766,399,0.427,413,0.656,416,2.838,419,0.382,420,1.24,422,3.105,435,0.527,441,0.421,447,0.659,455,0.565,470,0.629,471,1.335,490,0.471,501,0.602,505,0.612,507,1.859,508,0.626,509,1.804,510,2.423,518,2.382,520,1.991,523,0.978,528,0.656,532,1.582,546,1.681,571,0.656,576,1.878,582,0.7,590,0.618,598,0.7,617,0.755,628,0.624,631,1.739,640,0.597,657,2.711,690,2.637,691,1.77,692,1.839,693,1.803,698,0.42,703,0.987,704,0.731,718,0.768,741,3.866,742,0.775,744,2.927,746,1.22,747,0.775,748,0.736,749,0.817,751,0.817,753,0.748,754,0.79,755,0.807,758,0.837,780,0.567,781,1.537,784,2.023,785,0.618,899,0.725,907,0.633,909,1.17,922,0.659,924,0.649,927,0.594,949,0.633,958,0.624,968,1.17,983,0.618,987,0.886,989,0.98,1009,0.859,1032,1.629,1039,0.815,1111,0.674,1116,0.761,1120,1.144,1150,1.874,1183,0.886,1220,0.98,1243,0.652,1247,1.442,1252,0.731,1269,2.495,1298,0.837,1302,0.687,1321,0.715,1360,1.15,1386,0.682,1556,0.826,1637,2.393,1638,1.986,1663,1.04,1754,1.823,1779,0.956,1832,1.04,1889,0.667,2074,1.52,2088,0.695,2123,3.725,2147,1.577,2165,0.807,2278,1.007,2818,0.682,2909,0.491,2929,0.837,2967,0.715,2968,0.695,2980,1.262,2985,0.956,3268,4.094,3291,2.275,3292,2.275,3311,1.781,3314,0.725,3315,1.359,3316,1.429,3405,0.799,3419,0.859,3597,2.441,3598,2.441,3607,2.822,3608,1.082,3609,2.012,3610,1.082,3611,1.082,3612,1.082,3613,1.082,3614,1.082,3615,1.082,3616,1.082,3617,1.082,3618,1.082,3619,1.082,3620,1.082,3621,1.082,3622,1.082,3623,1.007,3624,1.007,3625,1.007,3626,1.007,3627,1.082,3628,1.082]],["component/238",[200,1.345]],["title/239-1",[310,57.238]],["name/239-1",[]],["text/239-1",[]],["component/239-1",[]],["title/239-2",[701,59.299]],["name/239-2",[]],["text/239-2",[]],["component/239-2",[]],["title/239-3",[261,28.922,1954,38.537]],["name/239-3",[]],["text/239-3",[]],["component/239-3",[]],["title/239-4",[374,33.375,707,35.628]],["name/239-4",[]],["text/239-4",[]],["component/239-4",[]],["title/239",[208,30.391,630,31.725]],["name/239",[3216,1.734]],["text/239",[0,1.226,2,2.181,4,3.068,5,0.686,6,2.423,8,0.798,9,0.54,11,1.578,12,0.907,14,0.759,18,1.611,22,0.989,28,1.138,48,0.952,52,0.75,63,1.376,68,2.224,74,1.266,91,3.018,93,2.201,95,0.864,114,1.138,118,1.34,121,1.323,129,1.376,132,1.376,133,1.845,136,0.909,137,2.285,139,0.776,150,1.084,157,1.666,164,2.185,171,1.025,172,3.896,174,1.357,176,3.652,177,2.208,181,0.651,187,1.271,200,5.893,203,1.796,216,1.182,226,0.742,233,1.1,261,0.92,272,1.22,288,4.112,320,0.892,321,0.715,322,1.357,334,1.088,340,1.548,387,2.586,388,1.003,399,0.828,405,1.058,415,1.167,416,4.703,447,1.278,455,1.096,462,1.066,463,1.503,490,2.124,505,1.187,507,2.61,508,1.215,509,2.533,510,0.972,523,1.779,528,1.271,532,2.184,541,0.902,544,2.734,571,1.271,576,3.244,631,1.292,654,1.143,657,1.088,678,1.348,690,1.058,691,1.315,692,1.366,693,1.34,701,3.494,703,1.028,710,1.565,722,1.152,741,6.705,742,1.503,746,2.955,747,1.503,748,1.427,749,1.583,751,1.583,753,1.45,754,1.532,755,1.565,775,1.285,983,1.198,1154,1.463,1161,3.088,1227,2.017,1250,1.463,1269,1.853,1298,1.622,1357,1.292,1670,1.476,1748,2.577,1954,1.226,2074,1.129,2123,1.376,2147,5.198,3218,3.167,3231,1.813,3291,1.69,3292,1.69,3597,1.813,3598,1.813,3629,2.204,3630,3.85,3631,2.017,3632,3.85,3633,3.85,3634,2.204,3635,2.204]],["component/239",[200,1.345]],["title/240-1",[344,50.708]],["name/240-1",[]],["text/240-1",[]],["component/240-1",[]],["title/240-2",[374,33.375,707,35.628]],["name/240-2",[]],["text/240-2",[]],["component/240-2",[]],["title/240",[19,38.169,20,31.351]],["name/240",[205,1.287]],["text/240",[0,6.166,2,3.054,3,2.314,4,3.165,5,2.24,9,1.762,11,2.282,14,2.476,18,2.261,20,3.256,73,4.736,95,2.819,112,4.171,200,5.452,208,3.156,288,6.537,320,2.911,441,2.663,465,4.775,518,3.896,549,3.551,630,3.295,741,4.345,968,2.838,1357,4.218,2123,4.49]],["component/240",[200,1.345]],["title/241-1",[320,35.193]],["name/241-1",[]],["text/241-1",[]],["component/241-1",[]],["title/241-2",[10,41.906]],["name/241-2",[]],["text/241-2",[]],["component/241-2",[]],["title/241-3",[968,34.315]],["name/241-3",[]],["text/241-3",[]],["component/241-3",[]],["title/241-4",[741,52.533]],["name/241-4",[]],["text/241-4",[]],["component/241-4",[]],["title/241-5",[3636,86.978]],["name/241-5",[]],["text/241-5",[]],["component/241-5",[]],["title/241-6",[9,16.962,11,14.261]],["name/241-6",[]],["text/241-6",[]],["component/241-6",[]],["title/241-7",[10,41.906]],["name/241-7",[]],["text/241-7",[]],["component/241-7",[]],["title/241-8",[968,34.315]],["name/241-8",[]],["text/241-8",[]],["component/241-8",[]],["title/241-9",[374,33.375,707,35.628]],["name/241-9",[]],["text/241-9",[]],["component/241-9",[]],["title/241",[2,27.205]],["name/241",[2,0.81]],["text/241",[2,3.292,3,0.864,5,2.029,8,0.533,9,1.719,10,3.963,11,2.134,12,2.183,13,1.15,14,1.826,18,0.463,20,0.667,24,2.084,26,0.724,39,0.932,46,1.409,48,0.636,52,0.501,63,0.919,73,0.715,74,0.883,75,1.113,91,0.638,92,0.986,93,1.589,94,1.575,95,1.052,96,1.242,109,0.566,112,0.629,133,0.53,134,1.162,137,1.739,138,0.913,149,1.367,154,1.501,158,3.083,171,0.685,172,0.749,176,1.121,177,1.54,181,3.395,200,4.487,207,0.703,208,0.646,209,2.112,211,1.084,221,1.188,223,0.8,226,2.649,235,0.639,251,0.849,255,1.524,261,1.121,262,3.384,288,1.798,320,2.408,321,0.871,333,0.712,355,1.726,363,1.713,372,1.622,384,1.188,387,0.743,388,1.223,399,1.39,401,1.241,405,0.707,415,0.78,416,0.7,419,0.495,420,0.864,432,1.237,441,0.994,444,1.739,501,0.78,505,0.793,518,3.531,524,1.188,537,0.946,549,1.326,630,0.675,640,0.773,663,0.828,696,1.004,717,1.188,722,0.77,741,5.345,749,1.058,751,1.058,772,0.864,802,0.907,888,1.887,927,2.774,968,3.788,983,0.8,998,1.907,1045,0.825,1133,1.113,1136,0.969,1168,4.873,1170,0.969,1215,0.613,1238,1.549,1311,0.84,1428,1.305,1447,2.379,1611,1.147,1638,0.986,2123,4.659,2147,3.402,2161,1.401,2164,2.555,2165,1.907,2184,1.348,2337,2.182,2379,1.212,2382,2.166,2545,2.264,2709,2.166,2928,1.098,3259,1.004,3260,1.004,3263,1.004,3264,0.995,3562,3.386,3623,1.305,3624,1.305,3625,1.305,3626,1.305,3631,1.348,3637,2.686,3638,2.686,3639,2.686,3640,2.686,3641,2.686,3642,1.473,3643,1.473,3644,1.473,3645,1.473,3646,1.473,3647,1.473,3648,1.473,3649,1.473,3650,1.473,3651,1.473,3652,1.473,3653,1.473,3654,1.473,3655,1.473,3656,1.473,3657,1.473,3658,1.473,3659,1.473,3660,1.473]],["component/241",[200,1.345]],["title/242-1",[52,23.584,139,24.374]],["name/242-1",[]],["text/242-1",[]],["component/242-1",[]],["title/242-2",[1045,21.29,1666,24.015]],["name/242-2",[]],["text/242-2",[]],["component/242-2",[]],["title/242",[]],["name/242",[2853,1.51]],["text/242",[8,3.511,9,2.374,11,2.27,16,4.427,52,2.424,74,3.187,139,2.506,178,2.353,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3661,5.461]],["component/242",[16,1.249]],["title/243-1",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/243-1",[]],["text/243-1",[]],["component/243-1",[]],["title/243-2",[433,57.723]],["name/243-2",[]],["text/243-2",[]],["component/243-2",[]],["title/243-3",[388,26.202,441,21.302,1324,35.921]],["name/243-3",[]],["text/243-3",[]],["component/243-3",[]],["title/243-4",[181,14.534,422,23.879,441,18.221,690,23.639]],["name/243-4",[]],["text/243-4",[]],["component/243-4",[]],["title/243-5",[2448,55.061]],["name/243-5",[]],["text/243-5",[]],["component/243-5",[]],["title/243",[]],["name/243",[3662,2.177]],["text/243",[5,1.139,6,1.444,11,0.753,15,1.412,16,4.548,18,2.329,66,2.389,68,2.56,74,1.203,81,2.662,91,1.584,93,1.572,109,2.267,126,2.919,127,2.45,133,1.318,137,2.784,150,1.8,154,4.142,164,2.077,178,1.209,187,2.11,226,2.862,250,1.937,266,2.777,309,3.683,315,2.099,334,1.806,335,1.707,378,2.408,382,1.666,388,1.666,399,1.374,419,1.231,422,5.458,438,1.686,441,3.449,442,2.11,443,3.198,450,1.971,471,1.647,490,1.517,507,1.555,509,1.509,510,1.614,523,2.726,531,2.334,532,1.559,657,2.911,661,2.224,677,1.781,690,4.08,780,3.697,793,3.478,888,4.144,899,3.761,907,2.036,909,1.444,966,1.769,1016,2.952,1032,3.251,1045,1.125,1111,2.171,1136,2.408,1218,2.599,1273,2.693,1324,4.624,1394,3.077,1742,2.851,2074,1.875,2448,3.734,3663,2.728,3664,2.571,3665,3.153,3666,3.153]],["component/243",[16,1.249]],["title/244-1",[149,21.259,708,25.823,1215,23.97]],["name/244-1",[]],["text/244-1",[]],["component/244-1",[]],["title/244-2",[52,23.584,139,24.374]],["name/244-2",[]],["text/244-2",[]],["component/244-2",[]],["title/244-3",[1045,21.29,1666,24.015]],["name/244-3",[]],["text/244-3",[]],["component/244-3",[]],["title/244-4",[220,23.711,1039,26.676]],["name/244-4",[]],["text/244-4",[]],["component/244-4",[]],["title/244-5",[2907,44.56]],["name/244-5",[]],["text/244-5",[]],["component/244-5",[]],["title/244-6",[2908,42.932]],["name/244-6",[]],["text/244-6",[]],["component/244-6",[]],["title/244-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/244-7",[]],["text/244-7",[]],["component/244-7",[]],["title/244-8",[433,57.723]],["name/244-8",[]],["text/244-8",[]],["component/244-8",[]],["title/244-9",[388,26.202,441,21.302,1324,35.921]],["name/244-9",[]],["text/244-9",[]],["component/244-9",[]],["title/244-10",[181,14.534,422,23.879,441,18.221,690,23.639]],["name/244-10",[]],["text/244-10",[]],["component/244-10",[]],["title/244-11",[2448,55.061]],["name/244-11",[]],["text/244-11",[]],["component/244-11",[]],["title/244",[126,25.488]],["name/244",[126,0.759]],["text/244",[5,0.673,6,0.853,8,1.829,9,1.484,11,2.021,15,0.835,16,4.618,18,1.587,52,0.736,57,1.724,66,1.412,68,1.643,74,2.265,81,1.709,91,0.936,93,0.929,96,1.271,105,2.102,109,1.455,126,2.221,127,1.448,133,0.779,136,1.562,137,2.484,139,0.761,149,0.799,150,1.064,154,2.823,164,1.228,178,1.669,181,2.986,187,1.247,220,0.74,221,2.434,226,2.042,250,1.145,266,1.783,309,2.511,315,1.241,321,1.966,334,1.068,335,1.009,378,1.423,379,2.3,382,0.985,388,0.985,399,1.896,419,1.698,422,4.414,438,0.997,441,2.55,442,1.247,443,2.18,450,1.165,471,0.973,490,0.896,507,0.919,509,0.892,510,0.954,514,3.482,523,1.75,531,1.379,532,0.922,596,1.504,657,1.869,661,1.315,677,1.053,690,2.911,698,3.201,708,0.97,780,2.52,793,2.233,888,2.66,899,2.415,907,1.203,909,0.853,966,1.046,993,1.948,1016,1.745,1032,2.216,1039,0.833,1045,2.33,1088,2.81,1111,1.283,1136,1.423,1215,0.901,1218,1.536,1273,1.591,1324,3.152,1394,1.819,1666,1.751,1742,1.685,2074,1.108,2448,2.397,2904,1.714,2905,1.714,2906,1.1,2909,1.635,2910,1.108,2911,1.783,2912,1.108,2913,1.783,2915,1.783,2916,1.869,3661,2.904,3663,1.612,3664,1.519,3665,1.864,3666,1.864,3667,3]],["component/244",[16,1.249]],["title/245-1",[15,33.567]],["name/245-1",[]],["text/245-1",[]],["component/245-1",[]],["title/245",[320,35.193]],["name/245",[320,1.048]],["text/245",[15,4.497,16,4.316,94,5.542,178,3.123,237,5.16,321,3.066,435,4.382,523,4.369,629,6.22,660,5.782,922,5.48,1920,7.144,3664,6.64]],["component/245",[16,1.249]],["title/246-1",[89,33.495]],["name/246-1",[]],["text/246-1",[]],["component/246-1",[]],["title/246-2",[1006,46.229]],["name/246-2",[]],["text/246-2",[]],["component/246-2",[]],["title/246",[390,39.954]],["name/246",[390,1.19]],["text/246",[5,1.389,6,1.76,9,2.064,11,1.42,13,1.911,14,2.374,16,5.778,18,3.408,46,2.341,52,1.519,68,2.993,81,3.805,96,2.315,109,2.65,126,2.021,133,1.606,134,2.985,137,3.108,181,1.317,218,1.996,246,2.482,257,2.341,259,3.547,279,4.208,390,4.711,438,4.726,499,2.729,507,1.896,509,1.84,510,3.042,532,1.901,654,2.313,780,4.207,788,2.559,991,2.615,997,2.615,1045,2.591,1218,3.168,1326,2.615,1541,2.765,1888,3.534,2448,2.824,3269,5.372,3270,3.325,3596,5.942,3663,3.325,3668,4.244]],["component/246",[16,1.249]],["title/247-1",[2907,44.56]],["name/247-1",[]],["text/247-1",[]],["component/247-1",[]],["title/247-2",[2908,42.932]],["name/247-2",[]],["text/247-2",[]],["component/247-2",[]],["title/247",[]],["name/247",[2917,1.545]],["text/247",[8,1.775,9,1.815,11,2.203,16,4.55,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3661,3.76,3667,5.872]],["component/247",[16,1.249]],["title/248-1",[222,25.902,226,23.333]],["name/248-1",[]],["text/248-1",[]],["component/248-1",[]],["title/248-2",[19,31.713,105,19.953,909,22.707]],["name/248-2",[]],["text/248-2",[]],["component/248-2",[]],["title/248",[9,12.054,11,10.134,14,16.942,16,22.478]],["name/248",[205,1.287]],["text/248",[3,2.582,9,2.572,11,2.41,14,3.615,16,5.346,18,2.523,80,3.335,96,2.695,105,2.783,222,3.002,226,2.704,235,3.484,261,3.352,435,3.722,909,3.167,941,4.629,1270,7.345,1271,7.345,1272,7.112,1273,5.907,3667,6.36]],["component/248",[16,1.249]],["title/249-1",[968,34.315]],["name/249-1",[]],["text/249-1",[]],["component/249-1",[]],["title/249-2",[105,30.154]],["name/249-2",[]],["text/249-2",[]],["component/249-2",[]],["title/249-3",[11,11.848,51,29.259,234,30.206]],["name/249-3",[]],["text/249-3",[]],["component/249-3",[]],["title/249",[2,27.205]],["name/249",[2,0.81]],["text/249",[2,3.086,3,2.965,4,1.577,5,1.116,9,2.416,11,2.463,12,3.454,13,1.535,14,2.889,16,4.742,24,1.636,36,1.881,51,2.948,57,1.632,71,2.839,80,1.489,91,2.51,95,1.405,105,3.42,109,2.807,116,2.113,136,1.478,137,1.174,149,1.324,181,3.193,208,1.572,209,2.045,218,1.603,220,1.227,221,2.345,234,1.881,235,2.517,282,2.089,315,2.056,318,2.269,358,2.101,372,2.165,387,1.808,401,1.656,405,1.721,432,2.672,475,2.222,501,1.897,546,1.622,565,2.178,596,1.424,634,2.237,645,1.994,887,2.574,891,3.785,909,1.414,927,1.873,968,3.892,1037,2.303,1088,1.661,1120,1.939,1161,1.801,1310,2.253,1311,2.045,1326,2.101,1451,2.637,2295,3.175,2732,3.014,2792,2.339,2911,1.688,2913,1.688,2915,1.688,3667,4.594,3669,3.849,3670,3.849]],["component/249",[16,1.249]],["title/250-1",[389,41.355]],["name/250-1",[]],["text/250-1",[]],["component/250-1",[]],["title/250-2",[178,22.89,3671,59.685]],["name/250-2",[]],["text/250-2",[]],["component/250-2",[]],["title/250-3",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/250-3",[]],["text/250-3",[]],["component/250-3",[]],["title/250-4",[126,20.299,1032,30.391]],["name/250-4",[]],["text/250-4",[]],["component/250-4",[]],["title/250-5",[220,23.711,1039,26.676]],["name/250-5",[]],["text/250-5",[]],["component/250-5",[]],["title/250-6",[30,22.555,286,28.717,563,30.081]],["name/250-6",[]],["text/250-6",[]],["component/250-6",[]],["title/250-7",[333,33.487,663,38.919]],["name/250-7",[]],["text/250-7",[]],["component/250-7",[]],["title/250-8",[333,33.487,669,43.851]],["name/250-8",[]],["text/250-8",[]],["component/250-8",[]],["title/250",[541,35.613]],["name/250",[541,1.06]],["text/250",[2,0.368,3,0.702,4,1.679,5,0.366,6,1.771,11,0.629,14,0.751,15,0.454,16,4.077,18,1.766,20,0.988,22,0.527,27,0.767,30,1.496,33,0.667,48,1.938,50,0.609,59,0.809,64,0.628,73,0.57,74,3.004,80,0.488,81,3.702,82,0.57,89,1.47,91,1.943,98,0.617,109,1.725,118,1.326,126,1.647,133,0.786,134,0.509,137,1.998,139,1.579,150,0.578,151,0.591,166,1.425,169,1.577,175,1.208,178,0.388,181,1.127,207,0.561,217,1.541,220,0.747,221,0.377,222,0.44,223,1.186,224,1.279,225,0.993,226,1.285,228,1.517,229,0.685,242,0.605,246,2.829,250,1.155,255,0.667,256,0.75,257,1.145,266,1.797,283,0.767,286,0.587,294,0.835,309,3.249,314,0.682,321,0.381,333,1.055,334,0.58,335,0.548,366,1.996,382,0.993,389,0.559,390,0.54,391,2.134,399,0.441,413,0.678,419,2.197,422,3.696,432,0.542,434,1.335,438,0.542,439,0.729,441,0.808,443,2.633,450,2.417,466,2.631,471,1.374,490,1.86,492,0.657,507,1.907,509,1.851,510,2.479,514,0.877,518,1.791,520,2.406,522,0.697,523,1.009,532,1.912,533,1.649,534,0.844,546,0.532,556,0.794,563,1.596,566,0.809,582,0.724,590,0.639,596,0.867,599,1.344,613,0.801,617,0.78,628,0.645,640,1.145,655,1.105,657,3.011,661,0.714,663,3.893,669,2.416,672,1.013,677,1.062,690,3.5,694,0.826,696,2.082,698,0.434,718,0.794,719,0.865,724,1.55,770,1.326,771,0.71,773,0.835,780,0.587,785,0.639,788,1.252,793,2.25,900,0.902,922,0.682,935,0.78,949,0.654,966,1.055,1032,2.231,1039,0.84,1045,0.361,1111,1.811,1112,0.888,1141,0.876,1144,0.817,1160,0.801,1161,1.918,1176,0.654,1180,0.801,1218,3.187,1243,0.674,1273,2.808,1297,0.817,1314,2.308,1386,0.706,1453,0.755,1496,0.835,1543,0.826,1638,0.787,2074,1.955,2448,4.386,2494,1.55,2544,0.767,2687,1.76,2818,0.706,2836,0.876,2909,0.507,2969,0.809,2980,1.302,3220,0.902,3311,2.291,3314,0.75,3315,1.402,3316,1.474,3320,0.714,3321,0.75,3325,0.931,3533,4.276,3546,0.916,3547,0.916,3549,0.876,3550,0.876,3551,0.876,3552,0.876,3553,0.876,3554,0.876,3661,0.902,3663,2.845,3671,1.88,3672,1.118,3673,1.118,3674,1.118,3675,2.344,3676,3.63,3677,1.118,3678,1.118,3679,1.118,3680,1.118,3681,1.041,3682,1.118,3683,1.118,3684,1.118,3685,1.118,3686,2.076,3687,1.118,3688,1.118,3689,1.118,3690,1.118,3691,1.118,3692,1.118,3693,1.118,3694,1.118,3695,2.905,3696,1.118,3697,0.967]],["component/250",[16,1.249]],["title/251-1",[52,23.584,139,24.374]],["name/251-1",[]],["text/251-1",[]],["component/251-1",[]],["title/251-2",[1045,21.29,1666,24.015]],["name/251-2",[]],["text/251-2",[]],["component/251-2",[]],["title/251",[]],["name/251",[2853,1.51]],["text/251",[8,3.511,9,2.374,11,2.27,16,4.427,52,2.424,74,3.187,139,2.506,178,2.353,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3661,5.461]],["component/251",[16,1.249]],["title/252-1",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/252-1",[]],["text/252-1",[]],["component/252-1",[]],["title/252-2",[433,57.723]],["name/252-2",[]],["text/252-2",[]],["component/252-2",[]],["title/252-3",[388,26.202,441,21.302,1324,35.921]],["name/252-3",[]],["text/252-3",[]],["component/252-3",[]],["title/252-4",[181,14.534,422,23.879,441,18.221,690,23.639]],["name/252-4",[]],["text/252-4",[]],["component/252-4",[]],["title/252-5",[2448,55.061]],["name/252-5",[]],["text/252-5",[]],["component/252-5",[]],["title/252",[]],["name/252",[3662,2.177]],["text/252",[5,1.139,6,1.444,11,0.753,15,1.412,16,4.548,18,2.329,66,2.389,68,2.56,74,1.203,81,2.662,91,1.584,93,1.572,109,2.267,126,2.919,127,2.45,133,1.318,137,2.784,150,1.8,154,4.142,164,2.077,178,1.209,187,2.11,226,2.862,250,1.937,266,2.777,309,3.683,315,2.099,334,1.806,335,1.707,378,2.408,382,1.666,388,1.666,399,1.374,419,1.231,422,5.458,438,1.686,441,3.449,442,2.11,443,3.198,450,1.971,471,1.647,490,1.517,507,1.555,509,1.509,510,1.614,523,2.726,531,2.334,532,1.559,657,2.911,661,2.224,677,1.781,690,4.08,780,3.697,793,3.478,888,4.144,899,3.761,907,2.036,909,1.444,966,1.769,1016,2.952,1032,3.251,1045,1.125,1111,2.171,1136,2.408,1218,2.599,1273,2.693,1324,4.624,1394,3.077,1742,2.851,2074,1.875,2448,3.734,3663,2.728,3664,2.571,3665,3.153,3666,3.153]],["component/252",[16,1.249]],["title/253-1",[149,21.259,708,25.823,1215,23.97]],["name/253-1",[]],["text/253-1",[]],["component/253-1",[]],["title/253-2",[52,23.584,139,24.374]],["name/253-2",[]],["text/253-2",[]],["component/253-2",[]],["title/253-3",[1045,21.29,1666,24.015]],["name/253-3",[]],["text/253-3",[]],["component/253-3",[]],["title/253-4",[220,23.711,1039,26.676]],["name/253-4",[]],["text/253-4",[]],["component/253-4",[]],["title/253-5",[2907,44.56]],["name/253-5",[]],["text/253-5",[]],["component/253-5",[]],["title/253-6",[2908,42.932]],["name/253-6",[]],["text/253-6",[]],["component/253-6",[]],["title/253-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/253-7",[]],["text/253-7",[]],["component/253-7",[]],["title/253-8",[433,57.723]],["name/253-8",[]],["text/253-8",[]],["component/253-8",[]],["title/253-9",[388,26.202,441,21.302,1324,35.921]],["name/253-9",[]],["text/253-9",[]],["component/253-9",[]],["title/253-10",[181,14.534,422,23.879,441,18.221,690,23.639]],["name/253-10",[]],["text/253-10",[]],["component/253-10",[]],["title/253-11",[2448,55.061]],["name/253-11",[]],["text/253-11",[]],["component/253-11",[]],["title/253",[126,25.488]],["name/253",[126,0.759]],["text/253",[5,0.673,6,0.853,8,1.829,9,1.484,11,2.021,15,0.835,16,4.618,18,1.587,52,0.736,57,1.724,66,1.412,68,1.643,74,2.265,81,1.709,91,0.936,93,0.929,96,1.271,105,2.102,109,1.455,126,2.221,127,1.448,133,0.779,136,1.562,137,2.484,139,0.761,149,0.799,150,1.064,154,2.823,164,1.228,178,1.669,181,2.986,187,1.247,220,0.74,221,2.434,226,2.042,250,1.145,266,1.783,309,2.511,315,1.241,321,1.966,334,1.068,335,1.009,378,1.423,379,2.3,382,0.985,388,0.985,399,1.896,419,1.698,422,4.414,438,0.997,441,2.55,442,1.247,443,2.18,450,1.165,471,0.973,490,0.896,507,0.919,509,0.892,510,0.954,514,3.482,523,1.75,531,1.379,532,0.922,596,1.504,657,1.869,661,1.315,677,1.053,690,2.911,698,3.201,708,0.97,780,2.52,793,2.233,888,2.66,899,2.415,907,1.203,909,0.853,966,1.046,993,1.948,1016,1.745,1032,2.216,1039,0.833,1045,2.33,1088,2.81,1111,1.283,1136,1.423,1215,0.901,1218,1.536,1273,1.591,1324,3.152,1394,1.819,1666,1.751,1742,1.685,2074,1.108,2448,2.397,2904,1.714,2905,1.714,2906,1.1,2909,1.635,2910,1.108,2911,1.783,2912,1.108,2913,1.783,2915,1.783,2916,1.869,3661,2.904,3663,1.612,3664,1.519,3665,1.864,3666,1.864,3667,3]],["component/253",[16,1.249]],["title/254-1",[15,33.567]],["name/254-1",[]],["text/254-1",[]],["component/254-1",[]],["title/254",[320,35.193]],["name/254",[320,1.048]],["text/254",[15,4.497,16,4.316,94,5.542,178,3.123,237,5.16,321,3.066,435,4.382,523,4.369,629,6.22,660,5.782,922,5.48,1920,7.144,3664,6.64]],["component/254",[16,1.249]],["title/255-1",[89,33.495]],["name/255-1",[]],["text/255-1",[]],["component/255-1",[]],["title/255-2",[1006,46.229]],["name/255-2",[]],["text/255-2",[]],["component/255-2",[]],["title/255",[390,39.954]],["name/255",[390,1.19]],["text/255",[5,1.389,6,1.76,9,2.064,11,1.42,13,1.911,14,2.374,16,5.778,18,3.408,46,2.341,52,1.519,68,2.993,81,3.805,96,2.315,109,2.65,126,2.021,133,1.606,134,2.985,137,3.108,181,1.317,218,1.996,246,2.482,257,2.341,259,3.547,279,4.208,390,4.711,438,4.726,499,2.729,507,1.896,509,1.84,510,3.042,532,1.901,654,2.313,780,4.207,788,2.559,991,2.615,997,2.615,1045,2.591,1218,3.168,1326,2.615,1541,2.765,1888,3.534,2448,2.824,3269,5.372,3270,3.325,3596,5.942,3663,3.325,3668,4.244]],["component/255",[16,1.249]],["title/256-1",[2907,44.56]],["name/256-1",[]],["text/256-1",[]],["component/256-1",[]],["title/256-2",[2908,42.932]],["name/256-2",[]],["text/256-2",[]],["component/256-2",[]],["title/256",[]],["name/256",[2917,1.545]],["text/256",[8,1.775,9,1.815,11,2.203,16,4.55,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3661,3.76,3667,5.872]],["component/256",[16,1.249]],["title/257-1",[222,25.902,226,23.333]],["name/257-1",[]],["text/257-1",[]],["component/257-1",[]],["title/257-2",[19,31.713,105,19.953,909,22.707]],["name/257-2",[]],["text/257-2",[]],["component/257-2",[]],["title/257",[9,12.054,11,10.134,14,16.942,16,22.478]],["name/257",[205,1.287]],["text/257",[3,2.582,9,2.572,11,2.41,14,3.615,16,5.346,18,2.523,80,3.335,96,2.695,105,2.783,222,3.002,226,2.704,235,3.484,261,3.352,435,3.722,909,3.167,941,4.629,1270,7.345,1271,7.345,1272,7.112,1273,5.907,3667,6.36]],["component/257",[16,1.249]],["title/258-1",[389,41.355]],["name/258-1",[]],["text/258-1",[]],["component/258-1",[]],["title/258-2",[178,22.89,3671,59.685]],["name/258-2",[]],["text/258-2",[]],["component/258-2",[]],["title/258-3",[66,56.771]],["name/258-3",[]],["text/258-3",[]],["component/258-3",[]],["title/258-4",[65,42.191]],["name/258-4",[]],["text/258-4",[]],["component/258-4",[]],["title/258-5",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/258-5",[]],["text/258-5",[]],["component/258-5",[]],["title/258-6",[126,20.299,1032,30.391]],["name/258-6",[]],["text/258-6",[]],["component/258-6",[]],["title/258-7",[220,23.711,1039,26.676]],["name/258-7",[]],["text/258-7",[]],["component/258-7",[]],["title/258-8",[30,22.555,286,28.717,563,30.081]],["name/258-8",[]],["text/258-8",[]],["component/258-8",[]],["title/258-9",[333,33.487,663,38.919]],["name/258-9",[]],["text/258-9",[]],["component/258-9",[]],["title/258-10",[333,33.487,669,43.851]],["name/258-10",[]],["text/258-10",[]],["component/258-10",[]],["title/258",[541,35.613]],["name/258",[541,1.06]],["text/258",[2,0.507,3,0.521,4,0.377,5,0.912,6,2.241,11,0.922,12,0.352,14,0.558,15,0.33,16,4.397,18,1.407,20,0.733,22,0.384,27,0.559,30,1.148,33,0.486,48,1.508,50,0.444,59,0.589,64,0.457,65,1.119,66,1.506,73,0.415,74,2.941,80,0.356,81,3.551,82,1.694,89,1.128,91,0.701,98,0.449,109,1.342,118,0.985,126,1.312,133,0.831,134,1.512,137,2.351,139,1.728,150,0.421,151,0.43,164,0.486,166,1.077,169,1.192,175,0.897,176,2.514,177,1.324,178,1.324,181,0.253,207,0.408,217,1.164,220,0.555,221,0.275,222,0.32,223,0.881,224,0.95,225,0.738,226,1.35,228,1.127,229,0.499,233,0.427,242,0.44,246,2.229,250,1.221,255,0.486,256,0.546,257,0.851,266,1.379,283,0.559,286,0.427,294,0.608,309,2.64,314,0.496,321,0.526,333,0.783,334,0.423,335,0.399,366,1.483,382,0.738,388,0.39,389,0.407,390,0.393,391,1.661,397,1.621,399,0.608,413,0.494,419,1.91,422,3.076,432,0.394,434,0.991,438,0.394,439,0.531,441,0.854,443,2.12,447,0.94,448,4.316,450,2.411,466,2.048,471,1.038,486,0.667,490,1.447,492,0.479,507,2.414,509,2.342,510,2.657,514,0.651,516,0.925,518,2.266,520,1.873,522,0.508,523,2.27,526,0.873,532,2.42,533,1.225,534,0.615,546,0.387,556,0.578,563,1.206,566,0.589,582,0.527,584,0.502,590,0.465,596,0.644,597,0.656,599,0.998,613,0.584,617,0.568,628,0.469,640,0.851,654,2.546,655,1.483,657,2.803,661,0.52,663,3.191,669,1.854,672,0.738,677,0.789,690,3.188,694,0.601,696,1.573,698,0.316,709,0.93,718,0.578,719,0.63,724,1.151,746,2.832,753,1.066,770,0.985,771,0.517,773,0.608,780,0.427,785,0.465,788,0.93,793,2.363,900,0.656,922,0.94,935,0.568,949,0.476,966,1.116,968,0.338,991,1.717,1032,1.758,1039,0.624,1045,0.709,1111,1.369,1112,0.647,1141,0.638,1144,0.595,1160,0.584,1161,0.43,1176,0.476,1180,0.584,1218,3.18,1243,0.491,1273,2.948,1297,0.595,1313,0.638,1322,2.359,1382,0.563,1386,0.514,1453,0.55,1496,0.608,1530,0.601,1543,0.601,1638,0.573,1878,2.338,1976,2.155,2031,1.208,2032,1.243,2033,1.243,2035,0.678,2040,0.738,2041,0.814,2043,0.738,2074,2.053,2448,4.698,2494,1.151,2544,0.559,2687,1.307,2709,1.307,2818,0.514,2836,0.638,2909,0.37,2969,0.589,2980,0.967,3220,1.243,3311,1.758,3314,0.546,3315,1.041,3316,1.095,3320,0.52,3321,0.546,3325,0.678,3546,0.667,3547,0.667,3549,0.638,3550,0.638,3551,0.638,3552,0.638,3553,0.638,3554,0.638,3661,0.656,3663,2.987,3671,1.396,3672,0.814,3673,0.814,3674,0.814,3676,2.786,3677,0.814,3678,0.814,3679,0.814,3680,0.814,3681,0.758,3682,0.814,3683,0.814,3684,0.814,3685,0.814,3686,1.542,3687,0.814,3688,0.814,3689,0.814,3690,0.814,3691,0.814,3692,0.814,3693,0.814,3694,0.814,3695,2.195,3696,0.814,3697,0.704,3698,0.783,3699,1.436,3700,0.856,3701,1.621,3702,0.856,3703,1.436,3704,0.758]],["component/258",[16,1.249]],["title/259-1",[310,57.238]],["name/259-1",[]],["text/259-1",[]],["component/259-1",[]],["title/259-2",[15,33.567]],["name/259-2",[]],["text/259-2",[]],["component/259-2",[]],["title/259-3",[16,39.715]],["name/259-3",[]],["text/259-3",[]],["component/259-3",[]],["title/259-4",[261,28.922,1954,38.537]],["name/259-4",[]],["text/259-4",[]],["component/259-4",[]],["title/259-5",[374,33.375,707,35.628]],["name/259-5",[]],["text/259-5",[]],["component/259-5",[]],["title/259",[208,30.391,630,31.725]],["name/259",[3216,1.734]],["text/259",[2,1.88,4,3.007,5,0.665,6,1.973,8,2.475,11,1.03,12,0.879,15,0.824,16,4.928,18,1.889,22,0.958,26,1.051,28,1.103,30,4.308,48,0.922,63,1.333,73,1.817,74,1.976,81,3.66,82,1.817,91,3.51,92,2.507,93,2.935,95,1.468,96,1.679,109,0.821,111,1.692,112,0.913,114,1.103,121,1.282,132,1.333,133,3.516,137,2.657,139,0.752,149,0.789,150,1.842,157,1.614,177,1.225,181,1.774,186,1.664,208,0.937,215,3.985,223,1.161,226,1.262,233,1.066,261,0.892,266,1.006,269,1.592,282,1.245,320,1.516,321,0.693,354,1.692,374,1.029,387,2.524,399,0.802,405,1.026,415,1.131,419,0.718,448,1.172,450,2.017,455,1.062,490,1.552,496,1.315,507,2.126,509,2.063,532,2.131,541,0.875,549,1.054,655,1.897,657,1.849,678,1.307,690,1.799,722,1.116,769,1.343,770,3.04,771,2.262,774,2.756,775,1.245,793,1.26,900,4.609,952,1.534,958,1.172,991,1.252,1006,3.194,1118,1.534,1154,1.418,1161,2.514,1205,1.298,1218,1.517,1247,2.554,1250,1.418,1273,1.572,1291,1.43,1314,1.614,1357,1.252,1670,1.43,1748,2.507,1954,1.188,2074,1.094,2275,3.896,2448,3.166,2464,4.576,2465,3.427,2472,3.021,2494,1.517,2709,1.723,3185,1.954,3238,1.638,3239,1.592,3318,3.082,3320,1.298,3321,1.362,3346,1.758,3348,3.227,3349,1.841,3350,1.758,3439,1.501,3440,2.967,3529,3.318,3663,1.592,3705,3.746,3706,3.427,3707,2.136,3708,3.746,3709,2.136]],["component/259",[16,1.249]],["title/260-1",[344,50.708]],["name/260-1",[]],["text/260-1",[]],["component/260-1",[]],["title/260-2",[374,33.375,707,35.628]],["name/260-2",[]],["text/260-2",[]],["component/260-2",[]],["title/260",[19,38.169,20,31.351]],["name/260",[205,1.287]],["text/260",[0,6.101,2,3.012,3,2.267,4,3.101,5,2.194,8,2.552,9,1.726,11,2.258,14,2.426,16,5.008,18,2.215,20,3.19,73,4.671,95,2.762,112,4.113,133,2.537,208,3.092,215,4.109,282,4.109,320,2.852,441,2.609,465,4.677,518,3.842,549,3.479,630,3.228,900,5.405,968,2.781,1357,4.132,3706,6.448]],["component/260",[16,1.249]],["title/261-1",[9,16.962,11,14.261]],["name/261-1",[]],["text/261-1",[]],["component/261-1",[]],["title/261-2",[10,41.906]],["name/261-2",[]],["text/261-2",[]],["component/261-2",[]],["title/261-3",[968,34.315]],["name/261-3",[]],["text/261-3",[]],["component/261-3",[]],["title/261-4",[374,33.375,707,35.628]],["name/261-4",[]],["text/261-4",[]],["component/261-4",[]],["title/261",[2,27.205]],["name/261",[2,0.81]],["text/261",[2,3.706,3,1.501,5,2.222,9,2.563,10,4.178,11,2.632,12,2.496,13,1.181,14,2.088,15,2.342,16,4.218,18,0.866,24,2.131,26,1.356,39,1.745,46,2.449,48,1.19,91,1.193,96,1.566,112,1.178,134,1.193,138,1.709,149,1.724,176,2.533,181,2.868,207,2.226,221,0.885,226,3.272,235,1.196,251,1.59,261,1.151,320,2.455,321,1.513,355,2.998,372,2.819,387,1.391,388,2.762,401,2.157,405,1.324,415,1.459,432,2.15,444,3.022,518,1.1,630,1.263,722,1.441,772,1.616,802,1.697,927,1.441,968,3.992,983,1.498,1168,7.206,1215,1.148,1311,1.573,1611,2.147,2337,4.21,2382,3.764,2545,4.367,3259,1.879,3260,1.879,3263,1.879,3264,1.862,3394,2.114,3397,2.114,3398,3.579,3710,2.757,3711,2.757]],["component/261",[16,1.249]],["title/262-1",[52,23.584,139,24.374]],["name/262-1",[]],["text/262-1",[]],["component/262-1",[]],["title/262-2",[1045,21.29,1666,24.015]],["name/262-2",[]],["text/262-2",[]],["component/262-2",[]],["title/262",[]],["name/262",[2853,1.51]],["text/262",[8,3.511,9,2.374,11,2.27,16,4.427,52,2.424,74,3.187,139,2.506,178,2.353,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3661,5.461]],["component/262",[16,1.249]],["title/263-1",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/263-1",[]],["text/263-1",[]],["component/263-1",[]],["title/263-2",[433,57.723]],["name/263-2",[]],["text/263-2",[]],["component/263-2",[]],["title/263-3",[388,26.202,441,21.302,1324,35.921]],["name/263-3",[]],["text/263-3",[]],["component/263-3",[]],["title/263-4",[181,14.534,422,23.879,441,18.221,690,23.639]],["name/263-4",[]],["text/263-4",[]],["component/263-4",[]],["title/263-5",[2448,55.061]],["name/263-5",[]],["text/263-5",[]],["component/263-5",[]],["title/263",[]],["name/263",[3662,2.177]],["text/263",[5,1.139,6,1.444,11,0.753,15,1.412,16,4.548,18,2.329,66,2.389,68,2.56,74,1.203,81,2.662,91,1.584,93,1.572,109,2.267,126,2.919,127,2.45,133,1.318,137,2.784,150,1.8,154,4.142,164,2.077,178,1.209,187,2.11,226,2.862,250,1.937,266,2.777,309,3.683,315,2.099,334,1.806,335,1.707,378,2.408,382,1.666,388,1.666,399,1.374,419,1.231,422,5.458,438,1.686,441,3.449,442,2.11,443,3.198,450,1.971,471,1.647,490,1.517,507,1.555,509,1.509,510,1.614,523,2.726,531,2.334,532,1.559,657,2.911,661,2.224,677,1.781,690,4.08,780,3.697,793,3.478,888,4.144,899,3.761,907,2.036,909,1.444,966,1.769,1016,2.952,1032,3.251,1045,1.125,1111,2.171,1136,2.408,1218,2.599,1273,2.693,1324,4.624,1394,3.077,1742,2.851,2074,1.875,2448,3.734,3663,2.728,3664,2.571,3665,3.153,3666,3.153]],["component/263",[16,1.249]],["title/264-1",[149,21.259,708,25.823,1215,23.97]],["name/264-1",[]],["text/264-1",[]],["component/264-1",[]],["title/264-2",[52,23.584,139,24.374]],["name/264-2",[]],["text/264-2",[]],["component/264-2",[]],["title/264-3",[1045,21.29,1666,24.015]],["name/264-3",[]],["text/264-3",[]],["component/264-3",[]],["title/264-4",[220,23.711,1039,26.676]],["name/264-4",[]],["text/264-4",[]],["component/264-4",[]],["title/264-5",[2907,44.56]],["name/264-5",[]],["text/264-5",[]],["component/264-5",[]],["title/264-6",[2908,42.932]],["name/264-6",[]],["text/264-6",[]],["component/264-6",[]],["title/264-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/264-7",[]],["text/264-7",[]],["component/264-7",[]],["title/264-8",[433,57.723]],["name/264-8",[]],["text/264-8",[]],["component/264-8",[]],["title/264-9",[388,26.202,441,21.302,1324,35.921]],["name/264-9",[]],["text/264-9",[]],["component/264-9",[]],["title/264-10",[181,14.534,422,23.879,441,18.221,690,23.639]],["name/264-10",[]],["text/264-10",[]],["component/264-10",[]],["title/264-11",[2448,55.061]],["name/264-11",[]],["text/264-11",[]],["component/264-11",[]],["title/264",[126,25.488]],["name/264",[126,0.759]],["text/264",[5,0.673,6,0.853,8,1.829,9,1.484,11,2.021,15,0.835,16,4.618,18,1.587,52,0.736,57,1.724,66,1.412,68,1.643,74,2.265,81,1.709,91,0.936,93,0.929,96,1.271,105,2.102,109,1.455,126,2.221,127,1.448,133,0.779,136,1.562,137,2.484,139,0.761,149,0.799,150,1.064,154,2.823,164,1.228,178,1.669,181,2.986,187,1.247,220,0.74,221,2.434,226,2.042,250,1.145,266,1.783,309,2.511,315,1.241,321,1.966,334,1.068,335,1.009,378,1.423,379,2.3,382,0.985,388,0.985,399,1.896,419,1.698,422,4.414,438,0.997,441,2.55,442,1.247,443,2.18,450,1.165,471,0.973,490,0.896,507,0.919,509,0.892,510,0.954,514,3.482,523,1.75,531,1.379,532,0.922,596,1.504,657,1.869,661,1.315,677,1.053,690,2.911,698,3.201,708,0.97,780,2.52,793,2.233,888,2.66,899,2.415,907,1.203,909,0.853,966,1.046,993,1.948,1016,1.745,1032,2.216,1039,0.833,1045,2.33,1088,2.81,1111,1.283,1136,1.423,1215,0.901,1218,1.536,1273,1.591,1324,3.152,1394,1.819,1666,1.751,1742,1.685,2074,1.108,2448,2.397,2904,1.714,2905,1.714,2906,1.1,2909,1.635,2910,1.108,2911,1.783,2912,1.108,2913,1.783,2915,1.783,2916,1.869,3661,2.904,3663,1.612,3664,1.519,3665,1.864,3666,1.864,3667,3]],["component/264",[16,1.249]],["title/265-1",[15,33.567]],["name/265-1",[]],["text/265-1",[]],["component/265-1",[]],["title/265",[320,35.193]],["name/265",[320,1.048]],["text/265",[15,4.497,16,4.316,94,5.542,178,3.123,237,5.16,321,3.066,435,4.382,523,4.369,629,6.22,660,5.782,922,5.48,1920,7.144,3664,6.64]],["component/265",[16,1.249]],["title/266-1",[89,33.495]],["name/266-1",[]],["text/266-1",[]],["component/266-1",[]],["title/266-2",[1006,46.229]],["name/266-2",[]],["text/266-2",[]],["component/266-2",[]],["title/266",[390,39.954]],["name/266",[390,1.19]],["text/266",[5,1.389,6,1.76,9,2.064,11,1.42,13,1.911,14,2.374,16,5.778,18,3.408,46,2.341,52,1.519,68,2.993,81,3.805,96,2.315,109,2.65,126,2.021,133,1.606,134,2.985,137,3.108,181,1.317,218,1.996,246,2.482,257,2.341,259,3.547,279,4.208,390,4.711,438,4.726,499,2.729,507,1.896,509,1.84,510,3.042,532,1.901,654,2.313,780,4.207,788,2.559,991,2.615,997,2.615,1045,2.591,1218,3.168,1326,2.615,1541,2.765,1888,3.534,2448,2.824,3269,5.372,3270,3.325,3596,5.942,3663,3.325,3668,4.244]],["component/266",[16,1.249]],["title/267-1",[2907,44.56]],["name/267-1",[]],["text/267-1",[]],["component/267-1",[]],["title/267-2",[2908,42.932]],["name/267-2",[]],["text/267-2",[]],["component/267-2",[]],["title/267",[]],["name/267",[2917,1.545]],["text/267",[8,1.775,9,1.815,11,2.203,16,4.55,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3661,3.76,3667,5.872]],["component/267",[16,1.249]],["title/268-1",[222,25.902,226,23.333]],["name/268-1",[]],["text/268-1",[]],["component/268-1",[]],["title/268-2",[19,31.713,105,19.953,909,22.707]],["name/268-2",[]],["text/268-2",[]],["component/268-2",[]],["title/268",[9,12.054,11,10.134,14,16.942,16,22.478]],["name/268",[205,1.287]],["text/268",[3,2.582,9,2.572,11,2.41,14,3.615,16,5.346,18,2.523,80,3.335,96,2.695,105,2.783,222,3.002,226,2.704,235,3.484,261,3.352,435,3.722,909,3.167,941,4.629,1270,7.345,1271,7.345,1272,7.112,1273,5.907,3667,6.36]],["component/268",[16,1.249]],["title/269-1",[389,41.355]],["name/269-1",[]],["text/269-1",[]],["component/269-1",[]],["title/269-2",[178,22.89,3671,59.685]],["name/269-2",[]],["text/269-2",[]],["component/269-2",[]],["title/269-3",[66,56.771]],["name/269-3",[]],["text/269-3",[]],["component/269-3",[]],["title/269-4",[65,42.191]],["name/269-4",[]],["text/269-4",[]],["component/269-4",[]],["title/269-5",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/269-5",[]],["text/269-5",[]],["component/269-5",[]],["title/269-6",[126,20.299,1032,30.391]],["name/269-6",[]],["text/269-6",[]],["component/269-6",[]],["title/269-7",[220,23.711,1039,26.676]],["name/269-7",[]],["text/269-7",[]],["component/269-7",[]],["title/269-8",[30,22.555,286,28.717,563,30.081]],["name/269-8",[]],["text/269-8",[]],["component/269-8",[]],["title/269-9",[333,33.487,663,38.919]],["name/269-9",[]],["text/269-9",[]],["component/269-9",[]],["title/269-10",[333,33.487,669,43.851]],["name/269-10",[]],["text/269-10",[]],["component/269-10",[]],["title/269",[541,35.613]],["name/269",[541,1.06]],["text/269",[2,0.507,3,0.521,4,0.377,5,0.912,6,2.241,11,0.922,12,0.352,14,0.558,15,0.33,16,4.397,18,1.407,20,0.733,22,0.384,27,0.559,30,1.148,33,0.486,48,1.508,50,0.444,59,0.589,64,0.457,65,1.119,66,1.506,73,0.415,74,2.941,80,0.356,81,3.551,82,1.694,89,1.128,91,0.701,98,0.449,109,1.342,118,0.985,126,1.312,133,0.831,134,1.512,137,2.351,139,1.728,150,0.421,151,0.43,164,0.486,166,1.077,169,1.192,175,0.897,176,2.514,177,1.324,178,1.324,181,0.253,207,0.408,217,1.164,220,0.555,221,0.275,222,0.32,223,0.881,224,0.95,225,0.738,226,1.35,228,1.127,229,0.499,233,0.427,242,0.44,246,2.229,250,1.221,255,0.486,256,0.546,257,0.851,266,1.379,283,0.559,286,0.427,294,0.608,309,2.64,314,0.496,321,0.526,333,0.783,334,0.423,335,0.399,366,1.483,382,0.738,388,0.39,389,0.407,390,0.393,391,1.661,397,1.621,399,0.608,413,0.494,419,1.91,422,3.076,432,0.394,434,0.991,438,0.394,439,0.531,441,0.854,443,2.12,447,0.94,448,4.316,450,2.411,466,2.048,471,1.038,486,0.667,490,1.447,492,0.479,507,2.414,509,2.342,510,2.657,514,0.651,516,0.925,518,2.266,520,1.873,522,0.508,523,2.27,526,0.873,532,2.42,533,1.225,534,0.615,546,0.387,556,0.578,563,1.206,566,0.589,582,0.527,584,0.502,590,0.465,596,0.644,597,0.656,599,0.998,613,0.584,617,0.568,628,0.469,640,0.851,654,2.546,655,1.483,657,2.803,661,0.52,663,3.191,669,1.854,672,0.738,677,0.789,690,3.188,694,0.601,696,1.573,698,0.316,709,0.93,718,0.578,719,0.63,724,1.151,746,2.832,753,1.066,770,0.985,771,0.517,773,0.608,780,0.427,785,0.465,788,0.93,793,2.363,900,0.656,922,0.94,935,0.568,949,0.476,966,1.116,968,0.338,991,1.717,1032,1.758,1039,0.624,1045,0.709,1111,1.369,1112,0.647,1141,0.638,1144,0.595,1160,0.584,1161,0.43,1176,0.476,1180,0.584,1218,3.18,1243,0.491,1273,2.948,1297,0.595,1313,0.638,1322,2.359,1382,0.563,1386,0.514,1453,0.55,1496,0.608,1530,0.601,1543,0.601,1638,0.573,1878,2.338,1976,2.155,2031,1.208,2032,1.243,2033,1.243,2035,0.678,2040,0.738,2041,0.814,2043,0.738,2074,2.053,2448,4.698,2494,1.151,2544,0.559,2687,1.307,2709,1.307,2818,0.514,2836,0.638,2909,0.37,2969,0.589,2980,0.967,3220,1.243,3311,1.758,3314,0.546,3315,1.041,3316,1.095,3320,0.52,3321,0.546,3325,0.678,3546,0.667,3547,0.667,3549,0.638,3550,0.638,3551,0.638,3552,0.638,3553,0.638,3554,0.638,3661,0.656,3663,2.987,3671,1.396,3672,0.814,3673,0.814,3674,0.814,3676,2.786,3677,0.814,3678,0.814,3679,0.814,3680,0.814,3681,0.758,3682,0.814,3683,0.814,3684,0.814,3685,0.814,3686,1.542,3687,0.814,3688,0.814,3689,0.814,3690,0.814,3691,0.814,3692,0.814,3693,0.814,3694,0.814,3695,2.195,3696,0.814,3697,0.704,3698,0.783,3699,1.436,3700,0.856,3701,1.621,3702,0.856,3703,1.436,3704,0.758]],["component/269",[16,1.249]],["title/270-1",[310,57.238]],["name/270-1",[]],["text/270-1",[]],["component/270-1",[]],["title/270-2",[15,33.567]],["name/270-2",[]],["text/270-2",[]],["component/270-2",[]],["title/270-3",[16,39.715]],["name/270-3",[]],["text/270-3",[]],["component/270-3",[]],["title/270-4",[261,28.922,1954,38.537]],["name/270-4",[]],["text/270-4",[]],["component/270-4",[]],["title/270-5",[374,33.375,707,35.628]],["name/270-5",[]],["text/270-5",[]],["component/270-5",[]],["title/270",[208,30.391,630,31.725]],["name/270",[3216,1.734]],["text/270",[2,1.88,4,3.007,5,0.665,6,1.973,8,2.475,11,1.03,12,0.879,15,0.824,16,4.928,18,1.889,22,0.958,26,1.051,28,1.103,30,4.308,48,0.922,63,1.333,73,1.817,74,1.976,81,3.66,82,1.817,91,3.51,92,2.507,93,2.935,95,1.468,96,1.679,109,0.821,111,1.692,112,0.913,114,1.103,121,1.282,132,1.333,133,3.516,137,2.657,139,0.752,149,0.789,150,1.842,157,1.614,177,1.225,181,1.774,186,1.664,208,0.937,215,3.985,223,1.161,226,1.262,233,1.066,261,0.892,266,1.006,269,1.592,282,1.245,320,1.516,321,0.693,354,1.692,374,1.029,387,2.524,399,0.802,405,1.026,415,1.131,419,0.718,448,1.172,450,2.017,455,1.062,490,1.552,496,1.315,507,2.126,509,2.063,532,2.131,541,0.875,549,1.054,655,1.897,657,1.849,678,1.307,690,1.799,722,1.116,769,1.343,770,3.04,771,2.262,774,2.756,775,1.245,793,1.26,900,4.609,952,1.534,958,1.172,991,1.252,1006,3.194,1118,1.534,1154,1.418,1161,2.514,1205,1.298,1218,1.517,1247,2.554,1250,1.418,1273,1.572,1291,1.43,1314,1.614,1357,1.252,1670,1.43,1748,2.507,1954,1.188,2074,1.094,2275,3.896,2448,3.166,2464,4.576,2465,3.427,2472,3.021,2494,1.517,2709,1.723,3185,1.954,3238,1.638,3239,1.592,3318,3.082,3320,1.298,3321,1.362,3346,1.758,3348,3.227,3349,1.841,3350,1.758,3439,1.501,3440,2.967,3529,3.318,3663,1.592,3705,3.746,3706,3.427,3707,2.136,3708,3.746,3709,2.136]],["component/270",[16,1.249]],["title/271-1",[344,50.708]],["name/271-1",[]],["text/271-1",[]],["component/271-1",[]],["title/271-2",[374,33.375,707,35.628]],["name/271-2",[]],["text/271-2",[]],["component/271-2",[]],["title/271",[19,38.169,20,31.351]],["name/271",[205,1.287]],["text/271",[0,6.101,2,3.012,3,2.267,4,3.101,5,2.194,8,2.552,9,1.726,11,2.258,14,2.426,16,5.008,18,2.215,20,3.19,73,4.671,95,2.762,112,4.113,133,2.537,208,3.092,215,4.109,282,4.109,320,2.852,441,2.609,465,4.677,518,3.842,549,3.479,630,3.228,900,5.405,968,2.781,1357,4.132,3706,6.448]],["component/271",[16,1.249]],["title/272-1",[9,16.962,11,14.261]],["name/272-1",[]],["text/272-1",[]],["component/272-1",[]],["title/272-2",[10,41.906]],["name/272-2",[]],["text/272-2",[]],["component/272-2",[]],["title/272-3",[968,34.315]],["name/272-3",[]],["text/272-3",[]],["component/272-3",[]],["title/272-4",[374,33.375,707,35.628]],["name/272-4",[]],["text/272-4",[]],["component/272-4",[]],["title/272",[2,27.205]],["name/272",[2,0.81]],["text/272",[2,3.706,3,1.501,5,2.222,9,2.563,10,4.178,11,2.632,12,2.496,13,1.181,14,2.088,15,2.342,16,4.218,18,0.866,24,2.131,26,1.356,39,1.745,46,2.449,48,1.19,91,1.193,96,1.566,112,1.178,134,1.193,138,1.709,149,1.724,176,2.533,181,2.868,207,2.226,221,0.885,226,3.272,235,1.196,251,1.59,261,1.151,320,2.455,321,1.513,355,2.998,372,2.819,387,1.391,388,2.762,401,2.157,405,1.324,415,1.459,432,2.15,444,3.022,518,1.1,630,1.263,722,1.441,772,1.616,802,1.697,927,1.441,968,3.992,983,1.498,1168,7.206,1215,1.148,1311,1.573,1611,2.147,2337,4.21,2382,3.764,2545,4.367,3259,1.879,3260,1.879,3263,1.879,3264,1.862,3394,2.114,3397,2.114,3398,3.579,3710,2.757,3711,2.757]],["component/272",[16,1.249]],["title/273-1",[52,23.584,139,24.374]],["name/273-1",[]],["text/273-1",[]],["component/273-1",[]],["title/273-2",[1045,21.29,1666,24.015]],["name/273-2",[]],["text/273-2",[]],["component/273-2",[]],["title/273",[]],["name/273",[2853,1.51]],["text/273",[8,3.511,9,2.374,11,2.27,17,4.82,52,2.424,74,3.187,139,2.506,178,2.353,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3712,5.988]],["component/273",[17,1.36]],["title/274-1",[126,20.299,135,32.312]],["name/274-1",[]],["text/274-1",[]],["component/274-1",[]],["title/274-2",[65,42.191]],["name/274-2",[]],["text/274-2",[]],["component/274-2",[]],["title/274-3",[65,33.602,501,36.661]],["name/274-3",[]],["text/274-3",[]],["component/274-3",[]],["title/274-4",[279,30.73,3713,56.993]],["name/274-4",[]],["text/274-4",[]],["component/274-4",[]],["title/274-5",[15,26.734,68,30.063]],["name/274-5",[]],["text/274-5",[]],["component/274-5",[]],["title/274-6",[17,34.438,126,20.299]],["name/274-6",[]],["text/274-6",[]],["component/274-6",[]],["title/274-7",[126,20.299,391,32.936]],["name/274-7",[]],["text/274-7",[]],["component/274-7",[]],["title/274",[]],["name/274",[3662,2.177]],["text/274",[3,0.893,5,1.188,6,0.603,9,0.374,11,0.967,12,0.629,14,1.314,15,2.103,17,4.732,18,1.2,22,0.686,24,0.698,28,1.434,36,0.802,48,1.199,52,0.52,60,0.906,61,1.771,65,2.278,68,0.663,74,2.006,80,0.635,81,2.459,82,1.347,89,1.47,93,2.34,94,0.896,95,1.088,96,1.281,98,0.802,100,1.745,109,1.067,122,0.816,126,2.717,133,0.55,134,0.661,135,2.846,137,1.785,139,2.347,150,0.752,170,2.305,171,1.291,172,1.94,174,0.941,175,0.846,176,1.159,178,0.505,187,1.601,201,0.653,204,0.783,214,1.502,217,0.771,218,2.101,222,1.427,224,0.896,225,1.264,226,0.515,233,0.763,246,0.85,257,0.802,266,1.308,277,1.023,279,1.232,309,2.334,321,0.901,334,1.884,337,1.172,378,1.006,379,0.58,382,1.264,391,2.233,399,2.046,401,0.706,415,0.809,419,0.514,422,1.347,434,0.935,435,0.708,438,1.28,441,1.413,450,1.496,455,0.76,462,1.343,463,1.042,470,0.846,471,1.717,481,1.111,490,1.151,501,2.485,507,0.649,509,0.63,510,1.225,518,2.434,523,1.283,526,1.496,528,0.881,531,0.975,532,0.651,537,0.982,546,1.257,549,1.371,557,1.085,577,1.098,579,2.71,590,0.83,597,1.172,598,1.71,628,0.838,631,2.753,641,1.71,657,2.689,661,0.929,683,1.354,690,1.833,691,1.657,692,1.721,693,1.688,698,1.735,708,1.712,722,1.451,730,1.317,744,3.597,773,1.085,775,0.891,780,0.763,785,0.83,793,1.638,899,0.975,916,1.257,924,1.584,960,0.906,966,1.343,1032,2.927,1044,1.172,1045,0.854,1124,0.954,1127,1.111,1136,1.006,1144,1.063,1146,1.211,1200,1.211,1205,0.929,1252,0.982,1253,1.139,1275,1.155,1300,0.982,1302,0.923,1382,1.006,1393,1.172,1406,1.317,1550,1.257,1591,1.19,1607,2.335,1630,1.285,1687,1.285,1695,0.954,1738,1.19,1814,1.994,1864,1.257,1893,1.19,1894,2.163,1895,3.023,1942,3.023,2074,0.783,2337,1.638,2526,1.085,2569,2.46,2804,1.317,3034,4.118,3035,2.2,3311,2.291,3320,0.929,3405,1.074,3489,2.393,3512,1.211,3664,1.074,3713,1.257,3714,3.079,3715,2.24,3716,3.492,3717,3.289,3718,2.335,3719,1.398,3720,1.233,3721,1.233,3722,1.398,3723,1.398,3724,2.335,3725,1.398,3726,1.398,3727,1.398,3728,1.398,3729,2.541,3730,2.541]],["component/274",[17,1.36]],["title/275-1",[149,21.259,708,25.823,1215,23.97]],["name/275-1",[]],["text/275-1",[]],["component/275-1",[]],["title/275-2",[52,23.584,139,24.374]],["name/275-2",[]],["text/275-2",[]],["component/275-2",[]],["title/275-3",[1045,21.29,1666,24.015]],["name/275-3",[]],["text/275-3",[]],["component/275-3",[]],["title/275-4",[220,23.711,1039,26.676]],["name/275-4",[]],["text/275-4",[]],["component/275-4",[]],["title/275-5",[2907,44.56]],["name/275-5",[]],["text/275-5",[]],["component/275-5",[]],["title/275-6",[2908,42.932]],["name/275-6",[]],["text/275-6",[]],["component/275-6",[]],["title/275-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/275-7",[]],["text/275-7",[]],["component/275-7",[]],["title/275-8",[126,20.299,135,32.312]],["name/275-8",[]],["text/275-8",[]],["component/275-8",[]],["title/275-9",[65,42.191]],["name/275-9",[]],["text/275-9",[]],["component/275-9",[]],["title/275-10",[65,33.602,501,36.661]],["name/275-10",[]],["text/275-10",[]],["component/275-10",[]],["title/275-11",[279,30.73,3713,56.993]],["name/275-11",[]],["text/275-11",[]],["component/275-11",[]],["title/275-12",[15,26.734,68,30.063]],["name/275-12",[]],["text/275-12",[]],["component/275-12",[]],["title/275-13",[17,34.438,126,20.299]],["name/275-13",[]],["text/275-13",[]],["component/275-13",[]],["title/275-14",[126,20.299,391,32.936]],["name/275-14",[]],["text/275-14",[]],["component/275-14",[]],["title/275",[126,25.488]],["name/275",[126,0.759]],["text/275",[3,0.707,5,0.958,6,0.468,8,1.114,9,1.106,11,1.696,12,0.488,14,1.059,15,1.743,17,4.833,18,0.967,22,0.532,24,0.541,28,1.136,36,0.622,48,0.95,52,0.749,57,1.001,60,0.703,61,1.403,65,1.864,68,0.515,74,2.289,80,0.493,81,2.039,82,1.067,89,1.185,93,1.94,94,0.695,95,0.862,96,1.516,98,0.622,100,1.382,105,1.332,109,0.845,122,0.633,126,2.414,133,0.427,134,0.513,135,2.387,136,0.907,137,1.852,139,2.158,149,0.438,150,0.583,170,1.858,171,1.023,172,1.564,174,0.73,175,0.656,176,0.918,178,1.017,181,2.26,187,1.268,201,0.506,204,0.607,214,1.19,217,0.598,218,1.719,220,0.406,221,1.643,222,1.15,224,0.695,225,1.001,226,0.399,233,0.592,246,0.66,257,0.622,266,1.036,277,0.794,279,0.976,309,1.91,321,1.659,334,1.519,337,0.909,378,0.78,379,1.714,382,1.001,391,1.827,399,2.122,401,0.548,415,0.627,419,1.034,422,1.067,434,0.725,435,0.55,438,1.013,441,1.139,450,1.184,455,0.589,462,1.063,463,0.808,470,0.656,471,1.384,481,0.862,490,0.912,501,2.034,507,0.504,509,0.489,510,0.97,514,2.464,518,2.042,523,1.017,526,1.184,528,0.684,531,0.756,532,0.505,537,0.762,546,0.995,549,1.086,557,0.842,577,0.851,579,2.185,590,0.644,596,0.874,597,0.909,598,1.354,628,0.65,631,2.253,641,1.354,657,2.23,661,0.721,683,1.05,690,1.477,691,1.312,692,1.363,693,1.337,698,2.828,708,1.724,722,1.15,730,1.022,744,3.017,773,0.842,775,0.691,780,0.592,785,0.644,793,1.297,899,0.756,916,0.975,924,1.255,960,0.703,966,1.063,993,1.131,1032,2.48,1039,0.457,1044,0.909,1045,1.737,1088,1.781,1124,0.74,1127,0.862,1136,0.78,1144,0.824,1146,0.939,1200,0.939,1205,0.721,1215,0.494,1252,0.762,1253,0.884,1275,0.896,1300,0.762,1302,0.716,1382,0.78,1393,0.909,1406,1.022,1550,0.975,1591,0.924,1607,1.85,1630,0.997,1666,1.067,1687,0.997,1695,0.74,1738,0.924,1814,1.58,1864,0.975,1893,0.924,1894,1.713,1895,2.437,1942,2.437,2074,0.607,2337,1.297,2526,0.842,2569,1.948,2804,1.022,2904,0.995,2905,0.995,2906,0.603,2909,0.95,2910,0.607,2911,1.036,2912,0.607,2913,1.036,2915,1.036,2916,1.086,3034,3.414,3035,1.742,3311,1.847,3320,0.721,3405,0.833,3489,1.895,3512,0.939,3664,0.833,3712,1.85,3713,0.975,3714,2.482,3715,1.774,3716,2.815,3717,2.651,3718,1.85,3719,1.085,3720,0.956,3721,0.956,3722,1.085,3723,1.085,3724,1.85,3725,1.085,3726,1.085,3727,1.085,3728,1.085,3729,2.012,3730,2.012,3731,1.81]],["component/275",[17,1.36]],["title/276-1",[15,33.567]],["name/276-1",[]],["text/276-1",[]],["component/276-1",[]],["title/276",[320,35.193]],["name/276",[320,1.048]],["text/276",[8,2.718,9,1.838,11,1.545,12,3.088,14,2.583,15,3.878,17,3.732,93,3.223,139,3.535,178,3.32,226,3.384,237,4.098,261,3.134,433,4.982,466,4.401,523,3.469,598,4.622,629,4.94,1032,4.408,1130,4.899,1288,5.757,1695,4.685,1909,6.649,3664,5.273,3724,6.312,3732,7.141,3733,6.649,3734,7.141]],["component/276",[17,1.36]],["title/277-1",[2907,44.56]],["name/277-1",[]],["text/277-1",[]],["component/277-1",[]],["title/277-2",[2908,42.932]],["name/277-2",[]],["text/277-2",[]],["component/277-2",[]],["title/277",[]],["name/277",[2917,1.545]],["text/277",[8,1.775,9,1.815,11,2.203,17,4.953,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3712,4.123,3731,6.099]],["component/277",[17,1.36]],["title/278-1",[222,25.902,226,23.333]],["name/278-1",[]],["text/278-1",[]],["component/278-1",[]],["title/278-2",[105,30.154]],["name/278-2",[]],["text/278-2",[]],["component/278-2",[]],["title/278",[9,12.054,11,10.134,14,16.942,17,24.473]],["name/278",[205,1.287]],["text/278",[3,2.643,9,2.612,11,2.438,14,3.671,17,5.887,18,2.583,80,3.415,96,2.759,105,2.849,222,3.073,226,2.768,235,3.567,261,3.432,435,3.81,909,3.243,941,4.739,1274,7.519,1275,6.211,3731,6.762]],["component/278",[17,1.36]],["title/279-1",[968,34.315]],["name/279-1",[]],["text/279-1",[]],["component/279-1",[]],["title/279-2",[105,30.154]],["name/279-2",[]],["text/279-2",[]],["component/279-2",[]],["title/279-3",[11,11.848,51,29.259,234,30.206]],["name/279-3",[]],["text/279-3",[]],["component/279-3",[]],["title/279",[2,27.205]],["name/279",[2,0.81]],["text/279",[2,3.239,3,2.873,4,1.284,5,0.909,9,2.619,11,2.477,12,3.047,13,1.25,14,2.84,15,1.89,17,4.441,24,2.236,36,1.532,51,2.49,57,1.329,71,2.313,80,1.213,81,1.317,91,2.12,95,1.144,105,3.097,109,2.431,116,1.721,126,0.855,136,1.204,137,0.956,149,1.078,176,2.045,178,0.965,181,3.158,208,1.281,209,1.666,218,1.306,220,0.999,221,2.378,226,0.983,234,1.532,235,2.126,279,1.295,282,1.702,315,1.674,318,1.848,321,0.947,358,1.712,372,2.958,387,1.473,401,2.263,405,1.402,419,0.982,432,2.257,475,1.81,501,1.545,546,2.217,552,2.239,565,1.774,596,1.16,634,1.822,645,1.624,887,2.097,891,3.197,909,1.152,927,2.56,966,1.411,968,3.929,1037,1.876,1088,1.353,1120,2.649,1161,1.467,1310,3.078,1311,2.794,1326,1.712,1382,1.921,1451,2.148,1740,2.313,2070,2.671,2295,2.586,2732,2.455,2792,1.906,2911,1.375,2913,1.375,2915,1.375,3264,1.972,3731,4.029,3735,3.135,3736,3.135,3737,3.135,3738,3.135]],["component/279",[17,1.36]],["title/280-1",[389,41.355]],["name/280-1",[]],["text/280-1",[]],["component/280-1",[]],["title/280-2",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/280-2",[]],["text/280-2",[]],["component/280-2",[]],["title/280-3",[126,20.299,1032,30.391]],["name/280-3",[]],["text/280-3",[]],["component/280-3",[]],["title/280-4",[220,23.711,1039,26.676]],["name/280-4",[]],["text/280-4",[]],["component/280-4",[]],["title/280-5",[286,34.563,563,36.205]],["name/280-5",[]],["text/280-5",[]],["component/280-5",[]],["title/280-6",[333,33.487,663,38.919]],["name/280-6",[]],["text/280-6",[]],["component/280-6",[]],["title/280-7",[333,33.487,669,43.851]],["name/280-7",[]],["text/280-7",[]],["component/280-7",[]],["title/280",[541,35.613]],["name/280",[541,1.06]],["text/280",[2,0.788,3,1.122,4,1.108,5,1.086,6,1.377,9,0.617,11,0.718,14,0.473,15,0.53,17,3.945,18,2.115,20,1.14,22,1.13,27,0.897,28,0.709,48,2.177,50,1.306,59,0.946,60,1.494,65,1.222,73,0.666,74,2.358,80,0.571,81,3.037,82,0.666,89,1.664,91,1.511,93,1.082,95,1.368,96,1.451,107,0.78,109,1.661,123,0.73,126,1.663,133,1.556,135,3.346,137,1.416,139,2.368,147,1.226,149,0.931,150,0.676,166,1.628,169,1.301,170,3.765,171,1.172,172,2.564,173,1.07,174,2.661,176,1.052,178,0.454,180,0.946,181,1.276,182,0.965,183,1.257,184,1.184,186,1.07,187,1.453,214,1.363,216,0.736,217,1.761,220,0.862,221,0.441,222,0.942,223,1.896,225,0.625,226,2.267,228,1.752,242,1.296,246,2.806,250,0.727,266,1.186,272,0.761,286,1.741,309,3.099,314,0.796,315,0.788,333,2.744,334,0.678,382,1.147,389,0.653,391,1.659,399,0.516,413,0.792,419,1.908,422,3.264,432,0.633,434,0.84,435,0.637,450,1.879,470,0.761,471,0.618,490,1.446,501,0.727,507,1.483,508,0.757,509,1.439,510,1.111,518,1.393,520,2.317,532,1.074,543,0.975,546,1.579,556,0.928,563,1.824,566,3.472,573,1.011,584,0.805,590,0.746,598,0.846,599,1.551,610,1.155,613,0.937,628,0.753,631,0.805,640,1.832,644,1.854,648,1.687,657,1.723,661,0.835,663,4.03,669,2.736,680,0.83,690,2.725,691,0.82,692,0.852,693,0.835,696,2.379,703,0.641,709,0.788,719,1.011,724,1.789,744,0.81,748,0.89,762,1.217,770,1.531,771,0.83,773,0.975,793,1.486,893,1.024,909,1.377,922,0.796,924,0.784,935,0.912,958,0.753,960,0.815,968,0.542,983,0.746,1006,0.73,1032,1.896,1033,0.825,1039,0.97,1111,0.815,1118,0.987,1120,0.743,1160,0.937,1161,0.69,1176,0.764,1180,0.937,1243,0.788,1275,1.038,1297,0.955,1314,1.038,1386,0.825,1396,0.852,1453,0.883,1496,0.975,1543,0.965,1643,1.184,1889,0.805,1893,1.07,1894,1.07,1942,1.088,2074,0.704,2088,0.84,2180,1.217,2337,0.81,2526,0.975,2544,0.897,2818,0.825,2909,0.593,2967,0.863,2968,0.84,2980,2.082,3314,0.876,3315,1.619,3316,1.702,3320,0.835,3321,0.876,3549,1.024,3550,1.024,3551,1.024,3552,1.024,3553,1.024,3554,1.024,3714,2.032,3715,2.032,3718,1.155,3739,1.307,3740,1.307,3741,1.307,3742,1.307,3743,1.217,3744,1.217,3745,1.307,3746,1.307,3747,1.307,3748,1.307,3749,5.399,3750,1.307,3751,1.307,3752,1.307,3753,1.307]],["component/280",[17,1.36]],["title/281-1",[149,21.259,708,25.823,1215,23.97]],["name/281-1",[]],["text/281-1",[]],["component/281-1",[]],["title/281-2",[52,23.584,139,24.374]],["name/281-2",[]],["text/281-2",[]],["component/281-2",[]],["title/281-3",[1045,21.29,1666,24.015]],["name/281-3",[]],["text/281-3",[]],["component/281-3",[]],["title/281",[]],["name/281",[2853,1.51]],["text/281",[8,3.37,9,2.279,11,2.376,17,4.626,52,2.283,74,3.059,96,2.251,139,2.36,149,2.477,178,2.216,221,2.988,321,3.018,379,3.53,419,2.255,514,4.637,698,4.263,708,3.009,993,3.45,1045,3.284,1215,2.793,1666,3.226,2904,3.035,2905,3.035,2906,3.41,3712,5.64]],["component/281",[17,1.36]],["title/282-1",[149,21.259,708,25.823,1215,23.97]],["name/282-1",[]],["text/282-1",[]],["component/282-1",[]],["title/282-2",[52,23.584,139,24.374]],["name/282-2",[]],["text/282-2",[]],["component/282-2",[]],["title/282-3",[1045,21.29,1666,24.015]],["name/282-3",[]],["text/282-3",[]],["component/282-3",[]],["title/282-4",[220,23.711,1039,26.676]],["name/282-4",[]],["text/282-4",[]],["component/282-4",[]],["title/282-5",[2907,44.56]],["name/282-5",[]],["text/282-5",[]],["component/282-5",[]],["title/282-6",[2908,42.932]],["name/282-6",[]],["text/282-6",[]],["component/282-6",[]],["title/282-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/282-7",[]],["text/282-7",[]],["component/282-7",[]],["title/282-8",[126,20.299,135,32.312]],["name/282-8",[]],["text/282-8",[]],["component/282-8",[]],["title/282-9",[65,42.191]],["name/282-9",[]],["text/282-9",[]],["component/282-9",[]],["title/282-10",[65,33.602,501,36.661]],["name/282-10",[]],["text/282-10",[]],["component/282-10",[]],["title/282-11",[279,30.73,3713,56.993]],["name/282-11",[]],["text/282-11",[]],["component/282-11",[]],["title/282-12",[15,26.734,68,30.063]],["name/282-12",[]],["text/282-12",[]],["component/282-12",[]],["title/282-13",[17,34.438,126,20.299]],["name/282-13",[]],["text/282-13",[]],["component/282-13",[]],["title/282",[126,25.488]],["name/282",[126,0.759]],["text/282",[3,0.838,5,1.12,6,0.562,8,1.303,9,1.089,11,1.794,12,0.586,15,1.999,17,4.815,18,1.131,22,0.639,28,1.345,36,0.748,48,0.615,52,0.485,57,1.186,60,0.845,61,1.661,65,2.157,68,0.618,74,2.408,80,0.592,81,2.337,82,1.264,89,0.549,93,1.119,94,0.835,95,1.021,96,1.493,98,0.748,100,0.895,105,1.542,109,1.001,122,0.76,126,2.264,133,0.513,135,2.714,136,1.074,137,1.697,139,2.047,149,0.526,150,0.701,170,2.173,171,1.211,172,1.829,174,0.877,176,1.088,178,1.189,181,2.484,187,1.502,214,0.771,217,0.719,218,1.165,220,0.488,221,1.868,222,1.346,225,0.649,226,0.48,246,0.793,257,0.748,266,1.227,279,1.156,309,2.211,321,1.887,334,1.286,337,1.092,379,1.965,382,1.186,391,0.677,399,2.396,415,0.754,419,1.21,422,1.264,434,0.871,435,0.66,438,1.2,441,0.964,450,1.403,462,1.259,463,0.971,470,0.789,471,1.619,490,1.08,501,2.354,507,0.605,509,0.588,514,2.764,518,1.774,523,1.204,526,1.403,528,0.821,531,0.908,532,0.607,537,0.915,546,0.645,549,1.286,557,1.012,579,1.85,590,0.774,596,1.035,598,1.604,631,2.607,641,0.877,657,2.195,661,0.866,683,1.262,690,1.728,691,1.554,692,1.615,693,1.583,698,2.854,708,1.615,722,0.745,730,1.227,744,3.054,775,0.831,780,0.711,785,0.774,793,1.536,899,0.908,916,1.172,924,1.486,966,0.689,993,1.34,1032,1.579,1039,0.549,1045,1.961,1088,2.062,1124,0.889,1127,1.035,1136,0.937,1146,1.128,1200,1.128,1215,0.593,1252,0.915,1275,1.077,1300,0.915,1302,0.86,1382,0.937,1550,1.172,1630,1.198,1666,1.248,1687,1.198,1695,0.889,1738,1.11,1814,1.871,1864,1.172,1893,1.11,1894,1.11,1895,2.851,1942,2.063,2074,0.73,2337,1.536,2526,1.012,2569,2.307,2804,1.227,2904,1.179,2905,1.179,2906,0.724,2909,1.124,2910,0.73,2911,1.227,2912,0.73,2913,1.227,2915,1.227,2916,1.286,3034,3.915,3035,2.063,3311,0.855,3320,0.866,3405,1.001,3664,1.001,3712,2.19,3713,1.172,3714,2.903,3715,2.101,3716,3.292,3717,2.244,3718,2.19,3719,1.303,3720,1.149,3721,1.149,3722,1.303,3723,1.303,3731,2.143]],["component/282",[17,1.36]],["title/283-1",[15,33.567]],["name/283-1",[]],["text/283-1",[]],["component/283-1",[]],["title/283",[320,35.193]],["name/283",[320,1.048]],["text/283",[8,2.718,9,1.838,11,1.545,12,3.088,14,2.583,15,3.878,17,3.732,93,3.223,139,3.535,178,3.32,226,3.384,237,4.098,261,3.134,433,4.982,466,4.401,523,3.469,598,4.622,629,4.94,1032,4.408,1130,4.899,1288,5.757,1695,4.685,1909,6.649,3664,5.273,3724,6.312,3732,7.141,3733,6.649,3734,7.141]],["component/283",[17,1.36]],["title/284-1",[222,25.902,226,23.333]],["name/284-1",[]],["text/284-1",[]],["component/284-1",[]],["title/284-2",[105,30.154]],["name/284-2",[]],["text/284-2",[]],["component/284-2",[]],["title/284",[9,12.054,11,10.134,14,16.942,17,24.473]],["name/284",[205,1.287]],["text/284",[3,2.643,9,2.612,11,2.438,14,3.671,17,5.887,18,2.583,80,3.415,96,2.759,105,2.849,222,3.073,226,2.768,235,3.567,261,3.432,435,3.81,909,3.243,941,4.739,1274,7.519,1275,6.211,3731,6.762]],["component/284",[17,1.36]],["title/285-1",[65,42.191]],["name/285-1",[]],["text/285-1",[]],["component/285-1",[]],["title/285-2",[122,36.977,171,32.212]],["name/285-2",[]],["text/285-2",[]],["component/285-2",[]],["title/285-3",[431,52.864]],["name/285-3",[]],["text/285-3",[]],["component/285-3",[]],["title/285-4",[442,50.154]],["name/285-4",[]],["text/285-4",[]],["component/285-4",[]],["title/285-5",[122,36.977,171,32.212]],["name/285-5",[]],["text/285-5",[]],["component/285-5",[]],["title/285-6",[431,52.864]],["name/285-6",[]],["text/285-6",[]],["component/285-6",[]],["title/285-7",[389,41.355]],["name/285-7",[]],["text/285-7",[]],["component/285-7",[]],["title/285-8",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/285-8",[]],["text/285-8",[]],["component/285-8",[]],["title/285-9",[126,20.299,391,32.936]],["name/285-9",[]],["text/285-9",[]],["component/285-9",[]],["title/285-10",[220,23.711,1039,26.676]],["name/285-10",[]],["text/285-10",[]],["component/285-10",[]],["title/285-11",[286,34.563,563,36.205]],["name/285-11",[]],["text/285-11",[]],["component/285-11",[]],["title/285-12",[333,33.487,663,38.919]],["name/285-12",[]],["text/285-12",[]],["component/285-12",[]],["title/285-13",[333,33.487,669,43.851]],["name/285-13",[]],["text/285-13",[]],["component/285-13",[]],["title/285",[541,35.613]],["name/285",[541,1.06]],["text/285",[2,0.51,3,0.746,4,0.717,5,1.535,6,1.775,8,0.59,9,0.86,11,0.829,14,1.013,15,0.332,17,4.534,18,1.792,20,0.738,22,0.731,24,0.393,27,0.562,28,0.445,48,1.515,50,0.845,52,0.293,59,0.593,60,0.967,65,2.933,74,1.988,80,0.358,81,2.226,82,0.418,89,1.732,91,1.004,93,1.507,95,1.154,96,1.178,98,0.856,100,0.541,107,0.489,109,1.131,112,0.696,122,1.239,123,0.458,126,1.772,133,1.45,134,0.373,135,2.487,137,1.747,139,2.127,147,1.433,149,0.602,150,0.802,166,1.083,169,0.842,170,2.979,171,3.349,172,1.785,173,0.671,174,2.479,175,0.477,176,0.969,178,0.767,180,1.122,181,1.036,182,0.605,183,0.788,184,0.742,186,0.671,187,1.338,201,0.368,204,1.189,214,1.255,216,0.462,217,1.171,218,1.038,220,0.558,221,0.277,222,0.868,223,1.261,224,0.505,225,0.742,226,1.661,228,1.133,233,0.813,242,0.838,246,1.953,250,0.456,255,0.489,260,0.661,266,0.768,272,0.477,277,0.577,286,1.158,309,2.651,314,0.499,315,0.494,320,0.348,321,0.279,333,1.946,334,0.805,378,0.567,379,0.618,381,0.577,382,0.742,389,0.41,391,1.914,399,0.612,401,0.398,413,0.497,419,1.354,422,2.393,431,3.675,432,0.397,434,0.527,435,0.756,441,0.603,442,2.024,443,0.372,447,0.499,448,0.894,450,1.25,455,0.428,463,0.587,470,0.477,471,1.325,475,0.534,481,0.626,490,1.22,492,0.482,500,0.577,501,2.611,505,0.464,507,1.912,508,0.898,509,1.855,510,1.299,518,1.968,520,1.579,532,1.496,535,0.489,541,0.353,543,0.612,545,0.661,546,1.589,550,0.567,556,0.582,563,1.213,566,2.416,573,0.634,577,0.619,579,0.612,584,0.505,590,0.468,597,0.661,598,0.53,599,1.004,610,0.724,613,0.587,628,0.894,631,0.505,634,0.538,640,1.218,641,0.53,644,1.199,648,1.554,655,0.436,657,1.453,661,0.523,663,2.996,666,1.371,669,1.864,680,0.52,690,1.933,691,0.514,692,0.534,693,0.523,696,1.582,698,0.602,703,0.402,708,0.386,709,0.494,719,0.634,722,0.45,724,1.158,740,0.682,744,0.961,746,0.94,747,0.587,748,1.056,753,0.567,754,0.599,755,0.612,762,0.763,770,0.991,771,0.52,773,1.158,793,0.961,893,0.642,909,0.916,922,0.945,924,0.491,935,0.572,957,0.534,958,0.472,960,1.376,966,0.416,968,0.34,983,0.468,1004,0.819,1006,0.458,1032,2.164,1033,0.517,1039,0.628,1044,0.661,1111,0.511,1118,0.619,1120,0.466,1124,1.017,1144,0.599,1160,0.587,1161,0.433,1176,0.479,1180,0.587,1205,0.523,1232,0.695,1243,0.494,1253,0.642,1275,0.651,1297,0.599,1314,0.651,1386,0.517,1393,0.661,1396,0.534,1406,0.742,1453,0.553,1496,0.612,1543,0.605,1576,0.788,1591,0.671,1607,1.371,1643,0.742,1669,0.695,1878,1.554,1889,0.505,1893,1.27,1894,1.808,1896,0.682,1901,2.692,1903,0.763,1920,0.651,1942,1.291,2035,0.682,2074,0.441,2088,0.527,2180,0.763,2337,0.508,2463,0.599,2526,1.158,2544,0.562,2777,0.788,2778,0.788,2781,0.788,2796,0.788,2818,0.517,2909,0.372,2967,0.541,2968,0.527,2980,1.385,3311,0.979,3314,0.549,3315,1.047,3316,1.101,3320,0.523,3321,0.549,3489,1.405,3512,0.682,3549,0.642,3550,0.642,3551,0.642,3552,0.642,3553,0.642,3554,0.642,3714,1.315,3715,1.315,3717,0.742,3718,0.724,3724,1.371,3725,0.788,3726,0.788,3727,0.788,3728,0.788,3729,0.788,3730,1.491,3733,1.444,3739,0.819,3740,0.819,3741,0.819,3742,0.819,3743,0.763,3744,0.763,3745,0.819,3746,0.819,3747,0.819,3748,0.819,3749,3.83,3750,0.819,3751,0.819,3752,0.819,3753,0.819,3754,0.861,3755,0.861,3756,0.861,3757,0.861,3758,0.861,3759,0.861,3760,0.861,3761,0.861,3762,0.861,3763,0.861]],["component/285",[17,1.36]],["title/286-1",[310,57.238]],["name/286-1",[]],["text/286-1",[]],["component/286-1",[]],["title/286-2",[15,33.567]],["name/286-2",[]],["text/286-2",[]],["component/286-2",[]],["title/286-3",[17,43.241]],["name/286-3",[]],["text/286-3",[]],["component/286-3",[]],["title/286-4",[261,28.922,1954,38.537]],["name/286-4",[]],["text/286-4",[]],["component/286-4",[]],["title/286-5",[17,24.473,279,21.838,551,30.113,1302,29.732]],["name/286-5",[]],["text/286-5",[]],["component/286-5",[]],["title/286-6",[10,41.906]],["name/286-6",[]],["text/286-6",[]],["component/286-6",[]],["title/286-7",[4,30.475,399,26.009]],["name/286-7",[]],["text/286-7",[]],["component/286-7",[]],["title/286-8",[374,33.375,707,35.628]],["name/286-8",[]],["text/286-8",[]],["component/286-8",[]],["title/286",[208,30.391,630,31.725]],["name/286",[3216,1.734]],["text/286",[2,1.335,4,3.303,5,1.329,6,1.967,10,2.057,11,0.879,12,0.556,13,1.475,15,1.329,17,5.843,18,2.234,22,0.607,28,0.698,48,0.584,51,0.687,52,0.46,63,0.844,65,1.205,68,1.495,74,2.191,76,2.833,81,3.836,82,0.656,91,3.077,92,1.662,93,2.141,95,0.53,96,1.674,114,2.204,121,0.812,122,0.722,132,0.844,133,2.703,134,0.585,135,3.109,137,2.578,139,0.476,149,1.272,150,0.665,153,1.198,157,1.022,158,2.884,166,1.158,167,2.043,170,4.534,172,1.751,174,2.12,175,0.749,176,0.565,177,1.424,178,1.138,180,2.37,181,2.421,182,1.745,186,3.325,208,1.09,221,0.434,224,0.793,225,1.131,226,0.837,233,0.675,261,0.565,266,0.637,282,0.788,303,0.725,313,0.95,320,0.547,321,0.805,326,1.905,335,0.631,387,2.154,399,0.932,405,1.193,415,0.716,419,0.455,450,1.854,455,0.672,463,0.922,477,0.971,478,0.897,490,2.066,496,0.833,501,0.716,507,1.814,508,0.745,509,1.761,510,0.597,526,1.337,532,1.467,541,0.554,546,0.612,549,0.667,551,3.434,600,0.876,643,0.931,655,1.258,657,1.226,678,2.611,690,1.193,722,0.707,723,0.817,744,0.797,748,0.876,763,0.807,769,0.85,770,3.03,771,1.5,775,0.788,793,0.797,952,0.971,983,0.735,991,1.456,998,2.445,999,1.198,1006,2.65,1032,0.593,1039,0.521,1045,0.416,1080,0.971,1118,0.971,1130,0.883,1154,3.726,1160,0.922,1161,2.146,1184,1.008,1205,0.822,1242,2.106,1250,1.648,1275,1.022,1291,0.905,1302,4.025,1321,0.85,1357,0.793,1629,2.362,1670,0.905,1695,0.844,1748,1.662,1893,1.053,1894,1.053,1942,1.071,1954,0.752,2033,1.905,2074,0.693,2337,0.797,2470,1.022,2526,2.445,2545,1.519,3037,1.165,3218,2.043,3236,1.165,3318,2.043,3320,0.822,3321,0.862,3346,1.113,3348,1.165,3349,1.165,3439,0.95,3440,1.967,3566,2.272,3681,1.198,3714,1.091,3715,1.091,3743,1.198,3744,1.198,3764,2.483,3765,2.483,3766,2.483,3767,2.483,3768,2.483,3769,1.237,3770,2.483,3771,1.352,3772,2.483,3773,1.352,3774,1.352,3775,1.352,3776,1.352,3777,1.352,3778,2.483,3779,1.352,3780,1.352,3781,1.352,3782,1.352,3783,1.352,3784,1.352,3785,1.352,3786,1.352,3787,1.352]],["component/286",[17,1.36]],["title/287-1",[344,50.708]],["name/287-1",[]],["text/287-1",[]],["component/287-1",[]],["title/287-2",[374,33.375,707,35.628]],["name/287-2",[]],["text/287-2",[]],["component/287-2",[]],["title/287",[19,38.169,20,31.351]],["name/287",[205,1.287]],["text/287",[0,6.301,2,3.143,3,2.414,4,3.302,5,2.337,9,1.838,11,2.332,14,2.583,17,5.631,18,3.56,20,3.397,95,2.942,96,2.52,112,4.292,208,3.293,320,3.037,441,2.778,465,4.982,518,4.009,630,3.438,968,2.961,1357,4.401]],["component/287",[17,1.36]],["title/288-1",[9,16.962,11,14.261]],["name/288-1",[]],["text/288-1",[]],["component/288-1",[]],["title/288-2",[10,41.906]],["name/288-2",[]],["text/288-2",[]],["component/288-2",[]],["title/288-3",[968,34.315]],["name/288-3",[]],["text/288-3",[]],["component/288-3",[]],["title/288-4",[374,33.375,707,35.628]],["name/288-4",[]],["text/288-4",[]],["component/288-4",[]],["title/288",[2,27.205]],["name/288",[2,0.81]],["text/288",[2,3.706,3,1.501,5,2.222,9,2.563,10,4.178,11,2.632,12,2.496,13,1.181,14,2.088,15,2.342,17,4.593,18,0.866,24,2.131,26,1.356,39,1.745,46,2.449,48,1.19,91,1.193,96,1.566,112,1.178,138,1.709,149,1.724,176,2.533,181,2.868,207,2.226,221,0.885,226,3.272,235,1.196,251,1.59,261,1.151,320,2.455,321,1.513,355,2.998,372,2.819,387,1.391,388,2.762,401,2.157,405,1.324,415,1.459,432,2.15,444,3.022,518,1.1,549,1.361,630,1.263,722,1.441,772,1.616,802,1.697,927,1.441,968,3.992,983,1.498,1168,7.206,1215,1.148,1311,1.573,1611,2.147,2337,4.21,2382,3.764,2545,4.367,3259,1.879,3260,1.879,3263,1.879,3264,1.862,3394,2.114,3397,2.114,3398,3.579,3788,2.757,3789,2.757]],["component/288",[17,1.36]],["title/289-1",[149,21.259,708,25.823,1215,23.97]],["name/289-1",[]],["text/289-1",[]],["component/289-1",[]],["title/289-2",[52,23.584,139,24.374]],["name/289-2",[]],["text/289-2",[]],["component/289-2",[]],["title/289-3",[1045,21.29,1666,24.015]],["name/289-3",[]],["text/289-3",[]],["component/289-3",[]],["title/289",[]],["name/289",[2853,1.51]],["text/289",[8,3.37,9,2.279,11,2.376,17,4.626,52,2.283,74,3.059,96,2.251,139,2.36,149,2.477,178,2.216,221,2.988,321,3.018,379,3.53,419,2.255,514,4.637,698,4.263,708,3.009,993,3.45,1045,3.284,1215,2.793,1666,3.226,2904,3.035,2905,3.035,2906,3.41,3712,5.64]],["component/289",[17,1.36]],["title/290-1",[149,21.259,708,25.823,1215,23.97]],["name/290-1",[]],["text/290-1",[]],["component/290-1",[]],["title/290-2",[52,23.584,139,24.374]],["name/290-2",[]],["text/290-2",[]],["component/290-2",[]],["title/290-3",[1045,21.29,1666,24.015]],["name/290-3",[]],["text/290-3",[]],["component/290-3",[]],["title/290-4",[220,23.711,1039,26.676]],["name/290-4",[]],["text/290-4",[]],["component/290-4",[]],["title/290-5",[2907,44.56]],["name/290-5",[]],["text/290-5",[]],["component/290-5",[]],["title/290-6",[2908,42.932]],["name/290-6",[]],["text/290-6",[]],["component/290-6",[]],["title/290-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/290-7",[]],["text/290-7",[]],["component/290-7",[]],["title/290-8",[126,20.299,135,32.312]],["name/290-8",[]],["text/290-8",[]],["component/290-8",[]],["title/290-9",[65,42.191]],["name/290-9",[]],["text/290-9",[]],["component/290-9",[]],["title/290-10",[65,33.602,501,36.661]],["name/290-10",[]],["text/290-10",[]],["component/290-10",[]],["title/290-11",[279,30.73,3713,56.993]],["name/290-11",[]],["text/290-11",[]],["component/290-11",[]],["title/290-12",[15,26.734,68,30.063]],["name/290-12",[]],["text/290-12",[]],["component/290-12",[]],["title/290-13",[17,34.438,126,20.299]],["name/290-13",[]],["text/290-13",[]],["component/290-13",[]],["title/290",[126,25.488]],["name/290",[126,0.759]],["text/290",[3,0.838,5,1.12,6,0.562,8,1.303,9,1.089,11,1.794,12,0.586,15,1.999,17,4.815,18,1.131,22,0.639,28,1.345,36,0.748,48,0.615,52,0.485,57,1.186,60,0.845,61,1.661,65,2.157,68,0.618,74,2.408,80,0.592,81,2.337,82,1.264,89,0.549,93,1.119,94,0.835,95,1.021,96,1.493,98,0.748,100,0.895,105,1.542,109,1.001,122,0.76,126,2.264,133,0.513,135,2.714,136,1.074,137,1.697,139,2.047,149,0.526,150,0.701,170,2.173,171,1.211,172,1.829,174,0.877,176,1.088,178,1.189,181,2.484,187,1.502,214,0.771,217,0.719,218,1.165,220,0.488,221,1.868,222,1.346,225,0.649,226,0.48,246,0.793,257,0.748,266,1.227,279,1.156,309,2.211,321,1.887,334,1.286,337,1.092,379,1.965,382,1.186,391,0.677,399,2.396,415,0.754,419,1.21,422,1.264,434,0.871,435,0.66,438,1.2,441,0.964,450,1.403,462,1.259,463,0.971,470,0.789,471,1.619,490,1.08,501,2.354,507,0.605,509,0.588,514,2.764,518,1.774,523,1.204,526,1.403,528,0.821,531,0.908,532,0.607,537,0.915,546,0.645,549,1.286,557,1.012,579,1.85,590,0.774,596,1.035,598,1.604,631,2.607,641,0.877,657,2.195,661,0.866,683,1.262,690,1.728,691,1.554,692,1.615,693,1.583,698,2.854,708,1.615,722,0.745,730,1.227,744,3.054,775,0.831,780,0.711,785,0.774,793,1.536,899,0.908,916,1.172,924,1.486,966,0.689,993,1.34,1032,1.579,1039,0.549,1045,1.961,1088,2.062,1124,0.889,1127,1.035,1136,0.937,1146,1.128,1200,1.128,1215,0.593,1252,0.915,1275,1.077,1300,0.915,1302,0.86,1382,0.937,1550,1.172,1630,1.198,1666,1.248,1687,1.198,1695,0.889,1738,1.11,1814,1.871,1864,1.172,1893,1.11,1894,1.11,1895,2.851,1942,2.063,2074,0.73,2337,1.536,2526,1.012,2569,2.307,2804,1.227,2904,1.179,2905,1.179,2906,0.724,2909,1.124,2910,0.73,2911,1.227,2912,0.73,2913,1.227,2915,1.227,2916,1.286,3034,3.915,3035,2.063,3311,0.855,3320,0.866,3405,1.001,3664,1.001,3712,2.19,3713,1.172,3714,2.903,3715,2.101,3716,3.292,3717,2.244,3718,2.19,3719,1.303,3720,1.149,3721,1.149,3722,1.303,3723,1.303,3731,2.143]],["component/290",[17,1.36]],["title/291-1",[15,33.567]],["name/291-1",[]],["text/291-1",[]],["component/291-1",[]],["title/291",[320,35.193]],["name/291",[320,1.048]],["text/291",[8,2.718,9,1.838,11,1.545,12,3.088,14,2.583,15,3.878,17,3.732,93,3.223,139,3.535,178,3.32,226,3.384,237,4.098,261,3.134,433,4.982,466,4.401,523,3.469,598,4.622,629,4.94,1032,4.408,1130,4.899,1288,5.757,1695,4.685,1909,6.649,3664,5.273,3724,6.312,3732,7.141,3733,6.649,3734,7.141]],["component/291",[17,1.36]],["title/292-1",[222,25.902,226,23.333]],["name/292-1",[]],["text/292-1",[]],["component/292-1",[]],["title/292-2",[105,30.154]],["name/292-2",[]],["text/292-2",[]],["component/292-2",[]],["title/292",[9,12.054,11,10.134,14,16.942,17,24.473]],["name/292",[205,1.287]],["text/292",[3,2.643,9,2.612,11,2.438,14,3.671,17,5.887,18,2.583,80,3.415,96,2.759,105,2.849,222,3.073,226,2.768,235,3.567,261,3.432,435,3.81,909,3.243,941,4.739,1274,7.519,1275,6.211,3731,6.762]],["component/292",[17,1.36]],["title/293-1",[65,42.191]],["name/293-1",[]],["text/293-1",[]],["component/293-1",[]],["title/293-2",[122,36.977,171,32.212]],["name/293-2",[]],["text/293-2",[]],["component/293-2",[]],["title/293-3",[431,52.864]],["name/293-3",[]],["text/293-3",[]],["component/293-3",[]],["title/293-4",[442,50.154]],["name/293-4",[]],["text/293-4",[]],["component/293-4",[]],["title/293-5",[122,36.977,171,32.212]],["name/293-5",[]],["text/293-5",[]],["component/293-5",[]],["title/293-6",[431,52.864]],["name/293-6",[]],["text/293-6",[]],["component/293-6",[]],["title/293-7",[389,41.355]],["name/293-7",[]],["text/293-7",[]],["component/293-7",[]],["title/293-8",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/293-8",[]],["text/293-8",[]],["component/293-8",[]],["title/293-9",[126,20.299,391,32.936]],["name/293-9",[]],["text/293-9",[]],["component/293-9",[]],["title/293-10",[220,23.711,1039,26.676]],["name/293-10",[]],["text/293-10",[]],["component/293-10",[]],["title/293-11",[286,34.563,563,36.205]],["name/293-11",[]],["text/293-11",[]],["component/293-11",[]],["title/293-12",[333,33.487,663,38.919]],["name/293-12",[]],["text/293-12",[]],["component/293-12",[]],["title/293-13",[333,33.487,669,43.851]],["name/293-13",[]],["text/293-13",[]],["component/293-13",[]],["title/293",[541,35.613]],["name/293",[541,1.06]],["text/293",[2,0.51,3,0.746,4,0.717,5,1.535,6,1.775,8,0.59,9,0.86,11,0.829,14,1.013,15,0.332,17,4.534,18,1.792,20,0.738,22,0.731,24,0.393,27,0.562,28,0.445,48,1.515,50,0.845,52,0.293,59,0.593,60,0.967,65,2.933,74,1.988,80,0.358,81,2.226,82,0.418,89,1.732,91,1.004,93,1.507,95,1.154,96,1.178,98,0.856,100,0.541,107,0.489,109,1.131,112,0.696,122,1.239,123,0.458,126,1.772,133,1.45,134,0.373,135,2.487,137,1.747,139,2.127,147,1.433,149,0.602,150,0.802,166,1.083,169,0.842,170,2.979,171,3.349,172,1.785,173,0.671,174,2.479,175,0.477,176,0.969,178,0.767,180,1.122,181,1.036,182,0.605,183,0.788,184,0.742,186,0.671,187,1.338,201,0.368,204,1.189,214,1.255,216,0.462,217,1.171,218,1.038,220,0.558,221,0.277,222,0.868,223,1.261,224,0.505,225,0.742,226,1.661,228,1.133,233,0.813,242,0.838,246,1.953,250,0.456,255,0.489,260,0.661,266,0.768,272,0.477,277,0.577,286,1.158,309,2.651,314,0.499,315,0.494,320,0.348,321,0.279,333,1.946,334,0.805,378,0.567,379,0.618,381,0.577,382,0.742,389,0.41,391,1.914,399,0.612,401,0.398,413,0.497,419,1.354,422,2.393,431,3.675,432,0.397,434,0.527,435,0.756,441,0.603,442,2.024,443,0.372,447,0.499,448,0.894,450,1.25,455,0.428,463,0.587,470,0.477,471,1.325,475,0.534,481,0.626,490,1.22,492,0.482,500,0.577,501,2.611,505,0.464,507,1.912,508,0.898,509,1.855,510,1.299,518,1.968,520,1.579,532,1.496,535,0.489,541,0.353,543,0.612,545,0.661,546,1.589,550,0.567,556,0.582,563,1.213,566,2.416,573,0.634,577,0.619,579,0.612,584,0.505,590,0.468,597,0.661,598,0.53,599,1.004,610,0.724,613,0.587,628,0.894,631,0.505,634,0.538,640,1.218,641,0.53,644,1.199,648,1.554,655,0.436,657,1.453,661,0.523,663,2.996,666,1.371,669,1.864,680,0.52,690,1.933,691,0.514,692,0.534,693,0.523,696,1.582,698,0.602,703,0.402,708,0.386,709,0.494,719,0.634,722,0.45,724,1.158,740,0.682,744,0.961,746,0.94,747,0.587,748,1.056,753,0.567,754,0.599,755,0.612,762,0.763,770,0.991,771,0.52,773,1.158,793,0.961,893,0.642,909,0.916,922,0.945,924,0.491,935,0.572,957,0.534,958,0.472,960,1.376,966,0.416,968,0.34,983,0.468,1004,0.819,1006,0.458,1032,2.164,1033,0.517,1039,0.628,1044,0.661,1111,0.511,1118,0.619,1120,0.466,1124,1.017,1144,0.599,1160,0.587,1161,0.433,1176,0.479,1180,0.587,1205,0.523,1232,0.695,1243,0.494,1253,0.642,1275,0.651,1297,0.599,1314,0.651,1386,0.517,1393,0.661,1396,0.534,1406,0.742,1453,0.553,1496,0.612,1543,0.605,1576,0.788,1591,0.671,1607,1.371,1643,0.742,1669,0.695,1878,1.554,1889,0.505,1893,1.27,1894,1.808,1896,0.682,1901,2.692,1903,0.763,1920,0.651,1942,1.291,2035,0.682,2074,0.441,2088,0.527,2180,0.763,2337,0.508,2463,0.599,2526,1.158,2544,0.562,2777,0.788,2778,0.788,2781,0.788,2796,0.788,2818,0.517,2909,0.372,2967,0.541,2968,0.527,2980,1.385,3311,0.979,3314,0.549,3315,1.047,3316,1.101,3320,0.523,3321,0.549,3489,1.405,3512,0.682,3549,0.642,3550,0.642,3551,0.642,3552,0.642,3553,0.642,3554,0.642,3714,1.315,3715,1.315,3717,0.742,3718,0.724,3724,1.371,3725,0.788,3726,0.788,3727,0.788,3728,0.788,3729,0.788,3730,1.491,3733,1.444,3739,0.819,3740,0.819,3741,0.819,3742,0.819,3743,0.763,3744,0.763,3745,0.819,3746,0.819,3747,0.819,3748,0.819,3749,3.83,3750,0.819,3751,0.819,3752,0.819,3753,0.819,3754,0.861,3755,0.861,3756,0.861,3757,0.861,3758,0.861,3759,0.861,3760,0.861,3761,0.861,3762,0.861,3763,0.861]],["component/293",[17,1.36]],["title/294-1",[310,57.238]],["name/294-1",[]],["text/294-1",[]],["component/294-1",[]],["title/294-2",[15,33.567]],["name/294-2",[]],["text/294-2",[]],["component/294-2",[]],["title/294-3",[17,43.241]],["name/294-3",[]],["text/294-3",[]],["component/294-3",[]],["title/294-4",[261,28.922,1954,38.537]],["name/294-4",[]],["text/294-4",[]],["component/294-4",[]],["title/294-5",[17,24.473,279,21.838,551,30.113,1302,29.732]],["name/294-5",[]],["text/294-5",[]],["component/294-5",[]],["title/294-6",[10,41.906]],["name/294-6",[]],["text/294-6",[]],["component/294-6",[]],["title/294-7",[4,30.475,399,26.009]],["name/294-7",[]],["text/294-7",[]],["component/294-7",[]],["title/294-8",[374,33.375,707,35.628]],["name/294-8",[]],["text/294-8",[]],["component/294-8",[]],["title/294",[208,30.391,630,31.725]],["name/294",[3216,1.734]],["text/294",[2,1.335,4,3.303,5,1.329,6,1.967,10,2.057,11,0.879,12,0.556,13,1.475,15,1.329,17,5.843,18,2.234,22,0.607,28,0.698,48,0.584,51,0.687,52,0.46,63,0.844,65,1.205,68,1.495,74,2.191,76,2.833,81,3.836,82,0.656,91,3.077,92,1.662,93,2.141,95,0.53,96,1.674,114,2.204,121,0.812,122,0.722,132,0.844,133,2.703,134,0.585,135,3.109,137,2.578,139,0.476,149,1.272,150,0.665,153,1.198,157,1.022,158,2.884,166,1.158,167,2.043,170,4.534,172,1.751,174,2.12,175,0.749,176,0.565,177,1.424,178,1.138,180,2.37,181,2.421,182,1.745,186,3.325,208,1.09,221,0.434,224,0.793,225,1.131,226,0.837,233,0.675,261,0.565,266,0.637,282,0.788,303,0.725,313,0.95,320,0.547,321,0.805,326,1.905,335,0.631,387,2.154,399,0.932,405,1.193,415,0.716,419,0.455,450,1.854,455,0.672,463,0.922,477,0.971,478,0.897,490,2.066,496,0.833,501,0.716,507,1.814,508,0.745,509,1.761,510,0.597,526,1.337,532,1.467,541,0.554,546,0.612,549,0.667,551,3.434,600,0.876,643,0.931,655,1.258,657,1.226,678,2.611,690,1.193,722,0.707,723,0.817,744,0.797,748,0.876,763,0.807,769,0.85,770,3.03,771,1.5,775,0.788,793,0.797,952,0.971,983,0.735,991,1.456,998,2.445,999,1.198,1006,2.65,1032,0.593,1039,0.521,1045,0.416,1080,0.971,1118,0.971,1130,0.883,1154,3.726,1160,0.922,1161,2.146,1184,1.008,1205,0.822,1242,2.106,1250,1.648,1275,1.022,1291,0.905,1302,4.025,1321,0.85,1357,0.793,1629,2.362,1670,0.905,1695,0.844,1748,1.662,1893,1.053,1894,1.053,1942,1.071,1954,0.752,2033,1.905,2074,0.693,2337,0.797,2470,1.022,2526,2.445,2545,1.519,3037,1.165,3218,2.043,3236,1.165,3318,2.043,3320,0.822,3321,0.862,3346,1.113,3348,1.165,3349,1.165,3439,0.95,3440,1.967,3566,2.272,3681,1.198,3714,1.091,3715,1.091,3743,1.198,3744,1.198,3764,2.483,3765,2.483,3766,2.483,3767,2.483,3768,2.483,3769,1.237,3770,2.483,3771,1.352,3772,2.483,3773,1.352,3774,1.352,3775,1.352,3776,1.352,3777,1.352,3778,2.483,3779,1.352,3780,1.352,3781,1.352,3782,1.352,3783,1.352,3784,1.352,3785,1.352,3786,1.352,3787,1.352]],["component/294",[17,1.36]],["title/295-1",[344,50.708]],["name/295-1",[]],["text/295-1",[]],["component/295-1",[]],["title/295-2",[374,33.375,707,35.628]],["name/295-2",[]],["text/295-2",[]],["component/295-2",[]],["title/295",[19,38.169,20,31.351]],["name/295",[205,1.287]],["text/295",[0,6.301,2,3.143,3,2.414,4,3.302,5,2.337,9,1.838,11,2.332,14,2.583,17,5.631,18,3.56,20,3.397,95,2.942,96,2.52,112,4.292,208,3.293,320,3.037,441,2.778,465,4.982,518,4.009,630,3.438,968,2.961,1357,4.401]],["component/295",[17,1.36]],["title/296-1",[9,16.962,11,14.261]],["name/296-1",[]],["text/296-1",[]],["component/296-1",[]],["title/296-2",[10,41.906]],["name/296-2",[]],["text/296-2",[]],["component/296-2",[]],["title/296-3",[968,34.315]],["name/296-3",[]],["text/296-3",[]],["component/296-3",[]],["title/296-4",[374,33.375,707,35.628]],["name/296-4",[]],["text/296-4",[]],["component/296-4",[]],["title/296",[2,27.205]],["name/296",[2,0.81]],["text/296",[2,3.706,3,1.501,5,2.222,9,2.563,10,4.178,11,2.632,12,2.496,13,1.181,14,2.088,15,2.342,17,4.593,18,0.866,24,2.131,26,1.356,39,1.745,46,2.449,48,1.19,91,1.193,96,1.566,112,1.178,138,1.709,149,1.724,176,2.533,181,2.868,207,2.226,221,0.885,226,3.272,235,1.196,251,1.59,261,1.151,320,2.455,321,1.513,355,2.998,372,2.819,387,1.391,388,2.762,401,2.157,405,1.324,415,1.459,432,2.15,444,3.022,518,1.1,549,1.361,630,1.263,722,1.441,772,1.616,802,1.697,927,1.441,968,3.992,983,1.498,1168,7.206,1215,1.148,1311,1.573,1611,2.147,2337,4.21,2382,3.764,2545,4.367,3259,1.879,3260,1.879,3263,1.879,3264,1.862,3394,2.114,3397,2.114,3398,3.579,3788,2.757,3789,2.757]],["component/296",[17,1.36]],["title/297-1",[52,23.584,139,24.374]],["name/297-1",[]],["text/297-1",[]],["component/297-1",[]],["title/297-2",[1045,21.29,1666,24.015]],["name/297-2",[]],["text/297-2",[]],["component/297-2",[]],["title/297-3",[259,25.319,443,21.251,1082,38.996,3072,35.773]],["name/297-3",[]],["text/297-3",[]],["component/297-3",[]],["title/297",[]],["name/297",[2853,1.51]],["text/297",[3,1.764,8,2.919,9,1.974,11,1.967,18,1.724,52,1.868,74,3.141,133,1.975,137,1.797,139,1.93,147,2.67,169,2.832,178,1.813,220,1.878,221,2.588,237,2.994,321,3.099,379,3.625,419,1.844,443,4.125,471,2.468,490,2.273,514,4.713,698,4.479,703,3.76,709,3.146,968,3.18,1039,2.112,1045,2.937,1057,3.895,1382,3.61,1666,2.794,2904,2.483,2905,2.483,2906,2.789,3072,3.986,3790,4.207,3791,4.207]],["component/297",[443,1.181]],["title/298-1",[149,21.259,708,25.823,1215,23.97]],["name/298-1",[]],["text/298-1",[]],["component/298-1",[]],["title/298-2",[52,23.584,139,24.374]],["name/298-2",[]],["text/298-2",[]],["component/298-2",[]],["title/298-3",[1045,21.29,1666,24.015]],["name/298-3",[]],["text/298-3",[]],["component/298-3",[]],["title/298-4",[259,25.319,443,21.251,1082,38.996,3072,35.773]],["name/298-4",[]],["text/298-4",[]],["component/298-4",[]],["title/298-5",[220,23.711,1039,26.676]],["name/298-5",[]],["text/298-5",[]],["component/298-5",[]],["title/298-6",[2907,44.56]],["name/298-6",[]],["text/298-6",[]],["component/298-6",[]],["title/298-7",[2908,42.932]],["name/298-7",[]],["text/298-7",[]],["component/298-7",[]],["title/298-8",[3791,66.704]],["name/298-8",[]],["text/298-8",[]],["component/298-8",[]],["title/298",[126,25.488]],["name/298",[126,0.759]],["text/298",[3,0.931,5,0.901,8,2.277,9,2.011,11,2.256,18,1.528,52,0.986,57,2.214,74,2.924,96,1.632,105,2.554,133,1.042,136,2.006,137,2.414,139,1.019,147,1.409,149,1.069,169,1.495,178,1.607,181,3.312,220,1.665,221,3.035,237,1.58,321,2.885,379,3.375,399,1.826,419,1.635,422,1.404,443,4.455,471,1.303,490,2.015,514,4.403,526,1.559,596,1.932,698,4.229,703,2.268,708,1.299,709,1.66,968,1.919,993,2.501,1039,1.873,1045,2.524,1057,3.453,1088,3.415,1215,1.206,1382,1.905,1666,2.18,2904,2.201,2905,2.201,2906,1.472,2909,2.715,2910,1.483,2911,2.29,2912,1.483,2913,2.29,2915,2.29,2916,2.4,3072,2.104,3790,3.73,3791,2.22,3792,3.852,3793,2.494]],["component/298",[443,1.181]],["title/299-1",[89,33.495]],["name/299-1",[]],["text/299-1",[]],["component/299-1",[]],["title/299-2",[1006,46.229]],["name/299-2",[]],["text/299-2",[]],["component/299-2",[]],["title/299",[390,39.954]],["name/299",[390,1.19]],["text/299",[5,1.145,6,1.452,8,1.332,9,1.821,11,1.219,18,3.543,46,1.931,52,2.017,68,3.699,77,2.122,81,2.673,89,1.417,96,2.861,109,1.414,126,2.179,133,2.133,134,2.564,137,3.271,177,2.11,178,1.216,181,1.086,218,2.65,246,2.047,255,3.362,257,1.931,259,3.047,279,3.781,303,1.973,333,1.779,390,4.292,438,4.305,443,5.426,451,2.781,464,2.781,466,2.157,488,2.968,499,3.623,507,1.564,509,1.517,510,2.613,522,2.182,532,1.568,628,2.018,654,1.907,780,4.662,788,2.11,991,3.473,997,2.157,998,4.206,1045,2.285,1252,2.364,1302,2.222,1326,2.157,1541,2.281,3269,4.614,3270,2.742,3447,4.981,3794,3.027,3795,3.5,3796,3.5,3797,3.5]],["component/299",[443,1.181]],["title/300-1",[2907,44.56]],["name/300-1",[]],["text/300-1",[]],["component/300-1",[]],["title/300-2",[2908,42.932]],["name/300-2",[]],["text/300-2",[]],["component/300-2",[]],["title/300-3",[3791,66.704]],["name/300-3",[]],["text/300-3",[]],["component/300-3",[]],["title/300",[]],["name/300",[2917,1.545]],["text/300",[5,1.337,8,1.555,9,2.015,11,2.198,18,1.35,57,3.049,74,2.706,105,3.223,136,2.762,137,2.697,178,1.419,181,3.702,221,3.236,321,2.669,379,3.123,399,2.514,419,1.444,422,2.083,443,4.609,490,1.78,514,4.049,526,2.313,596,2.66,698,3.944,1045,2.058,1057,3.05,1088,4.309,1666,1.489,2904,1.944,2905,1.944,2909,3.553,2910,2.2,2911,3.153,2912,2.2,2913,3.153,2915,3.153,2916,3.305,3790,3.294,3792,5.305,3793,3.701]],["component/300",[443,1.181]],["title/301-1",[135,22.963,443,21.251,520,26.393,657,24.298]],["name/301-1",[]],["text/301-1",[]],["component/301-1",[]],["title/301-2",[259,29.601,443,24.845,1082,45.592]],["name/301-2",[]],["text/301-2",[]],["component/301-2",[]],["title/301",[216,37.139,535,39.317]],["name/301",[216,0.781,535,0.826]],["text/301",[3,1.6,5,2.333,13,3.209,24,2.271,27,3.246,50,2.578,52,1.693,57,3.411,63,3.104,74,1.635,93,2.136,109,2.879,114,2.568,122,2.655,125,3.814,135,3.495,215,2.9,216,2.666,221,2.406,226,1.675,238,3.196,255,2.823,259,2.558,266,3.529,279,3.324,303,2.666,321,2.43,333,2.404,335,2.32,390,2.285,399,2.814,404,4.406,438,2.292,443,4.648,458,4.406,490,3.737,492,2.78,494,4.182,495,4.012,504,3.874,505,2.678,520,2.666,535,2.823,629,3.273,645,2.767,700,4.092,703,2.32,995,3.532,1005,4.55,1007,3.572,1023,4.285,1042,3.874,1205,3.023,1316,4.092,1320,4.406,1666,1.724,1839,4.55,2656,4.55,3512,3.94,3798,4.182,3799,4.731,3800,4.731,3801,4.731,3802,4.731]],["component/301",[443,1.181]],["title/302-1",[222,25.902,226,23.333]],["name/302-1",[]],["text/302-1",[]],["component/302-1",[]],["title/302-2",[19,31.713,105,19.953,909,22.707]],["name/302-2",[]],["text/302-2",[]],["component/302-2",[]],["title/302",[9,12.054,11,10.134,443,21.251,451,37.204]],["name/302",[205,1.287]],["text/302",[3,2.643,9,2.612,11,2.438,80,3.415,96,2.759,105,2.849,222,3.073,226,2.768,235,3.567,261,3.432,435,3.81,443,5.112,655,4.162,909,3.243,941,4.739,1276,7.519,1277,7.519,1278,7.519,1279,6.511,3792,6.511]],["component/302",[443,1.181]],["title/303-1",[234,36.355,259,35.628]],["name/303-1",[]],["text/303-1",[]],["component/303-1",[]],["title/303-2",[389,41.355]],["name/303-2",[]],["text/303-2",[]],["component/303-2",[]],["title/303-3",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/303-3",[]],["text/303-3",[]],["component/303-3",[]],["title/303-4",[126,20.299,1032,30.391]],["name/303-4",[]],["text/303-4",[]],["component/303-4",[]],["title/303-5",[220,23.711,1039,26.676]],["name/303-5",[]],["text/303-5",[]],["component/303-5",[]],["title/303",[541,35.613]],["name/303",[541,1.06]],["text/303",[2,1.543,4,1.295,5,1.535,6,1.162,9,1.208,11,0.606,18,1.55,22,1.321,28,1.52,48,2.129,50,1.526,73,1.428,74,2.093,80,1.223,81,1.329,89,1.134,91,1.274,95,1.154,107,1.671,109,1.895,122,1.572,123,1.565,126,1.865,133,1.776,135,1.373,137,0.965,139,2.24,147,2.401,150,2.426,166,1.373,169,1.52,181,1.456,214,2.668,216,1.579,217,1.485,220,1.688,221,0.945,222,1.844,225,1.34,226,3.366,242,1.514,259,2.537,309,3.164,314,1.707,334,1.453,382,2.246,389,1.4,391,3.026,413,2.844,417,1.838,422,4.622,432,1.357,435,1.365,438,1.357,443,4.113,455,1.464,471,1.325,488,2.375,507,1.251,509,1.214,520,3.993,532,1.254,546,2.232,590,1.6,631,1.726,640,1.545,655,4.543,680,1.778,690,3.056,691,1.757,692,1.825,693,1.789,703,1.373,909,2.511,924,1.68,958,1.615,960,1.746,997,1.726,1032,2.164,1039,1.899,1120,1.593,1161,1.48,1243,2.829,1279,2.332,1386,1.767,1515,2.091,1889,1.726,2017,3.979,2074,1.508,2088,1.801,2818,1.767,2909,1.271,2967,1.85,2968,1.801,2980,3.798,3314,1.878,3315,3.169,3316,3.332,3534,2.332,3790,2.258,3794,2.422,3803,2.801,3804,2.801,3805,2.608,3806,2.801,3807,2.801,3808,2.801,3809,2.801,3810,2.801,3811,2.801]],["component/303",[443,1.181]],["title/304-1",[12,28.5,443,29.903]],["name/304-1",[]],["text/304-1",[]],["component/304-1",[]],["title/304-2",[12,28.5,476,45.214]],["name/304-2",[]],["text/304-2",[]],["component/304-2",[]],["title/304-3",[114,29.719,255,32.667,333,27.823]],["name/304-3",[]],["text/304-3",[]],["component/304-3",[]],["title/304-4",[374,33.375,707,35.628]],["name/304-4",[]],["text/304-4",[]],["component/304-4",[]],["title/304",[208,30.391,630,31.725]],["name/304",[3216,1.734]],["text/304",[2,0.925,3,1.592,4,2.809,6,1.953,8,1.793,11,1.537,12,4.119,13,1.266,18,2.007,30,1.159,48,1.276,73,3.097,74,0.972,81,2.881,91,3.232,93,3.206,95,1.159,96,1.662,112,1.263,115,2.235,126,0.866,133,2.992,135,1.379,137,1.622,149,1.092,150,2.435,166,1.379,181,2.819,208,2.801,215,1.724,226,0.996,233,1.475,256,1.886,259,2.546,303,4.003,325,3.314,333,2.393,405,2.377,415,2.62,419,0.994,438,2.281,441,1.094,443,4.638,462,1.429,464,2.235,466,1.734,470,1.637,476,6.792,488,3.993,489,2.705,504,2.303,505,1.592,507,2.104,508,1.629,509,2.041,514,1.188,518,1.18,526,3.438,532,1.26,541,1.211,584,1.734,631,1.734,655,1.497,690,1.42,691,1.764,692,1.833,693,1.797,756,2.235,1006,2.631,1161,2.488,1215,1.231,1247,3.375,1279,2.342,1326,1.734,1357,1.734,1388,3.69,2074,1.515,2806,3.375,3023,4.265,3187,3.796,3238,2.268,3239,2.204,3350,2.433,3393,2.705,3794,2.433,3805,2.619,3812,2.957,3813,4.95,3814,4.95,3815,2.957,3816,2.957,3817,2.957,3818,2.957]],["component/304",[443,1.181]],["title/305-1",[344,50.708]],["name/305-1",[]],["text/305-1",[]],["component/305-1",[]],["title/305-2",[374,33.375,707,35.628]],["name/305-2",[]],["text/305-2",[]],["component/305-2",[]],["title/305",[19,38.169,20,31.351]],["name/305",[205,1.287]],["text/305",[0,6.101,2,3.012,3,2.267,4,3.101,5,2.194,9,1.726,11,2.258,18,2.215,20,3.19,73,3.419,95,2.762,112,4.113,133,2.537,208,3.092,255,5.465,303,5.162,325,4.718,441,2.609,443,4.734,451,5.327,465,4.677,476,6.285,518,3.842,549,3.479,630,3.228,968,2.781,1357,4.132]],["component/305",[443,1.181]],["title/306-1",[9,16.962,11,14.261]],["name/306-1",[]],["text/306-1",[]],["component/306-1",[]],["title/306-2",[10,41.906]],["name/306-2",[]],["text/306-2",[]],["component/306-2",[]],["title/306-3",[968,34.315]],["name/306-3",[]],["text/306-3",[]],["component/306-3",[]],["title/306-4",[374,33.375,707,35.628]],["name/306-4",[]],["text/306-4",[]],["component/306-4",[]],["title/306",[2,27.205]],["name/306",[2,0.81]],["text/306",[2,3.718,3,2.537,5,3.04,6,1.586,9,2.663,10,4.705,11,2.539,12,3.688,13,1.722,18,1.264,24,2.903,26,1.978,39,2.545,46,3.337,48,1.736,89,1.548,91,1.74,96,2.134,133,1.448,134,1.74,138,2.492,149,2.349,181,1.187,221,2.042,226,1.354,235,1.745,251,2.319,255,2.282,303,2.156,372,3.84,387,2.029,401,2.939,405,1.931,415,2.128,432,1.853,443,4.867,449,3.308,476,2.624,630,1.841,722,2.102,802,2.476,927,2.102,968,4.096,983,3.455,1168,4.15,1215,1.675,1311,2.294,2270,2.768,2337,2.371,2545,2.46,3262,2.997,3819,4.021,3820,4.021]],["component/306",[443,1.181]],["title/307-1",[52,23.584,139,24.374]],["name/307-1",[]],["text/307-1",[]],["component/307-1",[]],["title/307-2",[1045,21.29,1666,24.015]],["name/307-2",[]],["text/307-2",[]],["component/307-2",[]],["title/307-3",[259,25.319,443,21.251,1082,38.996,3072,35.773]],["name/307-3",[]],["text/307-3",[]],["component/307-3",[]],["title/307",[]],["name/307",[2853,1.51]],["text/307",[3,1.764,8,2.919,9,1.974,11,1.967,18,1.724,52,1.868,74,3.141,133,1.975,137,1.797,139,1.93,147,2.67,169,2.832,178,1.813,220,1.878,221,2.588,237,2.994,321,3.099,379,3.625,419,1.844,443,4.125,471,2.468,490,2.273,514,4.713,698,4.479,703,3.76,709,3.146,968,3.18,1039,2.112,1045,2.937,1057,3.895,1382,3.61,1666,2.794,2904,2.483,2905,2.483,2906,2.789,3072,3.986,3790,4.207,3791,4.207]],["component/307",[443,1.181]],["title/308-1",[149,21.259,708,25.823,1215,23.97]],["name/308-1",[]],["text/308-1",[]],["component/308-1",[]],["title/308-2",[52,23.584,139,24.374]],["name/308-2",[]],["text/308-2",[]],["component/308-2",[]],["title/308-3",[1045,21.29,1666,24.015]],["name/308-3",[]],["text/308-3",[]],["component/308-3",[]],["title/308-4",[259,25.319,443,21.251,1082,38.996,3072,35.773]],["name/308-4",[]],["text/308-4",[]],["component/308-4",[]],["title/308-5",[220,23.711,1039,26.676]],["name/308-5",[]],["text/308-5",[]],["component/308-5",[]],["title/308-6",[2907,44.56]],["name/308-6",[]],["text/308-6",[]],["component/308-6",[]],["title/308-7",[2908,42.932]],["name/308-7",[]],["text/308-7",[]],["component/308-7",[]],["title/308-8",[3791,66.704]],["name/308-8",[]],["text/308-8",[]],["component/308-8",[]],["title/308",[126,25.488]],["name/308",[126,0.759]],["text/308",[3,0.931,5,0.901,8,2.277,9,2.011,11,2.256,18,1.528,52,0.986,57,2.214,74,2.924,96,1.632,105,2.554,133,1.042,136,2.006,137,2.414,139,1.019,147,1.409,149,1.069,169,1.495,178,1.607,181,3.312,220,1.665,221,3.035,237,1.58,321,2.885,379,3.375,399,1.826,419,1.635,422,1.404,443,4.455,471,1.303,490,2.015,514,4.403,526,1.559,596,1.932,698,4.229,703,2.268,708,1.299,709,1.66,968,1.919,993,2.501,1039,1.873,1045,2.524,1057,3.453,1088,3.415,1215,1.206,1382,1.905,1666,2.18,2904,2.201,2905,2.201,2906,1.472,2909,2.715,2910,1.483,2911,2.29,2912,1.483,2913,2.29,2915,2.29,2916,2.4,3072,2.104,3790,3.73,3791,2.22,3792,3.852,3793,2.494]],["component/308",[443,1.181]],["title/309-1",[89,33.495]],["name/309-1",[]],["text/309-1",[]],["component/309-1",[]],["title/309-2",[1006,46.229]],["name/309-2",[]],["text/309-2",[]],["component/309-2",[]],["title/309",[390,39.954]],["name/309",[390,1.19]],["text/309",[5,1.145,6,1.452,8,1.332,9,1.821,11,1.219,18,3.543,46,1.931,52,2.017,68,3.699,77,2.122,81,2.673,89,1.417,96,2.861,109,1.414,126,2.179,133,2.133,134,2.564,137,3.271,177,2.11,178,1.216,181,1.086,218,2.65,246,2.047,255,3.362,257,1.931,259,3.047,279,3.781,303,1.973,333,1.779,390,4.292,438,4.305,443,5.426,451,2.781,464,2.781,466,2.157,488,2.968,499,3.623,507,1.564,509,1.517,510,2.613,522,2.182,532,1.568,628,2.018,654,1.907,780,4.662,788,2.11,991,3.473,997,2.157,998,4.206,1045,2.285,1252,2.364,1302,2.222,1326,2.157,1541,2.281,3269,4.614,3270,2.742,3447,4.981,3794,3.027,3795,3.5,3796,3.5,3797,3.5]],["component/309",[443,1.181]],["title/310-1",[2907,44.56]],["name/310-1",[]],["text/310-1",[]],["component/310-1",[]],["title/310-2",[2908,42.932]],["name/310-2",[]],["text/310-2",[]],["component/310-2",[]],["title/310-3",[3791,66.704]],["name/310-3",[]],["text/310-3",[]],["component/310-3",[]],["title/310",[]],["name/310",[2917,1.545]],["text/310",[5,1.337,8,1.555,9,2.015,11,2.198,18,1.35,57,3.049,74,2.706,105,3.223,136,2.762,137,2.697,178,1.419,181,3.702,221,3.236,321,2.669,379,3.123,399,2.514,419,1.444,422,2.083,443,4.609,490,1.78,514,4.049,526,2.313,596,2.66,698,3.944,1045,2.058,1057,3.05,1088,4.309,1666,1.489,2904,1.944,2905,1.944,2909,3.553,2910,2.2,2911,3.153,2912,2.2,2913,3.153,2915,3.153,2916,3.305,3790,3.294,3792,5.305,3793,3.701]],["component/310",[443,1.181]],["title/311-1",[135,22.963,443,21.251,520,26.393,657,24.298]],["name/311-1",[]],["text/311-1",[]],["component/311-1",[]],["title/311-2",[259,29.601,443,24.845,1082,45.592]],["name/311-2",[]],["text/311-2",[]],["component/311-2",[]],["title/311",[216,37.139,535,39.317]],["name/311",[216,0.781,535,0.826]],["text/311",[3,1.6,5,2.333,13,3.209,24,2.271,27,3.246,50,2.578,52,1.693,57,3.411,63,3.104,74,1.635,93,2.136,109,2.879,114,2.568,122,2.655,125,3.814,135,3.495,215,2.9,216,2.666,221,2.406,226,1.675,238,3.196,255,2.823,259,2.558,266,3.529,279,3.324,303,2.666,321,2.43,333,2.404,335,2.32,390,2.285,399,2.814,404,4.406,438,2.292,443,4.648,458,4.406,490,3.737,492,2.78,494,4.182,495,4.012,504,3.874,505,2.678,520,2.666,535,2.823,629,3.273,645,2.767,700,4.092,703,2.32,995,3.532,1005,4.55,1007,3.572,1023,4.285,1042,3.874,1205,3.023,1316,4.092,1320,4.406,1666,1.724,1839,4.55,2656,4.55,3512,3.94,3798,4.182,3799,4.731,3800,4.731,3801,4.731,3802,4.731]],["component/311",[443,1.181]],["title/312-1",[222,25.902,226,23.333]],["name/312-1",[]],["text/312-1",[]],["component/312-1",[]],["title/312-2",[19,31.713,105,19.953,909,22.707]],["name/312-2",[]],["text/312-2",[]],["component/312-2",[]],["title/312",[9,12.054,11,10.134,443,21.251,451,37.204]],["name/312",[205,1.287]],["text/312",[3,2.643,9,2.612,11,2.438,80,3.415,96,2.759,105,2.849,222,3.073,226,2.768,235,3.567,261,3.432,435,3.81,443,5.112,655,4.162,909,3.243,941,4.739,1276,7.519,1277,7.519,1278,7.519,1279,6.511,3792,6.511]],["component/312",[443,1.181]],["title/313-1",[968,34.315]],["name/313-1",[]],["text/313-1",[]],["component/313-1",[]],["title/313-2",[105,30.154]],["name/313-2",[]],["text/313-2",[]],["component/313-2",[]],["title/313-3",[11,11.848,51,29.259,234,30.206]],["name/313-3",[]],["text/313-3",[]],["component/313-3",[]],["title/313",[2,27.205]],["name/313",[2,0.81]],["text/313",[2,3.115,3,2.997,4,1.61,5,1.139,9,2.439,11,2.477,12,3.496,13,1.567,24,1.671,36,1.921,51,2.999,57,1.666,71,2.899,80,1.52,91,2.553,95,1.434,105,3.453,109,2.847,116,2.158,136,1.509,137,1.199,149,1.352,181,3.218,208,1.606,209,2.088,218,1.637,220,1.253,221,2.379,234,1.921,235,2.56,282,2.134,315,2.099,318,2.317,358,2.146,372,2.21,387,1.846,401,1.691,405,1.757,432,2.718,443,4.522,475,2.269,501,1.937,546,1.656,565,2.224,596,1.454,634,2.284,645,2.036,887,2.628,891,3.85,909,1.444,927,1.913,968,3.929,1037,2.352,1088,1.697,1120,1.98,1161,1.84,1310,2.3,1311,2.088,1326,2.146,1451,2.693,2295,3.242,2732,3.077,2792,2.389,2911,1.723,2913,1.723,2915,1.723,3792,4.672,3821,3.93,3822,3.93]],["component/313",[443,1.181]],["title/314-1",[234,36.355,259,35.628]],["name/314-1",[]],["text/314-1",[]],["component/314-1",[]],["title/314-2",[389,41.355]],["name/314-2",[]],["text/314-2",[]],["component/314-2",[]],["title/314-3",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/314-3",[]],["text/314-3",[]],["component/314-3",[]],["title/314-4",[126,20.299,1032,30.391]],["name/314-4",[]],["text/314-4",[]],["component/314-4",[]],["title/314-5",[220,23.711,1039,26.676]],["name/314-5",[]],["text/314-5",[]],["component/314-5",[]],["title/314",[541,35.613]],["name/314",[541,1.06]],["text/314",[2,1.543,4,1.295,5,1.535,6,1.162,9,1.208,11,0.606,18,1.55,22,1.321,28,1.52,48,2.129,50,1.526,73,1.428,74,2.093,80,1.223,81,1.329,89,1.134,91,1.274,95,1.154,107,1.671,109,1.895,122,1.572,123,1.565,126,1.865,133,1.776,135,1.373,137,0.965,139,2.24,147,2.401,150,2.426,166,1.373,169,1.52,181,1.456,214,2.668,216,1.579,217,1.485,220,1.688,221,0.945,222,1.844,225,1.34,226,3.366,242,1.514,259,2.537,309,3.164,314,1.707,334,1.453,382,2.246,389,1.4,391,3.026,413,2.844,417,1.838,422,4.622,432,1.357,435,1.365,438,1.357,443,4.113,455,1.464,471,1.325,488,2.375,507,1.251,509,1.214,520,3.993,532,1.254,546,2.232,590,1.6,631,1.726,640,1.545,655,4.543,680,1.778,690,3.056,691,1.757,692,1.825,693,1.789,703,1.373,909,2.511,924,1.68,958,1.615,960,1.746,997,1.726,1032,2.164,1039,1.899,1120,1.593,1161,1.48,1243,2.829,1279,2.332,1386,1.767,1515,2.091,1889,1.726,2017,3.979,2074,1.508,2088,1.801,2818,1.767,2909,1.271,2967,1.85,2968,1.801,2980,3.798,3314,1.878,3315,3.169,3316,3.332,3534,2.332,3790,2.258,3794,2.422,3803,2.801,3804,2.801,3805,2.608,3806,2.801,3807,2.801,3808,2.801,3809,2.801,3810,2.801,3811,2.801]],["component/314",[443,1.181]],["title/315-1",[52,23.584,139,24.374]],["name/315-1",[]],["text/315-1",[]],["component/315-1",[]],["title/315-2",[1045,21.29,1666,24.015]],["name/315-2",[]],["text/315-2",[]],["component/315-2",[]],["title/315-3",[259,25.319,443,21.251,1082,38.996,3072,35.773]],["name/315-3",[]],["text/315-3",[]],["component/315-3",[]],["title/315",[]],["name/315",[2853,1.51]],["text/315",[3,1.764,8,2.919,9,1.974,11,1.967,18,1.724,52,1.868,74,3.141,133,1.975,137,1.797,139,1.93,147,2.67,169,2.832,178,1.813,220,1.878,221,2.588,237,2.994,321,3.099,379,3.625,419,1.844,443,4.125,471,2.468,490,2.273,514,4.713,698,4.479,703,3.76,709,3.146,968,3.18,1039,2.112,1045,2.937,1057,3.895,1382,3.61,1666,2.794,2904,2.483,2905,2.483,2906,2.789,3072,3.986,3790,4.207,3791,4.207]],["component/315",[443,1.181]],["title/316-1",[149,21.259,708,25.823,1215,23.97]],["name/316-1",[]],["text/316-1",[]],["component/316-1",[]],["title/316-2",[52,23.584,139,24.374]],["name/316-2",[]],["text/316-2",[]],["component/316-2",[]],["title/316-3",[1045,21.29,1666,24.015]],["name/316-3",[]],["text/316-3",[]],["component/316-3",[]],["title/316-4",[259,25.319,443,21.251,1082,38.996,3072,35.773]],["name/316-4",[]],["text/316-4",[]],["component/316-4",[]],["title/316-5",[220,23.711,1039,26.676]],["name/316-5",[]],["text/316-5",[]],["component/316-5",[]],["title/316-6",[2907,44.56]],["name/316-6",[]],["text/316-6",[]],["component/316-6",[]],["title/316-7",[2908,42.932]],["name/316-7",[]],["text/316-7",[]],["component/316-7",[]],["title/316-8",[3791,66.704]],["name/316-8",[]],["text/316-8",[]],["component/316-8",[]],["title/316",[126,25.488]],["name/316",[126,0.759]],["text/316",[3,0.931,5,0.901,8,2.277,9,2.011,11,2.256,18,1.528,52,0.986,57,2.214,74,2.924,96,1.632,105,2.554,133,1.042,136,2.006,137,2.414,139,1.019,147,1.409,149,1.069,169,1.495,178,1.607,181,3.312,220,1.665,221,3.035,237,1.58,321,2.885,379,3.375,399,1.826,419,1.635,422,1.404,443,4.455,471,1.303,490,2.015,514,4.403,526,1.559,596,1.932,698,4.229,703,2.268,708,1.299,709,1.66,968,1.919,993,2.501,1039,1.873,1045,2.524,1057,3.453,1088,3.415,1215,1.206,1382,1.905,1666,2.18,2904,2.201,2905,2.201,2906,1.472,2909,2.715,2910,1.483,2911,2.29,2912,1.483,2913,2.29,2915,2.29,2916,2.4,3072,2.104,3790,3.73,3791,2.22,3792,3.852,3793,2.494]],["component/316",[443,1.181]],["title/317-1",[89,33.495]],["name/317-1",[]],["text/317-1",[]],["component/317-1",[]],["title/317-2",[1006,46.229]],["name/317-2",[]],["text/317-2",[]],["component/317-2",[]],["title/317",[390,39.954]],["name/317",[390,1.19]],["text/317",[5,1.145,6,1.452,8,1.332,9,1.821,11,1.219,18,3.543,46,1.931,52,2.017,68,3.699,77,2.122,81,2.673,89,1.417,96,2.861,109,1.414,126,2.179,133,2.133,134,2.564,137,3.271,177,2.11,178,1.216,181,1.086,218,2.65,246,2.047,255,3.362,257,1.931,259,3.047,279,3.781,303,1.973,333,1.779,390,4.292,438,4.305,443,5.426,451,2.781,464,2.781,466,2.157,488,2.968,499,3.623,507,1.564,509,1.517,510,2.613,522,2.182,532,1.568,628,2.018,654,1.907,780,4.662,788,2.11,991,3.473,997,2.157,998,4.206,1045,2.285,1252,2.364,1302,2.222,1326,2.157,1541,2.281,3269,4.614,3270,2.742,3447,4.981,3794,3.027,3795,3.5,3796,3.5,3797,3.5]],["component/317",[443,1.181]],["title/318-1",[2907,44.56]],["name/318-1",[]],["text/318-1",[]],["component/318-1",[]],["title/318-2",[2908,42.932]],["name/318-2",[]],["text/318-2",[]],["component/318-2",[]],["title/318-3",[3791,66.704]],["name/318-3",[]],["text/318-3",[]],["component/318-3",[]],["title/318",[]],["name/318",[2917,1.545]],["text/318",[5,1.337,8,1.555,9,2.015,11,2.198,18,1.35,57,3.049,74,2.706,105,3.223,136,2.762,137,2.697,178,1.419,181,3.702,221,3.236,321,2.669,379,3.123,399,2.514,419,1.444,422,2.083,443,4.609,490,1.78,514,4.049,526,2.313,596,2.66,698,3.944,1045,2.058,1057,3.05,1088,4.309,1666,1.489,2904,1.944,2905,1.944,2909,3.553,2910,2.2,2911,3.153,2912,2.2,2913,3.153,2915,3.153,2916,3.305,3790,3.294,3792,5.305,3793,3.701]],["component/318",[443,1.181]],["title/319-1",[135,22.963,443,21.251,520,26.393,657,24.298]],["name/319-1",[]],["text/319-1",[]],["component/319-1",[]],["title/319-2",[259,29.601,443,24.845,1082,45.592]],["name/319-2",[]],["text/319-2",[]],["component/319-2",[]],["title/319",[216,37.139,535,39.317]],["name/319",[216,0.781,535,0.826]],["text/319",[3,1.6,5,2.333,13,3.209,24,2.271,27,3.246,50,2.578,52,1.693,57,3.411,63,3.104,74,1.635,93,2.136,109,2.879,114,2.568,122,2.655,125,3.814,135,3.495,215,2.9,216,2.666,221,2.406,226,1.675,238,3.196,255,2.823,259,2.558,266,3.529,279,3.324,303,2.666,321,2.43,333,2.404,335,2.32,390,2.285,399,2.814,404,4.406,438,2.292,443,4.648,458,4.406,490,3.737,492,2.78,494,4.182,495,4.012,504,3.874,505,2.678,520,2.666,535,2.823,629,3.273,645,2.767,700,4.092,703,2.32,995,3.532,1005,4.55,1007,3.572,1023,4.285,1042,3.874,1205,3.023,1316,4.092,1320,4.406,1666,1.724,1839,4.55,2656,4.55,3512,3.94,3798,4.182,3799,4.731,3800,4.731,3801,4.731,3802,4.731]],["component/319",[443,1.181]],["title/320-1",[222,25.902,226,23.333]],["name/320-1",[]],["text/320-1",[]],["component/320-1",[]],["title/320-2",[19,31.713,105,19.953,909,22.707]],["name/320-2",[]],["text/320-2",[]],["component/320-2",[]],["title/320",[9,12.054,11,10.134,443,21.251,451,37.204]],["name/320",[205,1.287]],["text/320",[3,2.643,9,2.612,11,2.438,80,3.415,96,2.759,105,2.849,222,3.073,226,2.768,235,3.567,261,3.432,435,3.81,443,5.112,655,4.162,909,3.243,941,4.739,1276,7.519,1277,7.519,1278,7.519,1279,6.511,3792,6.511]],["component/320",[443,1.181]],["title/321-1",[234,36.355,259,35.628]],["name/321-1",[]],["text/321-1",[]],["component/321-1",[]],["title/321-2",[389,41.355]],["name/321-2",[]],["text/321-2",[]],["component/321-2",[]],["title/321-3",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/321-3",[]],["text/321-3",[]],["component/321-3",[]],["title/321-4",[126,20.299,1032,30.391]],["name/321-4",[]],["text/321-4",[]],["component/321-4",[]],["title/321-5",[220,23.711,1039,26.676]],["name/321-5",[]],["text/321-5",[]],["component/321-5",[]],["title/321",[541,35.613]],["name/321",[541,1.06]],["text/321",[2,1.543,4,1.295,5,1.535,6,1.162,9,1.208,11,0.606,18,1.55,22,1.321,28,1.52,48,2.129,50,1.526,73,1.428,74,2.093,80,1.223,81,1.329,89,1.134,91,1.274,95,1.154,107,1.671,109,1.895,122,1.572,123,1.565,126,1.865,133,1.776,135,1.373,137,0.965,139,2.24,147,2.401,150,2.426,166,1.373,169,1.52,181,1.456,214,2.668,216,1.579,217,1.485,220,1.688,221,0.945,222,1.844,225,1.34,226,3.366,242,1.514,259,2.537,309,3.164,314,1.707,334,1.453,382,2.246,389,1.4,391,3.026,413,2.844,417,1.838,422,4.622,432,1.357,435,1.365,438,1.357,443,4.113,455,1.464,471,1.325,488,2.375,507,1.251,509,1.214,520,3.993,532,1.254,546,2.232,590,1.6,631,1.726,640,1.545,655,4.543,680,1.778,690,3.056,691,1.757,692,1.825,693,1.789,703,1.373,909,2.511,924,1.68,958,1.615,960,1.746,997,1.726,1032,2.164,1039,1.899,1120,1.593,1161,1.48,1243,2.829,1279,2.332,1386,1.767,1515,2.091,1889,1.726,2017,3.979,2074,1.508,2088,1.801,2818,1.767,2909,1.271,2967,1.85,2968,1.801,2980,3.798,3314,1.878,3315,3.169,3316,3.332,3534,2.332,3790,2.258,3794,2.422,3803,2.801,3804,2.801,3805,2.608,3806,2.801,3807,2.801,3808,2.801,3809,2.801,3810,2.801,3811,2.801]],["component/321",[443,1.181]],["title/322-1",[12,28.5,443,29.903]],["name/322-1",[]],["text/322-1",[]],["component/322-1",[]],["title/322-2",[12,28.5,476,45.214]],["name/322-2",[]],["text/322-2",[]],["component/322-2",[]],["title/322-3",[114,29.719,255,32.667,333,27.823]],["name/322-3",[]],["text/322-3",[]],["component/322-3",[]],["title/322-4",[374,33.375,707,35.628]],["name/322-4",[]],["text/322-4",[]],["component/322-4",[]],["title/322",[208,30.391,630,31.725]],["name/322",[3216,1.734]],["text/322",[2,0.925,3,1.592,4,2.809,6,1.953,8,1.793,11,1.537,12,4.119,13,1.266,18,2.007,30,1.159,48,1.276,73,3.097,74,0.972,81,2.881,91,3.232,93,3.206,95,1.159,96,1.662,112,1.263,115,2.235,126,0.866,133,2.992,135,1.379,137,1.622,149,1.092,150,2.435,166,1.379,181,2.819,208,2.801,215,1.724,226,0.996,233,1.475,256,1.886,259,2.546,303,4.003,325,3.314,333,2.393,405,2.377,415,2.62,419,0.994,438,2.281,441,1.094,443,4.638,462,1.429,464,2.235,466,1.734,470,1.637,476,6.792,488,3.993,489,2.705,504,2.303,505,1.592,507,2.104,508,1.629,509,2.041,514,1.188,518,1.18,526,3.438,532,1.26,541,1.211,584,1.734,631,1.734,655,1.497,690,1.42,691,1.764,692,1.833,693,1.797,756,2.235,1006,2.631,1161,2.488,1215,1.231,1247,3.375,1279,2.342,1326,1.734,1357,1.734,1388,3.69,2074,1.515,2806,3.375,3023,4.265,3187,3.796,3238,2.268,3239,2.204,3350,2.433,3393,2.705,3794,2.433,3805,2.619,3812,2.957,3813,4.95,3814,4.95,3815,2.957,3816,2.957,3817,2.957,3818,2.957]],["component/322",[443,1.181]],["title/323-1",[344,50.708]],["name/323-1",[]],["text/323-1",[]],["component/323-1",[]],["title/323-2",[374,33.375,707,35.628]],["name/323-2",[]],["text/323-2",[]],["component/323-2",[]],["title/323",[19,38.169,20,31.351]],["name/323",[205,1.287]],["text/323",[0,6.101,2,3.012,3,2.267,4,3.101,5,2.194,9,1.726,11,2.258,18,2.215,20,3.19,73,3.419,95,2.762,112,4.113,133,2.537,208,3.092,255,5.465,303,5.162,325,4.718,441,2.609,443,4.734,451,5.327,465,4.677,476,6.285,518,3.842,549,3.479,630,3.228,968,2.781,1357,4.132]],["component/323",[443,1.181]],["title/324-1",[9,16.962,11,14.261]],["name/324-1",[]],["text/324-1",[]],["component/324-1",[]],["title/324-2",[10,41.906]],["name/324-2",[]],["text/324-2",[]],["component/324-2",[]],["title/324-3",[968,34.315]],["name/324-3",[]],["text/324-3",[]],["component/324-3",[]],["title/324-4",[374,33.375,707,35.628]],["name/324-4",[]],["text/324-4",[]],["component/324-4",[]],["title/324",[2,27.205]],["name/324",[2,0.81]],["text/324",[2,3.718,3,2.537,5,3.04,6,1.586,9,2.663,10,4.705,11,2.539,12,3.688,13,1.722,18,1.264,24,2.903,26,1.978,39,2.545,46,3.337,48,1.736,89,1.548,91,1.74,96,2.134,133,1.448,134,1.74,138,2.492,149,2.349,181,1.187,221,2.042,226,1.354,235,1.745,251,2.319,255,2.282,303,2.156,372,3.84,387,2.029,401,2.939,405,1.931,415,2.128,432,1.853,443,4.867,449,3.308,476,2.624,630,1.841,722,2.102,802,2.476,927,2.102,968,4.096,983,3.455,1168,4.15,1215,1.675,1311,2.294,2270,2.768,2337,2.371,2545,2.46,3262,2.997,3819,4.021,3820,4.021]],["component/324",[443,1.181]],["title/325-1",[1045,21.29,1666,24.015]],["name/325-1",[]],["text/325-1",[]],["component/325-1",[]],["title/325",[]],["name/325",[2853,1.51]],["text/325",[8,3.954,9,2.087,11,2.248,74,2.802,178,2.816,201,3.64,221,2.736,321,2.764,379,3.233,419,2.866,514,4.387,542,3.915,698,4.033,1045,3.703,1666,3.785]],["component/325",[201,0.662,542,0.711]],["title/326-1",[149,21.259,708,25.823,1215,23.97]],["name/326-1",[]],["text/326-1",[]],["component/326-1",[]],["title/326-2",[1045,21.29,1666,24.015]],["name/326-2",[]],["text/326-2",[]],["component/326-2",[]],["title/326-3",[220,23.711,1039,26.676]],["name/326-3",[]],["text/326-3",[]],["component/326-3",[]],["title/326-4",[2908,42.932]],["name/326-4",[]],["text/326-4",[]],["component/326-4",[]],["title/326",[126,25.488]],["name/326",[126,0.759]],["text/326",[8,3.279,9,1.845,11,2.424,57,2.281,74,2.477,96,2.529,105,2.612,136,2.066,137,1.641,149,1.85,178,2.49,181,3.35,201,3.868,220,1.715,221,2.908,321,2.443,379,2.858,399,1.881,419,2.533,514,4.047,542,4.627,596,1.99,698,3.721,708,2.248,993,3.875,1039,1.929,1045,3.319,1088,3.493,1215,2.086,1666,3.139,2212,3.297,2909,2.163,2911,2.359,2913,2.359,2915,2.359,2916,3.719]],["component/326",[201,0.662,542,0.711]],["title/327-1",[2908,42.932]],["name/327-1",[]],["text/327-1",[]],["component/327-1",[]],["title/327",[]],["name/327",[2917,1.545]],["text/327",[8,2.383,9,1.611,11,2.177,57,2.995,74,2.163,105,3.183,136,2.714,137,2.156,178,2.174,181,3.682,201,3.922,221,2.948,321,2.134,379,2.496,399,2.47,419,2.212,514,3.689,542,4.858,596,2.613,698,3.392,1045,2.822,1088,4.257,1666,2.281,2212,4.33,2909,2.84,2911,3.098,2913,3.098,2915,3.098,2916,4.532]],["component/327",[201,0.662,542,0.711]],["title/328-1",[222,25.902,226,23.333]],["name/328-1",[]],["text/328-1",[]],["component/328-1",[]],["title/328-2",[19,31.713,105,19.953,909,22.707]],["name/328-2",[]],["text/328-2",[]],["component/328-2",[]],["title/328",[3,13.831,9,10.531,11,8.853,14,14.801,201,18.371]],["name/328",[205,1.287]],["text/328",[3,3.683,9,2.497,11,2.357,14,3.509,18,2.412,80,3.188,96,2.575,105,2.66,201,4.891,222,2.869,226,2.584,235,3.33,261,3.203,435,3.557,542,3.524,909,3.027,941,4.424,1280,8.573,1281,8.388,1282,5.719,2212,5.049]],["component/328",[201,0.662,542,0.711]],["title/329-1",[968,34.315]],["name/329-1",[]],["text/329-1",[]],["component/329-1",[]],["title/329-2",[11,11.848,51,29.259,234,30.206]],["name/329-2",[]],["text/329-2",[]],["component/329-2",[]],["title/329-3",[194,38.351,3823,65.895]],["name/329-3",[]],["text/329-3",[]],["component/329-3",[]],["title/329-4",[89,33.495]],["name/329-4",[]],["text/329-4",[]],["component/329-4",[]],["title/329",[2,27.205]],["name/329",[2,0.81]],["text/329",[2,3.014,3,2.62,4,1.499,5,1.733,9,1.995,11,2.324,12,3.352,13,1.459,14,2.429,20,1.542,24,3.222,51,1.732,64,1.819,80,1.416,89,1.312,90,2.804,91,1.475,92,2.281,93,1.463,94,1.998,95,1.335,105,1.181,109,2.139,114,1.76,116,2.009,133,1.227,151,1.713,155,3.587,164,1.934,166,1.59,178,1.126,201,4.688,208,1.495,215,1.987,217,1.719,218,1.525,221,2.616,234,1.788,235,2.416,252,2.157,257,1.788,286,1.7,307,1.954,315,1.954,318,2.157,320,2.855,321,2.289,358,1.998,363,2.173,381,2.281,387,1.719,401,1.575,405,1.636,415,1.803,418,2.447,432,1.57,492,3.112,501,1.803,519,2.699,527,2.447,542,2.557,546,1.542,548,3.601,563,1.781,584,3.264,628,1.869,645,1.896,648,2.281,706,3.019,722,1.781,909,1.344,927,1.781,950,2.224,968,3.802,1011,2.749,1037,2.19,1158,2.071,1161,1.713,1233,2.865,1310,2.142,1311,1.944,2792,2.224,3034,2.575,3824,3.242,3825,3.242,3826,3.242,3827,3.242]],["component/329",[201,0.662,542,0.711]],["title/330-1",[1,58.751]],["name/330-1",[]],["text/330-1",[]],["component/330-1",[]],["title/330-2",[320,28.028,550,45.585]],["name/330-2",[]],["text/330-2",[]],["component/330-2",[]],["title/330-3",[548,25.122,732,38.347,909,19.422,3828,38.996]],["name/330-3",[]],["text/330-3",[]],["component/330-3",[]],["title/330-4",[320,28.028,563,36.205]],["name/330-4",[]],["text/330-4",[]],["component/330-4",[]],["title/330-5",[201,16.31,321,12.382,322,23.509,466,22.385,660,23.355,1651,28.46]],["name/330-5",[]],["text/330-5",[]],["component/330-5",[]],["title/330",[320,28.028,548,35.351]],["name/330",[3829,2.294]],["text/330",[0,0.483,1,0.586,2,0.731,3,1.455,5,0.511,6,1.598,9,1.108,11,0.727,14,1.216,18,1.273,22,1.048,24,0.75,30,0.34,36,0.455,51,0.441,60,0.515,61,0.553,67,0.562,73,1.133,74,0.54,77,0.947,78,1.047,82,2.406,84,0.631,89,1.36,91,0.376,92,1.099,93,0.373,94,0.509,95,0.34,96,0.784,98,0.862,100,0.545,105,0.569,106,0.571,109,0.898,110,0.61,113,0.631,114,0.448,124,0.576,133,0.312,134,2.146,136,0.358,137,2.663,151,0.825,155,1.188,171,2.665,172,0.835,178,1.167,181,0.256,194,0.48,201,3.707,216,0.88,221,1.3,222,0.324,226,1.19,235,0.713,237,0.896,247,3.061,250,0.459,252,1.039,257,0.455,259,2.083,266,0.773,277,1.099,279,0.728,283,1.072,286,1.166,317,0.656,320,3.512,321,1.608,322,1.825,332,0.676,333,0.42,335,0.405,351,0.558,372,0.524,379,0.329,381,0.581,382,0.747,387,0.438,392,0.666,409,0.656,411,1.141,412,0.7,416,0.781,419,1.188,428,0.631,439,2.804,455,1.162,462,1.707,466,3.143,471,1.051,482,1.166,490,0.968,492,0.918,496,0.534,501,1.237,507,1.721,508,0.905,509,1.67,510,3.075,516,2.015,523,1.08,528,0.5,532,2.113,537,1.501,542,0.754,543,2.876,547,2.553,548,4.94,550,2.324,556,1.109,558,1.153,560,0.531,562,1.851,563,2.802,564,0.687,566,0.597,568,1.224,569,1.224,570,0.7,571,1.347,575,1.825,576,1.039,587,0.687,590,0.892,596,0.652,600,0.562,601,0.647,613,0.592,621,0.623,640,0.455,645,0.483,647,3.448,660,1.004,663,2.275,674,0.571,677,1.137,678,0.531,694,0.61,696,0.592,703,0.405,708,0.389,709,0.498,732,1.82,764,0.603,772,0.509,783,2.602,787,0.616,892,0.647,909,2.523,915,0.597,921,2.39,950,2.305,955,0.748,957,0.538,960,0.515,966,1.129,969,0.518,983,0.472,1006,0.461,1012,0.687,1030,1.351,1036,0.638,1038,0.748,1045,0.505,1081,1.279,1109,0.748,1124,0.542,1154,0.576,1160,0.592,1190,0.714,1238,0.947,1281,1.922,1282,0.647,1300,0.558,1308,0.647,1309,0.631,1360,2.201,1453,1.904,1530,0.61,1556,1.193,1580,0.73,1600,1.301,1651,0.647,1655,0.714,1670,0.581,1691,0.638,1695,0.542,1699,0.603,1712,0.638,1735,0.666,1794,0.714,1817,1.381,1849,1.119,1963,3.061,2074,0.445,2201,1.719,2203,1.82,2210,2.153,2211,2.599,2212,1.08,2267,0.748,2279,0.592,2408,0.7,2434,1.502,2629,0.603,2806,0.592,2897,2.876,2898,2.508,2962,2.688,3038,0.7,3039,0.7,3040,1.742,3082,0.647,3083,1.153,3084,0.647,3085,1.742,3087,1.742,3088,1.742,3089,3.019,3828,0.687,3830,0.769,3831,0.769,3832,0.769,3833,0.769,3834,0.769,3835,0.769,3836,2.07,3837,1.454,3838,0.769,3839,0.769,3840,2.336,3841,1.301,3842,0.687,3843,0.769,3844,0.687,3845,0.868,3846,1.301,3847,1.301,3848,0.687,3849,0.687,3850,0.687,3851,0.687,3852,1.301,3853,1.301,3854,1.301,3855,1.301,3856,1.301,3857,1.301,3858,1.301,3859,2.553,3860,2.553,3861,2.553,3862,2.553,3863,1.301,3864,5.066,3865,3.208,3866,0.687,3867,0.769,3868,0.769,3869,0.769,3870,0.769,3871,0.769,3872,0.769,3873,0.769,3874,0.769,3875,0.687,3876,0.687]],["component/330",[201,0.662,542,0.711]],["title/331-1",[1,58.751]],["name/331-1",[]],["text/331-1",[]],["component/331-1",[]],["title/331",[1164,63.206]],["name/331",[1164,1.882]],["text/331",[2,1.638,3,1.684,11,1.914,13,3.336,18,2.448,25,4.271,62,3.143,80,2.176,95,2.052,133,3.707,137,2.552,201,5.243,204,2.683,218,2.343,221,1.681,266,2.466,275,4.619,335,2.443,399,1.966,401,2.42,422,5.339,462,2.532,490,3.228,493,4.079,542,3.578,548,3.975,554,7.243,599,3.224,950,6.069,952,3.761,968,3.073,1158,3.183,1164,3.805,1360,5.053,1901,4.016,2279,3.57,2350,3.903,2962,3.475,3391,6.899,3877,4.639,3878,4.148]],["component/331",[201,0.662,542,0.711]],["title/332-1",[14,16.942,133,17.722,201,21.029,548,25.122]],["name/332-1",[]],["text/332-1",[]],["component/332-1",[]],["title/332-2",[89,33.495]],["name/332-2",[]],["text/332-2",[]],["component/332-2",[]],["title/332-3",[155,21.863,284,28.301,677,20.933,969,25.659,3083,30.211]],["name/332-3",[]],["text/332-3",[]],["component/332-3",[]],["title/332-4",[155,14.521,284,18.798,399,10.725,546,12.928,596,11.346,677,13.904,969,17.043,3083,20.067,3879,25.303]],["name/332-4",[]],["text/332-4",[]],["component/332-4",[]],["title/332-5",[155,19.41,284,25.125,677,18.584,969,22.78,1470,26.282,3880,26.03]],["name/332-5",[]],["text/332-5",[]],["component/332-5",[]],["title/332-6",[155,17.451,172,17.451,279,15.229,677,16.709,969,20.482,1470,23.63,3880,23.404]],["name/332-6",[]],["text/332-6",[]],["component/332-6",[]],["title/332-7",[126,6.686,155,11.6,178,7.54,279,10.122,399,8.567,548,11.645,677,11.106,969,13.614,1033,13.697,1470,15.707,2065,16.204,3880,15.557]],["name/332-7",[]],["text/332-7",[]],["component/332-7",[]],["title/332-8",[382,26.202,416,27.365,420,33.744]],["name/332-8",[]],["text/332-8",[]],["component/332-8",[]],["title/332-9",[432,26.518,2065,40.871,3881,50.982]],["name/332-9",[]],["text/332-9",[]],["component/332-9",[]],["title/332",[541,35.613]],["name/332",[541,1.06]],["text/332",[2,0.538,3,0.427,4,0.207,5,0.864,6,1.338,8,0.481,9,0.115,11,0.097,12,0.193,14,0.457,18,1.241,22,0.211,23,0.324,25,0.258,30,0.357,33,0.754,48,0.203,56,0.372,67,2.196,68,1.342,73,1.346,74,0.566,75,0.355,82,2.69,89,1.069,91,0.204,93,0.739,95,0.957,96,0.578,97,0.379,98,0.903,105,0.163,106,0.309,109,0.939,112,0.201,122,0.251,126,0.994,133,0.328,134,1.822,135,0.803,136,0.71,137,2.88,150,0.846,151,1.228,154,0.263,155,2.008,164,0.977,166,0.219,171,1.438,172,2.008,176,1.02,178,0.691,180,0.324,181,0.618,201,3.175,204,0.241,208,0.206,217,1.233,220,0.161,221,0.293,222,0.341,223,1.328,225,1.916,226,1.041,235,0.204,236,0.315,237,1.142,238,0.302,248,0.33,255,0.267,257,0.479,259,1.891,266,0.626,275,1.021,279,1.231,284,0.309,317,0.355,320,2.729,321,0.9,322,1.709,332,1.035,335,0.219,350,0.634,351,0.586,360,0.3,382,1.112,387,0.237,388,0.214,392,1.019,399,0.646,401,0.217,405,0.226,411,1.197,416,2.232,418,0.338,419,1.499,420,3.134,432,0.42,435,0.616,438,0.612,439,2.102,441,0.492,455,1.04,462,1.778,466,0.779,467,0.35,470,0.26,471,1.099,482,1.486,490,0.713,491,0.342,492,0.51,496,0.29,505,0.491,507,1.441,508,0.259,509,1.275,510,3.04,516,2.401,518,0.687,521,0.68,522,0.788,523,1.429,526,0.253,532,1.317,537,1.987,539,0.565,542,0.61,543,2.409,548,4.441,558,2.172,563,3.885,571,2.427,573,0.346,575,2.744,576,1.757,591,0.767,593,0.366,596,2.422,597,0.361,600,0.591,640,0.479,641,0.562,647,3.099,648,0.315,654,0.244,663,2.637,667,0.302,677,0.838,680,0.802,702,1.502,703,0.425,704,1.57,709,0.987,710,0.334,713,0.99,723,0.284,741,1.677,742,0.906,744,0.277,746,0.766,761,0.366,764,1.454,775,0.274,780,0.235,783,3.162,785,0.255,788,0.762,909,1.338,932,0.324,935,0.605,941,0.526,950,1.595,958,0.258,966,0.227,969,2.194,995,0.334,1032,0.206,1033,1.256,1036,0.346,1045,0.643,1052,1.657,1081,1.63,1124,0.293,1158,0.286,1161,0.236,1191,2.129,1205,0.286,1280,1.117,1281,2.544,1282,0.68,1304,0.321,1314,0.355,1324,0.293,1360,3.013,1453,2.538,1470,0.324,1501,0.346,1695,1.074,1699,0.327,1740,0.372,1796,0.35,1808,2.305,1831,0.355,1849,2.507,1853,0.965,1889,0.276,1963,2.779,1981,0.387,2065,3.333,2074,0.467,2192,0.405,2201,2.042,2203,2.865,2210,2.247,2211,1.797,2212,1.133,2279,1.173,2331,0.372,2333,0.387,2368,0.395,2434,1.574,2629,0.327,2799,0.355,2897,2.989,2898,2.989,2962,3.93,2969,0.324,2970,0.334,3040,1.559,3082,1.283,3084,0.68,3085,2.069,3087,1.821,3088,1.821,3089,3.138,3302,0.395,3303,0.395,3533,0.767,3840,2.443,3841,1.363,3842,0.723,3844,0.723,3845,0.912,3846,1.363,3847,1.052,3848,0.723,3849,1.363,3850,0.372,3851,0.372,3852,1.363,3853,1.363,3854,1.363,3855,1.363,3856,1.657,3857,1.363,3858,1.657,3859,3.169,3860,3.169,3861,3.169,3862,3.169,3863,1.657,3864,4.235,3865,1.363,3866,1.363,3875,0.372,3876,0.723,3878,0.372,3880,0.622,3882,0.447,3883,0.808,3884,0.447,3885,0.447,3886,0.447,3887,0.417,3888,0.417,3889,0.417,3890,0.417,3891,0.417,3892,0.417,3893,0.417,3894,0.505,3895,1.177,3896,0.417,3897,0.417,3898,0.808,3899,0.417,3900,0.395,3901,0.417,3902,0.395,3903,0.417,3904,0.417,3905,0.417,3906,0.395,3907,0.417,3908,0.417,3909,0.417,3910,0.417,3911,0.417,3912,0.417,3913,0.417,3914,0.417,3915,0.417,3916,0.417,3917,0.417,3918,0.417,3919,0.417,3920,0.417,3921,0.417,3922,0.417,3923,0.417,3924,0.417,3925,0.417,3926,0.808,3927,0.808,3928,0.808,3929,0.417,3930,0.395,3931,0.417,3932,0.417,3933,0.417,3934,0.417,3935,0.417]],["component/332",[201,0.662,542,0.711]],["title/333-1",[1045,21.29,1666,24.015]],["name/333-1",[]],["text/333-1",[]],["component/333-1",[]],["title/333",[]],["name/333",[2853,1.51]],["text/333",[8,3.954,9,2.087,11,2.248,74,2.802,178,2.816,201,3.64,221,2.736,321,2.764,379,3.233,419,2.866,514,4.387,542,3.915,698,4.033,1045,3.703,1666,3.785]],["component/333",[201,0.662,542,0.711]],["title/334-1",[149,21.259,708,25.823,1215,23.97]],["name/334-1",[]],["text/334-1",[]],["component/334-1",[]],["title/334-2",[1045,21.29,1666,24.015]],["name/334-2",[]],["text/334-2",[]],["component/334-2",[]],["title/334-3",[220,23.711,1039,26.676]],["name/334-3",[]],["text/334-3",[]],["component/334-3",[]],["title/334-4",[2908,42.932]],["name/334-4",[]],["text/334-4",[]],["component/334-4",[]],["title/334",[126,25.488]],["name/334",[126,0.759]],["text/334",[8,3.279,9,1.845,11,2.424,57,2.281,74,2.477,96,2.529,105,2.612,136,2.066,137,1.641,149,1.85,178,2.49,181,3.35,201,3.868,220,1.715,221,2.908,321,2.443,379,2.858,399,1.881,419,2.533,514,4.047,542,4.627,596,1.99,698,3.721,708,2.248,993,3.875,1039,1.929,1045,3.319,1088,3.493,1215,2.086,1666,3.139,2212,3.297,2909,2.163,2911,2.359,2913,2.359,2915,2.359,2916,3.719]],["component/334",[201,0.662,542,0.711]],["title/335-1",[2908,42.932]],["name/335-1",[]],["text/335-1",[]],["component/335-1",[]],["title/335",[]],["name/335",[2917,1.545]],["text/335",[8,2.383,9,1.611,11,2.177,57,2.995,74,2.163,105,3.183,136,2.714,137,2.156,178,2.174,181,3.682,201,3.922,221,2.948,321,2.134,379,2.496,399,2.47,419,2.212,514,3.689,542,4.858,596,2.613,698,3.392,1045,2.822,1088,4.257,1666,2.281,2212,4.33,2909,2.84,2911,3.098,2913,3.098,2915,3.098,2916,4.532]],["component/335",[201,0.662,542,0.711]],["title/336-1",[222,25.902,226,23.333]],["name/336-1",[]],["text/336-1",[]],["component/336-1",[]],["title/336-2",[19,31.713,105,19.953,909,22.707]],["name/336-2",[]],["text/336-2",[]],["component/336-2",[]],["title/336",[3,13.831,9,10.531,11,8.853,14,14.801,201,18.371]],["name/336",[205,1.287]],["text/336",[3,3.642,9,2.46,11,2.332,14,3.458,18,2.359,80,3.119,96,2.52,105,2.602,201,4.838,222,2.807,226,2.528,235,3.258,261,3.134,435,3.48,542,3.448,909,2.961,941,4.328,1280,8.449,1281,8.267,1282,5.595,1283,6.176,1284,6.649,2212,4.94]],["component/336",[201,0.662,542,0.711]],["title/337-1",[968,34.315]],["name/337-1",[]],["text/337-1",[]],["component/337-1",[]],["title/337-2",[11,11.848,51,29.259,234,30.206]],["name/337-2",[]],["text/337-2",[]],["component/337-2",[]],["title/337-3",[194,38.351,3823,65.895]],["name/337-3",[]],["text/337-3",[]],["component/337-3",[]],["title/337-4",[89,33.495]],["name/337-4",[]],["text/337-4",[]],["component/337-4",[]],["title/337",[2,27.205]],["name/337",[2,0.81]],["text/337",[2,3.014,3,2.62,4,1.499,5,1.733,9,1.995,11,2.324,12,3.352,13,1.459,14,2.429,20,1.542,24,3.222,51,1.732,64,1.819,80,1.416,89,1.312,90,2.804,91,1.475,92,2.281,93,1.463,94,1.998,95,1.335,105,1.181,109,2.139,114,1.76,116,2.009,133,1.227,151,1.713,155,3.587,164,1.934,166,1.59,178,1.126,201,4.688,208,1.495,215,1.987,217,1.719,218,1.525,221,2.616,234,1.788,235,2.416,252,2.157,257,1.788,286,1.7,307,1.954,315,1.954,318,2.157,320,2.855,321,2.289,358,1.998,363,2.173,381,2.281,387,1.719,401,1.575,405,1.636,415,1.803,418,2.447,432,1.57,492,3.112,501,1.803,519,2.699,527,2.447,542,2.557,546,1.542,548,3.601,563,1.781,584,3.264,628,1.869,645,1.896,648,2.281,706,3.019,722,1.781,909,1.344,927,1.781,950,2.224,968,3.802,1011,2.749,1037,2.19,1158,2.071,1161,1.713,1233,2.865,1310,2.142,1311,1.944,2792,2.224,3034,2.575,3824,3.242,3825,3.242,3826,3.242,3827,3.242]],["component/337",[201,0.662,542,0.711]],["title/338-1",[1,58.751]],["name/338-1",[]],["text/338-1",[]],["component/338-1",[]],["title/338-2",[320,28.028,550,45.585]],["name/338-2",[]],["text/338-2",[]],["component/338-2",[]],["title/338-3",[548,25.122,732,38.347,909,19.422,3828,38.996]],["name/338-3",[]],["text/338-3",[]],["component/338-3",[]],["title/338-4",[320,28.028,563,36.205]],["name/338-4",[]],["text/338-4",[]],["component/338-4",[]],["title/338-5",[201,16.31,321,12.382,322,23.509,466,22.385,660,23.355,1651,28.46]],["name/338-5",[]],["text/338-5",[]],["component/338-5",[]],["title/338",[320,28.028,548,35.351]],["name/338",[3829,2.294]],["text/338",[0,0.5,1,0.607,2,0.755,3,1.494,5,0.529,6,1.643,9,1.137,11,0.748,14,1.251,18,1.309,22,1.082,24,0.775,30,0.352,36,0.472,51,0.457,60,0.533,61,0.574,67,0.582,73,1.17,74,0.558,77,0.979,78,1.083,82,2.467,84,0.654,89,1.4,91,0.389,92,1.137,93,0.386,94,0.527,95,0.352,96,0.81,98,0.891,100,0.565,105,0.589,106,0.592,109,0.927,110,0.632,113,0.654,114,0.464,124,0.597,133,0.324,134,2.202,136,0.371,137,2.71,151,0.854,155,1.226,171,2.728,172,0.863,178,1.201,181,0.266,194,0.498,201,3.768,216,0.91,221,1.337,222,0.336,226,1.225,235,0.737,237,0.927,247,3.147,250,0.476,252,1.075,257,0.472,259,0.873,266,0.8,277,1.137,279,0.753,283,1.108,286,1.204,317,0.68,320,3.569,321,1.65,322,1.881,332,0.701,333,0.435,335,0.419,351,0.578,372,0.543,379,0.341,381,0.602,382,0.773,387,0.454,392,0.69,409,0.68,411,1.181,412,0.725,416,0.807,419,1.222,428,0.654,439,2.879,455,1.199,462,1.758,466,3.22,471,1.085,482,1.206,490,1,492,0.949,496,0.554,501,1.277,507,1.769,508,0.936,509,1.717,510,3.139,516,2.074,523,1.115,528,0.519,532,2.167,537,1.55,542,0.78,543,2.957,547,2.632,548,5.008,550,2.393,556,1.147,558,1.193,560,0.55,562,1.911,563,2.871,564,0.712,566,0.619,568,1.266,569,1.266,570,0.725,571,1.391,575,1.881,576,1.075,587,0.712,590,0.923,596,0.675,600,0.582,601,0.67,613,0.613,621,0.646,640,0.472,645,0.5,647,3.536,660,1.039,663,2.339,674,0.592,677,1.174,678,0.55,694,0.632,696,0.613,703,0.419,708,0.404,709,0.516,732,1.879,764,0.625,772,0.527,783,2.675,787,0.639,892,0.67,909,2.578,915,0.619,921,2.464,950,2.373,955,0.775,957,0.557,960,0.533,966,1.166,969,0.537,983,0.489,1006,0.478,1012,0.712,1030,1.397,1036,0.662,1038,0.775,1045,0.522,1081,1.323,1109,0.775,1124,0.561,1154,0.597,1160,0.613,1190,0.74,1238,0.979,1300,0.578,1308,0.67,1309,0.654,1360,2.262,1530,0.632,1556,1.234,1580,0.756,1600,1.345,1651,0.67,1655,0.74,1670,0.602,1691,0.662,1695,0.561,1699,0.625,1712,0.662,1735,0.69,1794,0.74,1817,1.428,1849,1.158,1963,1.283,2074,1.236,2201,1.775,2203,1.879,2210,2.22,2211,2.675,2212,1.117,2213,1.823,2267,0.775,2279,0.613,2408,0.725,2629,0.625,2806,0.613,2897,2.957,2898,2.582,2962,2.763,3038,0.725,3039,0.725,3040,1.798,3082,0.67,3083,1.193,3084,0.67,3085,1.798,3087,1.798,3088,1.798,3089,3.103,3828,0.712,3830,0.797,3831,0.797,3832,0.797,3833,0.797,3834,0.797,3835,0.797,3836,2.137,3837,1.504,3838,0.797,3839,0.797,3841,1.345,3842,0.712,3843,0.797,3844,0.712,3846,1.345,3847,1.345,3848,0.712,3849,0.712,3850,0.712,3851,0.712,3852,1.345,3853,1.345,3854,1.345,3855,1.345,3856,1.345,3857,1.345,3858,1.345,3863,1.345,3864,5.177,3865,3.298,3866,0.712,3867,0.797,3868,0.797,3869,0.797,3870,0.797,3871,0.797,3872,0.797,3873,0.797,3874,0.797,3875,0.712,3876,0.712,3936,0.74,3937,2.513]],["component/338",[201,0.662,542,0.711]],["title/339-1",[1,58.751]],["name/339-1",[]],["text/339-1",[]],["component/339-1",[]],["title/339",[1164,63.206]],["name/339",[1164,1.882]],["text/339",[2,1.638,3,1.684,11,1.914,13,3.336,18,2.448,25,4.271,62,3.143,80,2.176,95,2.052,133,3.707,137,2.552,201,5.243,204,2.683,218,2.343,221,1.681,266,2.466,275,4.619,335,2.443,399,1.966,401,2.42,422,5.339,462,2.532,490,3.228,493,4.079,542,3.578,548,3.975,554,7.243,599,3.224,950,6.069,952,3.761,968,3.073,1158,3.183,1164,3.805,1360,5.053,1901,4.016,2279,3.57,2350,3.903,2962,3.475,3391,6.899,3877,4.639,3878,4.148]],["component/339",[201,0.662,542,0.711]],["title/340-1",[14,16.942,133,17.722,201,21.029,548,25.122]],["name/340-1",[]],["text/340-1",[]],["component/340-1",[]],["title/340-2",[89,33.495]],["name/340-2",[]],["text/340-2",[]],["component/340-2",[]],["title/340-3",[155,21.863,284,28.301,677,20.933,969,25.659,3083,30.211]],["name/340-3",[]],["text/340-3",[]],["component/340-3",[]],["title/340-4",[155,14.521,284,18.798,399,10.725,546,12.928,596,11.346,677,13.904,969,17.043,3083,20.067,3879,25.303]],["name/340-4",[]],["text/340-4",[]],["component/340-4",[]],["title/340-5",[155,19.41,284,25.125,677,18.584,969,22.78,1470,26.282,3880,26.03]],["name/340-5",[]],["text/340-5",[]],["component/340-5",[]],["title/340-6",[155,17.451,172,17.451,279,15.229,677,16.709,969,20.482,1470,23.63,3880,23.404]],["name/340-6",[]],["text/340-6",[]],["component/340-6",[]],["title/340-7",[126,6.686,155,11.6,178,7.54,279,10.122,399,8.567,548,11.645,677,11.106,969,13.614,1033,13.697,1470,15.707,2065,16.204,3880,15.557]],["name/340-7",[]],["text/340-7",[]],["component/340-7",[]],["title/340-8",[382,26.202,416,27.365,420,33.744]],["name/340-8",[]],["text/340-8",[]],["component/340-8",[]],["title/340-9",[432,26.518,2065,40.871,3881,50.982]],["name/340-9",[]],["text/340-9",[]],["component/340-9",[]],["title/340",[541,35.613]],["name/340",[541,1.06]],["text/340",[2,0.552,3,0.438,4,0.213,5,0.884,6,1.368,8,0.494,9,0.118,11,0.099,12,0.199,14,0.469,18,1.268,22,0.217,23,0.333,25,0.265,30,0.367,33,0.774,48,0.209,56,0.383,67,2.245,68,1.372,73,1.378,74,0.58,75,0.365,82,2.739,89,1.218,91,0.209,93,0.758,95,0.98,96,0.592,97,0.39,98,0.926,105,0.168,106,0.318,109,0.961,112,0.206,122,0.258,126,1.016,133,0.337,134,1.86,135,0.823,136,0.728,137,2.914,150,0.868,151,1.258,154,0.27,155,2.05,164,1.002,166,0.225,171,1.47,172,2.433,175,0.977,176,0.895,178,0.708,180,0.333,181,0.633,201,3.221,204,0.248,208,0.212,217,1.262,220,0.165,221,0.301,222,0.35,223,1.359,225,1.956,226,1.065,235,0.21,236,0.324,237,1.17,238,0.311,248,0.34,255,0.274,257,0.492,259,0.482,266,0.642,275,1.047,279,1.26,284,0.318,317,0.365,320,2.772,321,0.921,322,1.749,332,1.062,335,0.225,350,0.651,351,0.602,360,0.308,382,1.139,387,0.244,388,0.22,392,1.045,399,0.663,401,0.223,405,0.232,411,1.227,416,2.489,418,0.347,419,1.529,420,3.192,432,0.432,435,0.632,438,0.628,439,2.149,441,0.505,455,1.066,462,1.816,466,0.799,467,0.36,470,0.268,471,1.126,482,1.522,490,0.731,491,0.351,492,0.524,496,0.298,505,0.504,507,1.474,508,0.266,509,1.304,510,3.088,516,2.451,518,0.704,521,0.698,522,0.809,523,1.461,532,1.347,537,2.032,539,0.581,542,0.626,543,2.462,548,4.495,558,2.221,563,3.941,571,2.892,573,0.356,575,2.8,576,2.378,591,0.788,593,0.376,596,2.464,597,0.371,600,0.607,640,0.715,641,0.577,647,3.161,648,0.324,654,0.251,663,2.689,667,0.311,677,0.859,680,0.823,702,1.54,703,0.437,704,1.608,709,1.23,710,0.343,713,1.016,723,0.292,741,1.295,742,0.929,744,0.285,746,1.018,761,0.376,764,1.49,775,0.282,780,0.241,783,3.223,785,0.263,788,0.782,909,1.368,932,0.333,935,0.622,941,0.54,950,1.633,958,0.265,966,0.234,969,2.242,995,0.343,1032,0.212,1033,1.287,1036,0.356,1045,0.659,1052,1.698,1081,1.67,1124,0.302,1158,0.294,1161,0.243,1191,2.179,1205,0.294,1283,0.771,1298,1.003,1304,0.33,1314,0.365,1324,0.302,1360,3.068,1453,0.876,1470,0.333,1501,0.356,1695,1.101,1699,0.336,1740,0.383,1796,0.36,1808,2.357,1831,0.365,1849,2.562,1853,0.991,1889,0.283,1963,0.708,1981,0.398,2065,3.399,2074,1.455,2192,0.416,2201,2.09,2203,2.927,2210,2.52,2211,1.841,2212,1.161,2213,1.891,2279,1.203,2331,0.383,2333,0.398,2368,0.406,2629,0.336,2799,0.365,2897,3.051,2898,3.051,2962,3.998,2969,0.333,2970,0.343,3040,1.598,3082,1.316,3084,0.698,3085,2.118,3087,1.865,3088,1.865,3089,3.202,3302,0.406,3303,0.406,3533,0.788,3841,1.398,3842,0.742,3844,0.742,3846,1.398,3847,1.08,3848,0.742,3849,1.398,3850,0.383,3851,0.383,3852,1.398,3853,1.398,3854,1.398,3855,1.398,3856,1.698,3857,1.398,3858,1.698,3859,0.807,3860,0.807,3861,0.807,3862,0.807,3863,1.698,3864,4.313,3865,1.398,3866,1.398,3875,0.383,3876,0.742,3878,0.383,3880,0.639,3882,0.46,3883,0.83,3884,0.46,3885,0.46,3886,0.46,3887,0.428,3888,0.428,3889,0.428,3890,0.428,3891,0.428,3892,0.428,3893,0.428,3895,1.208,3896,0.428,3897,0.428,3898,0.83,3899,0.428,3900,0.406,3901,0.428,3902,0.406,3903,0.428,3904,0.428,3905,0.428,3906,0.406,3907,0.428,3908,0.428,3909,0.428,3910,0.428,3911,0.428,3912,0.428,3913,0.428,3914,0.428,3915,0.428,3916,0.428,3917,0.428,3918,0.428,3919,0.428,3920,0.428,3921,0.428,3922,0.428,3923,0.428,3924,0.428,3925,0.428,3926,0.83,3927,0.83,3928,0.83,3929,0.428,3930,0.406,3931,0.428,3932,0.428,3933,0.428,3934,0.428,3935,0.428,3936,0.771,3937,2.602]],["component/340",[201,0.662,542,0.711]],["title/341-1",[1045,21.29,1666,24.015]],["name/341-1",[]],["text/341-1",[]],["component/341-1",[]],["title/341",[]],["name/341",[2853,1.51]],["text/341",[8,3.954,9,2.087,11,2.248,74,2.802,178,2.816,201,3.64,221,2.736,321,2.764,379,3.233,419,2.866,514,4.387,542,3.915,698,4.033,1045,3.703,1666,3.785]],["component/341",[201,0.662,542,0.711]],["title/342-1",[149,21.259,708,25.823,1215,23.97]],["name/342-1",[]],["text/342-1",[]],["component/342-1",[]],["title/342-2",[1045,21.29,1666,24.015]],["name/342-2",[]],["text/342-2",[]],["component/342-2",[]],["title/342-3",[220,23.711,1039,26.676]],["name/342-3",[]],["text/342-3",[]],["component/342-3",[]],["title/342-4",[2908,42.932]],["name/342-4",[]],["text/342-4",[]],["component/342-4",[]],["title/342",[126,25.488]],["name/342",[126,0.759]],["text/342",[8,3.279,9,1.845,11,2.424,57,2.281,74,2.477,96,2.529,105,2.612,136,2.066,137,1.641,149,1.85,178,2.49,181,3.35,201,3.868,220,1.715,221,2.908,321,2.443,379,2.858,399,1.881,419,2.533,514,4.047,542,4.627,596,1.99,698,3.721,708,2.248,993,3.875,1039,1.929,1045,3.319,1088,3.493,1215,2.086,1666,3.139,2212,3.297,2909,2.163,2911,2.359,2913,2.359,2915,2.359,2916,3.719]],["component/342",[201,0.662,542,0.711]],["title/343-1",[2908,42.932]],["name/343-1",[]],["text/343-1",[]],["component/343-1",[]],["title/343",[]],["name/343",[2917,1.545]],["text/343",[8,2.383,9,1.611,11,2.177,57,2.995,74,2.163,105,3.183,136,2.714,137,2.156,178,2.174,181,3.682,201,3.922,221,2.948,321,2.134,379,2.496,399,2.47,419,2.212,514,3.689,542,4.858,596,2.613,698,3.392,1045,2.822,1088,4.257,1666,2.281,2212,4.33,2909,2.84,2911,3.098,2913,3.098,2915,3.098,2916,4.532]],["component/343",[201,0.662,542,0.711]],["title/344-1",[222,25.902,226,23.333]],["name/344-1",[]],["text/344-1",[]],["component/344-1",[]],["title/344-2",[19,31.713,105,19.953,909,22.707]],["name/344-2",[]],["text/344-2",[]],["component/344-2",[]],["title/344",[3,13.831,9,10.531,11,8.853,14,14.801,201,18.371]],["name/344",[205,1.287]],["text/344",[3,3.642,9,2.46,11,2.332,14,3.458,18,2.359,80,3.119,96,2.52,105,2.602,201,4.838,222,2.807,226,2.528,235,3.258,261,3.134,435,3.48,542,3.448,909,2.961,941,4.328,1280,8.449,1281,8.267,1282,5.595,1283,6.176,1284,6.649,2212,4.94]],["component/344",[201,0.662,542,0.711]],["title/345-1",[968,34.315]],["name/345-1",[]],["text/345-1",[]],["component/345-1",[]],["title/345-2",[11,11.848,51,29.259,234,30.206]],["name/345-2",[]],["text/345-2",[]],["component/345-2",[]],["title/345-3",[194,38.351,3823,65.895]],["name/345-3",[]],["text/345-3",[]],["component/345-3",[]],["title/345-4",[89,33.495]],["name/345-4",[]],["text/345-4",[]],["component/345-4",[]],["title/345",[2,27.205]],["name/345",[2,0.81]],["text/345",[2,3.014,3,2.62,4,1.499,5,1.733,9,1.995,11,2.324,12,3.352,13,1.459,14,2.429,20,1.542,24,3.222,51,1.732,64,1.819,80,1.416,89,1.312,90,2.804,91,1.475,92,2.281,93,1.463,94,1.998,95,1.335,105,1.181,109,2.139,114,1.76,116,2.009,133,1.227,151,1.713,155,3.587,164,1.934,166,1.59,178,1.126,201,4.688,208,1.495,215,1.987,217,1.719,218,1.525,221,2.616,234,1.788,235,2.416,252,2.157,257,1.788,286,1.7,307,1.954,315,1.954,318,2.157,320,2.855,321,2.289,358,1.998,363,2.173,381,2.281,387,1.719,401,1.575,405,1.636,415,1.803,418,2.447,432,1.57,492,3.112,501,1.803,519,2.699,527,2.447,542,2.557,546,1.542,548,3.601,563,1.781,584,3.264,628,1.869,645,1.896,648,2.281,706,3.019,722,1.781,909,1.344,927,1.781,950,2.224,968,3.802,1011,2.749,1037,2.19,1158,2.071,1161,1.713,1233,2.865,1310,2.142,1311,1.944,2792,2.224,3034,2.575,3824,3.242,3825,3.242,3826,3.242,3827,3.242]],["component/345",[201,0.662,542,0.711]],["title/346-1",[1,58.751]],["name/346-1",[]],["text/346-1",[]],["component/346-1",[]],["title/346-2",[320,28.028,550,45.585]],["name/346-2",[]],["text/346-2",[]],["component/346-2",[]],["title/346-3",[548,25.122,732,38.347,909,19.422,3828,38.996]],["name/346-3",[]],["text/346-3",[]],["component/346-3",[]],["title/346-4",[320,28.028,563,36.205]],["name/346-4",[]],["text/346-4",[]],["component/346-4",[]],["title/346-5",[201,16.31,321,12.382,322,23.509,466,22.385,660,23.355,1651,28.46]],["name/346-5",[]],["text/346-5",[]],["component/346-5",[]],["title/346",[320,28.028,548,35.351]],["name/346",[3829,2.294]],["text/346",[0,0.5,1,0.607,2,0.755,3,1.494,5,0.529,6,1.643,9,1.137,11,0.748,14,1.251,18,1.309,22,1.082,24,0.775,30,0.352,36,0.472,51,0.457,60,0.533,61,0.574,67,0.582,73,1.17,74,0.558,77,0.979,78,1.083,82,2.467,84,0.654,89,1.4,91,0.389,92,1.137,93,0.386,94,0.527,95,0.352,96,0.81,98,0.891,100,0.565,105,0.589,106,0.592,109,0.927,110,0.632,113,0.654,114,0.464,124,0.597,133,0.324,134,2.202,136,0.371,137,2.71,151,0.854,155,1.226,171,2.728,172,0.863,178,1.201,181,0.266,194,0.498,201,3.768,216,0.91,221,1.337,222,0.336,226,1.225,235,0.737,237,0.927,247,3.147,250,0.476,252,1.075,257,0.472,259,0.873,266,0.8,277,1.137,279,0.753,283,1.108,286,1.204,317,0.68,320,3.569,321,1.65,322,1.881,332,0.701,333,0.435,335,0.419,351,0.578,372,0.543,379,0.341,381,0.602,382,0.773,387,0.454,392,0.69,409,0.68,411,1.181,412,0.725,416,0.807,419,1.222,428,0.654,439,2.879,455,1.199,462,1.758,466,3.22,471,1.085,482,1.206,490,1,492,0.949,496,0.554,501,1.277,507,1.769,508,0.936,509,1.717,510,3.139,516,2.074,523,1.115,528,0.519,532,2.167,537,1.55,542,0.78,543,2.957,547,2.632,548,5.008,550,2.393,556,1.147,558,1.193,560,0.55,562,1.911,563,2.871,564,0.712,566,0.619,568,1.266,569,1.266,570,0.725,571,1.391,575,1.881,576,1.075,587,0.712,590,0.923,596,0.675,600,0.582,601,0.67,613,0.613,621,0.646,640,0.472,645,0.5,647,3.536,660,1.039,663,2.339,674,0.592,677,1.174,678,0.55,694,0.632,696,0.613,703,0.419,708,0.404,709,0.516,732,1.879,764,0.625,772,0.527,783,2.675,787,0.639,892,0.67,909,2.578,915,0.619,921,2.464,950,2.373,955,0.775,957,0.557,960,0.533,966,1.166,969,0.537,983,0.489,1006,0.478,1012,0.712,1030,1.397,1036,0.662,1038,0.775,1045,0.522,1081,1.323,1109,0.775,1124,0.561,1154,0.597,1160,0.613,1190,0.74,1238,0.979,1300,0.578,1308,0.67,1309,0.654,1360,2.262,1530,0.632,1556,1.234,1580,0.756,1600,1.345,1651,0.67,1655,0.74,1670,0.602,1691,0.662,1695,0.561,1699,0.625,1712,0.662,1735,0.69,1794,0.74,1817,1.428,1849,1.158,1963,1.283,2074,1.236,2201,1.775,2203,1.879,2210,2.22,2211,2.675,2212,1.117,2213,1.823,2267,0.775,2279,0.613,2408,0.725,2629,0.625,2806,0.613,2897,2.957,2898,2.582,2962,2.763,3038,0.725,3039,0.725,3040,1.798,3082,0.67,3083,1.193,3084,0.67,3085,1.798,3087,1.798,3088,1.798,3089,3.103,3828,0.712,3830,0.797,3831,0.797,3832,0.797,3833,0.797,3834,0.797,3835,0.797,3836,2.137,3837,1.504,3838,0.797,3839,0.797,3841,1.345,3842,0.712,3843,0.797,3844,0.712,3846,1.345,3847,1.345,3848,0.712,3849,0.712,3850,0.712,3851,0.712,3852,1.345,3853,1.345,3854,1.345,3855,1.345,3856,1.345,3857,1.345,3858,1.345,3863,1.345,3864,5.177,3865,3.298,3866,0.712,3867,0.797,3868,0.797,3869,0.797,3870,0.797,3871,0.797,3872,0.797,3873,0.797,3874,0.797,3875,0.712,3876,0.712,3936,0.74,3937,2.513]],["component/346",[201,0.662,542,0.711]],["title/347-1",[1,58.751]],["name/347-1",[]],["text/347-1",[]],["component/347-1",[]],["title/347",[1164,63.206]],["name/347",[1164,1.882]],["text/347",[2,1.638,3,1.684,11,1.914,13,3.336,18,2.448,25,4.271,62,3.143,80,2.176,95,2.052,133,3.707,137,2.552,201,5.243,204,2.683,218,2.343,221,1.681,266,2.466,275,4.619,335,2.443,399,1.966,401,2.42,422,5.339,462,2.532,490,3.228,493,4.079,542,3.578,548,3.975,554,7.243,599,3.224,950,6.069,952,3.761,968,3.073,1158,3.183,1164,3.805,1360,5.053,1901,4.016,2279,3.57,2350,3.903,2962,3.475,3391,6.899,3877,4.639,3878,4.148]],["component/347",[201,0.662,542,0.711]],["title/348-1",[14,16.942,133,17.722,201,21.029,548,25.122]],["name/348-1",[]],["text/348-1",[]],["component/348-1",[]],["title/348-2",[89,33.495]],["name/348-2",[]],["text/348-2",[]],["component/348-2",[]],["title/348-3",[155,21.863,284,28.301,677,20.933,969,25.659,3083,30.211]],["name/348-3",[]],["text/348-3",[]],["component/348-3",[]],["title/348-4",[155,14.521,284,18.798,399,10.725,546,12.928,596,11.346,677,13.904,969,17.043,3083,20.067,3879,25.303]],["name/348-4",[]],["text/348-4",[]],["component/348-4",[]],["title/348-5",[155,19.41,284,25.125,677,18.584,969,22.78,1470,26.282,3880,26.03]],["name/348-5",[]],["text/348-5",[]],["component/348-5",[]],["title/348-6",[155,17.451,172,17.451,279,15.229,677,16.709,969,20.482,1470,23.63,3880,23.404]],["name/348-6",[]],["text/348-6",[]],["component/348-6",[]],["title/348-7",[126,6.686,155,11.6,178,7.54,279,10.122,399,8.567,548,11.645,677,11.106,969,13.614,1033,13.697,1470,15.707,2065,16.204,3880,15.557]],["name/348-7",[]],["text/348-7",[]],["component/348-7",[]],["title/348-8",[382,26.202,416,27.365,420,33.744]],["name/348-8",[]],["text/348-8",[]],["component/348-8",[]],["title/348-9",[432,26.518,2065,40.871,3881,50.982]],["name/348-9",[]],["text/348-9",[]],["component/348-9",[]],["title/348",[541,35.613]],["name/348",[541,1.06]],["text/348",[2,0.552,3,0.438,4,0.213,5,0.884,6,1.368,8,0.494,9,0.118,11,0.099,12,0.199,14,0.469,18,1.268,22,0.217,23,0.333,25,0.265,30,0.367,33,0.774,48,0.209,56,0.383,67,2.245,68,1.372,73,1.378,74,0.58,75,0.365,82,2.739,89,1.218,91,0.209,93,0.758,95,0.98,96,0.592,97,0.39,98,0.926,105,0.168,106,0.318,109,0.961,112,0.206,122,0.258,126,1.016,133,0.337,134,1.86,135,0.823,136,0.728,137,2.914,150,0.868,151,1.258,154,0.27,155,2.05,164,1.002,166,0.225,171,1.47,172,2.433,175,0.977,176,0.895,178,0.708,180,0.333,181,0.633,201,3.221,204,0.248,208,0.212,217,1.262,220,0.165,221,0.301,222,0.35,223,1.359,225,1.956,226,1.065,235,0.21,236,0.324,237,1.17,238,0.311,248,0.34,255,0.274,257,0.492,259,0.482,266,0.642,275,1.047,279,1.26,284,0.318,317,0.365,320,2.772,321,0.921,322,1.749,332,1.062,335,0.225,350,0.651,351,0.602,360,0.308,382,1.139,387,0.244,388,0.22,392,1.045,399,0.663,401,0.223,405,0.232,411,1.227,416,2.489,418,0.347,419,1.529,420,3.192,432,0.432,435,0.632,438,0.628,439,2.149,441,0.505,455,1.066,462,1.816,466,0.799,467,0.36,470,0.268,471,1.126,482,1.522,490,0.731,491,0.351,492,0.524,496,0.298,505,0.504,507,1.474,508,0.266,509,1.304,510,3.088,516,2.451,518,0.704,521,0.698,522,0.809,523,1.461,532,1.347,537,2.032,539,0.581,542,0.626,543,2.462,548,4.495,558,2.221,563,3.941,571,2.892,573,0.356,575,2.8,576,2.378,591,0.788,593,0.376,596,2.464,597,0.371,600,0.607,640,0.715,641,0.577,647,3.161,648,0.324,654,0.251,663,2.689,667,0.311,677,0.859,680,0.823,702,1.54,703,0.437,704,1.608,709,1.23,710,0.343,713,1.016,723,0.292,741,1.295,742,0.929,744,0.285,746,1.018,761,0.376,764,1.49,775,0.282,780,0.241,783,3.223,785,0.263,788,0.782,909,1.368,932,0.333,935,0.622,941,0.54,950,1.633,958,0.265,966,0.234,969,2.242,995,0.343,1032,0.212,1033,1.287,1036,0.356,1045,0.659,1052,1.698,1081,1.67,1124,0.302,1158,0.294,1161,0.243,1191,2.179,1205,0.294,1283,0.771,1298,1.003,1304,0.33,1314,0.365,1324,0.302,1360,3.068,1453,0.876,1470,0.333,1501,0.356,1695,1.101,1699,0.336,1740,0.383,1796,0.36,1808,2.357,1831,0.365,1849,2.562,1853,0.991,1889,0.283,1963,0.708,1981,0.398,2065,3.399,2074,1.455,2192,0.416,2201,2.09,2203,2.927,2210,2.52,2211,1.841,2212,1.161,2213,1.891,2279,1.203,2331,0.383,2333,0.398,2368,0.406,2629,0.336,2799,0.365,2897,3.051,2898,3.051,2962,3.998,2969,0.333,2970,0.343,3040,1.598,3082,1.316,3084,0.698,3085,2.118,3087,1.865,3088,1.865,3089,3.202,3302,0.406,3303,0.406,3533,0.788,3841,1.398,3842,0.742,3844,0.742,3846,1.398,3847,1.08,3848,0.742,3849,1.398,3850,0.383,3851,0.383,3852,1.398,3853,1.398,3854,1.398,3855,1.398,3856,1.698,3857,1.398,3858,1.698,3859,0.807,3860,0.807,3861,0.807,3862,0.807,3863,1.698,3864,4.313,3865,1.398,3866,1.398,3875,0.383,3876,0.742,3878,0.383,3880,0.639,3882,0.46,3883,0.83,3884,0.46,3885,0.46,3886,0.46,3887,0.428,3888,0.428,3889,0.428,3890,0.428,3891,0.428,3892,0.428,3893,0.428,3895,1.208,3896,0.428,3897,0.428,3898,0.83,3899,0.428,3900,0.406,3901,0.428,3902,0.406,3903,0.428,3904,0.428,3905,0.428,3906,0.406,3907,0.428,3908,0.428,3909,0.428,3910,0.428,3911,0.428,3912,0.428,3913,0.428,3914,0.428,3915,0.428,3916,0.428,3917,0.428,3918,0.428,3919,0.428,3920,0.428,3921,0.428,3922,0.428,3923,0.428,3924,0.428,3925,0.428,3926,0.83,3927,0.83,3928,0.83,3929,0.428,3930,0.406,3931,0.428,3932,0.428,3933,0.428,3934,0.428,3935,0.428,3936,0.771,3937,2.602]],["component/348",[201,0.662,542,0.711]],["title/349-1",[1045,21.29,1666,24.015]],["name/349-1",[]],["text/349-1",[]],["component/349-1",[]],["title/349",[]],["name/349",[2853,1.51]],["text/349",[8,3.954,9,2.087,11,2.248,74,2.802,178,2.816,201,3.64,221,2.736,321,2.764,379,3.233,419,2.866,514,4.387,542,3.915,698,4.033,1045,3.703,1666,3.785]],["component/349",[201,0.662,542,0.711]],["title/350-1",[149,21.259,708,25.823,1215,23.97]],["name/350-1",[]],["text/350-1",[]],["component/350-1",[]],["title/350-2",[1045,21.29,1666,24.015]],["name/350-2",[]],["text/350-2",[]],["component/350-2",[]],["title/350-3",[220,23.711,1039,26.676]],["name/350-3",[]],["text/350-3",[]],["component/350-3",[]],["title/350-4",[2908,42.932]],["name/350-4",[]],["text/350-4",[]],["component/350-4",[]],["title/350",[126,25.488]],["name/350",[126,0.759]],["text/350",[8,3.279,9,1.845,11,2.424,57,2.281,74,2.477,96,2.529,105,2.612,136,2.066,137,1.641,149,1.85,178,2.49,181,3.35,201,3.868,220,1.715,221,2.908,321,2.443,379,2.858,399,1.881,419,2.533,514,4.047,542,4.627,596,1.99,698,3.721,708,2.248,993,3.875,1039,1.929,1045,3.319,1088,3.493,1215,2.086,1666,3.139,2212,3.297,2909,2.163,2911,2.359,2913,2.359,2915,2.359,2916,3.719]],["component/350",[201,0.662,542,0.711]],["title/351-1",[2908,42.932]],["name/351-1",[]],["text/351-1",[]],["component/351-1",[]],["title/351",[]],["name/351",[2917,1.545]],["text/351",[8,2.383,9,1.611,11,2.177,57,2.995,74,2.163,105,3.183,136,2.714,137,2.156,178,2.174,181,3.682,201,3.922,221,2.948,321,2.134,379,2.496,399,2.47,419,2.212,514,3.689,542,4.858,596,2.613,698,3.392,1045,2.822,1088,4.257,1666,2.281,2212,4.33,2909,2.84,2911,3.098,2913,3.098,2915,3.098,2916,4.532]],["component/351",[201,0.662,542,0.711]],["title/352-1",[222,25.902,226,23.333]],["name/352-1",[]],["text/352-1",[]],["component/352-1",[]],["title/352-2",[19,31.713,105,19.953,909,22.707]],["name/352-2",[]],["text/352-2",[]],["component/352-2",[]],["title/352",[3,13.831,9,10.531,11,8.853,14,14.801,201,18.371]],["name/352",[205,1.287]],["text/352",[3,3.642,9,2.46,11,2.332,14,3.458,18,2.359,80,3.119,96,2.52,105,2.602,201,4.838,222,2.807,226,2.528,235,3.258,261,3.134,435,3.48,542,3.448,909,2.961,941,4.328,1280,8.449,1281,8.267,1282,5.595,1283,6.176,1284,6.649,2212,4.94]],["component/352",[201,0.662,542,0.711]],["title/353-1",[1,58.751]],["name/353-1",[]],["text/353-1",[]],["component/353-1",[]],["title/353-2",[320,28.028,550,45.585]],["name/353-2",[]],["text/353-2",[]],["component/353-2",[]],["title/353-3",[548,25.122,732,38.347,909,19.422,3828,38.996]],["name/353-3",[]],["text/353-3",[]],["component/353-3",[]],["title/353-4",[320,28.028,563,36.205]],["name/353-4",[]],["text/353-4",[]],["component/353-4",[]],["title/353-5",[201,16.31,321,12.382,322,23.509,466,22.385,660,23.355,1651,28.46]],["name/353-5",[]],["text/353-5",[]],["component/353-5",[]],["title/353",[320,28.028,548,35.351]],["name/353",[3829,2.294]],["text/353",[0,0.5,1,0.607,2,0.755,3,1.494,5,0.529,6,1.643,9,1.137,11,0.748,14,1.251,18,1.309,22,1.082,24,0.775,30,0.352,36,0.472,51,0.457,60,0.533,61,0.574,67,0.582,73,1.17,74,0.558,77,0.979,78,1.083,82,2.467,84,0.654,89,1.4,91,0.389,92,1.137,93,0.386,94,0.527,95,0.352,96,0.81,98,0.891,100,0.565,105,0.589,106,0.592,109,0.927,110,0.632,113,0.654,114,0.464,124,0.597,133,0.324,134,2.202,136,0.371,137,2.71,151,0.854,155,1.226,171,2.728,172,0.863,178,1.201,181,0.266,194,0.498,201,3.768,216,0.91,221,1.337,222,0.336,226,1.225,235,0.737,237,0.927,247,3.147,250,0.476,252,1.075,257,0.472,259,0.873,266,0.8,277,1.137,279,0.753,283,1.108,286,1.204,317,0.68,320,3.569,321,1.65,322,1.881,332,0.701,333,0.435,335,0.419,351,0.578,372,0.543,379,0.341,381,0.602,382,0.773,387,0.454,392,0.69,409,0.68,411,1.181,412,0.725,416,0.807,419,1.222,428,0.654,439,2.879,455,1.199,462,1.758,466,3.22,471,1.085,482,1.206,490,1,492,0.949,496,0.554,501,1.277,507,1.769,508,0.936,509,1.717,510,3.139,516,2.074,523,1.115,528,0.519,532,2.167,537,1.55,542,0.78,543,2.957,547,2.632,548,5.008,550,2.393,556,1.147,558,1.193,560,0.55,562,1.911,563,2.871,564,0.712,566,0.619,568,1.266,569,1.266,570,0.725,571,1.391,575,1.881,576,1.075,587,0.712,590,0.923,596,0.675,600,0.582,601,0.67,613,0.613,621,0.646,640,0.472,645,0.5,647,3.536,660,1.039,663,2.339,674,0.592,677,1.174,678,0.55,694,0.632,696,0.613,703,0.419,708,0.404,709,0.516,732,1.879,764,0.625,772,0.527,783,2.675,787,0.639,892,0.67,909,2.578,915,0.619,921,2.464,950,2.373,955,0.775,957,0.557,960,0.533,966,1.166,969,0.537,983,0.489,1006,0.478,1012,0.712,1030,1.397,1036,0.662,1038,0.775,1045,0.522,1081,1.323,1109,0.775,1124,0.561,1154,0.597,1160,0.613,1190,0.74,1238,0.979,1300,0.578,1308,0.67,1309,0.654,1360,2.262,1530,0.632,1556,1.234,1580,0.756,1600,1.345,1651,0.67,1655,0.74,1670,0.602,1691,0.662,1695,0.561,1699,0.625,1712,0.662,1735,0.69,1794,0.74,1817,1.428,1849,1.158,1963,1.283,2074,1.236,2201,1.775,2203,1.879,2210,2.22,2211,2.675,2212,1.117,2213,1.823,2267,0.775,2279,0.613,2408,0.725,2629,0.625,2806,0.613,2897,2.957,2898,2.582,2962,2.763,3038,0.725,3039,0.725,3040,1.798,3082,0.67,3083,1.193,3084,0.67,3085,1.798,3087,1.798,3088,1.798,3089,3.103,3828,0.712,3830,0.797,3831,0.797,3832,0.797,3833,0.797,3834,0.797,3835,0.797,3836,2.137,3837,1.504,3838,0.797,3839,0.797,3841,1.345,3842,0.712,3843,0.797,3844,0.712,3846,1.345,3847,1.345,3848,0.712,3849,0.712,3850,0.712,3851,0.712,3852,1.345,3853,1.345,3854,1.345,3855,1.345,3856,1.345,3857,1.345,3858,1.345,3863,1.345,3864,5.177,3865,3.298,3866,0.712,3867,0.797,3868,0.797,3869,0.797,3870,0.797,3871,0.797,3872,0.797,3873,0.797,3874,0.797,3875,0.712,3876,0.712,3936,0.74,3937,2.513]],["component/353",[201,0.662,542,0.711]],["title/354-1",[1,58.751]],["name/354-1",[]],["text/354-1",[]],["component/354-1",[]],["title/354",[1164,63.206]],["name/354",[1164,1.882]],["text/354",[2,1.663,3,1.71,11,1.932,13,3.374,18,2.476,25,4.32,62,3.192,80,2.209,95,2.084,133,3.735,137,2.581,201,5.266,204,2.724,218,2.379,221,1.707,266,2.504,275,4.672,335,2.48,399,1.996,401,2.457,422,4.551,462,2.57,490,3.264,493,4.142,542,4.765,548,4.02,554,7.309,599,3.274,950,6.124,952,3.819,968,3.108,1158,3.232,1164,3.864,1360,2.889,1901,4.078,2279,3.625,2350,3.963,2962,3.529,3072,5.724,3877,4.71,3878,4.212]],["component/354",[201,0.662,542,0.711]],["title/355-1",[89,33.495]],["name/355-1",[]],["text/355-1",[]],["component/355-1",[]],["title/355-2",[155,21.863,284,28.301,677,20.933,969,25.659,3083,30.211]],["name/355-2",[]],["text/355-2",[]],["component/355-2",[]],["title/355-3",[155,14.521,284,18.798,399,10.725,546,12.928,596,11.346,677,13.904,969,17.043,3083,20.067,3879,25.303]],["name/355-3",[]],["text/355-3",[]],["component/355-3",[]],["title/355-4",[155,19.41,284,25.125,677,18.584,969,22.78,1470,26.282,3880,26.03]],["name/355-4",[]],["text/355-4",[]],["component/355-4",[]],["title/355-5",[155,17.451,172,17.451,279,15.229,677,16.709,969,20.482,1470,23.63,3880,23.404]],["name/355-5",[]],["text/355-5",[]],["component/355-5",[]],["title/355-6",[126,6.686,155,11.6,178,7.54,279,10.122,399,8.567,548,11.645,677,11.106,969,13.614,1033,13.697,1470,15.707,2065,16.204,3880,15.557]],["name/355-6",[]],["text/355-6",[]],["component/355-6",[]],["title/355-7",[382,26.202,416,27.365,420,33.744]],["name/355-7",[]],["text/355-7",[]],["component/355-7",[]],["title/355-8",[432,26.518,2065,40.871,3881,50.982]],["name/355-8",[]],["text/355-8",[]],["component/355-8",[]],["title/355",[541,35.613]],["name/355",[541,1.06]],["text/355",[2,0.453,3,0.166,5,0.822,6,1.314,8,0.524,12,0.212,18,1.146,22,0.231,23,0.354,25,0.282,30,0.39,33,0.565,48,0.222,56,0.408,67,2.361,68,1.445,73,1.281,74,0.615,75,0.389,82,2.753,89,1.153,93,0.621,95,1.035,96,0.486,98,0.981,105,0.179,106,0.339,109,1.015,122,0.275,126,1.068,134,1.948,135,0.872,136,0.771,137,2.965,150,0.92,151,1.328,154,0.288,155,2.006,164,1.061,166,0.24,171,1.548,172,2.544,175,1.035,176,0.947,178,0.749,180,0.354,181,0.552,201,2.898,217,1.333,220,0.176,222,0.372,223,1.232,225,2.049,226,1.009,235,0.223,237,1.238,238,0.331,248,0.362,255,0.292,257,0.523,259,0.512,266,0.681,275,0.858,279,1.329,284,0.339,317,0.389,320,2.81,321,0.971,322,1.844,332,1.127,335,0.24,350,0.693,351,0.64,360,0.328,382,1.203,388,0.234,392,1.109,399,0.702,401,0.238,411,1.3,416,2.597,418,0.37,419,1.6,420,3.328,432,0.459,435,0.671,438,0.667,439,2.26,441,0.535,455,1.127,462,1.907,466,0.848,467,0.384,470,0.285,471,1.189,482,1.61,490,0.775,491,0.374,492,0.288,505,0.536,507,1.415,508,0.284,509,1.235,510,3.063,516,2.568,518,0.746,521,0.743,522,0.858,523,1.384,532,1.276,537,1.925,539,0.617,542,0.665,543,2.589,548,4.573,558,2.339,563,4.071,571,2.885,573,0.379,575,2.93,576,2.498,591,0.838,593,0.401,596,2.56,597,0.395,600,0.645,640,0.759,641,0.613,647,3.129,648,0.345,654,0.267,663,2.529,667,0.331,677,0.91,680,0.874,702,1.628,703,0.465,704,1.697,709,1.3,710,0.366,713,1.078,723,0.311,741,1.369,742,0.986,744,0.304,746,1.078,761,0.401,764,1.576,775,0.3,780,0.257,783,3.057,785,0.28,788,0.83,909,1.314,932,0.354,935,0.661,941,0.574,950,1.724,958,0.282,966,0.249,969,2.354,995,0.366,1032,0.226,1033,1.361,1036,0.379,1045,0.697,1052,1.796,1081,1.766,1124,0.321,1191,2.297,1205,0.313,1298,1.064,1304,0.351,1324,0.321,1360,3.084,1453,0.93,1470,0.354,1501,0.379,1695,1.167,1699,0.358,1740,0.408,1796,0.384,1808,2.482,1831,0.389,1849,2.69,1853,1.051,1889,0.302,1963,0.753,1981,0.424,2065,3.553,2074,1.353,2192,0.444,2201,1.944,2203,3.074,2210,2.419,2211,1.944,2212,1.23,2213,1.997,2279,1.275,2331,0.408,2333,0.424,2368,0.433,2629,0.358,2799,0.389,2897,3.196,2898,3.196,2962,4.032,2969,0.354,2970,0.366,3040,1.69,3082,1.394,3084,0.743,3085,1.969,3087,1.69,3088,1.69,3089,2.941,3302,0.433,3303,0.433,3841,1.146,3842,0.408,3844,0.408,3846,1.481,3847,1.146,3848,0.789,3849,1.481,3850,0.408,3851,0.408,3852,1.481,3853,1.481,3854,1.481,3855,1.481,3856,1.796,3857,1.481,3858,1.796,3859,0.858,3860,0.858,3861,0.858,3862,0.858,3863,1.796,3864,4.496,3865,1.481,3866,1.481,3875,0.408,3876,0.789,3878,0.408,3880,0.679,3883,0.456,3887,0.456,3888,0.456,3889,0.456,3890,0.456,3891,0.456,3892,0.456,3893,0.456,3895,1.282,3896,0.456,3897,0.456,3898,0.882,3899,0.456,3900,0.433,3901,0.456,3902,0.433,3903,0.456,3904,0.456,3905,0.456,3906,0.433,3907,0.456,3908,0.456,3909,0.456,3910,0.456,3911,0.456,3912,0.456,3913,0.456,3914,0.456,3915,0.456,3916,0.456,3917,0.456,3918,0.456,3919,0.456,3920,0.456,3921,0.456,3922,0.456,3923,0.456,3924,0.456,3925,0.456,3926,0.882,3927,0.882,3928,0.882,3929,0.456,3930,0.433,3931,0.456,3932,0.456,3933,0.456,3934,0.456,3935,0.456,3936,0.424,3937,2.739]],["component/355",[201,0.662,542,0.711]],["title/356-1",[20,26.048,201,24.586,548,29.371]],["name/356-1",[]],["text/356-1",[]],["component/356-1",[]],["title/356-2",[261,28.922,1954,38.537]],["name/356-2",[]],["text/356-2",[]],["component/356-2",[]],["title/356",[208,30.391,630,31.725]],["name/356",[3216,1.734]],["text/356",[2,1.025,4,1.441,5,1.678,6,0.724,9,1.086,11,0.378,18,1.03,20,1.483,28,0.948,48,0.793,50,0.952,51,2.255,73,0.891,74,0.604,82,2.152,89,1.262,91,1.418,93,0.788,95,0.72,96,1.489,105,0.637,107,1.042,108,2.643,109,1.259,111,2.595,112,1.895,118,1.116,121,1.102,123,2.358,129,1.146,133,2.682,137,1.766,147,0.894,149,1.991,151,1.647,171,0.854,178,0.607,181,0.967,187,1.889,194,1.017,201,3.757,214,1.772,216,0.984,221,1.424,222,0.687,225,0.836,226,2.962,230,1.208,233,2.213,238,1.18,242,1.685,252,2.074,259,0.944,261,0.767,275,1.089,307,1.053,315,1.053,316,1.481,319,1.369,320,0.743,322,2.017,326,1.408,331,1.369,337,1.408,339,1.454,381,1.229,382,1.492,405,0.882,419,0.617,435,1.519,455,0.913,461,1.544,471,0.826,490,3.087,496,1.131,507,0.78,509,0.757,510,1.445,518,2.151,532,0.782,537,1.18,544,1.304,546,1.483,548,5.221,557,2.326,571,1.059,579,2.326,598,1.131,628,1.007,630,0.841,640,0.964,641,1.131,647,3.747,648,1.229,663,1.841,680,1.109,698,0.678,783,2.105,909,2.939,915,1.264,924,1.048,932,1.264,950,2.895,957,2.031,958,1.007,964,1.582,969,1.095,991,1.076,1006,0.976,1036,1.351,1045,0.564,1120,0.993,1161,0.923,1191,2.513,1250,1.219,1300,2.85,1360,5.293,1382,1.208,1396,1.138,1453,1.18,1541,2.031,1557,1.582,1741,1.454,1827,1.626,1889,1.076,1954,1.021,2074,0.941,2088,1.123,2201,1.351,2210,2.381,2211,1.351,2213,1.388,2428,1.369,2545,1.123,2806,1.252,2852,1.511,2962,5.575,2967,1.154,2968,1.123,2969,2.255,2970,2.326,2973,1.582,3081,2.997,3082,5.118,3083,4.347,3084,1.369,3085,1.369,3086,1.68,3087,1.369,3088,1.369,3089,2.442,3210,2.997,3228,1.582,3229,1.582,3230,1.582,3880,1.252,3900,1.544,3902,1.544,3906,1.544,3930,1.544,3938,1.836,3939,1.836,3940,1.836,3941,1.836,3942,1.836,3943,1.836,3944,1.836,3945,1.836,3946,1.836,3947,1.836,3948,1.836]],["component/356",[201,0.662,542,0.711]],["title/357-1",[344,50.708]],["name/357-1",[]],["text/357-1",[]],["component/357-1",[]],["title/357-2",[374,33.375,707,35.628]],["name/357-2",[]],["text/357-2",[]],["component/357-2",[]],["title/357",[19,38.169,20,31.351]],["name/357",[205,1.287]],["text/357",[0,6.37,2,3.189,3,2.468,4,3.375,5,2.388,9,1.879,11,2.357,18,2.412,20,4.614,95,3.007,123,4.078,201,4.891,208,3.366,320,3.104,465,5.092,548,5.203,549,3.787,630,3.514,968,3.027,1185,6.313,1357,4.498,1541,4.756]],["component/357",[201,0.662,542,0.711]],["title/358-1",[320,35.193]],["name/358-1",[]],["text/358-1",[]],["component/358-1",[]],["title/358-2",[9,16.962,11,14.261]],["name/358-2",[]],["text/358-2",[]],["component/358-2",[]],["title/358-3",[10,41.906]],["name/358-3",[]],["text/358-3",[]],["component/358-3",[]],["title/358-4",[968,34.315]],["name/358-4",[]],["text/358-4",[]],["component/358-4",[]],["title/358-5",[374,33.375,707,35.628]],["name/358-5",[]],["text/358-5",[]],["component/358-5",[]],["title/358",[2,27.205]],["name/358",[2,0.81]],["text/358",[0,1.341,2,3.511,3,1.766,5,2.295,6,0.951,9,2.431,10,3.553,11,2.52,12,1.712,18,0.758,24,2.983,26,1.186,39,1.526,46,2.184,48,1.797,61,1.538,64,1.287,81,1.088,84,1.752,89,0.929,91,1.044,96,1.843,123,2.212,132,1.505,133,1.498,134,1.044,138,1.495,149,1.537,151,1.212,176,2.292,181,2.381,187,1.39,201,4.501,207,1.985,221,0.774,226,1.849,233,1.203,235,1.046,250,1.276,251,1.39,261,1.007,266,1.135,272,1.335,275,1.43,307,1.383,320,3.264,321,1.781,355,1.549,363,1.538,372,2.514,379,0.915,387,1.217,388,2.5,401,1.923,405,1.158,415,2.203,432,1.918,444,1.561,446,1.712,462,1.166,477,1.732,478,1.6,490,0.999,491,1.752,496,1.485,499,1.475,535,1.369,541,0.987,542,3.001,546,1.091,548,4.116,550,1.587,584,1.414,630,1.104,647,1.676,654,1.25,722,1.26,760,3.808,802,1.485,923,1.644,927,1.26,968,3.605,983,1.31,1168,5.265,1205,1.466,1215,1.004,1311,1.376,1360,2.262,1794,1.984,1954,1.341,2270,1.66,2337,3.238,2428,1.797,2545,3.359,2962,1.6,3259,1.644,3260,1.644,3262,1.797,3263,1.644,3264,1.629,3436,2.206,3949,2.411,3950,2.411]],["component/358",[201,0.662,542,0.711]],["title/359-1",[1045,21.29,1666,24.015]],["name/359-1",[]],["text/359-1",[]],["component/359-1",[]],["title/359",[]],["name/359",[2853,1.51]],["text/359",[8,3.954,9,2.087,11,2.248,74,2.802,178,2.816,201,3.64,221,2.736,321,2.764,379,3.233,419,2.866,514,4.387,542,3.915,698,4.033,1045,3.703,1666,3.785]],["component/359",[201,0.662,542,0.711]],["title/360-1",[149,21.259,708,25.823,1215,23.97]],["name/360-1",[]],["text/360-1",[]],["component/360-1",[]],["title/360-2",[1045,21.29,1666,24.015]],["name/360-2",[]],["text/360-2",[]],["component/360-2",[]],["title/360-3",[220,23.711,1039,26.676]],["name/360-3",[]],["text/360-3",[]],["component/360-3",[]],["title/360-4",[2908,42.932]],["name/360-4",[]],["text/360-4",[]],["component/360-4",[]],["title/360",[126,25.488]],["name/360",[126,0.759]],["text/360",[8,3.279,9,1.845,11,2.424,57,2.281,74,2.477,96,2.529,105,2.612,136,2.066,137,1.641,149,1.85,178,2.49,181,3.35,201,3.868,220,1.715,221,2.908,321,2.443,379,2.858,399,1.881,419,2.533,514,4.047,542,4.627,596,1.99,698,3.721,708,2.248,993,3.875,1039,1.929,1045,3.319,1088,3.493,1215,2.086,1666,3.139,2212,3.297,2909,2.163,2911,2.359,2913,2.359,2915,2.359,2916,3.719]],["component/360",[201,0.662,542,0.711]],["title/361-1",[2908,42.932]],["name/361-1",[]],["text/361-1",[]],["component/361-1",[]],["title/361",[]],["name/361",[2917,1.545]],["text/361",[8,2.383,9,1.611,11,2.177,57,2.995,74,2.163,105,3.183,136,2.714,137,2.156,178,2.174,181,3.682,201,3.922,221,2.948,321,2.134,379,2.496,399,2.47,419,2.212,514,3.689,542,4.858,596,2.613,698,3.392,1045,2.822,1088,4.257,1666,2.281,2212,4.33,2909,2.84,2911,3.098,2913,3.098,2915,3.098,2916,4.532]],["component/361",[201,0.662,542,0.711]],["title/362-1",[222,25.902,226,23.333]],["name/362-1",[]],["text/362-1",[]],["component/362-1",[]],["title/362-2",[19,31.713,105,19.953,909,22.707]],["name/362-2",[]],["text/362-2",[]],["component/362-2",[]],["title/362",[3,13.831,9,10.531,11,8.853,14,14.801,201,18.371]],["name/362",[205,1.287]],["text/362",[3,3.642,9,2.46,11,2.332,14,3.458,18,2.359,80,3.119,96,2.52,105,2.602,201,4.838,222,2.807,226,2.528,235,3.258,261,3.134,435,3.48,542,3.448,909,2.961,941,4.328,1280,8.449,1281,8.267,1282,5.595,1283,6.176,1284,6.649,2212,4.94]],["component/362",[201,0.662,542,0.711]],["title/363-1",[1,58.751]],["name/363-1",[]],["text/363-1",[]],["component/363-1",[]],["title/363-2",[320,28.028,550,45.585]],["name/363-2",[]],["text/363-2",[]],["component/363-2",[]],["title/363-3",[548,25.122,732,38.347,909,19.422,3828,38.996]],["name/363-3",[]],["text/363-3",[]],["component/363-3",[]],["title/363-4",[320,28.028,563,36.205]],["name/363-4",[]],["text/363-4",[]],["component/363-4",[]],["title/363-5",[201,16.31,321,12.382,322,23.509,466,22.385,660,23.355,1651,28.46]],["name/363-5",[]],["text/363-5",[]],["component/363-5",[]],["title/363",[320,28.028,548,35.351]],["name/363",[3829,2.294]],["text/363",[0,0.5,1,0.607,2,0.755,3,1.494,5,0.529,6,1.643,9,1.137,11,0.748,14,1.251,18,1.309,22,1.082,24,0.775,30,0.352,36,0.472,51,0.457,60,0.533,61,0.574,67,0.582,73,1.17,74,0.558,77,0.979,78,1.083,82,2.467,84,0.654,89,1.4,91,0.389,92,1.137,93,0.386,94,0.527,95,0.352,96,0.81,98,0.891,100,0.565,105,0.589,106,0.592,109,0.927,110,0.632,113,0.654,114,0.464,124,0.597,133,0.324,134,2.202,136,0.371,137,2.71,151,0.854,155,1.226,171,2.728,172,0.863,178,1.201,181,0.266,194,0.498,201,3.768,216,0.91,221,1.337,222,0.336,226,1.225,235,0.737,237,0.927,247,3.147,250,0.476,252,1.075,257,0.472,259,0.873,266,0.8,277,1.137,279,0.753,283,1.108,286,1.204,317,0.68,320,3.569,321,1.65,322,1.881,332,0.701,333,0.435,335,0.419,351,0.578,372,0.543,379,0.341,381,0.602,382,0.773,387,0.454,392,0.69,409,0.68,411,1.181,412,0.725,416,0.807,419,1.222,428,0.654,439,2.879,455,1.199,462,1.758,466,3.22,471,1.085,482,1.206,490,1,492,0.949,496,0.554,501,1.277,507,1.769,508,0.936,509,1.717,510,3.139,516,2.074,523,1.115,528,0.519,532,2.167,537,1.55,542,0.78,543,2.957,547,2.632,548,5.008,550,2.393,556,1.147,558,1.193,560,0.55,562,1.911,563,2.871,564,0.712,566,0.619,568,1.266,569,1.266,570,0.725,571,1.391,575,1.881,576,1.075,587,0.712,590,0.923,596,0.675,600,0.582,601,0.67,613,0.613,621,0.646,640,0.472,645,0.5,647,3.536,660,1.039,663,2.339,674,0.592,677,1.174,678,0.55,694,0.632,696,0.613,703,0.419,708,0.404,709,0.516,732,1.879,764,0.625,772,0.527,783,2.675,787,0.639,892,0.67,909,2.578,915,0.619,921,2.464,950,2.373,955,0.775,957,0.557,960,0.533,966,1.166,969,0.537,983,0.489,1006,0.478,1012,0.712,1030,1.397,1036,0.662,1038,0.775,1045,0.522,1081,1.323,1109,0.775,1124,0.561,1154,0.597,1160,0.613,1190,0.74,1238,0.979,1300,0.578,1308,0.67,1309,0.654,1360,2.262,1530,0.632,1556,1.234,1580,0.756,1600,1.345,1651,0.67,1655,0.74,1670,0.602,1691,0.662,1695,0.561,1699,0.625,1712,0.662,1735,0.69,1794,0.74,1817,1.428,1849,1.158,1963,1.283,2074,1.236,2201,1.775,2203,1.879,2210,2.22,2211,2.675,2212,1.117,2213,1.823,2267,0.775,2279,0.613,2408,0.725,2629,0.625,2806,0.613,2897,2.957,2898,2.582,2962,2.763,3038,0.725,3039,0.725,3040,1.798,3082,0.67,3083,1.193,3084,0.67,3085,1.798,3087,1.798,3088,1.798,3089,3.103,3828,0.712,3830,0.797,3831,0.797,3832,0.797,3833,0.797,3834,0.797,3835,0.797,3836,2.137,3837,1.504,3838,0.797,3839,0.797,3841,1.345,3842,0.712,3843,0.797,3844,0.712,3846,1.345,3847,1.345,3848,0.712,3849,0.712,3850,0.712,3851,0.712,3852,1.345,3853,1.345,3854,1.345,3855,1.345,3856,1.345,3857,1.345,3858,1.345,3863,1.345,3864,5.177,3865,3.298,3866,0.712,3867,0.797,3868,0.797,3869,0.797,3870,0.797,3871,0.797,3872,0.797,3873,0.797,3874,0.797,3875,0.712,3876,0.712,3936,0.74,3937,2.513]],["component/363",[201,0.662,542,0.711]],["title/364-1",[1,58.751]],["name/364-1",[]],["text/364-1",[]],["component/364-1",[]],["title/364",[1164,63.206]],["name/364",[1164,1.882]],["text/364",[2,1.663,3,1.71,11,1.932,13,3.374,18,2.476,25,4.32,62,3.192,80,2.209,95,2.084,133,3.735,137,2.581,201,5.266,204,2.724,218,2.379,221,1.707,266,2.504,275,4.672,335,2.48,399,1.996,401,2.457,422,4.551,462,2.57,490,3.264,493,4.142,542,4.765,548,4.02,554,7.309,599,3.274,950,6.124,952,3.819,968,3.108,1158,3.232,1164,3.864,1360,2.889,1901,4.078,2279,3.625,2350,3.963,2962,3.529,3072,5.724,3877,4.71,3878,4.212]],["component/364",[201,0.662,542,0.711]],["title/365-1",[89,33.495]],["name/365-1",[]],["text/365-1",[]],["component/365-1",[]],["title/365-2",[155,21.863,284,28.301,677,20.933,969,25.659,3083,30.211]],["name/365-2",[]],["text/365-2",[]],["component/365-2",[]],["title/365-3",[155,14.521,284,18.798,399,10.725,546,12.928,596,11.346,677,13.904,969,17.043,3083,20.067,3879,25.303]],["name/365-3",[]],["text/365-3",[]],["component/365-3",[]],["title/365-4",[155,19.41,284,25.125,677,18.584,969,22.78,1470,26.282,3880,26.03]],["name/365-4",[]],["text/365-4",[]],["component/365-4",[]],["title/365-5",[155,17.451,172,17.451,279,15.229,677,16.709,969,20.482,1470,23.63,3880,23.404]],["name/365-5",[]],["text/365-5",[]],["component/365-5",[]],["title/365-6",[126,6.686,155,11.6,178,7.54,279,10.122,399,8.567,548,11.645,677,11.106,969,13.614,1033,13.697,1470,15.707,2065,16.204,3880,15.557]],["name/365-6",[]],["text/365-6",[]],["component/365-6",[]],["title/365-7",[382,26.202,416,27.365,420,33.744]],["name/365-7",[]],["text/365-7",[]],["component/365-7",[]],["title/365-8",[432,26.518,2065,40.871,3881,50.982]],["name/365-8",[]],["text/365-8",[]],["component/365-8",[]],["title/365",[541,35.613]],["name/365",[541,1.06]],["text/365",[2,0.453,3,0.166,5,0.822,6,1.314,8,0.524,12,0.212,18,1.146,22,0.231,23,0.354,25,0.282,30,0.39,33,0.565,48,0.222,56,0.408,67,2.361,68,1.445,73,1.281,74,0.615,75,0.389,82,2.753,89,1.153,93,0.621,95,1.035,96,0.486,98,0.981,105,0.179,106,0.339,109,1.015,122,0.275,126,1.068,134,1.948,135,0.872,136,0.771,137,2.965,150,0.92,151,1.328,154,0.288,155,2.006,164,1.061,166,0.24,171,1.548,172,2.544,175,1.035,176,0.947,178,0.749,180,0.354,181,0.552,201,2.898,217,1.333,220,0.176,222,0.372,223,1.232,225,2.049,226,1.009,235,0.223,237,1.238,238,0.331,248,0.362,255,0.292,257,0.523,259,0.512,266,0.681,275,0.858,279,1.329,284,0.339,317,0.389,320,2.81,321,0.971,322,1.844,332,1.127,335,0.24,350,0.693,351,0.64,360,0.328,382,1.203,388,0.234,392,1.109,399,0.702,401,0.238,411,1.3,416,2.597,418,0.37,419,1.6,420,3.328,432,0.459,435,0.671,438,0.667,439,2.26,441,0.535,455,1.127,462,1.907,466,0.848,467,0.384,470,0.285,471,1.189,482,1.61,490,0.775,491,0.374,492,0.288,505,0.536,507,1.415,508,0.284,509,1.235,510,3.063,516,2.568,518,0.746,521,0.743,522,0.858,523,1.384,532,1.276,537,1.925,539,0.617,542,0.665,543,2.589,548,4.573,558,2.339,563,4.071,571,2.885,573,0.379,575,2.93,576,2.498,591,0.838,593,0.401,596,2.56,597,0.395,600,0.645,640,0.759,641,0.613,647,3.129,648,0.345,654,0.267,663,2.529,667,0.331,677,0.91,680,0.874,702,1.628,703,0.465,704,1.697,709,1.3,710,0.366,713,1.078,723,0.311,741,1.369,742,0.986,744,0.304,746,1.078,761,0.401,764,1.576,775,0.3,780,0.257,783,3.057,785,0.28,788,0.83,909,1.314,932,0.354,935,0.661,941,0.574,950,1.724,958,0.282,966,0.249,969,2.354,995,0.366,1032,0.226,1033,1.361,1036,0.379,1045,0.697,1052,1.796,1081,1.766,1124,0.321,1191,2.297,1205,0.313,1298,1.064,1304,0.351,1324,0.321,1360,3.084,1453,0.93,1470,0.354,1501,0.379,1695,1.167,1699,0.358,1740,0.408,1796,0.384,1808,2.482,1831,0.389,1849,2.69,1853,1.051,1889,0.302,1963,0.753,1981,0.424,2065,3.553,2074,1.353,2192,0.444,2201,1.944,2203,3.074,2210,2.419,2211,1.944,2212,1.23,2213,1.997,2279,1.275,2331,0.408,2333,0.424,2368,0.433,2629,0.358,2799,0.389,2897,3.196,2898,3.196,2962,4.032,2969,0.354,2970,0.366,3040,1.69,3082,1.394,3084,0.743,3085,1.969,3087,1.69,3088,1.69,3089,2.941,3302,0.433,3303,0.433,3841,1.146,3842,0.408,3844,0.408,3846,1.481,3847,1.146,3848,0.789,3849,1.481,3850,0.408,3851,0.408,3852,1.481,3853,1.481,3854,1.481,3855,1.481,3856,1.796,3857,1.481,3858,1.796,3859,0.858,3860,0.858,3861,0.858,3862,0.858,3863,1.796,3864,4.496,3865,1.481,3866,1.481,3875,0.408,3876,0.789,3878,0.408,3880,0.679,3883,0.456,3887,0.456,3888,0.456,3889,0.456,3890,0.456,3891,0.456,3892,0.456,3893,0.456,3895,1.282,3896,0.456,3897,0.456,3898,0.882,3899,0.456,3900,0.433,3901,0.456,3902,0.433,3903,0.456,3904,0.456,3905,0.456,3906,0.433,3907,0.456,3908,0.456,3909,0.456,3910,0.456,3911,0.456,3912,0.456,3913,0.456,3914,0.456,3915,0.456,3916,0.456,3917,0.456,3918,0.456,3919,0.456,3920,0.456,3921,0.456,3922,0.456,3923,0.456,3924,0.456,3925,0.456,3926,0.882,3927,0.882,3928,0.882,3929,0.456,3930,0.433,3931,0.456,3932,0.456,3933,0.456,3934,0.456,3935,0.456,3936,0.424,3937,2.739]],["component/365",[201,0.662,542,0.711]],["title/366-1",[20,26.048,201,24.586,548,29.371]],["name/366-1",[]],["text/366-1",[]],["component/366-1",[]],["title/366-2",[261,28.922,1954,38.537]],["name/366-2",[]],["text/366-2",[]],["component/366-2",[]],["title/366",[208,30.391,630,31.725]],["name/366",[3216,1.734]],["text/366",[2,1.025,4,1.441,5,1.678,6,0.724,9,1.086,11,0.378,18,1.03,20,1.483,28,0.948,48,0.793,50,0.952,51,2.255,73,0.891,74,0.604,82,2.152,89,1.262,91,1.418,93,0.788,95,0.72,96,1.489,105,0.637,107,1.042,108,2.643,109,1.259,111,2.595,112,1.895,118,1.116,121,1.102,123,2.358,129,1.146,133,2.682,137,1.766,147,0.894,149,1.991,151,1.647,171,0.854,178,0.607,181,0.967,187,1.889,194,1.017,201,3.757,214,1.772,216,0.984,221,1.424,222,0.687,225,0.836,226,2.962,230,1.208,233,2.213,238,1.18,242,1.685,252,2.074,259,0.944,261,0.767,275,1.089,307,1.053,315,1.053,316,1.481,319,1.369,320,0.743,322,2.017,326,1.408,331,1.369,337,1.408,339,1.454,381,1.229,382,1.492,405,0.882,419,0.617,435,1.519,455,0.913,461,1.544,471,0.826,490,3.087,496,1.131,507,0.78,509,0.757,510,1.445,518,2.151,532,0.782,537,1.18,544,1.304,546,1.483,548,5.221,557,2.326,571,1.059,579,2.326,598,1.131,628,1.007,630,0.841,640,0.964,641,1.131,647,3.747,648,1.229,663,1.841,680,1.109,698,0.678,783,2.105,909,2.939,915,1.264,924,1.048,932,1.264,950,2.895,957,2.031,958,1.007,964,1.582,969,1.095,991,1.076,1006,0.976,1036,1.351,1045,0.564,1120,0.993,1161,0.923,1191,2.513,1250,1.219,1300,2.85,1360,5.293,1382,1.208,1396,1.138,1453,1.18,1541,2.031,1557,1.582,1741,1.454,1827,1.626,1889,1.076,1954,1.021,2074,0.941,2088,1.123,2201,1.351,2210,2.381,2211,1.351,2213,1.388,2428,1.369,2545,1.123,2806,1.252,2852,1.511,2962,5.575,2967,1.154,2968,1.123,2969,2.255,2970,2.326,2973,1.582,3081,2.997,3082,5.118,3083,4.347,3084,1.369,3085,1.369,3086,1.68,3087,1.369,3088,1.369,3089,2.442,3210,2.997,3228,1.582,3229,1.582,3230,1.582,3880,1.252,3900,1.544,3902,1.544,3906,1.544,3930,1.544,3938,1.836,3939,1.836,3940,1.836,3941,1.836,3942,1.836,3943,1.836,3944,1.836,3945,1.836,3946,1.836,3947,1.836,3948,1.836]],["component/366",[201,0.662,542,0.711]],["title/367-1",[344,50.708]],["name/367-1",[]],["text/367-1",[]],["component/367-1",[]],["title/367-2",[374,33.375,707,35.628]],["name/367-2",[]],["text/367-2",[]],["component/367-2",[]],["title/367",[19,38.169,20,31.351]],["name/367",[205,1.287]],["text/367",[0,6.37,2,3.189,3,2.468,4,3.375,5,2.388,9,1.879,11,2.357,18,2.412,20,4.614,95,3.007,123,4.078,201,4.891,208,3.366,320,3.104,465,5.092,548,5.203,549,3.787,630,3.514,968,3.027,1185,6.313,1357,4.498,1541,4.756]],["component/367",[201,0.662,542,0.711]],["title/368-1",[320,35.193]],["name/368-1",[]],["text/368-1",[]],["component/368-1",[]],["title/368-2",[9,16.962,11,14.261]],["name/368-2",[]],["text/368-2",[]],["component/368-2",[]],["title/368-3",[10,41.906]],["name/368-3",[]],["text/368-3",[]],["component/368-3",[]],["title/368-4",[968,34.315]],["name/368-4",[]],["text/368-4",[]],["component/368-4",[]],["title/368-5",[374,33.375,707,35.628]],["name/368-5",[]],["text/368-5",[]],["component/368-5",[]],["title/368",[2,27.205]],["name/368",[2,0.81]],["text/368",[0,1.341,2,3.511,3,1.766,5,2.295,6,0.951,9,2.431,10,3.553,11,2.52,12,1.712,18,0.758,24,2.983,26,1.186,39,1.526,46,2.184,48,1.797,61,1.538,64,1.287,81,1.088,84,1.752,89,0.929,91,1.044,96,1.843,123,2.212,132,1.505,133,1.498,134,1.044,138,1.495,149,1.537,151,1.212,176,2.292,181,2.381,187,1.39,201,4.501,207,1.985,221,0.774,226,1.849,233,1.203,235,1.046,250,1.276,251,1.39,261,1.007,266,1.135,272,1.335,275,1.43,307,1.383,320,3.264,321,1.781,355,1.549,363,1.538,372,2.514,379,0.915,387,1.217,388,2.5,401,1.923,405,1.158,415,2.203,432,1.918,444,1.561,446,1.712,462,1.166,477,1.732,478,1.6,490,0.999,491,1.752,496,1.485,499,1.475,535,1.369,541,0.987,542,3.001,546,1.091,548,4.116,550,1.587,584,1.414,630,1.104,647,1.676,654,1.25,722,1.26,760,3.808,802,1.485,923,1.644,927,1.26,968,3.605,983,1.31,1168,5.265,1205,1.466,1215,1.004,1311,1.376,1360,2.262,1794,1.984,1954,1.341,2270,1.66,2337,3.238,2428,1.797,2545,3.359,2962,1.6,3259,1.644,3260,1.644,3262,1.797,3263,1.644,3264,1.629,3436,2.206,3949,2.411,3950,2.411]],["component/368",[201,0.662,542,0.711]],["title/369-1",[149,21.259,708,25.823,1215,23.97]],["name/369-1",[]],["text/369-1",[]],["component/369-1",[]],["title/369-2",[52,23.584,139,24.374]],["name/369-2",[]],["text/369-2",[]],["component/369-2",[]],["title/369-3",[1045,21.29,1666,24.015]],["name/369-3",[]],["text/369-3",[]],["component/369-3",[]],["title/369-4",[220,23.711,1039,26.676]],["name/369-4",[]],["text/369-4",[]],["component/369-4",[]],["title/369-5",[2907,44.56]],["name/369-5",[]],["text/369-5",[]],["component/369-5",[]],["title/369-6",[2908,42.932]],["name/369-6",[]],["text/369-6",[]],["component/369-6",[]],["title/369",[126,25.488]],["name/369",[126,0.759]],["text/369",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,202,4.694,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3951,4.738,3952,4.653]],["component/369",[202,1.292]],["title/370-1",[52,23.584,139,24.374]],["name/370-1",[]],["text/370-1",[]],["component/370-1",[]],["title/370-2",[1045,21.29,1666,24.015]],["name/370-2",[]],["text/370-2",[]],["component/370-2",[]],["title/370",[]],["name/370",[2853,1.51]],["text/370",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,202,4.58,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3951,5.744]],["component/370",[202,1.292]],["title/371-1",[2907,44.56]],["name/371-1",[]],["text/371-1",[]],["component/371-1",[]],["title/371-2",[2908,42.932]],["name/371-2",[]],["text/371-2",[]],["component/371-2",[]],["title/371",[]],["name/371",[2917,1.545]],["text/371",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,202,4.707,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3951,3.955,3952,5.872]],["component/371",[202,1.292]],["title/372-1",[222,25.902,226,23.333]],["name/372-1",[]],["text/372-1",[]],["component/372-1",[]],["title/372-2",[19,31.713,105,19.953,909,22.707]],["name/372-2",[]],["text/372-2",[]],["component/372-2",[]],["title/372",[9,12.054,11,10.134,14,16.942,202,23.255]],["name/372",[205,1.287]],["text/372",[3,2.441,9,2.975,11,2.344,14,3.483,18,2.385,26,3.732,30,2.974,33,4.307,80,3.153,96,2.547,105,2.631,181,2.241,202,5.38,222,2.838,226,2.556,235,3.293,261,3.168,435,3.518,909,2.994,941,4.376,1285,6.943,1286,6.943,1287,6.011,3952,6.011]],["component/372",[202,1.292]],["title/373-1",[968,34.315]],["name/373-1",[]],["text/373-1",[]],["component/373-1",[]],["title/373-2",[105,30.154]],["name/373-2",[]],["text/373-2",[]],["component/373-2",[]],["title/373-3",[11,11.848,51,29.259,234,30.206]],["name/373-3",[]],["text/373-3",[]],["component/373-3",[]],["title/373",[2,27.205]],["name/373",[2,0.81]],["text/373",[2,3.271,3,2.693,4,3.312,5,0.932,9,2.352,11,2.493,12,3.097,13,1.283,14,2.591,24,1.368,26,1.473,30,1.174,36,1.572,51,1.523,57,1.364,80,1.244,91,3.624,95,1.961,105,3.137,109,2.476,116,1.766,118,1.82,136,1.235,137,0.981,149,1.106,176,1.251,181,3.415,194,1.658,202,4.537,208,1.314,209,1.709,218,1.34,220,1.025,221,2.905,234,1.572,235,2.172,282,1.746,315,1.718,318,1.896,358,2.934,387,1.511,388,1.364,401,1.384,405,1.438,432,2.969,475,1.857,501,1.585,546,1.356,565,1.82,596,1.19,634,1.869,645,1.666,887,2.151,891,3.266,909,1.182,927,1.565,968,3.972,1037,1.924,1088,1.388,1120,1.62,1161,3.784,1238,1.727,1310,3.145,1311,1.709,1326,1.756,1451,2.204,2792,1.955,2793,2.849,2856,2.653,2911,1.41,2913,1.41,2915,1.41,3952,3.964,3953,3.217,3954,3.217,3955,3.217,3956,3.217,3957,3.217]],["component/373",[202,1.292]],["title/374-1",[202,27.189,272,31.864,509,23.736]],["name/374-1",[]],["text/374-1",[]],["component/374-1",[]],["title/374-2",[172,29.259,176,24.03,202,27.189]],["name/374-2",[]],["text/374-2",[]],["component/374-2",[]],["title/374-3",[135,26.847,202,27.189,1112,43.497]],["name/374-3",[]],["text/374-3",[]],["component/374-3",[]],["title/374-4",[202,27.189,272,31.864,1396,35.676]],["name/374-4",[]],["text/374-4",[]],["component/374-4",[]],["title/374-5",[5,21.563,202,32.724]],["name/374-5",[]],["text/374-5",[]],["component/374-5",[]],["title/374-6",[65,42.191]],["name/374-6",[]],["text/374-6",[]],["component/374-6",[]],["title/374-7",[2463,60.472]],["name/374-7",[]],["text/374-7",[]],["component/374-7",[]],["title/374-8",[431,52.864]],["name/374-8",[]],["text/374-8",[]],["component/374-8",[]],["title/374-9",[442,50.154]],["name/374-9",[]],["text/374-9",[]],["component/374-9",[]],["title/374-10",[2463,60.472]],["name/374-10",[]],["text/374-10",[]],["component/374-10",[]],["title/374-11",[431,52.864]],["name/374-11",[]],["text/374-11",[]],["component/374-11",[]],["title/374-12",[14,16.942,18,15.472,68,21.365,196,20.921]],["name/374-12",[]],["text/374-12",[]],["component/374-12",[]],["title/374-13",[389,41.355]],["name/374-13",[]],["text/374-13",[]],["component/374-13",[]],["title/374-14",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/374-14",[]],["text/374-14",[]],["component/374-14",[]],["title/374-15",[126,20.299,1032,30.391]],["name/374-15",[]],["text/374-15",[]],["component/374-15",[]],["title/374-16",[220,23.711,1039,26.676]],["name/374-16",[]],["text/374-16",[]],["component/374-16",[]],["title/374",[541,35.613]],["name/374",[541,1.06]],["text/374",[2,0.295,3,0.571,4,0.415,5,1.637,6,1.255,8,0.342,9,1.058,11,0.889,14,0.611,18,2.114,20,0.427,22,0.423,28,0.487,30,0.987,33,0.535,36,0.495,48,0.767,50,1.305,62,1.511,64,0.504,65,2.095,68,2.088,70,0.776,73,0.458,74,2.211,77,1.024,80,0.738,81,0.802,89,1.853,93,0.405,94,0.553,95,0.696,96,0.596,100,1.117,105,0.616,107,0.535,109,1.222,112,1.359,116,1.048,118,0.573,123,0.501,126,1.266,129,1.109,133,2.305,135,2.454,136,0.389,137,2.097,139,1.851,147,1.225,149,0.348,150,0.874,151,0.474,154,0.527,155,0.48,166,1.174,169,0.917,170,3.655,171,3.398,172,1.921,173,0.735,175,0.984,176,1.328,178,0.312,181,2.439,187,1.024,196,2.045,202,5.013,204,0.91,207,0.847,208,0.414,214,1.362,216,0.952,217,0.476,218,0.422,220,0.608,222,1.189,224,0.553,225,0.809,226,1.911,229,1.036,233,0.886,235,0.409,242,0.485,246,0.525,250,0.94,272,3.544,287,1.066,309,1.878,314,0.547,321,0.306,322,0.581,333,0.456,334,0.466,335,1.484,351,0.606,363,0.602,365,0.686,379,0.358,382,0.809,386,0.643,389,0.449,391,1.512,399,0.945,401,0.436,413,0.544,417,1.109,419,1.07,422,3.902,425,0.686,431,3.197,435,0.437,441,1.398,448,0.974,455,0.469,462,0.456,469,0.649,470,0.522,471,1.7,490,0.391,492,0.527,496,0.581,502,0.593,505,0.508,507,1.352,508,0.52,509,1.781,514,0.379,518,2.554,520,1.705,523,0.821,526,0.957,528,0.544,529,0.626,531,1.133,532,1.073,546,1.71,548,0.481,551,0.577,554,0.735,565,0.573,582,0.581,590,0.513,593,0.735,599,1.959,617,0.626,622,1.433,625,0.735,628,0.517,634,0.589,640,0.495,645,0.525,655,1.275,690,1.814,698,0.348,703,0.44,709,0.541,718,0.637,744,0.556,748,0.611,772,0.553,780,1.256,785,0.513,788,0.541,803,1.189,899,0.602,909,1.491,924,0.538,925,0.686,927,0.493,935,0.626,949,0.525,957,0.585,958,0.517,960,0.56,966,0.456,968,0.701,972,0.703,982,0.724,1032,1.104,1039,0.684,1045,1.617,1111,0.56,1116,0.632,1120,0.51,1243,0.541,1247,1.211,1287,1.407,1317,0.863,1333,2.91,1386,0.566,1396,2.342,1568,0.747,1650,0.694,1669,0.761,1834,0.678,1853,1.291,1869,0.724,1878,1.189,1889,0.553,1895,0.747,2022,0.649,2074,0.91,2088,0.577,2123,1.571,2165,0.67,2171,0.863,2172,0.863,2173,0.863,2236,1.625,2275,0.735,2325,0.776,2350,0.703,2429,0.656,2463,1.75,2507,1.262,2607,0.747,2623,0.776,2624,0.776,2667,0.703,2737,0.863,2818,0.566,2909,1.087,2928,0.703,2929,0.694,2936,0.793,2937,0.793,2938,0.793,2939,0.793,2940,0.793,2942,0.793,2943,1.494,2944,0.793,2945,1.494,2953,0.793,2955,0.793,2960,0.761,2961,0.761,2966,0.761,2967,0.593,2968,0.577,2969,0.649,2970,0.67,2971,0.793,2972,0.793,2980,1.06,3060,0.836,3064,0.836,3065,0.836,3217,0.897,3220,0.724,3225,0.836,3284,1.462,3311,1.511,3314,0.602,3958,0.897,3959,0.897,3960,0.897,3961,0.897,3962,2.23,3963,2.23,3964,0.897,3965,1.69,3966,0.897,3967,0.897,3968,0.897,3969,1.69,3970,0.897,3971,0.897,3972,0.897,3973,0.897,3974,0.897,3975,0.897,3976,2.395,3977,2.395,3978,1.69,3979,1.69,3980,1.69,3981,1.69,3982,1.69]],["component/374",[202,1.292]],["title/375-1",[52,23.584,139,24.374]],["name/375-1",[]],["text/375-1",[]],["component/375-1",[]],["title/375-2",[1045,21.29,1666,24.015]],["name/375-2",[]],["text/375-2",[]],["component/375-2",[]],["title/375",[]],["name/375",[2853,1.51]],["text/375",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,202,4.58,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3951,5.744]],["component/375",[202,1.292]],["title/376-1",[149,21.259,708,25.823,1215,23.97]],["name/376-1",[]],["text/376-1",[]],["component/376-1",[]],["title/376-2",[52,23.584,139,24.374]],["name/376-2",[]],["text/376-2",[]],["component/376-2",[]],["title/376-3",[1045,21.29,1666,24.015]],["name/376-3",[]],["text/376-3",[]],["component/376-3",[]],["title/376-4",[220,23.711,1039,26.676]],["name/376-4",[]],["text/376-4",[]],["component/376-4",[]],["title/376-5",[2907,44.56]],["name/376-5",[]],["text/376-5",[]],["component/376-5",[]],["title/376-6",[2908,42.932]],["name/376-6",[]],["text/376-6",[]],["component/376-6",[]],["title/376",[126,25.488]],["name/376",[126,0.759]],["text/376",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,202,4.694,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3951,4.738,3952,4.653]],["component/376",[202,1.292]],["title/377-1",[2907,44.56]],["name/377-1",[]],["text/377-1",[]],["component/377-1",[]],["title/377-2",[2908,42.932]],["name/377-2",[]],["text/377-2",[]],["component/377-2",[]],["title/377",[]],["name/377",[2917,1.545]],["text/377",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,202,4.707,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3951,3.955,3952,5.872]],["component/377",[202,1.292]],["title/378-1",[222,25.902,226,23.333]],["name/378-1",[]],["text/378-1",[]],["component/378-1",[]],["title/378-2",[19,31.713,105,19.953,909,22.707]],["name/378-2",[]],["text/378-2",[]],["component/378-2",[]],["title/378",[9,12.054,11,10.134,14,16.942,202,23.255]],["name/378",[205,1.287]],["text/378",[3,2.441,9,2.975,11,2.344,14,3.483,18,2.385,26,3.732,30,2.974,33,4.307,80,3.153,96,2.547,105,2.631,181,2.241,202,5.38,222,2.838,226,2.556,235,3.293,261,3.168,435,3.518,909,2.994,941,4.376,1285,6.943,1286,6.943,1287,6.011,3952,6.011]],["component/378",[202,1.292]],["title/379-1",[65,42.191]],["name/379-1",[]],["text/379-1",[]],["component/379-1",[]],["title/379-2",[2463,60.472]],["name/379-2",[]],["text/379-2",[]],["component/379-2",[]],["title/379-3",[431,52.864]],["name/379-3",[]],["text/379-3",[]],["component/379-3",[]],["title/379-4",[442,50.154]],["name/379-4",[]],["text/379-4",[]],["component/379-4",[]],["title/379-5",[2463,60.472]],["name/379-5",[]],["text/379-5",[]],["component/379-5",[]],["title/379-6",[431,52.864]],["name/379-6",[]],["text/379-6",[]],["component/379-6",[]],["title/379-7",[14,16.942,18,15.472,68,21.365,196,20.921]],["name/379-7",[]],["text/379-7",[]],["component/379-7",[]],["title/379-8",[389,41.355]],["name/379-8",[]],["text/379-8",[]],["component/379-8",[]],["title/379-9",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/379-9",[]],["text/379-9",[]],["component/379-9",[]],["title/379-10",[126,20.299,1032,30.391]],["name/379-10",[]],["text/379-10",[]],["component/379-10",[]],["title/379-11",[220,23.711,1039,26.676]],["name/379-11",[]],["text/379-11",[]],["component/379-11",[]],["title/379",[541,35.613]],["name/379",[541,1.06]],["text/379",[5,0.891,6,1.13,9,0.701,11,1.149,14,0.544,18,2.44,22,0.709,30,0.619,33,0.897,48,1.236,50,1.484,62,0.949,64,0.844,65,2.707,68,2.091,70,1.3,73,0.767,74,2.405,77,1.651,80,1.19,89,2.149,93,0.679,96,0.531,100,1.8,112,1.677,116,1.688,126,1.635,129,1.787,133,0.569,135,2.603,137,2.232,139,2.397,147,1.394,151,0.794,166,1.831,169,1.478,170,1.729,171,3.962,181,2.777,187,1.651,196,2.895,202,4.938,204,1.467,207,0.754,217,0.797,218,0.707,220,0.98,222,1.802,224,0.927,225,0.72,226,0.532,233,1.429,250,1.515,272,2.173,309,2.774,314,0.916,321,0.513,322,0.973,334,0.78,335,1.831,351,1.016,379,0.6,382,1.303,389,0.751,391,2.291,399,1.474,413,0.911,419,0.963,422,4.891,425,1.149,431,4.14,435,0.733,441,1.453,448,1.57,455,0.786,470,0.875,471,2.168,507,1.217,509,1.181,518,2.489,520,2.583,523,1.323,531,1.826,532,1.22,546,1.296,551,0.967,565,0.961,582,0.973,590,0.859,593,1.231,599,2.967,617,1.049,622,2.31,628,0.867,634,0.986,655,1.988,690,2.314,698,0.584,703,0.737,718,1.068,780,0.789,785,0.859,925,1.149,935,1.049,949,0.879,957,0.98,960,0.937,972,1.178,1032,1.722,1039,1.103,1045,2.248,1111,0.937,1116,1.058,1243,0.907,1287,1.252,1317,1.446,1333,4.408,1386,0.949,1396,0.98,1568,1.252,1650,1.163,1669,1.275,1853,2.081,1878,1.917,1895,1.252,2022,1.088,2074,0.81,2123,1.787,2236,2.619,2275,1.231,2350,1.178,2429,1.099,2463,2.729,2737,1.446,2818,0.949,2909,1.236,2980,1.708,3060,1.4,3064,1.4,3065,1.4,3284,2.356,3311,2.356,3314,1.008,3962,2.536,3963,2.536,3972,1.504,3973,1.504,3974,1.504,3975,1.504,3976,3.734,3977,3.734,3978,2.724,3979,2.724,3980,2.724,3981,2.724,3982,2.724]],["component/379",[202,1.292]],["title/380-1",[202,27.189,272,31.864,509,23.736]],["name/380-1",[]],["text/380-1",[]],["component/380-1",[]],["title/380-2",[172,29.259,176,24.03,202,27.189]],["name/380-2",[]],["text/380-2",[]],["component/380-2",[]],["title/380-3",[135,26.847,202,27.189,1112,43.497]],["name/380-3",[]],["text/380-3",[]],["component/380-3",[]],["title/380-4",[202,27.189,272,31.864,1396,35.676]],["name/380-4",[]],["text/380-4",[]],["component/380-4",[]],["title/380-5",[5,21.563,202,32.724]],["name/380-5",[]],["text/380-5",[]],["component/380-5",[]],["title/380-6",[374,33.375,707,35.628]],["name/380-6",[]],["text/380-6",[]],["component/380-6",[]],["title/380",[208,30.391,630,31.725]],["name/380",[3216,1.734]],["text/380",[2,0.857,3,0.881,4,2.371,5,2.057,6,1.08,8,0.545,9,1.136,11,0.564,14,0.518,18,1.184,20,0.681,28,1.946,30,1.073,36,1.437,48,0.65,50,0.78,62,1.644,65,0.73,68,2.339,73,1.828,74,1.526,81,1.701,89,1.055,91,2.009,93,1.176,94,0.882,95,1.477,96,0.919,105,0.949,107,0.854,109,2.071,112,1.61,115,1.137,118,0.915,121,0.903,123,0.8,126,1.104,129,0.939,132,0.939,133,2.994,135,1.758,136,0.621,137,1.52,139,0.53,147,0.733,149,0.556,150,1.347,154,0.841,155,0.765,170,4.294,171,1.752,172,2.74,173,1.172,175,1.516,176,1.938,178,0.497,181,1.783,202,5.204,204,0.771,207,0.718,208,1.202,214,2.038,216,1.468,225,0.685,226,2.395,229,1.597,233,1.366,235,0.653,242,0.774,246,0.837,257,0.79,272,3.936,287,1.644,303,1.468,320,0.609,333,1.324,335,0.702,363,0.96,365,1.094,386,1.026,401,0.696,405,0.723,415,0.797,417,1.709,419,1.267,431,0.915,441,1.395,462,1.324,469,1.036,470,1.516,471,0.677,490,0.624,492,0.841,496,0.927,502,2.368,505,0.81,507,1.164,508,0.829,509,1.914,514,0.605,518,2.837,526,1.475,528,0.868,529,0.999,531,0.96,532,0.641,541,0.616,546,1.705,548,0.768,554,1.172,625,1.172,630,1.254,640,0.79,645,0.837,680,0.909,690,0.723,709,0.863,724,1.945,744,0.887,748,0.975,772,0.882,780,1.366,788,0.863,803,2.523,899,0.96,909,2.126,924,0.859,927,0.787,957,1.698,958,0.825,966,0.728,968,1.08,982,1.154,987,1.172,1080,1.081,1112,1.137,1120,0.814,1161,1.377,1213,1.214,1247,1.867,1287,1.192,1357,0.882,1396,2.877,1541,0.933,1543,1.057,1613,1.214,1834,1.081,1869,1.154,1889,1.606,2074,0.771,2088,0.921,2123,0.939,2165,1.069,2171,1.377,2172,1.377,2173,1.377,2325,1.238,2507,1.945,2520,1.172,2545,2.305,2607,1.192,2623,1.238,2624,1.238,2667,1.122,2909,0.65,2928,1.122,2929,1.107,2936,1.266,2937,1.266,2938,1.266,2939,1.266,2940,1.266,2942,1.266,2943,2.303,2944,1.266,2945,2.303,2953,1.266,2955,1.266,2960,1.214,2961,1.214,2966,1.214,2968,0.921,2969,1.036,2970,1.069,2971,1.266,2972,1.266,3218,2.253,3220,1.154,3225,1.333,3227,1.377,3228,3.247,3229,2.36,3230,1.297,3238,1.154,3239,1.122,3958,1.432,3959,1.432,3960,1.432,3961,1.432,3962,1.333,3963,1.333,3964,1.432,3965,2.605,3966,1.432,3967,1.432,3968,1.432,3969,2.605,3970,1.432,3971,1.432,3983,2.739,3984,2.739,3985,1.505]],["component/380",[202,1.292]],["title/381-1",[344,50.708]],["name/381-1",[]],["text/381-1",[]],["component/381-1",[]],["title/381-2",[374,33.375,707,35.628]],["name/381-2",[]],["text/381-2",[]],["component/381-2",[]],["title/381",[19,38.169,20,31.351]],["name/381",[205,1.287]],["text/381",[0,6.199,2,3.076,3,2.338,4,3.198,5,2.263,9,1.78,11,2.294,18,2.285,20,3.29,30,2.849,68,4.268,73,4.77,95,2.849,112,4.201,202,5.264,208,3.19,233,3.627,320,2.942,465,4.825,518,3.924,549,3.588,630,3.33,968,2.868,1357,4.262,2551,5.759]],["component/381",[202,1.292]],["title/382-1",[9,16.962,11,14.261]],["name/382-1",[]],["text/382-1",[]],["component/382-1",[]],["title/382-2",[10,41.906]],["name/382-2",[]],["text/382-2",[]],["component/382-2",[]],["title/382-3",[968,34.315]],["name/382-3",[]],["text/382-3",[]],["component/382-3",[]],["title/382-4",[374,33.375,707,35.628]],["name/382-4",[]],["text/382-4",[]],["component/382-4",[]],["title/382",[2,27.205]],["name/382",[2,0.81]],["text/382",[2,3.731,3,2.146,5,2.677,6,1.241,9,2.689,10,4.144,11,2.645,12,3.192,13,1.347,18,0.988,24,2.379,26,1.547,39,1.991,46,2.735,48,1.358,68,1.365,73,1.525,89,1.211,91,1.361,96,1.749,133,1.132,134,1.361,138,1.949,149,1.925,176,2.786,181,2.737,202,4.638,207,2.486,221,1.673,226,2.247,235,1.365,251,1.813,321,1.69,355,3.348,372,3.147,387,1.587,388,3.037,401,2.408,405,1.51,415,1.664,432,2.401,444,2.036,630,1.44,722,1.644,772,1.844,802,1.936,927,1.644,968,4.053,983,1.709,1168,6.051,1215,1.31,1311,1.794,2270,2.165,2337,3.934,2545,4.081,3259,2.144,3260,2.144,3262,2.344,3263,2.144,3264,2.124,3986,3.145,3987,3.145]],["component/382",[202,1.292]],["title/383-1",[52,23.584,139,24.374]],["name/383-1",[]],["text/383-1",[]],["component/383-1",[]],["title/383-2",[1045,21.29,1666,24.015]],["name/383-2",[]],["text/383-2",[]],["component/383-2",[]],["title/383",[]],["name/383",[2853,1.51]],["text/383",[8,3.511,9,2.374,11,2.27,52,2.424,74,3.187,139,2.506,178,2.353,202,4.58,221,3.113,321,3.145,379,3.679,419,2.394,514,4.756,698,4.372,1045,3.389,1666,3.361,2904,3.223,2905,3.223,2906,3.62,3951,5.744]],["component/383",[202,1.292]],["title/384-1",[149,21.259,708,25.823,1215,23.97]],["name/384-1",[]],["text/384-1",[]],["component/384-1",[]],["title/384-2",[52,23.584,139,24.374]],["name/384-2",[]],["text/384-2",[]],["component/384-2",[]],["title/384-3",[1045,21.29,1666,24.015]],["name/384-3",[]],["text/384-3",[]],["component/384-3",[]],["title/384-4",[220,23.711,1039,26.676]],["name/384-4",[]],["text/384-4",[]],["component/384-4",[]],["title/384-5",[2907,44.56]],["name/384-5",[]],["text/384-5",[]],["component/384-5",[]],["title/384-6",[2908,42.932]],["name/384-6",[]],["text/384-6",[]],["component/384-6",[]],["title/384",[126,25.488]],["name/384",[126,0.759]],["text/384",[8,2.673,9,2.074,11,2.374,52,1.239,57,2.674,74,2.785,96,1.971,105,2.937,136,2.422,137,1.924,139,1.281,149,1.345,178,1.941,181,3.547,202,4.694,220,1.246,221,3.19,321,2.747,379,3.214,399,2.205,419,1.975,514,4.37,596,2.333,698,4.018,708,1.633,993,3.021,1039,1.402,1045,2.856,1088,3.927,1215,1.516,1666,2.559,2904,2.658,2905,2.658,2906,1.851,2909,2.535,2910,1.865,2911,2.766,2912,1.865,2913,2.766,2915,2.766,2916,2.899,3951,4.738,3952,4.653]],["component/384",[202,1.292]],["title/385-1",[2907,44.56]],["name/385-1",[]],["text/385-1",[]],["component/385-1",[]],["title/385-2",[2908,42.932]],["name/385-2",[]],["text/385-2",[]],["component/385-2",[]],["title/385",[]],["name/385",[2917,1.545]],["text/385",[8,1.775,9,1.815,11,2.203,57,3.375,74,2.437,105,3.454,136,3.057,137,2.429,178,1.62,181,3.817,202,4.707,221,3.199,321,2.404,379,2.813,399,2.783,419,1.649,514,4.003,596,2.945,698,3.68,1045,2.278,1088,4.619,1666,1.7,2904,2.219,2905,2.219,2909,3.2,2910,2.512,2911,3.491,2912,2.512,2913,3.491,2915,3.491,2916,3.659,3951,3.955,3952,5.872]],["component/385",[202,1.292]],["title/386-1",[222,25.902,226,23.333]],["name/386-1",[]],["text/386-1",[]],["component/386-1",[]],["title/386-2",[19,31.713,105,19.953,909,22.707]],["name/386-2",[]],["text/386-2",[]],["component/386-2",[]],["title/386",[9,12.054,11,10.134,14,16.942,202,23.255]],["name/386",[205,1.287]],["text/386",[3,2.441,9,2.975,11,2.344,14,3.483,18,2.385,26,3.732,30,2.974,33,4.307,80,3.153,96,2.547,105,2.631,181,2.241,202,5.38,222,2.838,226,2.556,235,3.293,261,3.168,435,3.518,909,2.994,941,4.376,1285,6.943,1286,6.943,1287,6.011,3952,6.011]],["component/386",[202,1.292]],["title/387-1",[65,42.191]],["name/387-1",[]],["text/387-1",[]],["component/387-1",[]],["title/387-2",[2463,60.472]],["name/387-2",[]],["text/387-2",[]],["component/387-2",[]],["title/387-3",[431,52.864]],["name/387-3",[]],["text/387-3",[]],["component/387-3",[]],["title/387-4",[442,50.154]],["name/387-4",[]],["text/387-4",[]],["component/387-4",[]],["title/387-5",[2463,60.472]],["name/387-5",[]],["text/387-5",[]],["component/387-5",[]],["title/387-6",[431,52.864]],["name/387-6",[]],["text/387-6",[]],["component/387-6",[]],["title/387-7",[14,16.942,18,15.472,68,21.365,196,20.921]],["name/387-7",[]],["text/387-7",[]],["component/387-7",[]],["title/387-8",[389,41.355]],["name/387-8",[]],["text/387-8",[]],["component/387-8",[]],["title/387-9",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/387-9",[]],["text/387-9",[]],["component/387-9",[]],["title/387-10",[126,20.299,1032,30.391]],["name/387-10",[]],["text/387-10",[]],["component/387-10",[]],["title/387-11",[220,23.711,1039,26.676]],["name/387-11",[]],["text/387-11",[]],["component/387-11",[]],["title/387",[541,35.613]],["name/387",[541,1.06]],["text/387",[5,0.891,6,1.13,9,0.701,11,1.149,14,0.544,18,2.44,22,0.709,30,0.619,33,0.897,48,1.236,50,1.484,62,0.949,64,0.844,65,2.707,68,2.091,70,1.3,73,0.767,74,2.405,77,1.651,80,1.19,89,2.149,93,0.679,96,0.531,100,1.8,112,1.677,116,1.688,126,1.635,129,1.787,133,0.569,135,2.603,137,2.232,139,2.397,147,1.394,151,0.794,166,1.831,169,1.478,170,1.729,171,3.962,181,2.777,187,1.651,196,2.895,202,4.938,204,1.467,207,0.754,217,0.797,218,0.707,220,0.98,222,1.802,224,0.927,225,0.72,226,0.532,233,1.429,250,1.515,272,2.173,309,2.774,314,0.916,321,0.513,322,0.973,334,0.78,335,1.831,351,1.016,379,0.6,382,1.303,389,0.751,391,2.291,399,1.474,413,0.911,419,0.963,422,4.891,425,1.149,431,4.14,435,0.733,441,1.453,448,1.57,455,0.786,470,0.875,471,2.168,507,1.217,509,1.181,518,2.489,520,2.583,523,1.323,531,1.826,532,1.22,546,1.296,551,0.967,565,0.961,582,0.973,590,0.859,593,1.231,599,2.967,617,1.049,622,2.31,628,0.867,634,0.986,655,1.988,690,2.314,698,0.584,703,0.737,718,1.068,780,0.789,785,0.859,925,1.149,935,1.049,949,0.879,957,0.98,960,0.937,972,1.178,1032,1.722,1039,1.103,1045,2.248,1111,0.937,1116,1.058,1243,0.907,1287,1.252,1317,1.446,1333,4.408,1386,0.949,1396,0.98,1568,1.252,1650,1.163,1669,1.275,1853,2.081,1878,1.917,1895,1.252,2022,1.088,2074,0.81,2123,1.787,2236,2.619,2275,1.231,2350,1.178,2429,1.099,2463,2.729,2737,1.446,2818,0.949,2909,1.236,2980,1.708,3060,1.4,3064,1.4,3065,1.4,3284,2.356,3311,2.356,3314,1.008,3962,2.536,3963,2.536,3972,1.504,3973,1.504,3974,1.504,3975,1.504,3976,3.734,3977,3.734,3978,2.724,3979,2.724,3980,2.724,3981,2.724,3982,2.724]],["component/387",[202,1.292]],["title/388-1",[202,27.189,272,31.864,509,23.736]],["name/388-1",[]],["text/388-1",[]],["component/388-1",[]],["title/388-2",[172,29.259,176,24.03,202,27.189]],["name/388-2",[]],["text/388-2",[]],["component/388-2",[]],["title/388-3",[135,26.847,202,27.189,1112,43.497]],["name/388-3",[]],["text/388-3",[]],["component/388-3",[]],["title/388-4",[202,27.189,272,31.864,1396,35.676]],["name/388-4",[]],["text/388-4",[]],["component/388-4",[]],["title/388-5",[5,21.563,202,32.724]],["name/388-5",[]],["text/388-5",[]],["component/388-5",[]],["title/388-6",[374,33.375,707,35.628]],["name/388-6",[]],["text/388-6",[]],["component/388-6",[]],["title/388",[208,30.391,630,31.725]],["name/388",[3216,1.734]],["text/388",[2,0.857,3,0.881,4,2.371,5,2.057,6,1.08,8,0.545,9,1.136,11,0.564,14,0.518,18,1.184,20,0.681,28,1.946,30,1.073,36,1.437,48,0.65,50,0.78,62,1.644,65,0.73,68,2.339,73,1.828,74,1.526,81,1.701,89,1.055,91,2.009,93,1.176,94,0.882,95,1.477,96,0.919,105,0.949,107,0.854,109,2.071,112,1.61,115,1.137,118,0.915,121,0.903,123,0.8,126,1.104,129,0.939,132,0.939,133,2.994,135,1.758,136,0.621,137,1.52,139,0.53,147,0.733,149,0.556,150,1.347,154,0.841,155,0.765,170,4.294,171,1.752,172,2.74,173,1.172,175,1.516,176,1.938,178,0.497,181,1.783,202,5.204,204,0.771,207,0.718,208,1.202,214,2.038,216,1.468,225,0.685,226,2.395,229,1.597,233,1.366,235,0.653,242,0.774,246,0.837,257,0.79,272,3.936,287,1.644,303,1.468,320,0.609,333,1.324,335,0.702,363,0.96,365,1.094,386,1.026,401,0.696,405,0.723,415,0.797,417,1.709,419,1.267,431,0.915,441,1.395,462,1.324,469,1.036,470,1.516,471,0.677,490,0.624,492,0.841,496,0.927,502,2.368,505,0.81,507,1.164,508,0.829,509,1.914,514,0.605,518,2.837,526,1.475,528,0.868,529,0.999,531,0.96,532,0.641,541,0.616,546,1.705,548,0.768,554,1.172,625,1.172,630,1.254,640,0.79,645,0.837,680,0.909,690,0.723,709,0.863,724,1.945,744,0.887,748,0.975,772,0.882,780,1.366,788,0.863,803,2.523,899,0.96,909,2.126,924,0.859,927,0.787,957,1.698,958,0.825,966,0.728,968,1.08,982,1.154,987,1.172,1080,1.081,1112,1.137,1120,0.814,1161,1.377,1213,1.214,1247,1.867,1287,1.192,1357,0.882,1396,2.877,1541,0.933,1543,1.057,1613,1.214,1834,1.081,1869,1.154,1889,1.606,2074,0.771,2088,0.921,2123,0.939,2165,1.069,2171,1.377,2172,1.377,2173,1.377,2325,1.238,2507,1.945,2520,1.172,2545,2.305,2607,1.192,2623,1.238,2624,1.238,2667,1.122,2909,0.65,2928,1.122,2929,1.107,2936,1.266,2937,1.266,2938,1.266,2939,1.266,2940,1.266,2942,1.266,2943,2.303,2944,1.266,2945,2.303,2953,1.266,2955,1.266,2960,1.214,2961,1.214,2966,1.214,2968,0.921,2969,1.036,2970,1.069,2971,1.266,2972,1.266,3218,2.253,3220,1.154,3225,1.333,3227,1.377,3228,3.247,3229,2.36,3230,1.297,3238,1.154,3239,1.122,3958,1.432,3959,1.432,3960,1.432,3961,1.432,3962,1.333,3963,1.333,3964,1.432,3965,2.605,3966,1.432,3967,1.432,3968,1.432,3969,2.605,3970,1.432,3971,1.432,3983,2.739,3984,2.739,3985,1.505]],["component/388",[202,1.292]],["title/389-1",[344,50.708]],["name/389-1",[]],["text/389-1",[]],["component/389-1",[]],["title/389-2",[374,33.375,707,35.628]],["name/389-2",[]],["text/389-2",[]],["component/389-2",[]],["title/389",[19,38.169,20,31.351]],["name/389",[205,1.287]],["text/389",[0,6.199,2,3.076,3,2.338,4,3.198,5,2.263,9,1.78,11,2.294,18,2.285,20,3.29,30,2.849,68,4.268,73,4.77,95,2.849,112,4.201,202,5.264,208,3.19,233,3.627,320,2.942,465,4.825,518,3.924,549,3.588,630,3.33,968,2.868,1357,4.262,2551,5.759]],["component/389",[202,1.292]],["title/390-1",[9,16.962,11,14.261]],["name/390-1",[]],["text/390-1",[]],["component/390-1",[]],["title/390-2",[10,41.906]],["name/390-2",[]],["text/390-2",[]],["component/390-2",[]],["title/390-3",[968,34.315]],["name/390-3",[]],["text/390-3",[]],["component/390-3",[]],["title/390-4",[374,33.375,707,35.628]],["name/390-4",[]],["text/390-4",[]],["component/390-4",[]],["title/390",[2,27.205]],["name/390",[2,0.81]],["text/390",[2,3.731,3,2.146,5,2.677,6,1.241,9,2.689,10,4.144,11,2.645,12,3.192,13,1.347,18,0.988,24,2.379,26,1.547,39,1.991,46,2.735,48,1.358,68,1.365,73,1.525,89,1.211,91,1.361,96,1.749,133,1.132,134,1.361,138,1.949,149,1.925,176,2.786,181,2.737,202,4.638,207,2.486,221,1.673,226,2.247,235,1.365,251,1.813,321,1.69,355,3.348,372,3.147,387,1.587,388,3.037,401,2.408,405,1.51,415,1.664,432,2.401,444,2.036,630,1.44,722,1.644,772,1.844,802,1.936,927,1.644,968,4.053,983,1.709,1168,6.051,1215,1.31,1311,1.794,2270,2.165,2337,3.934,2545,4.081,3259,2.144,3260,2.144,3262,2.344,3263,2.144,3264,2.124,3986,3.145,3987,3.145]],["component/390",[202,1.292]],["title/391-1",[52,23.584,139,24.374]],["name/391-1",[]],["text/391-1",[]],["component/391-1",[]],["title/391-2",[1045,21.29,1666,24.015]],["name/391-2",[]],["text/391-2",[]],["component/391-2",[]],["title/391",[]],["name/391",[2853,1.51]],["text/391",[8,3.561,11,1.497,52,2.475,74,3.233,139,2.558,178,2.402,221,3.833,321,3.189,358,5.765,379,3.731,419,2.445,514,4.797,698,4.41,1045,3.425,1666,3.409,2904,3.29,2905,3.29,2906,3.696,3988,5.283]],["component/391",[203,1.276]],["title/392-1",[149,21.259,708,25.823,1215,23.97]],["name/392-1",[]],["text/392-1",[]],["component/392-1",[]],["title/392-2",[52,23.584,139,24.374]],["name/392-2",[]],["text/392-2",[]],["component/392-2",[]],["title/392-3",[1045,21.29,1666,24.015]],["name/392-3",[]],["text/392-3",[]],["component/392-3",[]],["title/392-4",[220,23.711,1039,26.676]],["name/392-4",[]],["text/392-4",[]],["component/392-4",[]],["title/392-5",[2907,44.56]],["name/392-5",[]],["text/392-5",[]],["component/392-5",[]],["title/392-6",[2908,42.932]],["name/392-6",[]],["text/392-6",[]],["component/392-6",[]],["title/392",[126,25.488]],["name/392",[126,0.759]],["text/392",[8,2.712,11,2.065,52,1.266,57,2.72,74,2.819,96,2.005,105,2.973,136,2.464,137,1.957,139,1.308,149,1.374,178,1.974,181,3.568,203,2.787,220,1.273,221,3.727,321,2.781,358,5.028,379,3.254,399,2.243,419,2.009,514,4.405,596,2.373,698,4.049,708,1.668,993,3.073,1039,1.432,1045,2.887,1088,3.976,1215,1.549,1666,2.596,2904,2.704,2905,2.704,2906,1.89,2909,2.579,2910,1.905,2911,2.813,2912,1.905,2913,2.813,2915,2.813,2916,2.949,3988,4.342,3989,4.454]],["component/392",[203,1.276]],["title/393-1",[2907,44.56]],["name/393-1",[]],["text/393-1",[]],["component/393-1",[]],["title/393-2",[2908,42.932]],["name/393-2",[]],["text/393-2",[]],["component/393-2",[]],["title/393",[]],["name/393",[2917,1.545]],["text/393",[8,1.801,11,1.856,57,3.411,74,2.463,105,3.479,136,3.09,137,2.455,178,1.643,181,3.829,203,3.495,221,3.633,321,2.43,358,4.393,379,2.843,399,2.814,419,1.672,514,4.032,596,2.976,698,3.707,1045,2.303,1088,4.652,1666,1.724,2904,2.251,2905,2.251,2909,3.235,2910,2.548,2911,3.529,2912,2.548,2913,3.529,2915,3.529,2916,3.699,3988,3.614,3989,5.586]],["component/393",[203,1.276]],["title/394-1",[222,25.902,226,23.333]],["name/394-1",[]],["text/394-1",[]],["component/394-1",[]],["title/394-2",[105,24.015,909,27.329]],["name/394-2",[]],["text/394-2",[]],["component/394-2",[]],["title/394",[9,14.093,11,11.848,203,26.847]],["name/394",[205,1.287]],["text/394",[3,2.708,9,2.653,11,2.466,18,2.646,80,3.498,96,2.826,105,2.919,203,5.587,222,3.148,226,2.836,235,3.654,261,3.515,435,3.903,909,3.321,941,4.854,1292,7.457,1293,6.456,3989,6.275]],["component/394",[203,1.276]],["title/395-1",[968,34.315]],["name/395-1",[]],["text/395-1",[]],["component/395-1",[]],["title/395-2",[105,30.154]],["name/395-2",[]],["text/395-2",[]],["component/395-2",[]],["title/395-3",[11,11.848,51,29.259,234,30.206]],["name/395-3",[]],["text/395-3",[]],["component/395-3",[]],["title/395",[2,27.205]],["name/395",[2,0.81]],["text/395",[2,3.121,3,2.822,4,2.363,5,1.016,9,2.444,11,2.514,12,3.266,13,1.398,24,1.49,26,1.605,30,1.279,36,1.713,51,1.659,57,1.486,65,1.583,80,1.356,91,2.964,95,2.105,105,3.273,109,2.631,116,1.924,136,1.346,137,1.069,149,1.205,176,2.243,181,3.284,194,1.807,203,4.655,208,1.432,209,1.862,218,1.46,220,1.117,221,3.204,234,1.713,235,2.332,282,1.902,315,1.872,318,2.066,358,3.15,387,1.646,401,1.508,405,1.567,432,3.155,475,2.023,501,1.727,546,1.477,565,1.983,596,1.296,634,2.037,645,1.815,887,2.344,891,3.507,909,1.287,927,1.706,968,3.937,1037,2.097,1088,1.513,1120,1.765,1161,2.7,1238,1.882,1310,3.377,1311,1.862,1326,1.913,1451,2.401,2732,2.744,2792,2.13,2856,2.891,2911,1.537,2913,1.537,2915,1.537,3989,4.005,3990,3.263,3991,3.263]],["component/395",[203,1.276]],["title/396-1",[344,50.708]],["name/396-1",[]],["text/396-1",[]],["component/396-1",[]],["title/396-2",[2,27.205]],["name/396-2",[]],["text/396-2",[]],["component/396-2",[]],["title/396-3",[416,32.936,420,40.613]],["name/396-3",[]],["text/396-3",[]],["component/396-3",[]],["title/396-4",[11,14.261,200,34.071]],["name/396-4",[]],["text/396-4",[]],["component/396-4",[]],["title/396-5",[11,14.261,443,29.903]],["name/396-5",[]],["text/396-5",[]],["component/396-5",[]],["title/396-6",[65,42.191]],["name/396-6",[]],["text/396-6",[]],["component/396-6",[]],["title/396-7",[442,50.154]],["name/396-7",[]],["text/396-7",[]],["component/396-7",[]],["title/396-8",[203,40.572]],["name/396-8",[]],["text/396-8",[]],["component/396-8",[]],["title/396-9",[8,25.084,3992,54.873]],["name/396-9",[]],["text/396-9",[]],["component/396-9",[]],["title/396-10",[52,19.595,62,34.548,1321,36.174]],["name/396-10",[]],["text/396-10",[]],["component/396-10",[]],["title/396-11",[68,24.978,382,26.202,416,27.365]],["name/396-11",[]],["text/396-11",[]],["component/396-11",[]],["title/396-12",[8,17.826,200,24.213,203,22.963,416,23.406]],["name/396-12",[]],["text/396-12",[]],["component/396-12",[]],["title/396-13",[133,24.938,529,45.971]],["name/396-13",[]],["text/396-13",[]],["component/396-13",[]],["title/396-14",[133,24.938,528,39.944]],["name/396-14",[]],["text/396-14",[]],["component/396-14",[]],["title/396-15",[30,27.147,303,37.139]],["name/396-15",[]],["text/396-15",[]],["component/396-15",[]],["title/396-16",[389,41.355]],["name/396-16",[]],["text/396-16",[]],["component/396-16",[]],["title/396-17",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/396-17",[]],["text/396-17",[]],["component/396-17",[]],["title/396-18",[126,20.299,1032,30.391]],["name/396-18",[]],["text/396-18",[]],["component/396-18",[]],["title/396-19",[220,23.711,1039,26.676]],["name/396-19",[]],["text/396-19",[]],["component/396-19",[]],["title/396",[541,35.613]],["name/396",[541,1.06]],["text/396",[2,0.633,3,0.238,4,0.326,5,1.112,6,1.223,8,1.453,9,0.496,11,0.638,12,1.063,14,0.486,18,0.812,22,0.332,30,1.214,33,0.42,36,0.389,48,1.116,52,0.252,62,0.445,64,0.395,65,1.503,67,0.915,68,2.636,73,0.359,74,1.902,80,0.308,81,1.994,82,0.685,89,0.995,91,0.611,95,0.793,96,0.868,98,1.063,106,0.487,109,0.543,110,0.52,112,0.603,122,0.754,123,0.751,126,1.175,130,0.453,133,1.853,134,0.611,135,1.667,136,1.474,137,1.686,139,1.811,150,1.757,154,0.414,155,0.377,166,0.345,169,0.382,170,1.872,171,1.865,172,2.438,174,1.591,176,2.415,177,0.425,178,0.669,181,2.909,200,2.173,203,4.176,207,0.353,214,2.17,217,1.803,218,0.632,220,0.483,222,0.277,223,0.768,224,0.434,225,0.337,226,0.476,233,0.37,237,0.771,238,0.476,246,0.412,250,0.748,259,0.381,261,0.309,275,0.439,279,1.779,282,0.432,284,0.487,287,0.445,288,0.946,303,1.085,309,1.285,313,0.52,314,0.429,318,0.894,321,0.657,334,0.366,335,0.659,342,0.492,344,0.432,350,0.515,360,0.472,382,1.177,389,0.352,391,1.473,399,0.97,401,0.342,413,0.427,416,3.018,419,1.612,420,1.817,422,2.326,432,0.341,438,0.651,441,1.147,442,1.49,443,2.07,462,0.358,464,1.53,466,0.828,471,1.163,472,0.56,476,1.321,501,0.748,504,0.577,505,0.399,507,1.317,508,0.778,509,1.278,510,2.68,512,0.532,513,0.656,514,0.568,515,1.251,516,0.806,517,0.656,518,1.237,520,2.151,522,0.439,523,2.042,526,0.399,527,0.532,528,1.167,529,1.344,532,0.863,533,0.56,539,0.459,546,0.335,565,0.45,571,1.49,575,1.591,576,1.282,590,0.402,622,0.597,628,0.775,629,0.487,630,0.339,631,1.515,640,0.741,641,0.456,643,2.459,655,0.715,657,2.18,659,0.577,660,0.864,663,1.137,667,0.476,669,0.469,674,0.487,677,0.687,680,0.447,690,2.121,691,1.542,692,1.602,693,1.571,698,0.274,701,0.963,703,0.659,704,1.661,710,0.526,723,0.447,741,2.668,742,1.762,744,1.194,746,1.49,748,0.915,749,0.532,751,0.532,780,0.37,785,1.1,787,0.526,788,0.425,794,1.162,795,1.251,802,0.456,907,1.126,935,0.492,946,0.577,957,0.459,958,0.775,960,0.439,966,0.683,986,1.083,995,0.526,998,1.003,1007,0.532,1032,1.76,1039,0.544,1040,2.629,1044,0.568,1045,0.434,1080,1.454,1116,0.946,1124,0.462,1133,1.067,1156,1.139,1161,0.372,1191,0.568,1242,0.453,1243,0.425,1252,0.476,1293,1.982,1298,1.49,1318,0.577,1321,2.246,1322,0.954,1324,0.462,1386,0.848,1506,0.638,1525,0.656,1637,0.597,1638,1.73,1831,1.067,1841,1.251,1842,0.656,1872,0.609,2074,0.724,2270,0.972,2526,0.526,2617,1.251,2623,1.162,2629,0.515,2658,1.251,2666,0.597,2667,0.552,2698,1.251,2759,2.289,2760,0.656,2818,0.445,2909,0.32,2978,1.162,2980,1.208,3220,0.568,3268,1.053,3311,1.215,3314,0.472,3419,0.56,3534,0.587,3798,0.623,3988,0.538,3992,1.604,3993,5.557,3994,1.292,3995,1.292,3996,0.678,3997,0.678,3998,0.678,3999,0.678,4000,0.678,4001,0.678,4002,0.678,4003,0.678,4004,0.678,4005,0.678,4006,0.678,4007,0.678,4008,1.217,4009,0.678,4010,1.292,4011,0.678,4012,1.217,4013,1.217,4014,1.292,4015,0.741,4016,0.678,4017,0.678,4018,0.678,4019,1.292,4020,1.852,4021,0.678,4022,0.678,4023,0.678,4024,0.678,4025,0.678,4026,0.678,4027,4.709,4028,1.292,4029,0.678,4030,0.678,4031,0.678,4032,0.678,4033,0.678,4034,0.678,4035,1.852,4036,0.678,4037,0.678,4038,1.292,4039,1.292,4040,0.678,4041,0.678,4042,0.678,4043,0.678,4044,1.852,4045,0.678,4046,0.678,4047,0.678,4048,0.741,4049,1.292,4050,1.292,4051,1.292,4052,1.292,4053,0.678,4054,0.678]],["component/396",[203,1.276]],["title/397-1",[52,23.584,139,24.374]],["name/397-1",[]],["text/397-1",[]],["component/397-1",[]],["title/397-2",[1045,21.29,1666,24.015]],["name/397-2",[]],["text/397-2",[]],["component/397-2",[]],["title/397",[]],["name/397",[2853,1.51]],["text/397",[8,3.561,11,1.497,52,2.475,74,3.233,139,2.558,178,2.402,221,3.833,321,3.189,358,5.765,379,3.731,419,2.445,514,4.797,698,4.41,1045,3.425,1666,3.409,2904,3.29,2905,3.29,2906,3.696,3988,5.283]],["component/397",[203,1.276]],["title/398-1",[149,21.259,708,25.823,1215,23.97]],["name/398-1",[]],["text/398-1",[]],["component/398-1",[]],["title/398-2",[52,23.584,139,24.374]],["name/398-2",[]],["text/398-2",[]],["component/398-2",[]],["title/398-3",[1045,21.29,1666,24.015]],["name/398-3",[]],["text/398-3",[]],["component/398-3",[]],["title/398-4",[220,23.711,1039,26.676]],["name/398-4",[]],["text/398-4",[]],["component/398-4",[]],["title/398-5",[2907,44.56]],["name/398-5",[]],["text/398-5",[]],["component/398-5",[]],["title/398-6",[2908,42.932]],["name/398-6",[]],["text/398-6",[]],["component/398-6",[]],["title/398",[126,25.488]],["name/398",[126,0.759]],["text/398",[8,2.712,11,2.065,52,1.266,57,2.72,74,2.819,96,2.005,105,2.973,136,2.464,137,1.957,139,1.308,149,1.374,178,1.974,181,3.568,203,2.787,220,1.273,221,3.727,321,2.781,358,5.028,379,3.254,399,2.243,419,2.009,514,4.405,596,2.373,698,4.049,708,1.668,993,3.073,1039,1.432,1045,2.887,1088,3.976,1215,1.549,1666,2.596,2904,2.704,2905,2.704,2906,1.89,2909,2.579,2910,1.905,2911,2.813,2912,1.905,2913,2.813,2915,2.813,2916,2.949,3988,4.342,3989,4.454]],["component/398",[203,1.276]],["title/399-1",[2907,44.56]],["name/399-1",[]],["text/399-1",[]],["component/399-1",[]],["title/399-2",[2908,42.932]],["name/399-2",[]],["text/399-2",[]],["component/399-2",[]],["title/399",[]],["name/399",[2917,1.545]],["text/399",[8,1.801,11,1.856,57,3.411,74,2.463,105,3.479,136,3.09,137,2.455,178,1.643,181,3.829,203,3.495,221,3.633,321,2.43,358,4.393,379,2.843,399,2.814,419,1.672,514,4.032,596,2.976,698,3.707,1045,2.303,1088,4.652,1666,1.724,2904,2.251,2905,2.251,2909,3.235,2910,2.548,2911,3.529,2912,2.548,2913,3.529,2915,3.529,2916,3.699,3988,3.614,3989,5.586]],["component/399",[203,1.276]],["title/400-1",[222,25.902,226,23.333]],["name/400-1",[]],["text/400-1",[]],["component/400-1",[]],["title/400-2",[105,24.015,909,27.329]],["name/400-2",[]],["text/400-2",[]],["component/400-2",[]],["title/400",[9,14.093,11,11.848,203,26.847]],["name/400",[205,1.287]],["text/400",[3,2.708,9,2.653,11,2.466,18,2.646,80,3.498,96,2.826,105,2.919,203,5.587,222,3.148,226,2.836,235,3.654,261,3.515,435,3.903,909,3.321,941,4.854,1292,7.457,1293,6.456,3989,6.275]],["component/400",[203,1.276]],["title/401-1",[968,34.315]],["name/401-1",[]],["text/401-1",[]],["component/401-1",[]],["title/401-2",[105,30.154]],["name/401-2",[]],["text/401-2",[]],["component/401-2",[]],["title/401-3",[11,11.848,51,29.259,234,30.206]],["name/401-3",[]],["text/401-3",[]],["component/401-3",[]],["title/401",[2,27.205]],["name/401",[2,0.81]],["text/401",[2,3.121,3,2.822,4,2.363,5,1.016,9,2.444,11,2.514,12,3.266,13,1.398,24,1.49,26,1.605,30,1.279,36,1.713,51,1.659,57,1.486,65,1.583,80,1.356,91,2.964,95,2.105,105,3.273,109,2.631,116,1.924,136,1.346,137,1.069,149,1.205,176,2.243,181,3.284,194,1.807,203,4.655,208,1.432,209,1.862,218,1.46,220,1.117,221,3.204,234,1.713,235,2.332,282,1.902,315,1.872,318,2.066,358,3.15,387,1.646,401,1.508,405,1.567,432,3.155,475,2.023,501,1.727,546,1.477,565,1.983,596,1.296,634,2.037,645,1.815,887,2.344,891,3.507,909,1.287,927,1.706,968,3.937,1037,2.097,1088,1.513,1120,1.765,1161,2.7,1238,1.882,1310,3.377,1311,1.862,1326,1.913,1451,2.401,2732,2.744,2792,2.13,2856,2.891,2911,1.537,2913,1.537,2915,1.537,3989,4.005,3990,3.263,3991,3.263]],["component/401",[203,1.276]],["title/402-1",[344,50.708]],["name/402-1",[]],["text/402-1",[]],["component/402-1",[]],["title/402-2",[2,27.205]],["name/402-2",[]],["text/402-2",[]],["component/402-2",[]],["title/402-3",[416,32.936,420,40.613]],["name/402-3",[]],["text/402-3",[]],["component/402-3",[]],["title/402-4",[11,14.261,200,34.071]],["name/402-4",[]],["text/402-4",[]],["component/402-4",[]],["title/402-5",[11,14.261,443,29.903]],["name/402-5",[]],["text/402-5",[]],["component/402-5",[]],["title/402-6",[65,42.191]],["name/402-6",[]],["text/402-6",[]],["component/402-6",[]],["title/402-7",[442,50.154]],["name/402-7",[]],["text/402-7",[]],["component/402-7",[]],["title/402-8",[203,40.572]],["name/402-8",[]],["text/402-8",[]],["component/402-8",[]],["title/402-9",[8,25.084,3992,54.873]],["name/402-9",[]],["text/402-9",[]],["component/402-9",[]],["title/402-10",[52,19.595,62,34.548,1321,36.174]],["name/402-10",[]],["text/402-10",[]],["component/402-10",[]],["title/402-11",[68,24.978,382,26.202,416,27.365]],["name/402-11",[]],["text/402-11",[]],["component/402-11",[]],["title/402-12",[8,17.826,200,24.213,203,22.963,416,23.406]],["name/402-12",[]],["text/402-12",[]],["component/402-12",[]],["title/402-13",[133,24.938,529,45.971]],["name/402-13",[]],["text/402-13",[]],["component/402-13",[]],["title/402-14",[133,24.938,528,39.944]],["name/402-14",[]],["text/402-14",[]],["component/402-14",[]],["title/402-15",[30,27.147,303,37.139]],["name/402-15",[]],["text/402-15",[]],["component/402-15",[]],["title/402-16",[389,41.355]],["name/402-16",[]],["text/402-16",[]],["component/402-16",[]],["title/402-17",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/402-17",[]],["text/402-17",[]],["component/402-17",[]],["title/402-18",[126,20.299,1032,30.391]],["name/402-18",[]],["text/402-18",[]],["component/402-18",[]],["title/402-19",[220,23.711,1039,26.676]],["name/402-19",[]],["text/402-19",[]],["component/402-19",[]],["title/402",[541,35.613]],["name/402",[541,1.06]],["text/402",[2,0.633,3,0.238,4,0.326,5,1.112,6,1.223,8,1.453,9,0.496,11,0.638,12,1.063,14,0.486,18,0.812,22,0.332,30,1.214,33,0.42,36,0.389,48,1.116,52,0.252,62,0.445,64,0.395,65,1.503,67,0.915,68,2.636,73,0.359,74,1.902,80,0.308,81,1.994,82,0.685,89,0.995,91,0.611,95,0.793,96,0.868,98,1.063,106,0.487,109,0.543,110,0.52,112,0.603,122,0.754,123,0.751,126,1.175,130,0.453,133,1.853,134,0.611,135,1.667,136,1.474,137,1.686,139,1.811,150,1.757,154,0.414,155,0.377,166,0.345,169,0.382,170,1.872,171,1.865,172,2.438,174,1.591,176,2.415,177,0.425,178,0.669,181,2.909,200,2.173,203,4.176,207,0.353,214,2.17,217,1.803,218,0.632,220,0.483,222,0.277,223,0.768,224,0.434,225,0.337,226,0.476,233,0.37,237,0.771,238,0.476,246,0.412,250,0.748,259,0.381,261,0.309,275,0.439,279,1.779,282,0.432,284,0.487,287,0.445,288,0.946,303,1.085,309,1.285,313,0.52,314,0.429,318,0.894,321,0.657,334,0.366,335,0.659,342,0.492,344,0.432,350,0.515,360,0.472,382,1.177,389,0.352,391,1.473,399,0.97,401,0.342,413,0.427,416,3.018,419,1.612,420,1.817,422,2.326,432,0.341,438,0.651,441,1.147,442,1.49,443,2.07,462,0.358,464,1.53,466,0.828,471,1.163,472,0.56,476,1.321,501,0.748,504,0.577,505,0.399,507,1.317,508,0.778,509,1.278,510,2.68,512,0.532,513,0.656,514,0.568,515,1.251,516,0.806,517,0.656,518,1.237,520,2.151,522,0.439,523,2.042,526,0.399,527,0.532,528,1.167,529,1.344,532,0.863,533,0.56,539,0.459,546,0.335,565,0.45,571,1.49,575,1.591,576,1.282,590,0.402,622,0.597,628,0.775,629,0.487,630,0.339,631,1.515,640,0.741,641,0.456,643,2.459,655,0.715,657,2.18,659,0.577,660,0.864,663,1.137,667,0.476,669,0.469,674,0.487,677,0.687,680,0.447,690,2.121,691,1.542,692,1.602,693,1.571,698,0.274,701,0.963,703,0.659,704,1.661,710,0.526,723,0.447,741,2.668,742,1.762,744,1.194,746,1.49,748,0.915,749,0.532,751,0.532,780,0.37,785,1.1,787,0.526,788,0.425,794,1.162,795,1.251,802,0.456,907,1.126,935,0.492,946,0.577,957,0.459,958,0.775,960,0.439,966,0.683,986,1.083,995,0.526,998,1.003,1007,0.532,1032,1.76,1039,0.544,1040,2.629,1044,0.568,1045,0.434,1080,1.454,1116,0.946,1124,0.462,1133,1.067,1156,1.139,1161,0.372,1191,0.568,1242,0.453,1243,0.425,1252,0.476,1293,1.982,1298,1.49,1318,0.577,1321,2.246,1322,0.954,1324,0.462,1386,0.848,1506,0.638,1525,0.656,1637,0.597,1638,1.73,1831,1.067,1841,1.251,1842,0.656,1872,0.609,2074,0.724,2270,0.972,2526,0.526,2617,1.251,2623,1.162,2629,0.515,2658,1.251,2666,0.597,2667,0.552,2698,1.251,2759,2.289,2760,0.656,2818,0.445,2909,0.32,2978,1.162,2980,1.208,3220,0.568,3268,1.053,3311,1.215,3314,0.472,3419,0.56,3534,0.587,3798,0.623,3988,0.538,3992,1.604,3993,5.557,3994,1.292,3995,1.292,3996,0.678,3997,0.678,3998,0.678,3999,0.678,4000,0.678,4001,0.678,4002,0.678,4003,0.678,4004,0.678,4005,0.678,4006,0.678,4007,0.678,4008,1.217,4009,0.678,4010,1.292,4011,0.678,4012,1.217,4013,1.217,4014,1.292,4015,0.741,4016,0.678,4017,0.678,4018,0.678,4019,1.292,4020,1.852,4021,0.678,4022,0.678,4023,0.678,4024,0.678,4025,0.678,4026,0.678,4027,4.709,4028,1.292,4029,0.678,4030,0.678,4031,0.678,4032,0.678,4033,0.678,4034,0.678,4035,1.852,4036,0.678,4037,0.678,4038,1.292,4039,1.292,4040,0.678,4041,0.678,4042,0.678,4043,0.678,4044,1.852,4045,0.678,4046,0.678,4047,0.678,4048,0.741,4049,1.292,4050,1.292,4051,1.292,4052,1.292,4053,0.678,4054,0.678]],["component/402",[203,1.276]],["title/403-1",[52,23.584,139,24.374]],["name/403-1",[]],["text/403-1",[]],["component/403-1",[]],["title/403-2",[1045,21.29,1666,24.015]],["name/403-2",[]],["text/403-2",[]],["component/403-2",[]],["title/403",[]],["name/403",[2853,1.51]],["text/403",[8,3.561,11,1.497,52,2.475,74,3.233,139,2.558,178,2.402,221,3.833,321,3.189,358,5.765,379,3.731,419,2.445,514,4.797,698,4.41,1045,3.425,1666,3.409,2904,3.29,2905,3.29,2906,3.696,3988,5.283]],["component/403",[203,1.276]],["title/404-1",[149,21.259,708,25.823,1215,23.97]],["name/404-1",[]],["text/404-1",[]],["component/404-1",[]],["title/404-2",[52,23.584,139,24.374]],["name/404-2",[]],["text/404-2",[]],["component/404-2",[]],["title/404-3",[1045,21.29,1666,24.015]],["name/404-3",[]],["text/404-3",[]],["component/404-3",[]],["title/404-4",[220,23.711,1039,26.676]],["name/404-4",[]],["text/404-4",[]],["component/404-4",[]],["title/404-5",[2907,44.56]],["name/404-5",[]],["text/404-5",[]],["component/404-5",[]],["title/404-6",[2908,42.932]],["name/404-6",[]],["text/404-6",[]],["component/404-6",[]],["title/404",[126,25.488]],["name/404",[126,0.759]],["text/404",[8,2.712,11,2.065,52,1.266,57,2.72,74,2.819,96,2.005,105,2.973,136,2.464,137,1.957,139,1.308,149,1.374,178,1.974,181,3.568,203,2.787,220,1.273,221,3.727,321,2.781,358,5.028,379,3.254,399,2.243,419,2.009,514,4.405,596,2.373,698,4.049,708,1.668,993,3.073,1039,1.432,1045,2.887,1088,3.976,1215,1.549,1666,2.596,2904,2.704,2905,2.704,2906,1.89,2909,2.579,2910,1.905,2911,2.813,2912,1.905,2913,2.813,2915,2.813,2916,2.949,3988,4.342,3989,4.454]],["component/404",[203,1.276]],["title/405-1",[2907,44.56]],["name/405-1",[]],["text/405-1",[]],["component/405-1",[]],["title/405-2",[2908,42.932]],["name/405-2",[]],["text/405-2",[]],["component/405-2",[]],["title/405",[]],["name/405",[2917,1.545]],["text/405",[8,1.801,11,1.856,57,3.411,74,2.463,105,3.479,136,3.09,137,2.455,178,1.643,181,3.829,203,3.495,221,3.633,321,2.43,358,4.393,379,2.843,399,2.814,419,1.672,514,4.032,596,2.976,698,3.707,1045,2.303,1088,4.652,1666,1.724,2904,2.251,2905,2.251,2909,3.235,2910,2.548,2911,3.529,2912,2.548,2913,3.529,2915,3.529,2916,3.699,3988,3.614,3989,5.586]],["component/405",[203,1.276]],["title/406-1",[222,25.902,226,23.333]],["name/406-1",[]],["text/406-1",[]],["component/406-1",[]],["title/406-2",[105,24.015,909,27.329]],["name/406-2",[]],["text/406-2",[]],["component/406-2",[]],["title/406",[9,14.093,11,11.848,203,26.847]],["name/406",[205,1.287]],["text/406",[3,2.708,9,2.653,11,2.466,18,2.646,80,3.498,96,2.826,105,2.919,203,5.587,222,3.148,226,2.836,235,3.654,261,3.515,435,3.903,909,3.321,941,4.854,1292,7.457,1293,6.456,3989,6.275]],["component/406",[203,1.276]],["title/407-1",[344,50.708]],["name/407-1",[]],["text/407-1",[]],["component/407-1",[]],["title/407-2",[2,27.205]],["name/407-2",[]],["text/407-2",[]],["component/407-2",[]],["title/407-3",[416,32.936,420,40.613]],["name/407-3",[]],["text/407-3",[]],["component/407-3",[]],["title/407-4",[11,14.261,200,34.071]],["name/407-4",[]],["text/407-4",[]],["component/407-4",[]],["title/407-5",[11,14.261,443,29.903]],["name/407-5",[]],["text/407-5",[]],["component/407-5",[]],["title/407-6",[65,42.191]],["name/407-6",[]],["text/407-6",[]],["component/407-6",[]],["title/407-7",[442,50.154]],["name/407-7",[]],["text/407-7",[]],["component/407-7",[]],["title/407-8",[203,40.572]],["name/407-8",[]],["text/407-8",[]],["component/407-8",[]],["title/407-9",[8,25.084,3992,54.873]],["name/407-9",[]],["text/407-9",[]],["component/407-9",[]],["title/407-10",[52,23.584,62,41.581]],["name/407-10",[]],["text/407-10",[]],["component/407-10",[]],["title/407-11",[65,33.602,399,26.009]],["name/407-11",[]],["text/407-11",[]],["component/407-11",[]],["title/407-12",[399,26.009,448,37.99]],["name/407-12",[]],["text/407-12",[]],["component/407-12",[]],["title/407-13",[399,21.61,448,31.564,991,33.744]],["name/407-13",[]],["text/407-13",[]],["component/407-13",[]],["title/407-14",[68,24.978,382,26.202,416,27.365]],["name/407-14",[]],["text/407-14",[]],["component/407-14",[]],["title/407-15",[8,17.826,200,24.213,203,22.963,416,23.406]],["name/407-15",[]],["text/407-15",[]],["component/407-15",[]],["title/407-16",[133,24.938,529,45.971]],["name/407-16",[]],["text/407-16",[]],["component/407-16",[]],["title/407-17",[133,24.938,528,39.944]],["name/407-17",[]],["text/407-17",[]],["component/407-17",[]],["title/407-18",[30,27.147,303,37.139]],["name/407-18",[]],["text/407-18",[]],["component/407-18",[]],["title/407-19",[389,41.355]],["name/407-19",[]],["text/407-19",[]],["component/407-19",[]],["title/407-20",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/407-20",[]],["text/407-20",[]],["component/407-20",[]],["title/407-21",[126,20.299,1032,30.391]],["name/407-21",[]],["text/407-21",[]],["component/407-21",[]],["title/407-22",[220,23.711,1039,26.676]],["name/407-22",[]],["text/407-22",[]],["component/407-22",[]],["title/407-23",[30,22.555,286,28.717,563,30.081]],["name/407-23",[]],["text/407-23",[]],["component/407-23",[]],["title/407-24",[333,33.487,663,38.919]],["name/407-24",[]],["text/407-24",[]],["component/407-24",[]],["title/407-25",[333,33.487,669,43.851]],["name/407-25",[]],["text/407-25",[]],["component/407-25",[]],["title/407-26",[74,28.593]],["name/407-26",[]],["text/407-26",[]],["component/407-26",[]],["title/407",[541,35.613]],["name/407",[541,1.06]],["text/407",[2,0.46,3,0.473,4,0.23,5,0.835,6,1.577,8,1.1,9,0.465,11,0.761,12,1.103,14,0.349,18,1.061,20,0.458,22,0.235,27,0.342,30,1.985,33,0.575,36,0.275,48,1.312,52,0.345,59,0.361,60,1.59,62,0.608,64,0.28,65,1.793,66,1.24,67,0.656,68,2.091,73,0.254,74,2.019,80,0.218,81,1.934,82,0.491,89,0.886,91,0.822,94,0.307,95,0.397,96,0.773,98,0.772,106,0.345,109,1.297,110,0.368,112,0.224,122,0.541,123,0.278,124,0.348,126,1.172,130,0.32,133,1.33,134,0.636,135,1.074,136,0.949,137,1.736,139,1.944,150,1.966,151,0.263,154,0.293,155,0.515,166,0.686,169,0.759,170,1.39,171,1.413,172,1.363,174,0.624,175,0.561,176,2.213,177,0.3,178,1.116,181,2.523,184,0.451,187,0.584,200,1.818,203,4.168,207,0.701,214,1.45,217,1.703,218,0.453,220,0.347,221,0.472,222,0.196,223,1.032,225,0.239,226,0.64,228,0.704,233,0.261,237,0.553,238,0.337,242,0.756,246,1.878,250,0.778,259,0.269,261,0.423,266,0.894,275,0.311,279,1.348,282,0.305,283,0.342,284,0.345,286,0.734,287,0.314,288,0.984,303,0.788,309,1.988,313,0.368,314,0.304,318,0.332,321,0.477,333,0.918,334,0.259,335,0.686,342,0.348,344,0.305,350,0.364,360,0.334,379,0.199,382,0.865,388,0.239,389,0.249,391,1.094,397,1.617,399,0.713,401,0.242,413,0.302,416,2.29,419,2.128,420,1.35,422,2.571,432,0.241,434,0.62,438,0.677,439,0.325,441,1.125,442,1.095,443,0.994,447,0.304,448,3.368,462,0.253,464,1.111,466,0.307,471,1.519,472,0.396,476,0.96,490,1.111,492,0.293,495,0.423,501,0.536,504,0.408,505,0.792,507,1.699,508,0.81,509,1.649,510,1.89,512,0.376,513,0.464,514,0.407,515,0.897,516,0.839,517,0.464,518,1.212,520,1.629,522,0.311,523,1.56,526,0.282,527,0.376,528,0.848,529,0.976,532,1.295,539,0.325,546,0.458,551,0.32,556,0.354,560,1.162,563,0.993,565,0.318,566,1.012,571,0.848,574,0.963,575,1.169,576,0.931,590,0.55,596,0.402,599,0.624,613,0.357,628,0.287,629,0.345,630,0.464,640,0.997,641,0.323,643,3.137,654,0.525,655,1.539,657,1.323,659,0.408,660,1.408,661,0.318,663,3.104,667,0.337,669,2.137,674,0.345,677,0.924,680,0.316,690,1.92,696,2.072,698,0.543,701,0.691,703,0.472,704,0.945,710,0.372,719,0.385,723,0.316,724,0.719,741,2.415,742,1.002,744,0.867,746,2.131,747,0.357,748,0.656,749,0.376,751,0.376,753,0.345,754,0.364,755,0.372,773,0.372,780,0.261,785,1.032,787,0.372,788,0.3,794,1.562,795,0.464,800,0.479,802,0.323,907,0.818,935,0.348,957,0.325,958,0.287,960,0.311,966,0.711,986,1.765,991,1.35,995,0.719,997,0.307,998,0.719,1007,0.376,1032,1.621,1039,0.39,1040,2.484,1044,0.402,1045,0.161,1080,1.056,1111,0.601,1116,0.678,1118,0.376,1124,0.327,1133,0.765,1141,0.755,1156,0.817,1160,0.357,1161,0.263,1165,0.441,1176,0.291,1180,0.357,1191,0.402,1233,0.441,1238,0.302,1242,0.32,1243,0.3,1252,0.337,1293,2.834,1297,0.364,1298,0.745,1302,0.316,1307,0.441,1318,0.408,1321,2.865,1322,1.811,1324,0.632,1386,0.608,1453,0.337,1496,0.372,1502,0.415,1506,0.451,1525,0.464,1543,0.368,1568,0.415,1637,0.423,1638,1.271,1639,0.498,1831,0.765,1841,0.897,1842,0.464,1849,0.691,1872,0.431,1974,0.381,1975,0.431,2037,0.441,2038,0.441,2039,0.441,2074,0.973,2115,1.636,2121,0.498,2270,0.361,2380,0.498,2544,0.342,2617,0.897,2623,0.833,2629,0.364,2658,0.897,2666,0.423,2698,0.897,2759,1.682,2760,0.464,2818,0.314,2909,0.226,2978,0.833,2980,0.877,3220,1.128,3268,0.755,3311,0.883,3314,0.334,3419,0.396,3534,0.415,3546,0.408,3547,0.408,3549,0.391,3550,0.391,3551,0.391,3552,0.391,3553,0.391,3554,0.391,3697,0.431,3698,0.479,3798,0.441,3988,0.381,3992,0.802,3993,4.407,3994,0.927,3995,0.927,3996,0.479,3997,0.479,3998,0.479,3999,0.479,4000,0.479,4001,0.479,4002,0.479,4003,0.479,4004,0.479,4005,0.479,4006,0.479,4007,0.479,4008,0.451,4009,0.479,4010,0.479,4011,0.479,4012,1.983,4013,1.983,4014,2.106,4016,0.479,4017,0.479,4018,0.479,4019,0.927,4020,1.345,4021,0.479,4022,0.479,4023,0.479,4024,0.479,4025,0.479,4026,0.479,4027,3.658,4028,0.927,4029,0.479,4030,0.479,4031,0.479,4032,0.479,4033,0.479,4034,0.479,4035,1.345,4036,0.479,4037,0.479,4038,0.927,4039,0.927,4040,0.479,4041,0.479,4042,0.479,4043,0.479,4044,1.345,4045,0.479,4046,0.479,4047,0.479,4049,0.927,4050,0.927,4051,0.927,4052,0.927,4053,0.479,4054,0.479,4055,0.524,4056,0.524,4057,0.524,4058,1.899,4059,1.013,4060,1.013,4061,0.524,4062,0.524]],["component/407",[203,1.276]],["title/408-1",[203,32.312,310,45.585]],["name/408-1",[]],["text/408-1",[]],["component/408-1",[]],["title/408-2",[261,28.922,1954,38.537]],["name/408-2",[]],["text/408-2",[]],["component/408-2",[]],["title/408-3",[18,12,46,20.038,203,17.81,279,16.937,399,14.335,1040,28.091]],["name/408-3",[]],["text/408-3",[]],["component/408-3",[]],["title/408-4",[203,22.963,279,21.838,551,30.113,1302,29.732]],["name/408-4",[]],["text/408-4",[]],["component/408-4",[]],["title/408-5",[111,54.873,112,29.591]],["name/408-5",[]],["text/408-5",[]],["component/408-5",[]],["title/408-6",[374,33.375,707,35.628]],["name/408-6",[]],["text/408-6",[]],["component/408-6",[]],["title/408",[208,30.391,630,31.725]],["name/408",[3216,1.734]],["text/408",[0,1.044,2,1.044,4,2.762,5,0.584,6,0.74,8,0.679,9,0.818,11,1.127,12,0.772,18,1.973,28,0.969,30,1.309,46,3.295,48,0.81,60,1.113,61,1.196,62,1.126,63,1.171,65,0.91,68,1.449,74,2.288,81,2.037,91,1.445,93,0.806,95,1.309,96,0.63,108,2.694,110,1.318,112,0.801,113,1.363,114,1.724,119,1.784,121,1.126,123,2.399,126,0.55,128,2.114,132,1.171,133,1.202,135,0.875,137,1.479,147,0.913,150,2.22,157,1.418,164,1.065,166,1.558,167,1.543,170,2.726,171,1.553,174,1.155,176,0.783,177,1.076,181,0.554,187,1.082,200,0.923,203,5.23,208,1.465,217,0.946,221,1.072,226,1.52,233,0.936,234,0.984,235,0.814,261,1.394,279,2.002,303,3.366,318,2.114,320,0.759,321,1.083,325,1.256,330,1.543,331,1.398,342,1.245,374,0.904,387,2.762,388,0.854,399,0.704,405,1.604,415,0.993,416,0.892,448,1.029,455,1.66,490,0.777,507,0.797,509,0.774,510,1.991,518,0.749,522,1.113,532,0.799,539,1.163,541,0.768,546,0.849,549,0.926,551,3.349,630,0.859,634,2.084,643,3.769,654,0.973,655,1.691,657,1.648,660,4.614,678,1.147,690,1.604,697,1.398,722,2.862,794,1.543,799,1.332,923,1.279,932,1.291,952,1.347,958,1.029,991,1.1,1006,0.997,1007,1.347,1040,5.12,1120,1.015,1125,1.543,1143,1.418,1154,4.618,1161,0.943,1176,1.858,1200,1.486,1247,3.077,1250,1.245,1293,2.561,1302,3.307,1322,1.267,1357,1.1,1393,1.439,1666,1.158,1670,1.256,1743,1.616,1748,3.021,1806,1.577,1834,2.398,1954,1.044,2070,1.716,2074,0.961,2117,2.601,2123,1.171,2444,1.616,2507,2.371,2526,1.332,2542,1.577,2545,1.147,2607,1.486,2666,1.513,2841,2.645,2968,1.147,3090,1.716,3097,1.577,3231,2.747,3238,1.439,3239,1.398,3346,2.747,3350,1.543,3441,2.747,3529,1.662,3603,1.662,3769,1.716,3992,2.645,4008,1.616,4012,1.616,4013,1.616,4063,3.339,4064,1.876,4065,6.278,4066,1.876,4067,1.876,4068,3.339,4069,3.339,4070,1.876,4071,1.876,4072,1.876,4073,1.876,4074,1.876]],["component/408",[203,1.276]],["title/409-1",[344,50.708]],["name/409-1",[]],["text/409-1",[]],["component/409-1",[]],["title/409-2",[374,33.375,707,35.628]],["name/409-2",[]],["text/409-2",[]],["component/409-2",[]],["title/409",[19,38.169,20,31.351]],["name/409",[205,1.287]],["text/409",[0,6.134,2,3.033,3,2.29,4,3.133,5,2.216,8,2.579,9,1.744,11,2.27,18,3.465,20,3.223,46,3.737,95,2.791,96,2.39,112,4.142,203,5.521,208,3.124,320,2.881,325,4.767,441,3.589,465,4.726,518,3.869,630,3.261,968,2.809,1040,5.239,1357,4.175]],["component/409",[203,1.276]],["title/410-1",[9,16.962,11,14.261]],["name/410-1",[]],["text/410-1",[]],["component/410-1",[]],["title/410-2",[10,41.906]],["name/410-2",[]],["text/410-2",[]],["component/410-2",[]],["title/410-3",[968,34.315]],["name/410-3",[]],["text/410-3",[]],["component/410-3",[]],["title/410-4",[374,33.375,707,35.628]],["name/410-4",[]],["text/410-4",[]],["component/410-4",[]],["title/410",[2,27.205]],["name/410",[2,0.81]],["text/410",[2,3.717,3,1.657,5,2.395,9,2.596,10,4.437,11,2.617,12,2.719,13,1.329,18,0.975,24,2.353,26,1.526,39,1.964,46,2.704,48,1.339,91,1.343,96,1.729,112,1.325,138,1.923,149,1.903,176,2.759,181,2.719,203,4.552,207,2.458,221,0.996,226,3.102,235,1.346,251,1.789,261,1.295,320,2.085,321,1.671,355,3.311,372,3.112,387,1.565,388,3.008,401,2.381,405,1.49,415,1.642,432,2.374,444,3.336,446,3.659,518,1.238,549,1.531,630,1.421,722,1.622,772,1.819,802,1.91,927,1.622,968,4.03,983,1.686,1168,6.919,1215,1.292,1311,1.77,1611,2.417,2337,3.897,2545,4.042,3259,2.115,3260,2.115,3263,2.115,3264,2.096,4075,3.102,4076,3.102]],["component/410",[203,1.276]],["title/411-1",[52,23.584,139,24.374]],["name/411-1",[]],["text/411-1",[]],["component/411-1",[]],["title/411-2",[1045,21.29,1666,24.015]],["name/411-2",[]],["text/411-2",[]],["component/411-2",[]],["title/411",[]],["name/411",[2853,1.51]],["text/411",[8,3.561,11,1.497,52,2.475,74,3.233,139,2.558,178,2.402,221,3.833,321,3.189,358,5.765,379,3.731,419,2.445,514,4.797,698,4.41,1045,3.425,1666,3.409,2904,3.29,2905,3.29,2906,3.696,3988,5.283]],["component/411",[203,1.276]],["title/412-1",[149,21.259,708,25.823,1215,23.97]],["name/412-1",[]],["text/412-1",[]],["component/412-1",[]],["title/412-2",[52,23.584,139,24.374]],["name/412-2",[]],["text/412-2",[]],["component/412-2",[]],["title/412-3",[1045,21.29,1666,24.015]],["name/412-3",[]],["text/412-3",[]],["component/412-3",[]],["title/412-4",[220,23.711,1039,26.676]],["name/412-4",[]],["text/412-4",[]],["component/412-4",[]],["title/412-5",[2907,44.56]],["name/412-5",[]],["text/412-5",[]],["component/412-5",[]],["title/412-6",[2908,42.932]],["name/412-6",[]],["text/412-6",[]],["component/412-6",[]],["title/412",[126,25.488]],["name/412",[126,0.759]],["text/412",[8,2.712,11,2.065,52,1.266,57,2.72,74,2.819,96,2.005,105,2.973,136,2.464,137,1.957,139,1.308,149,1.374,178,1.974,181,3.568,203,2.787,220,1.273,221,3.727,321,2.781,358,5.028,379,3.254,399,2.243,419,2.009,514,4.405,596,2.373,698,4.049,708,1.668,993,3.073,1039,1.432,1045,2.887,1088,3.976,1215,1.549,1666,2.596,2904,2.704,2905,2.704,2906,1.89,2909,2.579,2910,1.905,2911,2.813,2912,1.905,2913,2.813,2915,2.813,2916,2.949,3988,4.342,3989,4.454]],["component/412",[203,1.276]],["title/413-1",[2907,44.56]],["name/413-1",[]],["text/413-1",[]],["component/413-1",[]],["title/413-2",[2908,42.932]],["name/413-2",[]],["text/413-2",[]],["component/413-2",[]],["title/413",[]],["name/413",[2917,1.545]],["text/413",[8,1.801,11,1.856,57,3.411,74,2.463,105,3.479,136,3.09,137,2.455,178,1.643,181,3.829,203,3.495,221,3.633,321,2.43,358,4.393,379,2.843,399,2.814,419,1.672,514,4.032,596,2.976,698,3.707,1045,2.303,1088,4.652,1666,1.724,2904,2.251,2905,2.251,2909,3.235,2910,2.548,2911,3.529,2912,2.548,2913,3.529,2915,3.529,2916,3.699,3988,3.614,3989,5.586]],["component/413",[203,1.276]],["title/414-1",[222,25.902,226,23.333]],["name/414-1",[]],["text/414-1",[]],["component/414-1",[]],["title/414-2",[105,24.015,909,27.329]],["name/414-2",[]],["text/414-2",[]],["component/414-2",[]],["title/414",[9,14.093,11,11.848,203,26.847]],["name/414",[205,1.287]],["text/414",[3,2.708,9,2.653,11,2.466,18,2.646,80,3.498,96,2.826,105,2.919,203,5.587,222,3.148,226,2.836,235,3.654,261,3.515,435,3.903,909,3.321,941,4.854,1292,7.457,1293,6.456,3989,6.275]],["component/414",[203,1.276]],["title/415-1",[344,50.708]],["name/415-1",[]],["text/415-1",[]],["component/415-1",[]],["title/415-2",[2,27.205]],["name/415-2",[]],["text/415-2",[]],["component/415-2",[]],["title/415-3",[416,32.936,420,40.613]],["name/415-3",[]],["text/415-3",[]],["component/415-3",[]],["title/415-4",[11,14.261,200,34.071]],["name/415-4",[]],["text/415-4",[]],["component/415-4",[]],["title/415-5",[11,14.261,443,29.903]],["name/415-5",[]],["text/415-5",[]],["component/415-5",[]],["title/415-6",[65,42.191]],["name/415-6",[]],["text/415-6",[]],["component/415-6",[]],["title/415-7",[442,50.154]],["name/415-7",[]],["text/415-7",[]],["component/415-7",[]],["title/415-8",[203,40.572]],["name/415-8",[]],["text/415-8",[]],["component/415-8",[]],["title/415-9",[8,25.084,3992,54.873]],["name/415-9",[]],["text/415-9",[]],["component/415-9",[]],["title/415-10",[52,23.584,62,41.581]],["name/415-10",[]],["text/415-10",[]],["component/415-10",[]],["title/415-11",[65,33.602,399,26.009]],["name/415-11",[]],["text/415-11",[]],["component/415-11",[]],["title/415-12",[399,26.009,448,37.99]],["name/415-12",[]],["text/415-12",[]],["component/415-12",[]],["title/415-13",[399,21.61,448,31.564,991,33.744]],["name/415-13",[]],["text/415-13",[]],["component/415-13",[]],["title/415-14",[68,24.978,382,26.202,416,27.365]],["name/415-14",[]],["text/415-14",[]],["component/415-14",[]],["title/415-15",[8,17.826,200,24.213,203,22.963,416,23.406]],["name/415-15",[]],["text/415-15",[]],["component/415-15",[]],["title/415-16",[133,24.938,529,45.971]],["name/415-16",[]],["text/415-16",[]],["component/415-16",[]],["title/415-17",[133,24.938,528,39.944]],["name/415-17",[]],["text/415-17",[]],["component/415-17",[]],["title/415-18",[30,27.147,303,37.139]],["name/415-18",[]],["text/415-18",[]],["component/415-18",[]],["title/415-19",[389,41.355]],["name/415-19",[]],["text/415-19",[]],["component/415-19",[]],["title/415-20",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/415-20",[]],["text/415-20",[]],["component/415-20",[]],["title/415-21",[126,20.299,1032,30.391]],["name/415-21",[]],["text/415-21",[]],["component/415-21",[]],["title/415-22",[220,23.711,1039,26.676]],["name/415-22",[]],["text/415-22",[]],["component/415-22",[]],["title/415-23",[30,22.555,286,28.717,563,30.081]],["name/415-23",[]],["text/415-23",[]],["component/415-23",[]],["title/415-24",[333,33.487,663,38.919]],["name/415-24",[]],["text/415-24",[]],["component/415-24",[]],["title/415-25",[333,33.487,669,43.851]],["name/415-25",[]],["text/415-25",[]],["component/415-25",[]],["title/415-26",[74,28.593]],["name/415-26",[]],["text/415-26",[]],["component/415-26",[]],["title/415",[541,35.613]],["name/415",[541,1.06]],["text/415",[2,0.46,3,0.473,4,0.23,5,0.835,6,1.577,8,1.1,9,0.465,11,0.761,12,1.103,14,0.349,18,1.061,20,0.458,22,0.235,27,0.342,30,1.985,33,0.575,36,0.275,48,1.312,52,0.345,59,0.361,60,1.59,62,0.608,64,0.28,65,1.793,66,1.24,67,0.656,68,2.091,73,0.254,74,2.019,80,0.218,81,1.934,82,0.491,89,0.886,91,0.822,94,0.307,95,0.397,96,0.773,98,0.772,106,0.345,109,1.297,110,0.368,112,0.224,122,0.541,123,0.278,124,0.348,126,1.172,130,0.32,133,1.33,134,0.636,135,1.074,136,0.949,137,1.736,139,1.944,150,1.966,151,0.263,154,0.293,155,0.515,166,0.686,169,0.759,170,1.39,171,1.413,172,1.363,174,0.624,175,0.561,176,2.213,177,0.3,178,1.116,181,2.523,184,0.451,187,0.584,200,1.818,203,4.168,207,0.701,214,1.45,217,1.703,218,0.453,220,0.347,221,0.472,222,0.196,223,1.032,225,0.239,226,0.64,228,0.704,233,0.261,237,0.553,238,0.337,242,0.756,246,1.878,250,0.778,259,0.269,261,0.423,266,0.894,275,0.311,279,1.348,282,0.305,283,0.342,284,0.345,286,0.734,287,0.314,288,0.984,303,0.788,309,1.988,313,0.368,314,0.304,318,0.332,321,0.477,333,0.918,334,0.259,335,0.686,342,0.348,344,0.305,350,0.364,360,0.334,379,0.199,382,0.865,388,0.239,389,0.249,391,1.094,397,1.617,399,0.713,401,0.242,413,0.302,416,2.29,419,2.128,420,1.35,422,2.571,432,0.241,434,0.62,438,0.677,439,0.325,441,1.125,442,1.095,443,0.994,447,0.304,448,3.368,462,0.253,464,1.111,466,0.307,471,1.519,472,0.396,476,0.96,490,1.111,492,0.293,495,0.423,501,0.536,504,0.408,505,0.792,507,1.699,508,0.81,509,1.649,510,1.89,512,0.376,513,0.464,514,0.407,515,0.897,516,0.839,517,0.464,518,1.212,520,1.629,522,0.311,523,1.56,526,0.282,527,0.376,528,0.848,529,0.976,532,1.295,539,0.325,546,0.458,551,0.32,556,0.354,560,1.162,563,0.993,565,0.318,566,1.012,571,0.848,574,0.963,575,1.169,576,0.931,590,0.55,596,0.402,599,0.624,613,0.357,628,0.287,629,0.345,630,0.464,640,0.997,641,0.323,643,3.137,654,0.525,655,1.539,657,1.323,659,0.408,660,1.408,661,0.318,663,3.104,667,0.337,669,2.137,674,0.345,677,0.924,680,0.316,690,1.92,696,2.072,698,0.543,701,0.691,703,0.472,704,0.945,710,0.372,719,0.385,723,0.316,724,0.719,741,2.415,742,1.002,744,0.867,746,2.131,747,0.357,748,0.656,749,0.376,751,0.376,753,0.345,754,0.364,755,0.372,773,0.372,780,0.261,785,1.032,787,0.372,788,0.3,794,1.562,795,0.464,800,0.479,802,0.323,907,0.818,935,0.348,957,0.325,958,0.287,960,0.311,966,0.711,986,1.765,991,1.35,995,0.719,997,0.307,998,0.719,1007,0.376,1032,1.621,1039,0.39,1040,2.484,1044,0.402,1045,0.161,1080,1.056,1111,0.601,1116,0.678,1118,0.376,1124,0.327,1133,0.765,1141,0.755,1156,0.817,1160,0.357,1161,0.263,1165,0.441,1176,0.291,1180,0.357,1191,0.402,1233,0.441,1238,0.302,1242,0.32,1243,0.3,1252,0.337,1293,2.834,1297,0.364,1298,0.745,1302,0.316,1307,0.441,1318,0.408,1321,2.865,1322,1.811,1324,0.632,1386,0.608,1453,0.337,1496,0.372,1502,0.415,1506,0.451,1525,0.464,1543,0.368,1568,0.415,1637,0.423,1638,1.271,1639,0.498,1831,0.765,1841,0.897,1842,0.464,1849,0.691,1872,0.431,1974,0.381,1975,0.431,2037,0.441,2038,0.441,2039,0.441,2074,0.973,2115,1.636,2121,0.498,2270,0.361,2380,0.498,2544,0.342,2617,0.897,2623,0.833,2629,0.364,2658,0.897,2666,0.423,2698,0.897,2759,1.682,2760,0.464,2818,0.314,2909,0.226,2978,0.833,2980,0.877,3220,1.128,3268,0.755,3311,0.883,3314,0.334,3419,0.396,3534,0.415,3546,0.408,3547,0.408,3549,0.391,3550,0.391,3551,0.391,3552,0.391,3553,0.391,3554,0.391,3697,0.431,3698,0.479,3798,0.441,3988,0.381,3992,0.802,3993,4.407,3994,0.927,3995,0.927,3996,0.479,3997,0.479,3998,0.479,3999,0.479,4000,0.479,4001,0.479,4002,0.479,4003,0.479,4004,0.479,4005,0.479,4006,0.479,4007,0.479,4008,0.451,4009,0.479,4010,0.479,4011,0.479,4012,1.983,4013,1.983,4014,2.106,4016,0.479,4017,0.479,4018,0.479,4019,0.927,4020,1.345,4021,0.479,4022,0.479,4023,0.479,4024,0.479,4025,0.479,4026,0.479,4027,3.658,4028,0.927,4029,0.479,4030,0.479,4031,0.479,4032,0.479,4033,0.479,4034,0.479,4035,1.345,4036,0.479,4037,0.479,4038,0.927,4039,0.927,4040,0.479,4041,0.479,4042,0.479,4043,0.479,4044,1.345,4045,0.479,4046,0.479,4047,0.479,4049,0.927,4050,0.927,4051,0.927,4052,0.927,4053,0.479,4054,0.479,4055,0.524,4056,0.524,4057,0.524,4058,1.899,4059,1.013,4060,1.013,4061,0.524,4062,0.524]],["component/415",[203,1.276]],["title/416-1",[203,32.312,310,45.585]],["name/416-1",[]],["text/416-1",[]],["component/416-1",[]],["title/416-2",[261,28.922,1954,38.537]],["name/416-2",[]],["text/416-2",[]],["component/416-2",[]],["title/416-3",[18,12,46,20.038,203,17.81,279,16.937,399,14.335,1040,28.091]],["name/416-3",[]],["text/416-3",[]],["component/416-3",[]],["title/416-4",[203,22.963,279,21.838,551,30.113,1302,29.732]],["name/416-4",[]],["text/416-4",[]],["component/416-4",[]],["title/416-5",[111,54.873,112,29.591]],["name/416-5",[]],["text/416-5",[]],["component/416-5",[]],["title/416-6",[374,33.375,707,35.628]],["name/416-6",[]],["text/416-6",[]],["component/416-6",[]],["title/416",[208,30.391,630,31.725]],["name/416",[3216,1.734]],["text/416",[0,1.044,2,1.044,4,2.762,5,0.584,6,0.74,8,0.679,9,0.818,11,1.127,12,0.772,18,1.973,28,0.969,30,1.309,46,3.295,48,0.81,60,1.113,61,1.196,62,1.126,63,1.171,65,0.91,68,1.449,74,2.288,81,2.037,91,1.445,93,0.806,95,1.309,96,0.63,108,2.694,110,1.318,112,0.801,113,1.363,114,1.724,119,1.784,121,1.126,123,2.399,126,0.55,128,2.114,132,1.171,133,1.202,135,0.875,137,1.479,147,0.913,150,2.22,157,1.418,164,1.065,166,1.558,167,1.543,170,2.726,171,1.553,174,1.155,176,0.783,177,1.076,181,0.554,187,1.082,200,0.923,203,5.23,208,1.465,217,0.946,221,1.072,226,1.52,233,0.936,234,0.984,235,0.814,261,1.394,279,2.002,303,3.366,318,2.114,320,0.759,321,1.083,325,1.256,330,1.543,331,1.398,342,1.245,374,0.904,387,2.762,388,0.854,399,0.704,405,1.604,415,0.993,416,0.892,448,1.029,455,1.66,490,0.777,507,0.797,509,0.774,510,1.991,518,0.749,522,1.113,532,0.799,539,1.163,541,0.768,546,0.849,549,0.926,551,3.349,630,0.859,634,2.084,643,3.769,654,0.973,655,1.691,657,1.648,660,4.614,678,1.147,690,1.604,697,1.398,722,2.862,794,1.543,799,1.332,923,1.279,932,1.291,952,1.347,958,1.029,991,1.1,1006,0.997,1007,1.347,1040,5.12,1120,1.015,1125,1.543,1143,1.418,1154,4.618,1161,0.943,1176,1.858,1200,1.486,1247,3.077,1250,1.245,1293,2.561,1302,3.307,1322,1.267,1357,1.1,1393,1.439,1666,1.158,1670,1.256,1743,1.616,1748,3.021,1806,1.577,1834,2.398,1954,1.044,2070,1.716,2074,0.961,2117,2.601,2123,1.171,2444,1.616,2507,2.371,2526,1.332,2542,1.577,2545,1.147,2607,1.486,2666,1.513,2841,2.645,2968,1.147,3090,1.716,3097,1.577,3231,2.747,3238,1.439,3239,1.398,3346,2.747,3350,1.543,3441,2.747,3529,1.662,3603,1.662,3769,1.716,3992,2.645,4008,1.616,4012,1.616,4013,1.616,4063,3.339,4064,1.876,4065,6.278,4066,1.876,4067,1.876,4068,3.339,4069,3.339,4070,1.876,4071,1.876,4072,1.876,4073,1.876,4074,1.876]],["component/416",[203,1.276]],["title/417-1",[344,50.708]],["name/417-1",[]],["text/417-1",[]],["component/417-1",[]],["title/417-2",[374,33.375,707,35.628]],["name/417-2",[]],["text/417-2",[]],["component/417-2",[]],["title/417",[19,38.169,20,31.351]],["name/417",[205,1.287]],["text/417",[0,6.134,2,3.033,3,2.29,4,3.133,5,2.216,8,2.579,9,1.744,11,2.27,18,3.465,20,3.223,46,3.737,95,2.791,96,2.39,112,4.142,203,5.521,208,3.124,320,2.881,325,4.767,441,3.589,465,4.726,518,3.869,630,3.261,968,2.809,1040,5.239,1357,4.175]],["component/417",[203,1.276]],["title/418-1",[9,16.962,11,14.261]],["name/418-1",[]],["text/418-1",[]],["component/418-1",[]],["title/418-2",[10,41.906]],["name/418-2",[]],["text/418-2",[]],["component/418-2",[]],["title/418-3",[968,34.315]],["name/418-3",[]],["text/418-3",[]],["component/418-3",[]],["title/418-4",[374,33.375,707,35.628]],["name/418-4",[]],["text/418-4",[]],["component/418-4",[]],["title/418",[2,27.205]],["name/418",[2,0.81]],["text/418",[2,3.717,3,1.657,5,2.395,9,2.596,10,4.437,11,2.617,12,2.719,13,1.329,18,0.975,24,2.353,26,1.526,39,1.964,46,2.704,48,1.339,91,1.343,96,1.729,112,1.325,138,1.923,149,1.903,176,2.759,181,2.719,203,4.552,207,2.458,221,0.996,226,3.102,235,1.346,251,1.789,261,1.295,320,2.085,321,1.671,355,3.311,372,3.112,387,1.565,388,3.008,401,2.381,405,1.49,415,1.642,432,2.374,444,3.336,446,3.659,518,1.238,549,1.531,630,1.421,722,1.622,772,1.819,802,1.91,927,1.622,968,4.03,983,1.686,1168,6.919,1215,1.292,1311,1.77,1611,2.417,2337,3.897,2545,4.042,3259,2.115,3260,2.115,3263,2.115,3264,2.096,4075,3.102,4076,3.102]],["component/418",[203,1.276]],["title/419-1",[52,23.584,139,24.374]],["name/419-1",[]],["text/419-1",[]],["component/419-1",[]],["title/419-2",[1045,21.29,1666,24.015]],["name/419-2",[]],["text/419-2",[]],["component/419-2",[]],["title/419",[]],["name/419",[2853,1.51]],["text/419",[8,3.561,11,1.497,52,2.475,74,3.233,139,2.558,178,2.402,221,3.833,321,3.189,358,5.765,379,3.731,419,2.445,514,4.797,698,4.41,1045,3.425,1666,3.409,2904,3.29,2905,3.29,2906,3.696,4077,5.575]],["component/419",[15,1.055]],["title/420-1",[126,20.299,1032,30.391]],["name/420-1",[]],["text/420-1",[]],["component/420-1",[]],["title/420",[]],["name/420",[3662,2.177]],["text/420",[6,1.738,9,1.078,18,1.384,74,2.245,81,1.988,93,2.932,98,4.389,126,2.988,134,2.956,137,1.443,139,2.403,150,2.166,166,2.054,181,2.782,204,2.256,220,1.508,222,1.647,224,2.582,225,2.005,226,1.484,266,2.074,309,2.19,334,2.174,382,2.005,391,2.094,399,1.654,419,1.481,422,3.312,471,1.982,507,1.872,509,1.816,518,2.725,531,2.809,532,2.909,575,4.205,631,2.582,655,2.23,657,2.174,661,2.677,677,2.144,690,2.115,691,2.628,692,2.73,693,2.677,698,2.522,708,3.064,769,2.768,771,2.66,775,2.568,966,2.129,983,2.393,997,2.582,1032,3.669,1039,1.696,1136,2.898,1291,2.948,2980,2.628,3311,2.644,3315,2.83,3439,3.094,4078,7.206,4079,7.206,4080,3.553,4081,3.553,4082,3.795,4083,3.795,4084,5.884,4085,7.206,4086,5.884]],["component/420",[15,1.055]],["title/421-1",[149,21.259,708,25.823,1215,23.97]],["name/421-1",[]],["text/421-1",[]],["component/421-1",[]],["title/421-2",[52,23.584,139,24.374]],["name/421-2",[]],["text/421-2",[]],["component/421-2",[]],["title/421-3",[1045,21.29,1666,24.015]],["name/421-3",[]],["text/421-3",[]],["component/421-3",[]],["title/421-4",[220,23.711,1039,26.676]],["name/421-4",[]],["text/421-4",[]],["component/421-4",[]],["title/421-5",[2907,44.56]],["name/421-5",[]],["text/421-5",[]],["component/421-5",[]],["title/421-6",[2908,42.932]],["name/421-6",[]],["text/421-6",[]],["component/421-6",[]],["title/421-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/421-7",[]],["text/421-7",[]],["component/421-7",[]],["title/421-8",[126,20.299,1032,30.391]],["name/421-8",[]],["text/421-8",[]],["component/421-8",[]],["title/421",[126,25.488]],["name/421",[126,0.759]],["text/421",[6,0.961,8,2.004,9,0.597,11,1.67,15,1.621,18,0.766,52,0.83,57,1.912,74,2.667,81,1.1,93,1.803,96,1.41,98,2.905,105,2.281,126,2.175,134,1.818,136,1.732,137,1.813,139,1.947,149,0.9,150,1.199,166,1.137,178,1.388,181,3.379,204,1.248,220,1.438,221,3.202,222,0.911,224,1.429,225,1.109,226,0.821,266,1.147,309,1.211,321,2.134,334,1.203,358,3.858,379,2.497,382,1.109,391,1.159,399,2.078,419,1.861,422,2.037,471,1.096,507,1.036,509,1.005,514,3.69,518,1.676,531,1.554,532,1.789,575,2.586,596,1.668,631,1.429,655,1.234,657,1.203,661,1.481,677,1.186,690,1.17,691,1.454,692,1.51,693,1.481,698,3.683,708,2.483,769,1.532,771,1.472,775,1.421,966,1.178,983,1.324,993,2.16,997,1.429,1032,2.428,1039,1.617,1045,2.281,1088,3.05,1136,1.604,1215,1.015,1291,1.631,1666,1.919,2904,1.901,2905,1.901,2906,1.239,2909,1.813,2910,1.248,2911,1.978,2912,1.248,2913,1.978,2915,1.978,2916,2.073,2980,1.454,3311,1.463,3315,1.566,3439,1.712,4077,3.221,4078,4.769,4079,4.769,4080,1.966,4081,1.966,4082,2.1,4083,2.1,4084,3.619,4085,4.769,4086,3.619,4087,3.327]],["component/421",[15,1.055]],["title/422-1",[2326,65.734]],["name/422-1",[]],["text/422-1",[]],["component/422-1",[]],["title/422-2",[74,28.593]],["name/422-2",[]],["text/422-2",[]],["component/422-2",[]],["title/422-3",[158,58.751]],["name/422-3",[]],["text/422-3",[]],["component/422-3",[]],["title/422-4",[1006,46.229]],["name/422-4",[]],["text/422-4",[]],["component/422-4",[]],["title/422",[390,31.82,2326,52.352]],["name/422",[390,1.19]],["textcomponent/422",[15,1.055]],["title/423-1",[2907,44.56]],["name/423-1",[]],["text/423-1",[]],["component/423-1",[]],["title/423-2",[2908,42.932]],["name/423-2",[]],["text/423-2",[]],["component/423-2",[]],["title/423",[]],["name/423",[2917,1.545]],["text/423",[8,1.801,11,1.856,15,2.892,57,3.411,74,2.463,105,3.479,136,3.09,137,2.455,178,1.643,181,3.829,221,3.633,321,2.43,358,4.393,379,2.843,399,2.814,419,1.672,514,4.032,596,2.976,698,3.707,1045,2.303,1088,4.652,1666,1.724,2904,2.251,2905,2.251,2909,3.235,2910,2.548,2911,3.529,2912,2.548,2913,3.529,2915,3.529,2916,3.699,4077,3.814,4087,5.936]],["component/423",[15,1.055]],["title/424-1",[222,25.902,226,23.333]],["name/424-1",[]],["text/424-1",[]],["component/424-1",[]],["title/424-2",[19,31.713,105,19.953,909,22.707]],["name/424-2",[]],["text/424-2",[]],["component/424-2",[]],["title/424",[9,12.054,11,10.134,14,16.942,15,18.998]],["name/424",[205,1.287]],["text/424",[3,2.468,9,2.804,11,2.357,14,3.509,15,4.419,26,3.774,30,3.007,33,4.355,80,3.188,96,2.575,105,2.66,222,2.869,226,2.584,235,3.33,261,3.203,435,3.557,909,3.027,941,4.424,1288,5.884,1289,7.019,1290,7.019,1291,5.136,3664,5.39,4087,6.078]],["component/424",[15,1.055]],["title/425-1",[968,34.315]],["name/425-1",[]],["text/425-1",[]],["component/425-1",[]],["title/425-2",[105,30.154]],["name/425-2",[]],["text/425-2",[]],["component/425-2",[]],["title/425-3",[11,11.848,51,29.259,234,30.206]],["name/425-3",[]],["text/425-3",[]],["component/425-3",[]],["title/425",[2,27.205]],["name/425",[2,0.81]],["text/425",[2,3.042,3,2.918,4,2.489,5,1.082,9,2.382,11,2.441,12,3.392,13,1.489,14,2.837,15,3.957,24,1.587,36,1.824,51,2.876,57,1.583,71,2.754,80,1.444,91,3.097,95,1.362,105,3.372,109,2.749,116,2.05,136,1.434,137,1.139,149,1.284,181,3.263,208,1.525,209,1.983,218,1.555,220,1.19,221,2.297,234,1.824,235,2.455,282,2.027,315,1.994,318,2.2,358,2.038,372,2.099,387,1.754,401,1.606,405,1.669,432,2.607,475,2.155,501,1.84,546,1.573,565,2.113,596,1.381,634,2.17,645,1.934,887,2.496,891,3.693,909,1.371,927,1.817,968,3.838,1037,2.234,1088,1.611,1120,1.88,1161,2.844,1310,2.185,1311,1.983,1326,2.038,1451,2.558,2295,5.011,2732,2.923,2792,2.269,2911,1.637,2913,1.637,2915,1.637,3532,3.18,4087,4.482,4090,3.733,4091,3.733]],["component/425",[15,1.055]],["title/426-1",[66,56.771]],["name/426-1",[]],["text/426-1",[]],["component/426-1",[]],["title/426-2",[65,42.191]],["name/426-2",[]],["text/426-2",[]],["component/426-2",[]],["title/426-3",[389,41.355]],["name/426-3",[]],["text/426-3",[]],["component/426-3",[]],["title/426-4",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/426-4",[]],["text/426-4",[]],["component/426-4",[]],["title/426-5",[126,20.299,1032,30.391]],["name/426-5",[]],["text/426-5",[]],["component/426-5",[]],["title/426-6",[220,23.711,1039,26.676]],["name/426-6",[]],["text/426-6",[]],["component/426-6",[]],["title/426-7",[30,22.555,286,28.717,563,30.081]],["name/426-7",[]],["text/426-7",[]],["component/426-7",[]],["title/426-8",[333,33.487,663,38.919]],["name/426-8",[]],["text/426-8",[]],["component/426-8",[]],["title/426-9",[333,33.487,669,43.851]],["name/426-9",[]],["text/426-9",[]],["component/426-9",[]],["title/426",[541,35.613]],["name/426",[541,1.06]],["text/426",[2,0.565,3,0.581,4,1.125,5,1.517,6,1.923,9,0.442,11,1.003,12,0.395,14,0.622,15,2.362,18,1.205,20,0.818,22,0.431,27,0.627,28,0.496,30,1.265,33,0.545,48,1.655,50,0.937,59,0.661,64,0.513,65,1.241,66,1.669,68,0.417,73,0.466,74,2.869,80,0.399,81,2.199,82,1.859,89,1.476,91,0.782,95,0.376,107,0.545,109,1.873,123,0.51,126,1.428,133,1.38,134,1.659,135,0.843,137,2.005,139,2.02,147,0.467,149,0.355,150,0.472,151,0.483,158,1.22,164,0.545,166,1.193,169,0.933,175,1,176,2.838,177,1.467,178,1.266,181,0.755,182,1.269,207,0.458,214,0.977,216,0.515,217,1.29,218,0.43,220,0.618,221,0.308,222,0.359,223,1.39,224,0.563,225,0.822,226,2.062,228,1.256,233,0.479,242,0.929,246,2.436,250,1.354,266,1.521,279,0.426,283,0.627,286,0.479,309,2.854,314,0.557,315,0.551,321,0.311,333,0.873,334,0.474,335,0.448,382,0.822,388,0.437,389,0.457,391,1.535,397,1.797,399,0.678,403,0.851,413,0.554,419,1.93,422,3.297,432,0.443,434,1.105,438,1.179,439,0.595,441,0.669,447,1.047,448,4.681,450,1.739,471,1.453,486,0.748,490,1.588,492,0.537,507,2.071,509,2.01,510,2.35,516,1.031,518,1.747,520,2.055,523,2.461,526,0.973,527,0.69,532,2.077,545,0.737,546,1.158,556,0.649,563,1.337,566,0.661,571,0.554,582,0.591,584,0.563,590,0.522,596,0.718,599,1.112,613,0.655,617,0.637,628,0.527,629,0.632,640,1.695,654,2.976,655,3.994,657,2.406,661,0.584,663,3.439,669,2.044,677,0.879,690,2.939,694,0.675,696,1.744,698,0.355,709,1.036,718,0.649,719,0.707,724,1.283,746,2.81,753,1.189,763,0.573,769,2.03,770,3.489,771,1.95,773,0.682,780,0.479,785,0.982,799,0.682,909,1.009,922,0.557,924,0.548,949,0.534,958,0.527,966,0.873,968,0.379,1032,1.921,1039,0.696,1045,0.786,1111,1.517,1120,0.52,1136,0.632,1141,0.716,1160,0.655,1161,0.483,1176,0.534,1180,0.655,1184,0.716,1243,0.551,1250,0.637,1291,1.712,1297,0.668,1313,0.716,1322,2.589,1382,0.632,1386,0.577,1453,0.617,1496,0.682,1530,0.675,1543,0.675,1878,2.566,1889,0.563,1976,2.376,2025,2.104,2031,1.347,2032,1.385,2033,1.385,2035,0.761,2040,0.828,2042,2.34,2043,0.828,2086,0.879,2088,0.587,2455,0.69,2544,0.627,2818,0.577,2836,0.716,2909,0.415,2967,0.604,2968,0.587,2980,1.078,3311,1.535,3314,0.612,3315,1.161,3316,1.22,3319,1.486,3320,0.584,3321,0.612,3439,0.675,3546,0.748,3547,0.748,3549,0.716,3550,0.716,3551,0.716,3552,0.716,3553,0.716,3554,0.716,3697,0.79,3699,1.6,3703,1.6,3704,0.851,4077,0.737,4080,2.063,4081,2.063,4092,0.914,4093,0.914,4094,0.914,4095,0.914,4096,0.914,4097,0.914,4098,0.914,4099,0.914,4100,2.433,4101,1.719,4102,0.914]],["component/426",[15,1.055]],["title/427-1",[541,35.613]],["name/427-1",[]],["text/427-1",[]],["component/427-1",[]],["title/427",[450,46.839]],["name/427",[450,1.394]],["text/427",[3,1.586,5,2.318,6,1.946,9,0.721,11,1.707,14,2.563,15,3.857,16,1.344,18,2.606,25,1.615,30,2.494,77,1.698,80,2.644,89,2.451,93,2.118,109,1.131,126,1.445,128,4.029,130,1.801,133,3.23,134,3.223,137,2.717,147,1.433,166,1.373,169,1.52,171,2.294,177,1.689,207,1.404,233,1.469,266,1.386,275,1.746,279,2.188,335,2.969,342,1.954,382,1.34,390,2.924,419,0.99,438,1.357,450,6.075,490,1.22,507,2.096,508,1.622,509,2.034,510,3.285,523,1.361,532,1.254,571,2.844,584,1.726,588,2.608,599,1.813,622,2.375,644,2.166,654,2.557,703,4.185,769,1.85,771,1.778,1006,1.565,1045,2.289,1170,1.938,1218,2.091,1232,2.375,1412,4.513,1503,2.375,1587,2.608,1599,2.694,1605,2.537,1675,3.783,1712,2.166,1741,3.907,1967,2.422,2000,2.608,2326,4.811,2544,1.922,3320,6.074,3321,1.878,4103,2.608,4104,2.801,4105,2.801,4106,2.801,4107,2.801,4108,2.801,4109,2.801,4110,2.801,4111,2.801,4112,2.801,4113,2.801,4114,2.801]],["component/427",[15,1.055]],["title/428-1",[52,23.584,139,24.374]],["name/428-1",[]],["text/428-1",[]],["component/428-1",[]],["title/428-2",[1045,21.29,1666,24.015]],["name/428-2",[]],["text/428-2",[]],["component/428-2",[]],["title/428",[]],["name/428",[2853,1.51]],["text/428",[8,3.561,11,1.497,52,2.475,74,3.233,139,2.558,178,2.402,221,3.833,321,3.189,358,5.765,379,3.731,419,2.445,514,4.797,698,4.41,1045,3.425,1666,3.409,2904,3.29,2905,3.29,2906,3.696,4077,5.575]],["component/428",[15,1.055]],["title/429-1",[126,20.299,1032,30.391]],["name/429-1",[]],["text/429-1",[]],["component/429-1",[]],["title/429",[]],["name/429",[3662,2.177]],["text/429",[6,1.738,9,1.078,18,1.384,74,2.245,81,1.988,93,2.932,98,4.389,126,2.988,134,2.956,137,1.443,139,2.403,150,2.166,166,2.054,181,2.782,204,2.256,220,1.508,222,1.647,224,2.582,225,2.005,226,1.484,266,2.074,309,2.19,334,2.174,382,2.005,391,2.094,399,1.654,419,1.481,422,3.312,471,1.982,507,1.872,509,1.816,518,2.725,531,2.809,532,2.909,575,4.205,631,2.582,655,2.23,657,2.174,661,2.677,677,2.144,690,2.115,691,2.628,692,2.73,693,2.677,698,2.522,708,3.064,769,2.768,771,2.66,775,2.568,966,2.129,983,2.393,997,2.582,1032,3.669,1039,1.696,1136,2.898,1291,2.948,2980,2.628,3311,2.644,3315,2.83,3439,3.094,4078,7.206,4079,7.206,4080,3.553,4081,3.553,4082,3.795,4083,3.795,4084,5.884,4085,7.206,4086,5.884]],["component/429",[15,1.055]],["title/430-1",[149,21.259,708,25.823,1215,23.97]],["name/430-1",[]],["text/430-1",[]],["component/430-1",[]],["title/430-2",[52,23.584,139,24.374]],["name/430-2",[]],["text/430-2",[]],["component/430-2",[]],["title/430-3",[1045,21.29,1666,24.015]],["name/430-3",[]],["text/430-3",[]],["component/430-3",[]],["title/430-4",[220,23.711,1039,26.676]],["name/430-4",[]],["text/430-4",[]],["component/430-4",[]],["title/430-5",[2907,44.56]],["name/430-5",[]],["text/430-5",[]],["component/430-5",[]],["title/430-6",[2908,42.932]],["name/430-6",[]],["text/430-6",[]],["component/430-6",[]],["title/430-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/430-7",[]],["text/430-7",[]],["component/430-7",[]],["title/430-8",[126,20.299,1032,30.391]],["name/430-8",[]],["text/430-8",[]],["component/430-8",[]],["title/430",[126,25.488]],["name/430",[126,0.759]],["text/430",[6,0.961,8,2.004,9,0.597,11,1.67,15,1.621,18,0.766,52,0.83,57,1.912,74,2.667,81,1.1,93,1.803,96,1.41,98,2.905,105,2.281,126,2.175,134,1.818,136,1.732,137,1.813,139,1.947,149,0.9,150,1.199,166,1.137,178,1.388,181,3.379,204,1.248,220,1.438,221,3.202,222,0.911,224,1.429,225,1.109,226,0.821,266,1.147,309,1.211,321,2.134,334,1.203,358,3.858,379,2.497,382,1.109,391,1.159,399,2.078,419,1.861,422,2.037,471,1.096,507,1.036,509,1.005,514,3.69,518,1.676,531,1.554,532,1.789,575,2.586,596,1.668,631,1.429,655,1.234,657,1.203,661,1.481,677,1.186,690,1.17,691,1.454,692,1.51,693,1.481,698,3.683,708,2.483,769,1.532,771,1.472,775,1.421,966,1.178,983,1.324,993,2.16,997,1.429,1032,2.428,1039,1.617,1045,2.281,1088,3.05,1136,1.604,1215,1.015,1291,1.631,1666,1.919,2904,1.901,2905,1.901,2906,1.239,2909,1.813,2910,1.248,2911,1.978,2912,1.248,2913,1.978,2915,1.978,2916,2.073,2980,1.454,3311,1.463,3315,1.566,3439,1.712,4077,3.221,4078,4.769,4079,4.769,4080,1.966,4081,1.966,4082,2.1,4083,2.1,4084,3.619,4085,4.769,4086,3.619,4087,3.327]],["component/430",[15,1.055]],["title/431-1",[2326,65.734]],["name/431-1",[]],["text/431-1",[]],["component/431-1",[]],["title/431-2",[74,28.593]],["name/431-2",[]],["text/431-2",[]],["component/431-2",[]],["title/431-3",[158,58.751]],["name/431-3",[]],["text/431-3",[]],["component/431-3",[]],["title/431-4",[1006,46.229]],["name/431-4",[]],["text/431-4",[]],["component/431-4",[]],["title/431",[390,31.82,2326,52.352]],["name/431",[390,1.19]],["textcomponent/431",[15,1.055]],["title/432-1",[2907,44.56]],["name/432-1",[]],["text/432-1",[]],["component/432-1",[]],["title/432-2",[2908,42.932]],["name/432-2",[]],["text/432-2",[]],["component/432-2",[]],["title/432",[]],["name/432",[2917,1.545]],["text/432",[8,1.801,11,1.856,15,2.892,57,3.411,74,2.463,105,3.479,136,3.09,137,2.455,178,1.643,181,3.829,221,3.633,321,2.43,358,4.393,379,2.843,399,2.814,419,1.672,514,4.032,596,2.976,698,3.707,1045,2.303,1088,4.652,1666,1.724,2904,2.251,2905,2.251,2909,3.235,2910,2.548,2911,3.529,2912,2.548,2913,3.529,2915,3.529,2916,3.699,4077,3.814,4087,5.936]],["component/432",[15,1.055]],["title/433-1",[222,25.902,226,23.333]],["name/433-1",[]],["text/433-1",[]],["component/433-1",[]],["title/433-2",[19,31.713,105,19.953,909,22.707]],["name/433-2",[]],["text/433-2",[]],["component/433-2",[]],["title/433",[9,12.054,11,10.134,14,16.942,15,18.998]],["name/433",[205,1.287]],["text/433",[3,2.468,9,2.804,11,2.357,14,3.509,15,4.419,26,3.774,30,3.007,33,4.355,80,3.188,96,2.575,105,2.66,222,2.869,226,2.584,235,3.33,261,3.203,435,3.557,909,3.027,941,4.424,1288,5.884,1289,7.019,1290,7.019,1291,5.136,3664,5.39,4087,6.078]],["component/433",[15,1.055]],["title/434-1",[66,56.771]],["name/434-1",[]],["text/434-1",[]],["component/434-1",[]],["title/434-2",[65,42.191]],["name/434-2",[]],["text/434-2",[]],["component/434-2",[]],["title/434-3",[389,41.355]],["name/434-3",[]],["text/434-3",[]],["component/434-3",[]],["title/434-4",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/434-4",[]],["text/434-4",[]],["component/434-4",[]],["title/434-5",[126,20.299,1032,30.391]],["name/434-5",[]],["text/434-5",[]],["component/434-5",[]],["title/434-6",[220,23.711,1039,26.676]],["name/434-6",[]],["text/434-6",[]],["component/434-6",[]],["title/434-7",[30,22.555,286,28.717,563,30.081]],["name/434-7",[]],["text/434-7",[]],["component/434-7",[]],["title/434-8",[333,33.487,663,38.919]],["name/434-8",[]],["text/434-8",[]],["component/434-8",[]],["title/434-9",[333,33.487,669,43.851]],["name/434-9",[]],["text/434-9",[]],["component/434-9",[]],["title/434",[541,35.613]],["name/434",[541,1.06]],["text/434",[2,0.555,3,0.571,4,1.106,5,1.496,6,1.896,9,0.434,11,0.989,12,0.388,14,0.611,15,2.333,18,1.356,20,0.803,22,0.423,27,0.615,28,0.486,30,1.245,33,0.535,48,1.629,50,0.92,59,0.649,64,0.503,65,2.093,66,2.074,68,0.409,73,0.457,74,2.843,80,0.391,81,2.169,82,1.831,89,1.453,91,0.768,95,0.369,107,0.535,109,1.847,123,0.501,126,1.408,130,0.576,133,1.359,134,1.634,135,0.828,137,1.981,139,1.994,147,0.459,149,0.348,150,0.463,151,0.474,158,1.198,164,0.535,166,1.173,169,0.916,175,0.982,176,2.932,177,1.442,178,1.247,181,0.742,182,1.246,207,0.449,214,0.96,216,0.505,217,1.269,218,0.422,220,0.607,221,0.302,222,0.352,223,1.366,224,0.552,225,0.808,226,2.037,228,1.234,233,0.47,242,0.913,246,2.4,250,1.331,266,1.496,279,0.418,283,0.615,286,0.47,309,2.817,314,0.546,315,0.54,321,0.306,333,0.858,334,0.465,335,0.439,382,0.808,388,0.429,389,0.448,391,1.511,397,1.766,399,0.666,403,0.835,413,0.543,419,1.906,422,3.26,432,0.434,434,1.085,438,1.159,439,0.584,441,0.657,447,1.029,448,4.409,450,1.711,471,1.43,486,0.734,490,1.564,492,0.527,502,0.592,507,2.043,509,1.982,510,2.318,516,1.012,518,1.918,520,2.024,523,2.429,526,0.955,527,0.677,532,2.048,545,0.723,546,1.138,556,0.636,563,1.314,566,0.649,571,0.543,576,1.592,582,0.58,584,0.552,590,0.964,596,0.705,599,1.092,613,0.642,617,0.625,628,0.517,629,0.62,634,0.588,640,1.668,654,2.938,655,3.955,657,2.372,661,0.573,663,3.397,669,2.011,677,0.864,690,2.903,694,0.662,696,1.714,698,0.348,709,1.018,718,0.636,719,0.693,724,1.26,746,2.488,753,1.168,763,0.562,769,1.997,770,3.444,771,1.919,773,0.669,780,0.47,785,0.964,799,0.669,909,0.992,922,0.546,924,0.538,949,0.524,958,0.517,966,0.858,968,0.372,1032,1.893,1039,0.683,1045,0.773,1111,1.491,1120,0.51,1136,0.62,1141,0.702,1160,0.642,1161,0.474,1176,0.524,1180,0.642,1184,0.702,1243,0.54,1250,0.625,1291,1.683,1297,0.655,1313,0.702,1322,2.549,1382,0.62,1386,0.566,1453,0.605,1496,0.669,1530,0.662,1543,0.662,1878,2.527,1889,0.552,1976,2.338,2025,2.069,2031,1.323,2032,1.361,2033,1.361,2035,0.746,2040,0.812,2042,2.3,2043,0.812,2086,0.862,2088,0.576,2455,0.677,2544,0.615,2818,1.065,2836,0.702,2909,0.407,2967,0.592,2968,0.576,2980,1.059,3311,1.509,3314,0.601,3315,1.14,3316,1.198,3319,1.46,3320,0.573,3321,0.601,3439,0.662,3546,0.734,3547,0.734,3549,0.702,3550,0.702,3551,0.702,3552,0.702,3553,0.702,3554,0.702,3697,0.775,3699,1.572,3703,1.572,3704,0.835,4077,0.723,4080,2.028,4081,2.028,4092,0.896,4093,0.896,4094,0.896,4095,0.896,4096,0.896,4097,0.896,4098,0.896,4099,0.896,4100,2.392,4101,1.688,4102,0.896,4115,0.942,4116,0.942]],["component/434",[15,1.055]],["title/435-1",[541,35.613]],["name/435-1",[]],["text/435-1",[]],["component/435-1",[]],["title/435",[450,46.839]],["name/435",[450,1.394]],["text/435",[3,1.586,5,2.318,6,1.946,9,0.721,11,1.707,14,2.563,15,3.857,16,1.344,18,2.606,25,1.615,30,2.494,77,1.698,80,2.644,89,2.451,93,2.118,109,1.131,126,1.445,128,4.029,130,1.801,133,3.23,134,3.223,137,2.717,147,1.433,166,1.373,169,1.52,171,2.294,177,1.689,207,1.404,233,1.469,266,1.386,275,1.746,279,2.188,335,2.969,342,1.954,382,1.34,390,2.924,419,0.99,438,1.357,450,6.075,490,1.22,507,2.096,508,1.622,509,2.034,510,3.285,523,1.361,532,1.254,571,2.844,584,1.726,588,2.608,599,1.813,622,2.375,644,2.166,654,2.557,703,4.185,769,1.85,771,1.778,1006,1.565,1045,2.289,1170,1.938,1218,2.091,1232,2.375,1412,4.513,1503,2.375,1587,2.608,1599,2.694,1605,2.537,1675,3.783,1712,2.166,1741,3.907,1967,2.422,2000,2.608,2326,4.811,2544,1.922,3320,6.074,3321,1.878,4103,2.608,4104,2.801,4105,2.801,4106,2.801,4107,2.801,4108,2.801,4109,2.801,4110,2.801,4111,2.801,4112,2.801,4113,2.801,4114,2.801]],["component/435",[15,1.055]],["title/436-1",[12,28.5,15,26.734]],["name/436-1",[]],["text/436-1",[]],["component/436-1",[]],["title/436-2",[12,28.5,450,37.304]],["name/436-2",[]],["text/436-2",[]],["component/436-2",[]],["title/436-3",[390,31.82,438,31.917]],["name/436-3",[]],["text/436-3",[]],["component/436-3",[]],["title/436-4",[374,33.375,707,35.628]],["name/436-4",[]],["text/436-4",[]],["component/436-4",[]],["title/436",[208,30.391,630,31.725]],["name/436",[3216,1.734]],["text/436",[0,0.843,2,0.862,4,4.063,5,2.698,6,1.495,9,0.675,11,1.249,12,1.559,15,3.904,18,2.085,19,0.835,20,0.686,25,0.831,28,0.782,30,1.08,36,0.795,39,1.744,46,0.795,48,1.189,65,0.735,66,0.989,68,2.35,74,1.994,80,0.629,81,3.603,82,0.735,91,2.019,92,1.014,93,1.627,96,0.508,100,0.952,109,1.792,112,1.177,114,0.782,115,1.145,126,0.807,128,0.959,133,1.949,134,0.656,135,3.095,136,0.625,137,1.774,149,0.56,151,0.761,166,1.767,181,3.04,187,2.689,207,0.723,208,1.209,221,1.738,225,1.725,226,0.51,230,0.997,233,2.327,257,0.795,275,0.898,307,0.869,315,0.869,320,0.613,334,0.748,335,1.285,340,1.064,350,2.634,360,0.966,382,1.254,387,2.353,405,1.323,415,1.458,419,0.509,435,0.702,438,1.269,441,0.561,450,5.107,470,1.525,490,3.309,507,1.171,509,1.136,518,1.099,532,1.174,534,1.088,541,0.62,549,0.748,582,0.933,584,1.615,596,0.602,630,0.694,636,1.2,655,4.677,657,1.87,667,0.973,678,0.927,690,0.727,763,0.904,769,0.952,770,5.449,771,1.664,775,0.883,776,2.317,778,2.621,780,0.756,909,1.087,924,0.864,957,0.939,1006,0.805,1130,1.798,1154,3.593,1158,0.921,1161,1.385,1170,0.997,1176,1.533,1215,0.631,1291,1.014,1300,0.973,1504,1.305,1627,1.441,1666,0.525,1675,2.113,1806,1.274,1945,1.246,2025,1.246,2282,2.621,2294,1.18,2469,1.386,2841,1.2,2895,2.374,2896,2.374,3239,2.054,3318,2.267,3320,1.674,3321,0.966,3439,2.662,3440,2.182,3441,1.246,3522,1.342,3720,2.222,3721,2.222,4103,1.342,4117,1.515,4118,1.515,4119,1.515,4120,2.755,4121,2.755,4122,2.755,4123,2.755,4124,2.755,4125,1.515,4126,1.515,4127,1.515,4128,1.515,4129,1.515,4130,1.515,4131,1.515,4132,2.755,4133,1.515,4134,2.755,4135,2.755,4136,2.755,4137,2.755,4138,2.755,4139,1.515,4140,1.515,4141,1.515]],["component/436",[15,1.055]],["title/437-1",[344,50.708]],["name/437-1",[]],["text/437-1",[]],["component/437-1",[]],["title/437-2",[374,33.375,707,35.628]],["name/437-2",[]],["text/437-2",[]],["component/437-2",[]],["title/437",[19,38.169,20,31.351]],["name/437",[205,1.287]],["text/437",[0,6.101,2,3.012,3,2.267,4,3.101,5,2.194,9,1.726,11,2.258,14,2.426,15,4.232,18,3.447,20,3.19,68,3.059,95,2.762,112,4.685,207,3.362,208,4.224,320,2.852,441,2.609,450,3.796,465,4.677,518,4.376,549,3.479,630,3.228,968,2.781,1357,4.132]],["component/437",[15,1.055]],["title/438-1",[9,16.962,11,14.261]],["name/438-1",[]],["text/438-1",[]],["component/438-1",[]],["title/438-2",[10,41.906]],["name/438-2",[]],["text/438-2",[]],["component/438-2",[]],["title/438-3",[968,34.315]],["name/438-3",[]],["text/438-3",[]],["component/438-3",[]],["title/438-4",[374,33.375,707,35.628]],["name/438-4",[]],["text/438-4",[]],["component/438-4",[]],["title/438",[2,27.205]],["name/438",[2,0.81]],["text/438",[2,3.74,3,2.16,5,2.899,6,1.252,9,2.618,10,4.165,11,2.584,12,2.763,14,1.092,15,3.804,18,2.11,24,2.397,26,1.561,39,2.009,46,2.755,48,1.37,89,1.222,91,1.374,96,1.065,112,1.356,133,1.142,134,1.374,138,1.967,149,1.172,176,2.192,181,2.75,221,1.019,226,3.137,235,1.377,251,1.83,320,1.284,355,3.373,372,3.171,387,1.601,388,2.39,401,2.426,405,1.524,415,1.68,432,1.462,444,3.4,518,1.266,630,1.453,722,1.659,802,1.954,927,1.659,968,4.068,983,2.853,1168,6.979,1215,1.322,1311,1.811,2270,2.185,2337,3.959,2545,4.107,3259,2.164,3260,2.164,3262,2.366,3263,2.164,3264,2.144,3394,2.434,3397,2.434,3398,4.026]],["component/438",[15,1.055]],["title/439-1",[52,23.584,139,24.374]],["name/439-1",[]],["text/439-1",[]],["component/439-1",[]],["title/439-2",[1045,21.29,1666,24.015]],["name/439-2",[]],["text/439-2",[]],["component/439-2",[]],["title/439",[]],["name/439",[2853,1.51]],["text/439",[8,3.561,11,1.497,52,2.475,74,3.233,139,2.558,178,2.402,221,3.833,321,3.189,358,5.765,379,3.731,419,2.445,514,4.797,698,4.41,1045,3.425,1666,3.409,2904,3.29,2905,3.29,2906,3.696,4077,5.575]],["component/439",[15,1.055]],["title/440-1",[126,20.299,1032,30.391]],["name/440-1",[]],["text/440-1",[]],["component/440-1",[]],["title/440",[]],["name/440",[3662,2.177]],["text/440",[6,1.738,9,1.078,18,1.384,74,2.245,81,1.988,93,2.932,98,4.389,126,2.988,134,2.956,137,1.443,139,2.403,150,2.166,166,2.054,181,2.782,204,2.256,220,1.508,222,1.647,224,2.582,225,2.005,226,1.484,266,2.074,309,2.19,334,2.174,382,2.005,391,2.094,399,1.654,419,1.481,422,3.312,471,1.982,507,1.872,509,1.816,518,2.725,531,2.809,532,2.909,575,4.205,631,2.582,655,2.23,657,2.174,661,2.677,677,2.144,690,2.115,691,2.628,692,2.73,693,2.677,698,2.522,708,3.064,769,2.768,771,2.66,775,2.568,966,2.129,983,2.393,997,2.582,1032,3.669,1039,1.696,1136,2.898,1291,2.948,2980,2.628,3311,2.644,3315,2.83,3439,3.094,4078,7.206,4079,7.206,4080,3.553,4081,3.553,4082,3.795,4083,3.795,4084,5.884,4085,7.206,4086,5.884]],["component/440",[15,1.055]],["title/441-1",[149,21.259,708,25.823,1215,23.97]],["name/441-1",[]],["text/441-1",[]],["component/441-1",[]],["title/441-2",[52,23.584,139,24.374]],["name/441-2",[]],["text/441-2",[]],["component/441-2",[]],["title/441-3",[1045,21.29,1666,24.015]],["name/441-3",[]],["text/441-3",[]],["component/441-3",[]],["title/441-4",[220,23.711,1039,26.676]],["name/441-4",[]],["text/441-4",[]],["component/441-4",[]],["title/441-5",[2907,44.56]],["name/441-5",[]],["text/441-5",[]],["component/441-5",[]],["title/441-6",[2908,42.932]],["name/441-6",[]],["text/441-6",[]],["component/441-6",[]],["title/441-7",[3,15.832,419,16.553,441,18.221,966,23.798]],["name/441-7",[]],["text/441-7",[]],["component/441-7",[]],["title/441-8",[126,20.299,1032,30.391]],["name/441-8",[]],["text/441-8",[]],["component/441-8",[]],["title/441",[126,25.488]],["name/441",[126,0.759]],["text/441",[6,0.961,8,2.004,9,0.597,11,1.67,15,1.621,18,0.766,52,0.83,57,1.912,74,2.667,81,1.1,93,1.803,96,1.41,98,2.905,105,2.281,126,2.175,134,1.818,136,1.732,137,1.813,139,1.947,149,0.9,150,1.199,166,1.137,178,1.388,181,3.379,204,1.248,220,1.438,221,3.202,222,0.911,224,1.429,225,1.109,226,0.821,266,1.147,309,1.211,321,2.134,334,1.203,358,3.858,379,2.497,382,1.109,391,1.159,399,2.078,419,1.861,422,2.037,471,1.096,507,1.036,509,1.005,514,3.69,518,1.676,531,1.554,532,1.789,575,2.586,596,1.668,631,1.429,655,1.234,657,1.203,661,1.481,677,1.186,690,1.17,691,1.454,692,1.51,693,1.481,698,3.683,708,2.483,769,1.532,771,1.472,775,1.421,966,1.178,983,1.324,993,2.16,997,1.429,1032,2.428,1039,1.617,1045,2.281,1088,3.05,1136,1.604,1215,1.015,1291,1.631,1666,1.919,2904,1.901,2905,1.901,2906,1.239,2909,1.813,2910,1.248,2911,1.978,2912,1.248,2913,1.978,2915,1.978,2916,2.073,2980,1.454,3311,1.463,3315,1.566,3439,1.712,4077,3.221,4078,4.769,4079,4.769,4080,1.966,4081,1.966,4082,2.1,4083,2.1,4084,3.619,4085,4.769,4086,3.619,4087,3.327]],["component/441",[15,1.055]],["title/442-1",[2326,65.734]],["name/442-1",[]],["text/442-1",[]],["component/442-1",[]],["title/442-2",[74,28.593]],["name/442-2",[]],["text/442-2",[]],["component/442-2",[]],["title/442-3",[158,58.751]],["name/442-3",[]],["text/442-3",[]],["component/442-3",[]],["title/442-4",[1006,46.229]],["name/442-4",[]],["text/442-4",[]],["component/442-4",[]],["title/442",[390,31.82,2326,52.352]],["name/442",[390,1.19]],["textcomponent/442",[15,1.055]],["title/443-1",[2907,44.56]],["name/443-1",[]],["text/443-1",[]],["component/443-1",[]],["title/443-2",[2908,42.932]],["name/443-2",[]],["text/443-2",[]],["component/443-2",[]],["title/443",[]],["name/443",[2917,1.545]],["text/443",[8,1.801,11,1.856,15,2.892,57,3.411,74,2.463,105,3.479,136,3.09,137,2.455,178,1.643,181,3.829,221,3.633,321,2.43,358,4.393,379,2.843,399,2.814,419,1.672,514,4.032,596,2.976,698,3.707,1045,2.303,1088,4.652,1666,1.724,2904,2.251,2905,2.251,2909,3.235,2910,2.548,2911,3.529,2912,2.548,2913,3.529,2915,3.529,2916,3.699,4077,3.814,4087,5.936]],["component/443",[15,1.055]],["title/444-1",[222,25.902,226,23.333]],["name/444-1",[]],["text/444-1",[]],["component/444-1",[]],["title/444-2",[19,31.713,105,19.953,909,22.707]],["name/444-2",[]],["text/444-2",[]],["component/444-2",[]],["title/444",[9,12.054,11,10.134,14,16.942,15,18.998]],["name/444",[205,1.287]],["text/444",[3,2.468,9,2.804,11,2.357,14,3.509,15,4.419,26,3.774,30,3.007,33,4.355,80,3.188,96,2.575,105,2.66,222,2.869,226,2.584,235,3.33,261,3.203,435,3.557,909,3.027,941,4.424,1288,5.884,1289,7.019,1290,7.019,1291,5.136,3664,5.39,4087,6.078]],["component/444",[15,1.055]],["title/445-1",[66,56.771]],["name/445-1",[]],["text/445-1",[]],["component/445-1",[]],["title/445-2",[65,42.191]],["name/445-2",[]],["text/445-2",[]],["component/445-2",[]],["title/445-3",[389,41.355]],["name/445-3",[]],["text/445-3",[]],["component/445-3",[]],["title/445-4",[126,14.425,181,14.534,220,16.85,391,23.406]],["name/445-4",[]],["text/445-4",[]],["component/445-4",[]],["title/445-5",[126,20.299,1032,30.391]],["name/445-5",[]],["text/445-5",[]],["component/445-5",[]],["title/445-6",[220,23.711,1039,26.676]],["name/445-6",[]],["text/445-6",[]],["component/445-6",[]],["title/445-7",[30,22.555,286,28.717,563,30.081]],["name/445-7",[]],["text/445-7",[]],["component/445-7",[]],["title/445-8",[333,33.487,663,38.919]],["name/445-8",[]],["text/445-8",[]],["component/445-8",[]],["title/445-9",[333,33.487,669,43.851]],["name/445-9",[]],["text/445-9",[]],["component/445-9",[]],["title/445",[541,35.613]],["name/445",[541,1.06]],["text/445",[2,0.555,3,0.571,4,1.106,5,1.496,6,1.896,9,0.434,11,0.989,12,0.388,14,0.611,15,2.333,18,1.356,20,0.803,22,0.423,27,0.615,28,0.486,30,1.245,33,0.535,48,1.629,50,0.92,59,0.649,64,0.503,65,2.093,66,2.074,68,0.409,73,0.457,74,2.843,80,0.391,81,2.169,82,1.831,89,1.453,91,0.768,95,0.369,107,0.535,109,1.847,123,0.501,126,1.408,130,0.576,133,1.359,134,1.634,135,0.828,137,1.981,139,1.994,147,0.459,149,0.348,150,0.463,151,0.474,158,1.198,164,0.535,166,1.173,169,0.916,175,0.982,176,2.932,177,1.442,178,1.247,181,0.742,182,1.246,207,0.449,214,0.96,216,0.505,217,1.269,218,0.422,220,0.607,221,0.302,222,0.352,223,1.366,224,0.552,225,0.808,226,2.037,228,1.234,233,0.47,242,0.913,246,2.4,250,1.331,266,1.496,279,0.418,283,0.615,286,0.47,309,2.817,314,0.546,315,0.54,321,0.306,333,0.858,334,0.465,335,0.439,382,0.808,388,0.429,389,0.448,391,1.511,397,1.766,399,0.666,403,0.835,413,0.543,419,1.906,422,3.26,432,0.434,434,1.085,438,1.159,439,0.584,441,0.657,447,1.029,448,4.409,450,1.711,471,1.43,486,0.734,490,1.564,492,0.527,502,0.592,507,2.043,509,1.982,510,2.318,516,1.012,518,1.918,520,2.024,523,2.429,526,0.955,527,0.677,532,2.048,545,0.723,546,1.138,556,0.636,563,1.314,566,0.649,571,0.543,576,1.592,582,0.58,584,0.552,590,0.964,596,0.705,599,1.092,613,0.642,617,0.625,628,0.517,629,0.62,634,0.588,640,1.668,654,2.938,655,3.955,657,2.372,661,0.573,663,3.397,669,2.011,677,0.864,690,2.903,694,0.662,696,1.714,698,0.348,709,1.018,718,0.636,719,0.693,724,1.26,746,2.488,753,1.168,763,0.562,769,1.997,770,3.444,771,1.919,773,0.669,780,0.47,785,0.964,799,0.669,909,0.992,922,0.546,924,0.538,949,0.524,958,0.517,966,0.858,968,0.372,1032,1.893,1039,0.683,1045,0.773,1111,1.491,1120,0.51,1136,0.62,1141,0.702,1160,0.642,1161,0.474,1176,0.524,1180,0.642,1184,0.702,1243,0.54,1250,0.625,1291,1.683,1297,0.655,1313,0.702,1322,2.549,1382,0.62,1386,0.566,1453,0.605,1496,0.669,1530,0.662,1543,0.662,1878,2.527,1889,0.552,1976,2.338,2025,2.069,2031,1.323,2032,1.361,2033,1.361,2035,0.746,2040,0.812,2042,2.3,2043,0.812,2086,0.862,2088,0.576,2455,0.677,2544,0.615,2818,1.065,2836,0.702,2909,0.407,2967,0.592,2968,0.576,2980,1.059,3311,1.509,3314,0.601,3315,1.14,3316,1.198,3319,1.46,3320,0.573,3321,0.601,3439,0.662,3546,0.734,3547,0.734,3549,0.702,3550,0.702,3551,0.702,3552,0.702,3553,0.702,3554,0.702,3697,0.775,3699,1.572,3703,1.572,3704,0.835,4077,0.723,4080,2.028,4081,2.028,4092,0.896,4093,0.896,4094,0.896,4095,0.896,4096,0.896,4097,0.896,4098,0.896,4099,0.896,4100,2.392,4101,1.688,4102,0.896,4115,0.942,4116,0.942]],["component/445",[15,1.055]],["title/446-1",[541,35.613]],["name/446-1",[]],["text/446-1",[]],["component/446-1",[]],["title/446",[450,46.839]],["name/446",[450,1.394]],["text/446",[3,1.586,5,2.318,6,1.946,9,0.721,11,1.707,14,2.563,15,3.857,16,1.344,18,2.606,25,1.615,30,2.494,77,1.698,80,2.644,89,2.451,93,2.118,109,1.131,126,1.445,128,4.029,130,1.801,133,3.23,134,3.223,137,2.717,147,1.433,166,1.373,169,1.52,171,2.294,177,1.689,207,1.404,233,1.469,266,1.386,275,1.746,279,2.188,335,2.969,342,1.954,382,1.34,390,2.924,419,0.99,438,1.357,450,6.075,490,1.22,507,2.096,508,1.622,509,2.034,510,3.285,523,1.361,532,1.254,571,2.844,584,1.726,588,2.608,599,1.813,622,2.375,644,2.166,654,2.557,703,4.185,769,1.85,771,1.778,1006,1.565,1045,2.289,1170,1.938,1218,2.091,1232,2.375,1412,4.513,1503,2.375,1587,2.608,1599,2.694,1605,2.537,1675,3.783,1712,2.166,1741,3.907,1967,2.422,2000,2.608,2326,4.811,2544,1.922,3320,6.074,3321,1.878,4103,2.608,4104,2.801,4105,2.801,4106,2.801,4107,2.801,4108,2.801,4109,2.801,4110,2.801,4111,2.801,4112,2.801,4113,2.801,4114,2.801]],["component/446",[15,1.055]],["title/447-1",[12,28.5,15,26.734]],["name/447-1",[]],["text/447-1",[]],["component/447-1",[]],["title/447-2",[12,28.5,450,37.304]],["name/447-2",[]],["text/447-2",[]],["component/447-2",[]],["title/447-3",[390,31.82,438,31.917]],["name/447-3",[]],["text/447-3",[]],["component/447-3",[]],["title/447-4",[374,33.375,707,35.628]],["name/447-4",[]],["text/447-4",[]],["component/447-4",[]],["title/447",[208,30.391,630,31.725]],["name/447",[3216,1.734]],["text/447",[0,0.843,2,0.862,4,4.063,5,2.698,6,1.495,9,0.675,11,1.249,12,1.559,15,3.904,18,2.085,19,0.835,20,0.686,25,0.831,28,0.782,30,1.08,36,0.795,39,1.744,46,0.795,48,1.189,65,0.735,66,0.989,68,2.35,74,1.994,80,0.629,81,3.603,82,0.735,91,2.019,92,1.014,93,1.627,96,0.508,100,0.952,109,1.792,112,1.177,114,0.782,115,1.145,126,0.807,128,0.959,133,1.949,134,0.656,135,3.095,136,0.625,137,1.774,149,0.56,151,0.761,166,1.767,181,3.04,187,2.689,207,0.723,208,1.209,221,1.738,225,1.725,226,0.51,230,0.997,233,2.327,257,0.795,275,0.898,307,0.869,315,0.869,320,0.613,334,0.748,335,1.285,340,1.064,350,2.634,360,0.966,382,1.254,387,2.353,405,1.323,415,1.458,419,0.509,435,0.702,438,1.269,441,0.561,450,5.107,470,1.525,490,3.309,507,1.171,509,1.136,518,1.099,532,1.174,534,1.088,541,0.62,549,0.748,582,0.933,584,1.615,596,0.602,630,0.694,636,1.2,655,4.677,657,1.87,667,0.973,678,0.927,690,0.727,763,0.904,769,0.952,770,5.449,771,1.664,775,0.883,776,2.317,778,2.621,780,0.756,909,1.087,924,0.864,957,0.939,1006,0.805,1130,1.798,1154,3.593,1158,0.921,1161,1.385,1170,0.997,1176,1.533,1215,0.631,1291,1.014,1300,0.973,1504,1.305,1627,1.441,1666,0.525,1675,2.113,1806,1.274,1945,1.246,2025,1.246,2282,2.621,2294,1.18,2469,1.386,2841,1.2,2895,2.374,2896,2.374,3239,2.054,3318,2.267,3320,1.674,3321,0.966,3439,2.662,3440,2.182,3441,1.246,3522,1.342,3720,2.222,3721,2.222,4103,1.342,4117,1.515,4118,1.515,4119,1.515,4120,2.755,4121,2.755,4122,2.755,4123,2.755,4124,2.755,4125,1.515,4126,1.515,4127,1.515,4128,1.515,4129,1.515,4130,1.515,4131,1.515,4132,2.755,4133,1.515,4134,2.755,4135,2.755,4136,2.755,4137,2.755,4138,2.755,4139,1.515,4140,1.515,4141,1.515]],["component/447",[15,1.055]],["title/448-1",[344,50.708]],["name/448-1",[]],["text/448-1",[]],["component/448-1",[]],["title/448-2",[374,33.375,707,35.628]],["name/448-2",[]],["text/448-2",[]],["component/448-2",[]],["title/448",[19,38.169,20,31.351]],["name/448",[205,1.287]],["text/448",[0,6.101,2,3.012,3,2.267,4,3.101,5,2.194,9,1.726,11,2.258,14,2.426,15,4.232,18,3.447,20,3.19,68,3.059,95,2.762,112,4.685,207,3.362,208,4.224,320,2.852,441,2.609,450,3.796,465,4.677,518,4.376,549,3.479,630,3.228,968,2.781,1357,4.132]],["component/448",[15,1.055]],["title/449-1",[9,16.962,11,14.261]],["name/449-1",[]],["text/449-1",[]],["component/449-1",[]],["title/449-2",[10,41.906]],["name/449-2",[]],["text/449-2",[]],["component/449-2",[]],["title/449-3",[968,34.315]],["name/449-3",[]],["text/449-3",[]],["component/449-3",[]],["title/449-4",[374,33.375,707,35.628]],["name/449-4",[]],["text/449-4",[]],["component/449-4",[]],["title/449",[2,27.205]],["name/449",[2,0.81]],["text/449",[2,3.74,3,2.16,5,2.899,6,1.252,9,2.618,10,4.165,11,2.584,12,2.763,14,1.092,15,3.804,18,2.11,24,2.397,26,1.561,39,2.009,46,2.755,48,1.37,89,1.222,91,1.374,96,1.065,112,1.356,133,1.142,134,1.374,138,1.967,149,1.172,176,2.192,181,2.75,221,1.019,226,3.137,235,1.377,251,1.83,320,1.284,355,3.373,372,3.171,387,1.601,388,2.39,401,2.426,405,1.524,415,1.68,432,1.462,444,3.4,518,1.266,630,1.453,722,1.659,802,1.954,927,1.659,968,4.068,983,2.853,1168,6.979,1215,1.322,1311,1.811,2270,2.185,2337,3.959,2545,4.107,3259,2.164,3260,2.164,3262,2.366,3263,2.164,3264,2.144,3394,2.434,3397,2.434,3398,4.026]],["component/449",[15,1.055]]],"invertedIndex":[["",{"_index":181,"title":{"38":{},"39-10":{},"44-5":{},"44-6":{},"44-7":{},"48-2":{},"102-5":{},"108-5":{},"113-2":{},"121-2":{},"131-13":{},"138-13":{},"145-14":{},"151-15":{},"160-15":{},"196-2":{},"203-2":{},"213-2":{},"223-4":{},"229-4":{},"238-4":{},"243-4":{},"244-10":{},"250-3":{},"252-4":{},"253-10":{},"258-5":{},"263-4":{},"264-10":{},"269-5":{},"280-2":{},"285-8":{},"293-8":{},"303-3":{},"314-3":{},"321-3":{},"374-14":{},"379-9":{},"387-9":{},"396-17":{},"402-17":{},"407-20":{},"415-20":{},"426-4":{},"434-4":{},"445-4":{}},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"9":{},"10":{},"11":{},"14":{},"15":{},"16":{},"19":{},"22":{},"23":{},"26":{},"28":{},"30":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"69":{},"71":{},"74":{},"77":{},"79":{},"83":{},"85":{},"87":{},"88":{},"92":{},"94":{},"96":{},"98":{},"99":{},"101":{},"102":{},"104":{},"105":{},"107":{},"108":{},"110":{},"111":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"121":{},"122":{},"123":{},"124":{},"126":{},"127":{},"128":{},"130":{},"131":{},"133":{},"134":{},"135":{},"137":{},"138":{},"140":{},"141":{},"142":{},"144":{},"145":{},"147":{},"148":{},"149":{},"151":{},"152":{},"154":{},"156":{},"157":{},"158":{},"160":{},"161":{},"163":{},"165":{},"167":{},"168":{},"169":{},"170":{},"172":{},"174":{},"175":{},"176":{},"177":{},"179":{},"181":{},"183":{},"184":{},"185":{},"186":{},"188":{},"190":{},"191":{},"192":{},"193":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"203":{},"204":{},"206":{},"208":{},"209":{},"210":{},"211":{},"213":{},"214":{},"216":{},"218":{},"219":{},"220":{},"222":{},"223":{},"225":{},"226":{},"227":{},"229":{},"230":{},"232":{},"234":{},"235":{},"236":{},"238":{},"239":{},"241":{},"244":{},"246":{},"247":{},"249":{},"250":{},"253":{},"255":{},"256":{},"258":{},"259":{},"261":{},"264":{},"266":{},"267":{},"269":{},"270":{},"272":{},"275":{},"277":{},"279":{},"280":{},"282":{},"285":{},"286":{},"288":{},"290":{},"293":{},"294":{},"296":{},"298":{},"299":{},"300":{},"303":{},"304":{},"306":{},"308":{},"309":{},"310":{},"313":{},"314":{},"316":{},"317":{},"318":{},"321":{},"322":{},"324":{},"326":{},"327":{},"330":{},"332":{},"334":{},"335":{},"338":{},"340":{},"342":{},"343":{},"346":{},"348":{},"350":{},"351":{},"353":{},"355":{},"356":{},"358":{},"360":{},"361":{},"363":{},"365":{},"366":{},"368":{},"369":{},"371":{},"372":{},"373":{},"374":{},"376":{},"377":{},"378":{},"379":{},"380":{},"382":{},"384":{},"385":{},"386":{},"387":{},"388":{},"390":{},"392":{},"393":{},"395":{},"396":{},"398":{},"399":{},"401":{},"402":{},"404":{},"405":{},"407":{},"408":{},"410":{},"412":{},"413":{},"415":{},"416":{},"418":{},"420":{},"421":{},"423":{},"425":{},"426":{},"429":{},"430":{},"432":{},"434":{},"436":{},"438":{},"440":{},"441":{},"443":{},"445":{},"447":{},"449":{}},"component":{}}],["0",{"_index":2470,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"121":{},"177":{},"186":{},"204":{},"214":{},"286":{},"294":{}},"component":{}}],["0.0",{"_index":2707,"title":{},"name":{},"text":{"62":{}},"component":{}}],["0.01",{"_index":2753,"title":{},"name":{},"text":{"62":{}},"component":{}}],["0.017",{"_index":3492,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["0.1.0",{"_index":2071,"title":{},"name":{},"text":{"41":{},"55":{}},"component":{}}],["0.1.1",{"_index":2073,"title":{},"name":{},"text":{"41":{}},"component":{}}],["0.10.0",{"_index":449,"title":{},"name":{},"text":{"5":{},"52":{},"54":{},"55":{},"56":{},"58":{},"306":{},"324":{}},"component":{}}],["0.11.0",{"_index":3398,"title":{},"name":{},"text":{"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"261":{},"272":{},"288":{},"296":{},"438":{},"449":{}},"component":{}}],["0.2.0",{"_index":454,"title":{},"name":{},"text":{"5":{},"41":{},"52":{},"54":{},"55":{},"56":{},"58":{}},"component":{}}],["0.22.1",{"_index":1258,"title":{},"name":{},"text":{"20":{},"129":{},"131":{},"136":{},"138":{},"143":{},"150":{},"159":{}},"component":{}}],["0.23.0",{"_index":1259,"title":{},"name":{},"text":{"20":{},"143":{},"145":{},"150":{},"151":{},"152":{},"159":{},"160":{},"161":{}},"component":{}}],["0.27.1",{"_index":1276,"title":{},"name":{},"text":{"20":{},"302":{},"312":{},"320":{}},"component":{}}],["0.28.0",{"_index":1277,"title":{},"name":{},"text":{"20":{},"302":{},"312":{},"320":{}},"component":{}}],["0.3",{"_index":4038,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["0.3.0",{"_index":444,"title":{},"name":{},"text":{"5":{},"52":{},"54":{},"55":{},"56":{},"58":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["0.3.1",{"_index":2383,"title":{},"name":{},"text":{"55":{}},"component":{}}],["0.37.2",{"_index":1278,"title":{},"name":{},"text":{"20":{},"302":{},"312":{},"320":{}},"component":{}}],["0.4.0",{"_index":436,"title":{},"name":{},"text":{"5":{},"52":{},"54":{},"55":{},"56":{},"58":{},"179":{},"188":{}},"component":{}}],["0.41.0",{"_index":1279,"title":{},"name":{},"text":{"20":{},"57":{},"302":{},"303":{},"304":{},"312":{},"314":{},"320":{},"321":{},"322":{}},"component":{}}],["0.5.0",{"_index":446,"title":{},"name":{},"text":{"5":{},"52":{},"54":{},"55":{},"56":{},"58":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"358":{},"368":{},"410":{},"418":{}},"component":{}}],["0.6.0",{"_index":355,"title":{},"name":{},"text":{"4":{},"5":{},"52":{},"54":{},"55":{},"56":{},"58":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["0.66",{"_index":2751,"title":{},"name":{},"text":{"62":{}},"component":{}}],["0.7",{"_index":4034,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["0.7.0",{"_index":2382,"title":{},"name":{},"text":{"55":{},"154":{},"163":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{}},"component":{}}],["0.8.0",{"_index":2381,"title":{},"name":{},"text":{"55":{}},"component":{}}],["0.9.0",{"_index":452,"title":{},"name":{},"text":{"5":{},"52":{},"54":{},"55":{},"56":{},"58":{}},"component":{}}],["0.simpl",{"_index":776,"title":{},"name":{},"text":{"11":{},"177":{},"186":{},"204":{},"214":{},"436":{},"447":{}},"component":{}}],["0.{clusternam",{"_index":3600,"title":{},"name":{},"text":{"219":{},"226":{},"235":{}},"component":{}}],["0005](0005",{"_index":2262,"title":{},"name":{},"text":{"48":{}},"component":{}}],["001",{"_index":3885,"title":{},"name":{},"text":{"332":{},"340":{},"348":{}},"component":{}}],["01",{"_index":1345,"title":{},"name":{},"text":{"23":{},"60":{},"62":{}},"component":{}}],["01t00:00:00",{"_index":2771,"title":{},"name":{},"text":{"62":{}},"component":{}}],["02",{"_index":1788,"title":{},"name":{},"text":{"36":{}},"component":{}}],["02.10.2020",{"_index":1459,"title":{},"name":{},"text":{"28":{}},"component":{}}],["0200",{"_index":2410,"title":{},"name":{},"text":{"55":{},"56":{}},"component":{}}],["02t15:14:37.960z\",\"latitud",{"_index":2474,"title":{},"name":{},"text":{"60":{}},"component":{}}],["03",{"_index":1885,"title":{},"name":{},"text":{"37":{},"62":{}},"component":{}}],["03t02:51:55.410z\",\"latitude\":17.533,\"longitude\":121.447,\"depth\":30.0,\"mag\":6.5,\"magtype\":\"mw\",\"nst\":null,\"gap\":null,\"dmin\":null,\"rms\":null,\"net\":\"iscgem\",\"id\":\"iscgem895106\",\"updated\":\"2022",{"_index":2482,"title":{},"name":{},"text":{"60":{}},"component":{}}],["03t11:06:28.640z\",\"latitud",{"_index":2487,"title":{},"name":{},"text":{"60":{}},"component":{}}],["04",{"_index":1789,"title":{},"name":{},"text":{"36":{},"38":{},"40":{},"60":{},"68":{},"76":{}},"component":{}}],["04.05.2022",{"_index":2056,"title":{},"name":{},"text":{"41":{}},"component":{}}],["05",{"_index":1344,"title":{},"name":{},"text":{"23":{},"40":{},"62":{}},"component":{}}],["057a",{"_index":4128,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["06",{"_index":1347,"title":{},"name":{},"text":{"23":{},"44":{},"56":{}},"component":{}}],["07",{"_index":2143,"title":{},"name":{},"text":{"44":{},"55":{},"56":{}},"component":{}}],["07.01.2021",{"_index":1487,"title":{},"name":{},"text":{"29":{}},"component":{}}],["07.csv",{"_index":3855,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["07/2022",{"_index":2318,"title":{},"name":{},"text":{"51":{}},"component":{}}],["08",{"_index":2184,"title":{},"name":{},"text":{"45":{},"62":{},"232":{},"241":{}},"component":{}}],["09:44:00.86514992",{"_index":2409,"title":{},"name":{},"text":{"55":{}},"component":{}}],["09:44:03.215214235",{"_index":2412,"title":{},"name":{},"text":{"55":{}},"component":{}}],["09:44:13.526843785",{"_index":2413,"title":{},"name":{},"text":{"55":{}},"component":{}}],["0:/tmp",{"_index":3569,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["0:9870/webhdfs/v1/?op=liststatu",{"_index":3564,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["0:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=create&noredirect=tru",{"_index":3571,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["0:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=delet",{"_index":3593,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["0b",{"_index":4041,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["1",{"_index":510,"title":{"38-7":{},"39-6":{},"39-10":{},"41-8":{},"41-17":{},"41-19":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"32":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"48":{},"60":{},"61":{},"62":{},"63":{},"71":{},"85":{},"86":{},"87":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"263":{},"264":{},"266":{},"269":{},"274":{},"275":{},"280":{},"285":{},"286":{},"293":{},"294":{},"299":{},"309":{},"317":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["1.0",{"_index":2210,"title":{},"name":{},"text":{"45":{},"62":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["1.1.0.jar",{"_index":3896,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["1.11.375.jar",{"_index":3862,"title":{},"name":{},"text":{"330":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["1.15.0",{"_index":1274,"title":{},"name":{},"text":{"20":{},"278":{},"284":{},"292":{}},"component":{}}],["1.16.3",{"_index":1275,"title":{},"name":{},"text":{"20":{},"274":{},"275":{},"278":{},"280":{},"282":{},"284":{},"285":{},"286":{},"290":{},"292":{},"293":{},"294":{}},"component":{}}],["1.19",{"_index":1818,"title":{},"name":{},"text":{"36":{}},"component":{}}],["1.20",{"_index":1816,"title":{},"name":{},"text":{"36":{}},"component":{}}],["1.21",{"_index":1815,"title":{},"name":{},"text":{"36":{}},"component":{}}],["1.22",{"_index":1839,"title":{},"name":{},"text":{"36":{},"301":{},"311":{},"319":{}},"component":{}}],["1.3.0",{"_index":2060,"title":{},"name":{},"text":{"41":{}},"component":{}}],["1.3.2",{"_index":1285,"title":{},"name":{},"text":{"20":{},"372":{},"378":{},"386":{}},"component":{}}],["1.3.2021",{"_index":1622,"title":{},"name":{},"text":{"32":{},"33":{}},"component":{}}],["1.4.1",{"_index":1286,"title":{},"name":{},"text":{"20":{},"372":{},"378":{},"386":{}},"component":{}}],["1.5.1",{"_index":1287,"title":{},"name":{},"text":{"20":{},"57":{},"372":{},"374":{},"378":{},"379":{},"380":{},"386":{},"387":{},"388":{}},"component":{}}],["1.56",{"_index":2732,"title":{},"name":{},"text":{"62":{},"249":{},"279":{},"313":{},"395":{},"401":{},"425":{}},"component":{}}],["1.57",{"_index":3957,"title":{},"name":{},"text":{"373":{}},"component":{}}],["1.58",{"_index":2921,"title":{},"name":{},"text":{"101":{},"107":{},"169":{},"195":{}},"component":{}}],["1.60",{"_index":3606,"title":{},"name":{},"text":{"222":{}},"component":{}}],["1.8",{"_index":2724,"title":{},"name":{},"text":{"62":{}},"component":{}}],["1.simpl",{"_index":778,"title":{},"name":{},"text":{"11":{},"436":{},"447":{}},"component":{}}],["1.{clusternam",{"_index":3602,"title":{},"name":{},"text":{"219":{},"226":{},"235":{}},"component":{}}],["1/1",{"_index":3231,"title":{},"name":{},"text":{"114":{},"122":{},"152":{},"161":{},"230":{},"239":{},"408":{},"416":{}},"component":{}}],["10",{"_index":1638,"title":{},"name":{},"text":{"32":{},"36":{},"40":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"121":{},"152":{},"161":{},"223":{},"229":{},"232":{},"238":{},"241":{},"250":{},"258":{},"269":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["10.0",{"_index":2743,"title":{},"name":{},"text":{"62":{}},"component":{}}],["10.0.171.35",{"_index":2004,"title":{},"name":{},"text":{"39":{}},"component":{}}],["10.16.2",{"_index":3646,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["10.43.75.25",{"_index":159,"title":{},"name":{},"text":{"1":{}},"component":{}}],["100",{"_index":2687,"title":{},"name":{},"text":{"62":{},"131":{},"138":{},"145":{},"151":{},"160":{},"250":{},"258":{},"269":{}},"component":{}}],["100.0",{"_index":2752,"title":{},"name":{},"text":{"62":{}},"component":{}}],["100.00",{"_index":4033,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["1000",{"_index":2446,"title":{},"name":{},"text":{"60":{}},"component":{}}],["10000",{"_index":3966,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["1001",{"_index":2467,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["104",{"_index":3460,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["1052834",{"_index":2701,"title":{},"name":{},"text":{"62":{}},"component":{}}],["1089568",{"_index":2697,"title":{},"name":{},"text":{"62":{}},"component":{}}],["10:00:25.499615024",{"_index":2414,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:00:27.868162264",{"_index":2415,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:00:38.219966654",{"_index":2416,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:00:46.581528077",{"_index":2417,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:00:56.949394849",{"_index":2418,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:07.314849464",{"_index":2419,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:09.702246063",{"_index":2420,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:12.059869868",{"_index":2421,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:14.413966761",{"_index":2422,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:16.759818535",{"_index":2423,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:17.149187107",{"_index":2424,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:19.529351352",{"_index":2425,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:29.867283641",{"_index":2426,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10:01:40.24662955",{"_index":2427,"title":{},"name":{},"text":{"56":{}},"component":{}}],["10gi",{"_index":567,"title":{},"name":{},"text":{"8":{}},"component":{}}],["11",{"_index":1733,"title":{},"name":{},"text":{"35":{},"61":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["11.0.0",{"_index":2930,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{}},"component":{}}],["11.242,\"longitude\":165.006,\"depth\":15.0,\"mag\":6.12,\"magtype\":\"mw\",\"nst\":null,\"gap\":null,\"dmin\":null,\"rms\":null,\"net\":\"iscgem\",\"id\":\"iscgem895104\",\"updated\":\"2022",{"_index":2475,"title":{},"name":{},"text":{"60":{}},"component":{}}],["11.3kb/",{"_index":4036,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["11.5",{"_index":2733,"title":{},"name":{},"text":{"62":{}},"component":{}}],["112",{"_index":2682,"title":{},"name":{},"text":{"62":{}},"component":{}}],["112.0",{"_index":2688,"title":{},"name":{},"text":{"62":{}},"component":{}}],["112.13592233009709",{"_index":2750,"title":{},"name":{},"text":{"62":{}},"component":{}}],["11978",{"_index":3473,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["11:51:58.000",{"_index":2729,"title":{},"name":{},"text":{"62":{}},"component":{}}],["11m",{"_index":3233,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["12",{"_index":384,"title":{},"name":{},"text":{"5":{},"36":{},"62":{},"102":{},"108":{},"113":{},"121":{},"232":{},"241":{}},"component":{}}],["1200m",{"_index":3088,"title":{},"name":{},"text":{"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["123",{"_index":1973,"title":{},"name":{},"text":{"39":{}},"component":{}}],["1251",{"_index":2515,"title":{},"name":{},"text":{"60":{}},"component":{}}],["128gi",{"_index":3542,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["12:09:29.000",{"_index":2730,"title":{},"name":{},"text":{"62":{}},"component":{}}],["12gi",{"_index":3749,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["134217728",{"_index":3580,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["137.36263736263737",{"_index":2747,"title":{},"name":{},"text":{"62":{}},"component":{}}],["1389",{"_index":2781,"title":{},"name":{},"text":{"63":{},"71":{},"285":{},"293":{}},"component":{}}],["14",{"_index":1832,"title":{},"name":{},"text":{"36":{},"223":{},"229":{},"238":{}},"component":{}}],["14.76",{"_index":2728,"title":{},"name":{},"text":{"62":{}},"component":{}}],["1454268",{"_index":2708,"title":{},"name":{},"text":{"62":{}},"component":{}}],["15",{"_index":1872,"title":{},"name":{},"text":{"36":{},"55":{},"56":{},"60":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["15.01.2021",{"_index":1597,"title":{},"name":{},"text":{"31":{}},"component":{}}],["150",{"_index":3490,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["1527",{"_index":3345,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["156",{"_index":2693,"title":{},"name":{},"text":{"62":{}},"component":{}}],["15:54:04",{"_index":2502,"title":{},"name":{},"text":{"60":{}},"component":{}}],["16.8.7",{"_index":3257,"title":{},"name":{},"text":{"116":{},"124":{}},"component":{}}],["16396",{"_index":3583,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["1658151900000",{"_index":2601,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1658152800000",{"_index":2604,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1658153700000",{"_index":2606,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1660571644",{"_index":2503,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1660571644060",{"_index":2499,"title":{},"name":{},"text":{"60":{}},"component":{}}],["1660821734999",{"_index":3578,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["1660821735602",{"_index":3588,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["1660829626969",{"_index":2612,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1660831499",{"_index":2619,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1660831499070",{"_index":2616,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1661156787704",{"_index":3477,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["16:04:59",{"_index":2618,"title":{},"name":{},"text":{"61":{}},"component":{}}],["16m",{"_index":3234,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["17",{"_index":2731,"title":{},"name":{},"text":{"62":{}},"component":{}}],["17.02",{"_index":2735,"title":{},"name":{},"text":{"62":{}},"component":{}}],["17.03.2021",{"_index":1682,"title":{},"name":{},"text":{"34":{}},"component":{}}],["17.05.2022",{"_index":2119,"title":{},"name":{},"text":{"42":{},"43":{}},"component":{}}],["1715439",{"_index":2699,"title":{},"name":{},"text":{"62":{}},"component":{}}],["1716",{"_index":3480,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["172.18.0.2",{"_index":142,"title":{},"name":{},"text":{"1":{}},"component":{}}],["172.18.0.2:32309",{"_index":2459,"title":{},"name":{},"text":{"60":{}},"component":{}}],["172.18.0.3",{"_index":3780,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["172.18.0.3:30173",{"_index":3771,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["172.18.0.3:31615",{"_index":2566,"title":{},"name":{},"text":{"61":{}},"component":{}}],["172.18.0.3:31631",{"_index":2571,"title":{},"name":{},"text":{"61":{}},"component":{}}],["172.18.0.3:31818",{"_index":2439,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["172.18.0.3:32536",{"_index":2564,"title":{},"name":{},"text":{"61":{}},"component":{}}],["172.18.0.3:32536/bootstrap",{"_index":2570,"title":{},"name":{},"text":{"61":{}},"component":{}}],["172.18.0.4:30745",{"_index":2370,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["172.18.0.4:30755",{"_index":2468,"title":{},"name":{},"text":{"60":{}},"component":{}}],["172.18.0.4:30968",{"_index":2457,"title":{},"name":{},"text":{"60":{}},"component":{}}],["172.18.0.4:30968/bootstrap",{"_index":2466,"title":{},"name":{},"text":{"60":{}},"component":{}}],["172.18.0.4:32658",{"_index":2369,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["172.18.0.5:30298",{"_index":2433,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["172.18.0.5:31199",{"_index":2374,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["172.18.0.5:31633",{"_index":2435,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["18",{"_index":2617,"title":{},"name":{},"text":{"61":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["18.2",{"_index":2745,"title":{},"name":{},"text":{"62":{}},"component":{}}],["19",{"_index":2663,"title":{},"name":{},"text":{"62":{}},"component":{}}],["19.08.2020",{"_index":1381,"title":{},"name":{},"text":{"25":{},"26":{},"27":{}},"component":{}}],["199mb",{"_index":2543,"title":{},"name":{},"text":{"60":{}},"component":{}}],["19:47:43.000",{"_index":2722,"title":{},"name":{},"text":{"62":{}},"component":{}}],["19:57:54.000",{"_index":2723,"title":{},"name":{},"text":{"62":{}},"component":{}}],["1:2181,pod",{"_index":4111,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["1b8e",{"_index":2575,"title":{},"name":{},"text":{"61":{}},"component":{}}],["1g",{"_index":1634,"title":{},"name":{},"text":{"32":{}},"component":{}}],["1gb",{"_index":2657,"title":{},"name":{},"text":{"62":{},"193":{},"201":{},"211":{}},"component":{}}],["1gi",{"_index":694,"title":{},"name":{},"text":{"9":{},"102":{},"108":{},"113":{},"121":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"330":{},"338":{},"346":{},"353":{},"363":{},"426":{},"434":{},"445":{}},"component":{}}],["2",{"_index":134,"title":{"38-8":{},"39-7":{},"41-9":{},"41-18":{},"41-20":{}},"name":{},"text":{"1":{},"7":{},"8":{},"9":{},"10":{},"32":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"61":{},"62":{},"63":{},"71":{},"85":{},"87":{},"94":{},"96":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"154":{},"157":{},"160":{},"161":{},"163":{},"166":{},"173":{},"177":{},"179":{},"182":{},"186":{},"188":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"206":{},"209":{},"211":{},"213":{},"214":{},"216":{},"219":{},"226":{},"232":{},"235":{},"241":{},"246":{},"250":{},"255":{},"258":{},"261":{},"266":{},"269":{},"272":{},"274":{},"275":{},"285":{},"286":{},"293":{},"294":{},"299":{},"306":{},"309":{},"317":{},"324":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"358":{},"363":{},"365":{},"368":{},"382":{},"390":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"438":{},"440":{},"441":{},"445":{},"446":{},"447":{},"449":{}},"component":{}}],["2.0",{"_index":2704,"title":{},"name":{},"text":{"62":{},"113":{},"121":{}},"component":{}}],["2.1",{"_index":2516,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2.2.3",{"_index":1255,"title":{},"name":{},"text":{"20":{},"100":{},"106":{},"112":{},"113":{},"120":{},"121":{}},"component":{}}],["2.2.4",{"_index":1256,"title":{},"name":{},"text":{"20":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"120":{},"121":{}},"component":{}}],["2.2.5",{"_index":1257,"title":{},"name":{},"text":{"20":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"114":{},"120":{},"121":{},"122":{}},"component":{}}],["2.22",{"_index":2734,"title":{},"name":{},"text":{"62":{}},"component":{}}],["2.3.9",{"_index":1268,"title":{},"name":{},"text":{"20":{},"57":{},"221":{},"223":{},"228":{},"237":{}},"component":{}}],["2.4.11",{"_index":1263,"title":{},"name":{},"text":{"20":{},"168":{},"175":{},"184":{}},"component":{}}],["2.4.12",{"_index":1264,"title":{},"name":{},"text":{"20":{},"168":{},"170":{},"175":{},"176":{},"177":{},"184":{},"185":{},"186":{}},"component":{}}],["2.4.6",{"_index":1260,"title":{},"name":{},"text":{"20":{},"168":{},"175":{},"184":{}},"component":{}}],["2.4.8",{"_index":1261,"title":{},"name":{},"text":{"20":{},"168":{},"175":{},"184":{}},"component":{}}],["2.4.9",{"_index":1262,"title":{},"name":{},"text":{"20":{},"168":{},"175":{},"184":{}},"component":{}}],["2.46",{"_index":2727,"title":{},"name":{},"text":{"62":{}},"component":{}}],["2.5",{"_index":2332,"title":{},"name":{},"text":{"52":{},"54":{},"62":{}},"component":{}}],["2.6",{"_index":2504,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2.67",{"_index":4042,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["2.7.1",{"_index":1270,"title":{},"name":{},"text":{"20":{},"248":{},"257":{},"268":{}},"component":{}}],["2.8.0",{"_index":2079,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2.8.0_stackable0.1.0",{"_index":2090,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2.8.1",{"_index":1271,"title":{},"name":{},"text":{"20":{},"248":{},"257":{},"268":{}},"component":{}}],["2.9.0",{"_index":2080,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2.9.0_stackable0.1.0",{"_index":2092,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2.9.0_stackable0.1.1",{"_index":2094,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2/2",{"_index":3236,"title":{},"name":{},"text":{"114":{},"122":{},"152":{},"161":{},"286":{},"294":{}},"component":{}}],["20",{"_index":1637,"title":{},"name":{},"text":{"32":{},"40":{},"223":{},"229":{},"238":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["200m",{"_index":4062,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["2020",{"_index":1343,"title":{},"name":{},"text":{"23":{},"62":{}},"component":{}}],["2021",{"_index":1732,"title":{},"name":{},"text":{"35":{},"36":{},"62":{}},"component":{}}],["2022",{"_index":211,"title":{},"name":{},"text":{"2":{},"36":{},"37":{},"38":{},"40":{},"44":{},"45":{},"55":{},"56":{},"60":{},"61":{},"68":{},"76":{},"232":{},"241":{}},"component":{}}],["2022/08/12",{"_index":2633,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2022/08/14",{"_index":2634,"title":{},"name":{},"text":{"61":{}},"component":{}}],["2022/08/15",{"_index":2329,"title":{},"name":{},"text":{"52":{}},"component":{}}],["20220210_161615_00000_a8nka",{"_index":4031,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["208",{"_index":1930,"title":{},"name":{},"text":{"38":{}},"component":{}}],["20core",{"_index":1636,"title":{},"name":{},"text":{"32":{}},"component":{}}],["21.04",{"_index":144,"title":{},"name":{},"text":{"1":{}},"component":{}}],["210",{"_index":1939,"title":{},"name":{},"text":{"38":{}},"component":{}}],["213",{"_index":2625,"title":{},"name":{},"text":{"61":{}},"component":{}}],["21t13:24:15.225774724+00:00",{"_index":2814,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["22.05",{"_index":2162,"title":{},"name":{},"text":{"44":{}},"component":{}}],["22.06",{"_index":376,"title":{"5-1":{}},"name":{},"text":{"52":{},"54":{},"56":{},"58":{}},"component":{}}],["220",{"_index":2605,"title":{},"name":{},"text":{"61":{}},"component":{}}],["221",{"_index":2602,"title":{},"name":{},"text":{"61":{}},"component":{}}],["229",{"_index":2695,"title":{},"name":{},"text":{"62":{}},"component":{}}],["23",{"_index":1734,"title":{},"name":{},"text":{"35":{},"45":{}},"component":{}}],["238.0952380952381",{"_index":2744,"title":{},"name":{},"text":{"62":{}},"component":{}}],["25",{"_index":146,"title":{},"name":{},"text":{"1":{}},"component":{}}],["25.0",{"_index":2746,"title":{},"name":{},"text":{"62":{}},"component":{}}],["2504112",{"_index":2703,"title":{},"name":{},"text":{"62":{}},"component":{}}],["250m",{"_index":3554,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["256",{"_index":3619,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["2670281",{"_index":2498,"title":{},"name":{},"text":{"60":{}},"component":{}}],["2698591",{"_index":2710,"title":{},"name":{},"text":{"62":{}},"component":{}}],["26t18:23:01.545z\",\"place\":\"103",{"_index":2476,"title":{},"name":{},"text":{"60":{}},"component":{}}],["26t18:23:07.394z\",\"place\":\"6",{"_index":2483,"title":{},"name":{},"text":{"60":{}},"component":{}}],["26t18:23:08.483z\",\"place\":\"off",{"_index":2490,"title":{},"name":{},"text":{"60":{}},"component":{}}],["27.08.2020",{"_index":1522,"title":{},"name":{},"text":{"30":{}},"component":{}}],["276ea6305e09",{"_index":4131,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["28",{"_index":1929,"title":{},"name":{},"text":{"38":{}},"component":{}}],["29.04.2022",{"_index":1961,"title":{},"name":{},"text":{"39":{}},"component":{}}],["2:2181,pod",{"_index":4112,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["2>&1",{"_index":3238,"title":{},"name":{},"text":{"114":{},"122":{},"152":{},"161":{},"259":{},"270":{},"304":{},"322":{},"380":{},"388":{},"408":{},"416":{}},"component":{}}],["2a9d12b",{"_index":4134,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["2cb3c3dd80d3",{"_index":4138,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["2g",{"_index":3418,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["2gb",{"_index":4050,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["2gi",{"_index":696,"title":{},"name":{},"text":{"9":{},"196":{},"203":{},"213":{},"232":{},"241":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["2y$10$89xreovvdlacvzrgpjoyaoonnayogdayis2nw9bs5djt98q17dy5i",{"_index":3997,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["2y$10$hcca4k9v2drrd/g7e5vez.bk.1xg00ytehozjpx7ok3kqmst2xt8w",{"_index":3999,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["2y$10$xvrxtyznyuqu66smruijpo8whfm/uk5qphtr.nzf4jmczsqt3w.2",{"_index":4001,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["3",{"_index":82,"title":{"39-8":{},"39-10":{}},"name":{},"text":{"1":{},"7":{},"8":{},"9":{},"10":{},"32":{},"35":{},"36":{},"37":{},"39":{},"41":{},"60":{},"61":{},"62":{},"63":{},"71":{},"85":{},"87":{},"94":{},"96":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"166":{},"173":{},"177":{},"182":{},"186":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"209":{},"211":{},"213":{},"214":{},"219":{},"226":{},"235":{},"250":{},"258":{},"259":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["3.0",{"_index":2702,"title":{},"name":{},"text":{"62":{}},"component":{}}],["3.02kb/",{"_index":4039,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["3.1.0",{"_index":1272,"title":{},"name":{},"text":{"20":{},"41":{},"248":{},"257":{},"268":{}},"component":{}}],["3.1.1",{"_index":2072,"title":{},"name":{},"text":{"41":{}},"component":{}}],["3.1.3",{"_index":1269,"title":{},"name":{},"text":{"20":{},"228":{},"229":{},"230":{},"237":{},"238":{},"239":{}},"component":{}}],["3.13.1",{"_index":1706,"title":{},"name":{},"text":{"34":{}},"component":{}}],["3.2.0",{"_index":1273,"title":{},"name":{},"text":{"20":{},"243":{},"244":{},"248":{},"250":{},"252":{},"253":{},"257":{},"258":{},"259":{},"263":{},"264":{},"268":{},"269":{},"270":{}},"component":{}}],["3.2.0.jar:/dependencies/jars/aw",{"_index":3860,"title":{},"name":{},"text":{"330":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["3.2.1",{"_index":1280,"title":{},"name":{},"text":{"20":{},"328":{},"332":{},"336":{},"344":{},"352":{},"362":{}},"component":{}}],["3.2.1.jar",{"_index":3845,"title":{},"name":{},"text":{"330":{},"332":{}},"component":{}}],["3.2.2",{"_index":1265,"title":{},"name":{},"text":{"20":{},"152":{},"161":{},"194":{},"202":{},"212":{}},"component":{}}],["3.3.0",{"_index":1283,"title":{},"name":{},"text":{"20":{},"45":{},"336":{},"340":{},"344":{},"348":{},"352":{},"362":{}},"component":{}}],["3.3.0.jar",{"_index":3936,"title":{},"name":{},"text":{"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["3.3.1",{"_index":1266,"title":{},"name":{},"text":{"20":{},"194":{},"202":{},"212":{}},"component":{}}],["3.3.3",{"_index":1267,"title":{},"name":{},"text":{"20":{},"177":{},"186":{},"194":{},"196":{},"202":{},"203":{},"204":{},"212":{},"213":{},"214":{}},"component":{}}],["3.3.x",{"_index":3620,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["3.4.14",{"_index":3734,"title":{},"name":{},"text":{"276":{},"283":{},"291":{}},"component":{}}],["3.5.8",{"_index":1288,"title":{},"name":{},"text":{"20":{},"152":{},"161":{},"196":{},"203":{},"213":{},"276":{},"283":{},"291":{},"424":{},"433":{},"444":{}},"component":{}}],["3.6.3",{"_index":1289,"title":{},"name":{},"text":{"20":{},"424":{},"433":{},"444":{}},"component":{}}],["3.7",{"_index":323,"title":{},"name":{},"text":{"3":{}},"component":{}}],["3.7.0",{"_index":1290,"title":{},"name":{},"text":{"20":{},"424":{},"433":{},"444":{}},"component":{}}],["3.7.4",{"_index":1711,"title":{},"name":{},"text":{"34":{}},"component":{}}],["3.8.0",{"_index":1291,"title":{},"name":{},"text":{"20":{},"40":{},"177":{},"186":{},"204":{},"214":{},"259":{},"270":{},"286":{},"294":{},"420":{},"421":{},"424":{},"426":{},"429":{},"430":{},"433":{},"434":{},"436":{},"440":{},"441":{},"444":{},"445":{},"447":{}},"component":{}}],["3/3",{"_index":3348,"title":{},"name":{},"text":{"152":{},"161":{},"259":{},"270":{},"286":{},"294":{}},"component":{}}],["30",{"_index":1353,"title":{},"name":{},"text":{"23":{},"56":{}},"component":{}}],["30.903.982",{"_index":2679,"title":{},"name":{},"text":{"62":{}},"component":{}}],["300",{"_index":3229,"title":{},"name":{},"text":{"114":{},"122":{},"356":{},"366":{},"380":{},"388":{}},"component":{}}],["3000",{"_index":4079,"title":{},"name":{},"text":{"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["30247",{"_index":152,"title":{},"name":{},"text":{"1":{}},"component":{}}],["31",{"_index":2557,"title":{},"name":{},"text":{"61":{}},"component":{}}],["31.0.0",{"_index":1237,"title":{},"name":{},"text":{"19":{}},"component":{}}],["31242",{"_index":2012,"title":{},"name":{},"text":{"39":{}},"component":{}}],["31t00:00:00",{"_index":2773,"title":{},"name":{},"text":{"62":{}},"component":{}}],["32595",{"_index":3785,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["33",{"_index":2630,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3339",{"_index":2813,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["34.22",{"_index":2598,"title":{},"name":{},"text":{"61":{}},"component":{}}],["3500",{"_index":2651,"title":{},"name":{},"text":{"61":{}},"component":{}}],["351",{"_index":3471,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["3597",{"_index":2621,"title":{},"name":{},"text":{"61":{}},"component":{}}],["35mb",{"_index":2650,"title":{},"name":{},"text":{"61":{}},"component":{}}],["360",{"_index":3469,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["377",{"_index":1292,"title":{},"name":{},"text":{"20":{},"394":{},"400":{},"406":{},"414":{}},"component":{}}],["387",{"_index":1293,"title":{},"name":{},"text":{"20":{},"57":{},"394":{},"396":{},"400":{},"402":{},"406":{},"407":{},"408":{},"414":{},"415":{},"416":{}},"component":{}}],["389",{"_index":1898,"title":{},"name":{},"text":{"37":{},"63":{},"71":{}},"component":{}}],["395",{"_index":3475,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["3:2181/{path",{"_index":4113,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["3gi",{"_index":574,"title":{},"name":{},"text":{"8":{},"407":{},"415":{}},"component":{}}],["3s",{"_index":2983,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["4",{"_index":516,"title":{"39-9":{},"39-10":{}},"name":{},"text":{"7":{},"8":{},"9":{},"36":{},"39":{},"41":{},"61":{},"62":{},"63":{},"71":{},"87":{},"96":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"166":{},"170":{},"173":{},"176":{},"182":{},"185":{},"258":{},"269":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["4.0",{"_index":2700,"title":{},"name":{},"text":{"62":{}},"component":{}}],["4.0.2",{"_index":3641,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["4.2",{"_index":2742,"title":{},"name":{},"text":{"62":{}},"component":{}}],["4.4",{"_index":4030,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["4.6",{"_index":1841,"title":{},"name":{},"text":{"36":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["4.7",{"_index":1842,"title":{},"name":{},"text":{"36":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["4.8",{"_index":1843,"title":{},"name":{},"text":{"36":{}},"component":{}}],["4.9",{"_index":4028,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["4242",{"_index":712,"title":{},"name":{},"text":{"10":{},"22":{}},"component":{}}],["42cc",{"_index":4129,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["43",{"_index":3479,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["45",{"_index":1874,"title":{},"name":{},"text":{"36":{}},"component":{}}],["45.798,\"longitud",{"_index":2488,"title":{},"name":{},"text":{"60":{}},"component":{}}],["4528",{"_index":2593,"title":{},"name":{},"text":{"61":{}},"component":{}}],["4599",{"_index":2576,"title":{},"name":{},"text":{"61":{}},"component":{}}],["45m",{"_index":140,"title":{},"name":{},"text":{"1":{}},"component":{}}],["47174d8f",{"_index":2574,"title":{},"name":{},"text":{"61":{}},"component":{}}],["48",{"_index":3635,"title":{},"name":{},"text":{"230":{},"239":{}},"component":{}}],["48133494",{"_index":2706,"title":{},"name":{},"text":{"62":{}},"component":{}}],["48900204",{"_index":2596,"title":{},"name":{},"text":{"61":{}},"component":{}}],["48900237",{"_index":2579,"title":{},"name":{},"text":{"61":{}},"component":{}}],["49dc",{"_index":4136,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["49m",{"_index":161,"title":{},"name":{},"text":{"1":{}},"component":{}}],["4a",{"_index":1793,"title":{},"name":{},"text":{"36":{}},"component":{}}],["4e0a6098",{"_index":4127,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["4f82",{"_index":2008,"title":{},"name":{},"text":{"39":{}},"component":{}}],["4lw.commands.whitelist",{"_index":4081,"title":{},"name":{},"text":{"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["5",{"_index":575,"title":{"39-10":{}},"name":{},"text":{"8":{},"39":{},"62":{},"63":{},"71":{},"87":{},"96":{},"102":{},"108":{},"113":{},"121":{},"196":{},"203":{},"213":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["5.0",{"_index":2698,"title":{},"name":{},"text":{"62":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["5.1",{"_index":4026,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["5.15.0",{"_index":145,"title":{},"name":{},"text":{"1":{}},"component":{}}],["5.4",{"_index":4029,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["50",{"_index":2626,"title":{},"name":{},"text":{"61":{},"62":{}},"component":{}}],["500m",{"_index":3552,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["50x",{"_index":2627,"title":{},"name":{},"text":{"61":{}},"component":{}}],["512m",{"_index":3089,"title":{},"name":{},"text":{"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["52.7890975921",{"_index":2600,"title":{},"name":{},"text":{"61":{}},"component":{}}],["52.9040654474",{"_index":2589,"title":{},"name":{},"text":{"61":{}},"component":{}}],["5432",{"_index":3295,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["597",{"_index":3586,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["5aaed954",{"_index":2591,"title":{},"name":{},"text":{"61":{}},"component":{}}],["5m",{"_index":3346,"title":{},"name":{},"text":{"152":{},"161":{},"259":{},"270":{},"286":{},"294":{},"408":{},"416":{}},"component":{}}],["6",{"_index":1849,"title":{"39-11":{}},"name":{},"text":{"36":{},"39":{},"62":{},"63":{},"71":{},"102":{},"108":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"407":{},"415":{}},"component":{}}],["6.0",{"_index":2696,"title":{},"name":{},"text":{"62":{}},"component":{}}],["60",{"_index":3160,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["636",{"_index":2779,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["64",{"_index":3544,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["644",{"_index":3590,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["68",{"_index":2676,"title":{},"name":{},"text":{"62":{}},"component":{}}],["688",{"_index":2611,"title":{},"name":{},"text":{"61":{}},"component":{}}],["6m",{"_index":3347,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["7",{"_index":1808,"title":{"39-12":{}},"name":{},"text":{"36":{},"39":{},"63":{},"71":{},"102":{},"108":{},"113":{},"121":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["7.0",{"_index":2694,"title":{},"name":{},"text":{"62":{}},"component":{}}],["7.6",{"_index":2620,"title":{},"name":{},"text":{"61":{}},"component":{}}],["73",{"_index":2522,"title":{},"name":{},"text":{"60":{}},"component":{}}],["74",{"_index":4037,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["7586541",{"_index":2615,"title":{},"name":{},"text":{"61":{}},"component":{}}],["77.077,\"depth\":15.0,\"mag\":6.27,\"magtype\":\"mw\",\"nst\":null,\"gap\":null,\"dmin\":null,\"rms\":null,\"net\":\"iscgem\",\"id\":\"iscgem895109\",\"updated\":\"2022",{"_index":2489,"title":{},"name":{},"text":{"60":{}},"component":{}}],["7m",{"_index":3349,"title":{},"name":{},"text":{"152":{},"161":{},"259":{},"270":{},"286":{},"294":{}},"component":{}}],["8",{"_index":1853,"title":{},"name":{},"text":{"36":{},"60":{},"63":{},"71":{},"102":{},"108":{},"113":{},"121":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{}},"component":{}}],["8.0",{"_index":2692,"title":{},"name":{},"text":{"62":{}},"component":{}}],["8.08kb",{"_index":4043,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["8.24",{"_index":2748,"title":{},"name":{},"text":{"62":{}},"component":{}}],["80",{"_index":1297,"title":{},"name":{},"text":{"22":{},"131":{},"138":{},"145":{},"151":{},"160":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["8080",{"_index":2986,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["8081",{"_index":3805,"title":{},"name":{},"text":{"303":{},"304":{},"314":{},"321":{},"322":{}},"component":{}}],["8088",{"_index":3969,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["82f1",{"_index":2009,"title":{},"name":{},"text":{"39":{}},"component":{}}],["8443",{"_index":4064,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["8443:30247/tcp",{"_index":160,"title":{},"name":{},"text":{"1":{}},"component":{}}],["85",{"_index":3232,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["8888",{"_index":3351,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["8a59",{"_index":2577,"title":{},"name":{},"text":{"61":{}},"component":{}}],["8f65",{"_index":2594,"title":{},"name":{},"text":{"61":{}},"component":{}}],["8s",{"_index":2984,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["9",{"_index":1802,"title":{},"name":{},"text":{"36":{},"62":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["9.0",{"_index":2690,"title":{},"name":{},"text":{"62":{}},"component":{}}],["9.24",{"_index":2749,"title":{},"name":{},"text":{"62":{}},"component":{}}],["9.2767694354",{"_index":2587,"title":{},"name":{},"text":{"61":{}},"component":{}}],["9.3828408101",{"_index":2599,"title":{},"name":{},"text":{"61":{}},"component":{}}],["9.56",{"_index":2583,"title":{},"name":{},"text":{"61":{}},"component":{}}],["9000",{"_index":742,"title":{},"name":{},"text":{"10":{},"39":{},"45":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["9001",{"_index":3614,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["9030",{"_index":4137,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["9090",{"_index":1249,"title":{},"name":{},"text":{"19":{}},"component":{}}],["9092",{"_index":3707,"title":{},"name":{},"text":{"259":{},"270":{}},"component":{}}],["926e",{"_index":4130,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["933348a6",{"_index":2006,"title":{},"name":{},"text":{"39":{}},"component":{}}],["9575299",{"_index":2705,"title":{},"name":{},"text":{"62":{}},"component":{}}],["96",{"_index":2711,"title":{},"name":{},"text":{"62":{}},"component":{}}],["96.0",{"_index":2689,"title":{},"name":{},"text":{"62":{}},"component":{}}],["98",{"_index":2691,"title":{},"name":{},"text":{"62":{}},"component":{}}],["99",{"_index":3025,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["__init__",{"_index":3128,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["__main__",{"_index":3028,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["__name__",{"_index":3027,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["__time",{"_index":1342,"title":{},"name":{},"text":{"23":{}},"component":{}}],["_log_driver(self",{"_index":3165,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["a=,u=rwx,g=rwx",{"_index":3050,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["aarch64",{"_index":2305,"title":{},"name":{},"text":{"51":{}},"component":{}}],["abbrevi",{"_index":2281,"title":{},"name":{},"text":{"50":{}},"component":{}}],["abil",{"_index":1411,"title":{},"name":{},"text":{"26":{},"28":{},"44":{},"48":{},"60":{},"61":{},"62":{},"176":{},"185":{}},"component":{}}],["abov",{"_index":628,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"14":{},"15":{},"19":{},"34":{},"38":{},"41":{},"45":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"177":{},"186":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"285":{},"293":{},"299":{},"309":{},"317":{},"329":{},"337":{},"345":{},"356":{},"366":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["abstract",{"_index":2156,"title":{},"name":{},"text":{"44":{},"48":{},"57":{},"85":{},"94":{}},"component":{}}],["accept",{"_index":993,"title":{},"name":{},"text":{"14":{},"25":{},"26":{},"27":{},"28":{},"29":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"64":{},"72":{},"81":{},"90":{},"98":{},"104":{},"110":{},"118":{},"126":{},"133":{},"140":{},"147":{},"156":{},"165":{},"172":{},"177":{},"181":{},"186":{},"190":{},"198":{},"208":{},"218":{},"225":{},"234":{},"244":{},"253":{},"264":{},"275":{},"281":{},"282":{},"289":{},"290":{},"298":{},"308":{},"316":{},"326":{},"334":{},"342":{},"350":{},"360":{},"369":{},"376":{},"384":{},"392":{},"398":{},"404":{},"412":{},"421":{},"422":{},"430":{},"431":{},"441":{},"442":{}},"component":{}}],["access",{"_index":279,"title":{"8-1":{},"14-8":{},"274-4":{},"275-11":{},"282-11":{},"286-5":{},"290-11":{},"294-5":{},"332-6":{},"332-7":{},"340-6":{},"340-7":{},"348-6":{},"348-7":{},"355-5":{},"355-6":{},"365-5":{},"365-6":{},"408-3":{},"408-4":{},"416-3":{},"416-4":{}},"name":{},"text":{"2":{},"7":{},"8":{},"10":{},"11":{},"14":{},"19":{},"35":{},"38":{},"39":{},"42":{},"45":{},"48":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"67":{},"69":{},"75":{},"77":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"166":{},"173":{},"182":{},"191":{},"193":{},"199":{},"201":{},"209":{},"211":{},"219":{},"223":{},"226":{},"229":{},"235":{},"238":{},"246":{},"255":{},"266":{},"274":{},"275":{},"279":{},"282":{},"290":{},"299":{},"301":{},"309":{},"311":{},"317":{},"319":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"442":{},"445":{},"446":{}},"component":{}}],["access/download",{"_index":3059,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["access_key_id",{"_index":3302,"title":{},"name":{},"text":{"131":{},"138":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["accesskey",{"_index":749,"title":{},"name":{},"text":{"10":{},"22":{},"45":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["accessmod",{"_index":568,"title":{},"name":{},"text":{"8":{},"86":{},"87":{},"95":{},"96":{},"102":{},"108":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["accessstyl",{"_index":1298,"title":{},"name":{},"text":{"22":{},"45":{},"223":{},"229":{},"230":{},"238":{},"239":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["accesstim",{"_index":3577,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["accident",{"_index":1423,"title":{},"name":{},"text":{"26":{}},"component":{}}],["accommod",{"_index":2099,"title":{},"name":{},"text":{"41":{}},"component":{}}],["accomod",{"_index":1774,"title":{},"name":{},"text":{"35":{}},"component":{}}],["accord",{"_index":1118,"title":{},"name":{},"text":{"16":{},"34":{},"36":{},"49":{},"68":{},"76":{},"152":{},"161":{},"259":{},"270":{},"280":{},"285":{},"286":{},"293":{},"294":{},"407":{},"415":{}},"component":{}}],["accordingli",{"_index":3737,"title":{},"name":{},"text":{"279":{}},"component":{}}],["account",{"_index":554,"title":{},"name":{},"text":{"8":{},"114":{},"122":{},"331":{},"339":{},"347":{},"354":{},"364":{},"374":{},"380":{},"388":{}},"component":{}}],["accumul",{"_index":1449,"title":{},"name":{},"text":{"27":{}},"component":{}}],["achiev",{"_index":652,"title":{},"name":{},"text":{"9":{},"16":{},"30":{},"33":{},"49":{},"50":{},"53":{},"57":{},"60":{},"61":{}},"component":{}}],["acl",{"_index":2257,"title":{},"name":{},"text":{"48":{}},"component":{}}],["act",{"_index":4104,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["action",{"_index":485,"title":{},"name":{},"text":{"7":{},"16":{},"33":{},"41":{},"49":{},"131":{},"138":{},"145":{},"151":{},"160":{},"177":{},"186":{},"204":{},"214":{}},"component":{}}],["activ",{"_index":1007,"title":{},"name":{},"text":{"14":{},"17":{},"25":{},"79":{},"88":{},"193":{},"201":{},"211":{},"301":{},"311":{},"319":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["active/pass",{"_index":3531,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["actual",{"_index":775,"title":{},"name":{},"text":{"11":{},"30":{},"34":{},"36":{},"38":{},"41":{},"50":{},"56":{},"63":{},"71":{},"114":{},"122":{},"152":{},"161":{},"177":{},"186":{},"193":{},"201":{},"204":{},"211":{},"214":{},"230":{},"239":{},"259":{},"270":{},"274":{},"275":{},"282":{},"286":{},"290":{},"294":{},"332":{},"340":{},"348":{},"355":{},"365":{},"420":{},"421":{},"429":{},"430":{},"436":{},"440":{},"441":{},"447":{}},"component":{}}],["acycl",{"_index":638,"title":{},"name":{},"text":{"8":{},"115":{},"123":{}},"component":{}}],["ad",{"_index":960,"title":{"49-3":{},"49-6":{},"49-9":{}},"name":{},"text":{"13":{},"15":{},"16":{},"29":{},"32":{},"34":{},"39":{},"41":{},"43":{},"44":{},"45":{},"48":{},"49":{},"52":{},"113":{},"121":{},"152":{},"161":{},"274":{},"275":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"330":{},"338":{},"346":{},"353":{},"363":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["adapt",{"_index":1116,"title":{},"name":{},"text":{"16":{},"31":{},"48":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["add",{"_index":401,"title":{"29-8":{},"49-1":{},"49-4":{},"49-7":{}},"name":{},"text":{"5":{},"7":{},"16":{},"19":{},"23":{},"25":{},"29":{},"33":{},"38":{},"43":{},"45":{},"49":{},"51":{},"55":{},"66":{},"67":{},"70":{},"74":{},"75":{},"78":{},"79":{},"83":{},"85":{},"88":{},"92":{},"94":{},"101":{},"102":{},"107":{},"108":{},"113":{},"116":{},"121":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"154":{},"160":{},"163":{},"169":{},"179":{},"188":{},"195":{},"206":{},"216":{},"222":{},"232":{},"241":{},"249":{},"261":{},"272":{},"274":{},"275":{},"279":{},"285":{},"288":{},"293":{},"296":{},"306":{},"313":{},"324":{},"329":{},"331":{},"332":{},"337":{},"339":{},"340":{},"345":{},"347":{},"348":{},"354":{},"355":{},"358":{},"364":{},"365":{},"368":{},"373":{},"374":{},"380":{},"382":{},"388":{},"390":{},"395":{},"396":{},"401":{},"402":{},"407":{},"410":{},"415":{},"418":{},"425":{},"438":{},"449":{}},"component":{}}],["add_data(\"connect_str",{"_index":1059,"title":{},"name":{},"text":{"15":{}},"component":{}}],["add_env_var(env_var_from_cm(\"connect_str",{"_index":1090,"title":{},"name":{},"text":{"15":{}},"component":{}}],["addit",{"_index":1238,"title":{"60-15":{},"60-16":{},"61-17":{},"61-18":{},"62-10":{},"62-11":{}},"name":{},"text":{"19":{},"27":{},"33":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"45":{},"48":{},"49":{},"53":{},"60":{},"61":{},"62":{},"63":{},"71":{},"85":{},"94":{},"113":{},"121":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"232":{},"241":{},"330":{},"338":{},"346":{},"353":{},"363":{},"373":{},"395":{},"401":{},"407":{},"415":{}},"component":{}}],["addition",{"_index":1578,"title":{},"name":{},"text":{"30":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["additional/opt",{"_index":3823,"title":{"329-3":{},"337-3":{},"345-3":{}},"name":{},"text":{},"component":{}}],["address",{"_index":163,"title":{"67-2":{},"75-2":{}},"name":{},"text":{"1":{},"8":{},"11":{},"67":{},"75":{},"84":{},"93":{},"191":{},"199":{},"209":{}},"component":{}}],["adher",{"_index":1569,"title":{},"name":{},"text":{"30":{},"31":{},"32":{},"34":{},"39":{}},"component":{}}],["adhoc",{"_index":2137,"title":{},"name":{},"text":{"43":{}},"component":{}}],["adjust",{"_index":3742,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["admin",{"_index":170,"title":{},"name":{},"text":{"1":{},"7":{},"29":{},"47":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"71":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["admin:supersecretpassword",{"_index":3740,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["admin@superset.com",{"_index":3959,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["admincredentialssecret",{"_index":3715,"title":{},"name":{},"text":{"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{}},"component":{}}],["administ",{"_index":4108,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["administr",{"_index":545,"title":{},"name":{},"text":{"8":{},"10":{},"35":{},"37":{},"43":{},"85":{},"94":{},"285":{},"293":{},"426":{},"434":{},"445":{}},"component":{}}],["adminus",{"_index":2955,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["adminuser.email",{"_index":2940,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["adminuser.firstnam",{"_index":2938,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["adminuser.lastnam",{"_index":2939,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["adminuser.password",{"_index":2942,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["adminuser.usernam",{"_index":2937,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["adopt",{"_index":1858,"title":{},"name":{},"text":{"36":{},"44":{}},"component":{}}],["adr",{"_index":1409,"title":{},"name":{},"text":{"26":{},"32":{},"33":{},"34":{},"35":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"46":{},"47":{},"48":{}},"component":{}}],["adr001",{"_index":1368,"title":{"25":{}},"name":{"25":{}},"text":{"46":{}},"component":{}}],["adr002",{"_index":1401,"title":{"26":{}},"name":{"26":{}},"text":{"46":{}},"component":{}}],["adr003",{"_index":1432,"title":{"27":{}},"name":{"27":{}},"text":{"46":{}},"component":{}}],["adr004",{"_index":1454,"title":{"28":{}},"name":{"28":{}},"text":{"46":{}},"component":{}}],["adr005",{"_index":1485,"title":{"29":{}},"name":{"29":{}},"text":{"46":{}},"component":{}}],["adr006",{"_index":2224,"title":{},"name":{"47":{}},"text":{},"component":{}}],["adr007",{"_index":1519,"title":{"30":{}},"name":{"30":{}},"text":{"46":{}},"component":{}}],["adr008",{"_index":1595,"title":{"31":{}},"name":{"31":{}},"text":{"46":{}},"component":{}}],["adr009",{"_index":1618,"title":{"32":{}},"name":{"32":{}},"text":{"46":{}},"component":{}}],["adr010",{"_index":1649,"title":{"33":{}},"name":{"33":{}},"text":{"46":{}},"component":{}}],["adr011",{"_index":1680,"title":{"34":{}},"name":{"34":{}},"text":{"46":{}},"component":{}}],["adr012",{"_index":1726,"title":{"35":{}},"name":{"35":{}},"text":{"46":{}},"component":{}}],["adr013",{"_index":1786,"title":{"36":{}},"name":{"36":{}},"text":{"46":{}},"component":{}}],["adr014",{"_index":1879,"title":{"37":{}},"name":{"37":{}},"text":{"40":{},"46":{}},"component":{}}],["adr015",{"_index":1923,"title":{"38":{}},"name":{"38":{}},"text":{"46":{}},"component":{}}],["adr016",{"_index":1956,"title":{"39":{}},"name":{"39":{}},"text":{"46":{}},"component":{}}],["adr017",{"_index":2018,"title":{"40":{}},"name":{"40":{}},"text":{"46":{}},"component":{}}],["adr018",{"_index":2051,"title":{"41":{}},"name":{"41":{}},"text":{"46":{}},"component":{}}],["adr019",{"_index":2116,"title":{"42":{}},"name":{"42":{}},"text":{"43":{},"46":{}},"component":{}}],["adr020",{"_index":2120,"title":{"43":{}},"name":{"43":{}},"text":{"42":{},"46":{}},"component":{}}],["adr021",{"_index":2139,"title":{"44":{}},"name":{"44":{}},"text":{"46":{}},"component":{}}],["adr022",{"_index":2181,"title":{"45":{}},"name":{"45":{}},"text":{"46":{}},"component":{}}],["adr7",{"_index":2227,"title":{},"name":{},"text":{"47":{}},"component":{}}],["adrx",{"_index":2240,"title":{},"name":{"48":{}},"text":{},"component":{}}],["advanc",{"_index":766,"title":{},"name":{},"text":{"11":{},"35":{},"49":{}},"component":{}}],["advantag",{"_index":106,"title":{"45-5":{}},"name":{},"text":{"1":{},"10":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["affect",{"_index":2036,"title":{},"name":{},"text":{"40":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["affin",{"_index":614,"title":{},"name":{},"text":{"8":{}},"component":{}}],["afterward",{"_index":1250,"title":{},"name":{},"text":{"19":{},"45":{},"60":{},"61":{},"114":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"356":{},"366":{},"408":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["ag",{"_index":157,"title":{},"name":{},"text":{"1":{},"114":{},"122":{},"152":{},"161":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"408":{},"416":{}},"component":{}}],["again",{"_index":1182,"title":{},"name":{},"text":{"16":{},"32":{},"34":{},"54":{},"55":{},"58":{},"60":{},"61":{},"177":{},"186":{},"204":{},"214":{}},"component":{}}],["against",{"_index":634,"title":{},"name":{},"text":{"8":{},"14":{},"33":{},"36":{},"37":{},"40":{},"79":{},"88":{},"101":{},"107":{},"113":{},"121":{},"130":{},"137":{},"144":{},"169":{},"222":{},"249":{},"279":{},"285":{},"293":{},"313":{},"373":{},"374":{},"379":{},"387":{},"395":{},"401":{},"408":{},"416":{},"425":{},"434":{},"445":{}},"component":{}}],["agenc",{"_index":2584,"title":{},"name":{},"text":{"61":{}},"component":{}}],["agent",{"_index":256,"title":{"28":{},"20-8":{},"48-9":{},"131-9":{},"138-9":{},"145-10":{},"151-11":{},"160-11":{}},"name":{},"text":{"2":{},"26":{},"28":{},"29":{},"30":{},"34":{},"46":{},"48":{},"62":{},"131":{},"138":{},"145":{},"151":{},"160":{},"193":{},"201":{},"211":{},"250":{},"258":{},"269":{},"304":{},"322":{}},"component":{}}],["agent/opa",{"_index":874,"title":{},"name":{},"text":{"12":{}},"component":{}}],["agre",{"_index":1383,"title":{},"name":{},"text":{"25":{},"32":{},"34":{},"42":{},"43":{},"113":{},"121":{}},"component":{}}],["agreement",{"_index":2152,"title":{},"name":{},"text":{"44":{},"113":{},"121":{}},"component":{}}],["ahead",{"_index":2649,"title":{},"name":{},"text":{"61":{},"62":{}},"component":{}}],["aid",{"_index":3224,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["aim",{"_index":937,"title":{},"name":{},"text":{"13":{},"30":{},"37":{}},"component":{}}],["airflow",{"_index":195,"title":{"100":{},"106":{},"112":{},"120":{},"2-4":{},"8-5":{},"20-1":{},"102-1":{},"102-2":{},"102-3":{},"102-8":{},"102-9":{},"108-1":{},"108-2":{},"108-3":{},"108-8":{},"108-9":{},"113-5":{},"113-6":{},"113-20":{},"114-2":{},"114-3":{},"114-4":{},"121-5":{},"121-6":{},"121-20":{},"122-2":{},"122-3":{},"122-4":{}},"name":{},"text":{"2":{},"5":{},"8":{},"12":{},"18":{},"48":{},"52":{},"54":{},"55":{},"56":{},"58":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{}},"component":{"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{}}}],["airflow.cfg",{"_index":2979,"title":{},"name":{},"text":{"102":{},"108":{}},"component":{}}],["airflow.except",{"_index":3106,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["airflow.model",{"_index":3110,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["airflow.operators.bash",{"_index":2991,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["airflow.operators.dummi",{"_index":2993,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["airflow.providers.cncf.kubernetes.hooks.kubernet",{"_index":3112,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["airflow.sensors.bas",{"_index":3108,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["airflow.stackable.tech/v1alpha1",{"_index":2956,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["airflow.utils.context",{"_index":3113,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["airflow.yaml",{"_index":3221,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["airflow/stable/executor/index.html#executor",{"_index":2974,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["airflow/stable/start/local.html",{"_index":2924,"title":{},"name":{},"text":{"102":{},"108":{}},"component":{}}],["airflow:airflow",{"_index":3243,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["airflow=0.4.0",{"_index":2405,"title":{},"name":{},"text":{"55":{}},"component":{}}],["airflow=0.5.0",{"_index":3261,"title":{},"name":{},"text":{"116":{},"124":{}},"component":{}}],["airflow@airflow.com",{"_index":2941,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["airflow__core__dags_fold",{"_index":3032,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["airflow__webserver__auto_refresh_interv",{"_index":2981,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["airflow_conn_kubernetes_in_clust",{"_index":3068,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["airflow_home/dag",{"_index":3036,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["airflowclust",{"_index":2957,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["airflowcluster.crd.yaml",{"_index":2919,"title":{},"name":{},"text":{"101":{},"107":{}},"component":{}}],["airflowdb/airflow",{"_index":3226,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["airflowexcept",{"_index":3107,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["airflowexception(f\"sparkappl",{"_index":3202,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["aisen",{"_index":2492,"title":{},"name":{},"text":{"60":{}},"component":{}}],["ak",{"_index":1781,"title":{"36-7":{}},"name":{},"text":{"36":{}},"component":{}}],["albeit",{"_index":583,"title":{},"name":{},"text":{"8":{}},"component":{}}],["alic",{"_index":3998,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["aller",{"_index":2590,"title":{},"name":{},"text":{"61":{}},"component":{}}],["allow",{"_index":218,"title":{"31":{},"31-8":{}},"name":{},"text":{"2":{},"7":{},"10":{},"14":{},"16":{},"25":{},"26":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"48":{},"51":{},"53":{},"54":{},"55":{},"57":{},"58":{},"63":{},"66":{},"68":{},"71":{},"74":{},"76":{},"83":{},"84":{},"85":{},"92":{},"93":{},"94":{},"101":{},"102":{},"107":{},"108":{},"127":{},"130":{},"131":{},"134":{},"137":{},"138":{},"141":{},"144":{},"145":{},"148":{},"151":{},"157":{},"160":{},"166":{},"169":{},"173":{},"182":{},"191":{},"195":{},"199":{},"209":{},"219":{},"222":{},"226":{},"235":{},"246":{},"249":{},"255":{},"266":{},"274":{},"275":{},"279":{},"282":{},"285":{},"290":{},"293":{},"299":{},"309":{},"313":{},"317":{},"329":{},"331":{},"337":{},"339":{},"345":{},"347":{},"354":{},"364":{},"373":{},"374":{},"379":{},"387":{},"395":{},"396":{},"401":{},"402":{},"407":{},"415":{},"422":{},"425":{},"426":{},"431":{},"434":{},"442":{},"445":{}},"component":{}}],["allowanonymousaccess",{"_index":3716,"title":{},"name":{},"text":{"274":{},"275":{},"282":{},"290":{}},"component":{}}],["alon",{"_index":706,"title":{"10-5":{}},"name":{},"text":{"10":{},"329":{},"337":{},"345":{}},"component":{}}],["along",{"_index":3807,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["alongsid",{"_index":2635,"title":{},"name":{},"text":{"61":{}},"component":{}}],["alpha",{"_index":1798,"title":{},"name":{},"text":{"36":{}},"component":{}}],["alreadi",{"_index":118,"title":{},"name":{},"text":{"1":{},"11":{},"13":{},"16":{},"30":{},"31":{},"32":{},"35":{},"40":{},"41":{},"47":{},"48":{},"49":{},"52":{},"55":{},"60":{},"61":{},"62":{},"85":{},"94":{},"102":{},"108":{},"113":{},"116":{},"121":{},"124":{},"230":{},"239":{},"250":{},"258":{},"269":{},"356":{},"366":{},"373":{},"374":{},"380":{},"388":{}},"component":{}}],["also_run_thi",{"_index":3016,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["altern",{"_index":1515,"title":{},"name":{},"text":{"29":{},"32":{},"34":{},"48":{},"62":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"176":{},"177":{},"185":{},"186":{},"303":{},"314":{},"321":{}},"component":{}}],["although",{"_index":1953,"title":{},"name":{},"text":{"38":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["alway",{"_index":491,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"29":{},"51":{},"53":{},"145":{},"151":{},"160":{},"332":{},"340":{},"348":{},"355":{},"358":{},"365":{},"368":{}},"component":{}}],["amazon",{"_index":1782,"title":{"36-8":{}},"name":{},"text":{},"component":{}}],["amend",{"_index":2967,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"426":{},"434":{},"445":{}},"component":{}}],["amount",{"_index":661,"title":{},"name":{},"text":{"9":{},"23":{},"30":{},"57":{},"60":{},"61":{},"62":{},"196":{},"203":{},"213":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["analysi",{"_index":1303,"title":{"23-28":{}},"name":{},"text":{"61":{}},"component":{}}],["analyt",{"_index":274,"title":{},"name":{},"text":{"2":{},"60":{},"61":{},"62":{}},"component":{}}],["analyz",{"_index":981,"title":{},"name":{},"text":{"13":{},"60":{},"61":{},"79":{},"88":{}},"component":{}}],["and/or",{"_index":418,"title":{},"name":{},"text":{"5":{},"8":{},"40":{},"45":{},"49":{},"55":{},"116":{},"124":{},"195":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"355":{},"365":{}},"component":{}}],["and_then(|mut",{"_index":1101,"title":{},"name":{},"text":{"15":{}},"component":{}}],["andrew",{"_index":2182,"title":{},"name":{},"text":{"45":{}},"component":{}}],["annot",{"_index":2799,"title":{},"name":{},"text":{"67":{},"68":{},"75":{},"76":{},"86":{},"87":{},"95":{},"96":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["announc",{"_index":213,"title":{},"name":{},"text":{"2":{},"36":{}},"component":{}}],["anonym",{"_index":3713,"title":{"274-4":{},"275-11":{},"282-11":{},"290-11":{}},"name":{},"text":{"274":{},"275":{},"282":{},"290":{}},"component":{}}],["anoth",{"_index":1009,"title":{},"name":{},"text":{"14":{},"16":{},"31":{},"35":{},"38":{},"62":{},"177":{},"186":{},"204":{},"214":{},"223":{},"229":{},"238":{}},"component":{}}],["answer",{"_index":2677,"title":{},"name":{},"text":{"62":{}},"component":{}}],["anti",{"_index":615,"title":{},"name":{},"text":{"8":{}},"component":{}}],["antora",{"_index":908,"title":{},"name":{},"text":{"12":{},"13":{},"16":{}},"component":{}}],["anybodi",{"_index":1398,"title":{},"name":{},"text":{"25":{}},"component":{}}],["anymor",{"_index":3760,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["anyth",{"_index":3035,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["anyway",{"_index":1481,"title":{},"name":{},"text":{"28":{},"30":{},"34":{},"41":{},"79":{},"88":{}},"component":{}}],["anywher",{"_index":2300,"title":{},"name":{},"text":{"51":{},"422":{},"431":{},"442":{}},"component":{}}],["apach",{"_index":14,"title":{"100":{},"106":{},"112":{},"120":{},"129":{},"136":{},"143":{},"150":{},"159":{},"168":{},"175":{},"184":{},"194":{},"202":{},"212":{},"221":{},"228":{},"237":{},"248":{},"257":{},"268":{},"278":{},"284":{},"292":{},"328":{},"336":{},"344":{},"352":{},"362":{},"372":{},"378":{},"386":{},"424":{},"433":{},"444":{},"1-12":{},"1-13":{},"1-14":{},"1-16":{},"1-17":{},"1-18":{},"2-4":{},"2-5":{},"2-6":{},"2-7":{},"2-8":{},"2-9":{},"2-10":{},"2-11":{},"2-12":{},"2-14":{},"20-1":{},"20-2":{},"20-3":{},"20-4":{},"20-5":{},"20-6":{},"20-7":{},"20-9":{},"20-10":{},"20-11":{},"170-2":{},"176-2":{},"185-2":{},"332-1":{},"340-1":{},"348-1":{},"374-12":{},"379-7":{},"387-7":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"11":{},"12":{},"14":{},"18":{},"23":{},"27":{},"34":{},"41":{},"45":{},"55":{},"62":{},"100":{},"101":{},"106":{},"107":{},"112":{},"113":{},"114":{},"116":{},"120":{},"121":{},"122":{},"124":{},"127":{},"129":{},"130":{},"131":{},"134":{},"136":{},"137":{},"138":{},"141":{},"143":{},"144":{},"145":{},"148":{},"150":{},"151":{},"154":{},"157":{},"159":{},"160":{},"163":{},"166":{},"168":{},"169":{},"170":{},"173":{},"175":{},"176":{},"177":{},"182":{},"184":{},"185":{},"186":{},"191":{},"194":{},"195":{},"196":{},"199":{},"202":{},"203":{},"209":{},"212":{},"213":{},"219":{},"221":{},"222":{},"223":{},"226":{},"228":{},"229":{},"230":{},"231":{},"232":{},"235":{},"237":{},"238":{},"239":{},"240":{},"241":{},"246":{},"248":{},"249":{},"250":{},"255":{},"257":{},"258":{},"260":{},"261":{},"266":{},"268":{},"269":{},"271":{},"272":{},"274":{},"275":{},"276":{},"278":{},"279":{},"280":{},"283":{},"284":{},"285":{},"287":{},"288":{},"291":{},"292":{},"293":{},"295":{},"296":{},"328":{},"329":{},"330":{},"332":{},"336":{},"337":{},"338":{},"340":{},"344":{},"345":{},"346":{},"348":{},"352":{},"353":{},"362":{},"363":{},"372":{},"373":{},"374":{},"378":{},"379":{},"380":{},"386":{},"387":{},"388":{},"396":{},"402":{},"407":{},"415":{},"422":{},"424":{},"425":{},"426":{},"427":{},"431":{},"433":{},"434":{},"435":{},"437":{},"438":{},"442":{},"444":{},"445":{},"446":{},"448":{},"449":{}},"component":{}}],["api",{"_index":478,"title":{},"name":{},"text":{"7":{},"14":{},"15":{},"17":{},"30":{},"35":{},"36":{},"44":{},"48":{},"61":{},"62":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"286":{},"294":{},"358":{},"368":{}},"component":{}}],["api_group",{"_index":3119,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["api_vers",{"_index":3120,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["apigroup",{"_index":3073,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["apiserv",{"_index":1516,"title":{"30-8":{},"30-9":{}},"name":{},"text":{"30":{},"47":{}},"component":{}}],["apivers",{"_index":507,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"14":{},"15":{},"19":{},"22":{},"37":{},"38":{},"39":{},"40":{},"45":{},"63":{},"71":{},"85":{},"86":{},"87":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"299":{},"303":{},"304":{},"309":{},"314":{},"317":{},"321":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"440":{},"441":{},"445":{},"446":{},"447":{}},"component":{}}],["app",{"_index":1754,"title":{},"name":{},"text":{"35":{},"204":{},"214":{},"223":{},"229":{},"238":{}},"component":{}}],["app.kubernetes.io/inst",{"_index":1245,"title":{},"name":{},"text":{"19":{}},"component":{}}],["appbuild",{"_index":3062,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["appear",{"_index":1504,"title":{},"name":{},"text":{"29":{},"38":{},"114":{},"122":{},"436":{},"447":{}},"component":{}}],["append",{"_index":3153,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["appl",{"_index":2301,"title":{},"name":{},"text":{"51":{}},"component":{}}],["appli",{"_index":91,"title":{"113-18":{},"121-18":{}},"name":{},"text":{"1":{},"9":{},"16":{},"19":{},"23":{},"33":{},"44":{},"48":{},"52":{},"66":{},"68":{},"74":{},"76":{},"79":{},"83":{},"88":{},"92":{},"101":{},"107":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"152":{},"154":{},"160":{},"161":{},"163":{},"169":{},"177":{},"179":{},"186":{},"188":{},"195":{},"196":{},"203":{},"204":{},"206":{},"213":{},"214":{},"216":{},"222":{},"230":{},"232":{},"239":{},"241":{},"243":{},"244":{},"249":{},"250":{},"252":{},"253":{},"258":{},"259":{},"261":{},"263":{},"264":{},"269":{},"270":{},"272":{},"279":{},"280":{},"285":{},"286":{},"288":{},"293":{},"294":{},"296":{},"303":{},"304":{},"306":{},"313":{},"314":{},"321":{},"322":{},"324":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"356":{},"358":{},"363":{},"366":{},"368":{},"373":{},"380":{},"382":{},"388":{},"390":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"410":{},"415":{},"416":{},"418":{},"425":{},"426":{},"434":{},"436":{},"438":{},"445":{},"447":{},"449":{}},"component":{}}],["applic",{"_index":275,"title":{},"name":{},"text":{"2":{},"5":{},"8":{},"10":{},"11":{},"16":{},"37":{},"45":{},"48":{},"57":{},"60":{},"61":{},"85":{},"87":{},"94":{},"96":{},"113":{},"121":{},"331":{},"332":{},"339":{},"340":{},"347":{},"348":{},"354":{},"355":{},"356":{},"358":{},"364":{},"365":{},"366":{},"368":{},"396":{},"402":{},"407":{},"415":{},"427":{},"435":{},"436":{},"446":{},"447":{}},"component":{}}],["application/json",{"_index":3446,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["application_fil",{"_index":3116,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["application_file=\"pyspark",{"_index":3209,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["application_nam",{"_index":3151,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["application_st",{"_index":3166,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["approach",{"_index":253,"title":{},"name":{},"text":{"2":{},"5":{},"16":{},"31":{},"39":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["appropri",{"_index":555,"title":{},"name":{},"text":{"8":{}},"component":{}}],["approv",{"_index":953,"title":{},"name":{},"text":{"13":{},"16":{},"27":{},"31":{},"41":{},"47":{}},"component":{}}],["approxim",{"_index":1827,"title":{},"name":{},"text":{"36":{},"60":{},"61":{},"356":{},"366":{}},"component":{}}],["apps/v1",{"_index":3556,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["apt",{"_index":2321,"title":{},"name":{},"text":{"51":{}},"component":{}}],["arbitrari",{"_index":481,"title":{"60-10":{},"60-14":{},"61-12":{},"61-16":{},"62-6":{},"62-9":{}},"name":{},"text":{"7":{},"14":{},"33":{},"60":{},"61":{},"62":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["arch",{"_index":2289,"title":{},"name":{},"text":{"51":{}},"component":{}}],["architectur",{"_index":49,"title":{"46":{},"3-2":{}},"name":{},"text":{"1":{},"6":{},"30":{},"38":{},"46":{},"49":{}},"component":{}}],["archiv",{"_index":2838,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["area",{"_index":1931,"title":{},"name":{},"text":{"38":{}},"component":{}}],["arg",{"_index":1081,"title":{},"name":{},"text":{"15":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["args(vec![\"./do_mag",{"_index":1087,"title":{},"name":{},"text":{"15":{}},"component":{}}],["args.txt",{"_index":3895,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["arguabl",{"_index":1479,"title":{},"name":{},"text":{"28":{}},"component":{}}],["argument",{"_index":2065,"title":{"332-7":{},"332-9":{},"340-7":{},"340-9":{},"348-7":{},"348-9":{},"355-6":{},"355-8":{},"365-6":{},"365-8":{}},"name":{},"text":{"41":{},"49":{},"53":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["arguments/job",{"_index":3898,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["arm",{"_index":2306,"title":{},"name":{},"text":{"51":{}},"component":{}}],["around",{"_index":85,"title":{},"name":{},"text":{"1":{},"38":{},"41":{},"51":{},"61":{},"223":{},"229":{},"238":{}},"component":{}}],["array",{"_index":3563,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["arrow",{"_index":3241,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["articl",{"_index":2532,"title":{},"name":{},"text":{"60":{}},"component":{}}],["artifact",{"_index":969,"title":{"332-3":{},"332-4":{},"332-5":{},"332-6":{},"332-7":{},"340-3":{},"340-4":{},"340-5":{},"340-6":{},"340-7":{},"348-3":{},"348-4":{},"348-5":{},"348-6":{},"348-7":{},"355-2":{},"355-3":{},"355-4":{},"355-5":{},"355-6":{},"365-2":{},"365-3":{},"365-4":{},"365-5":{},"365-6":{}},"name":{},"text":{"13":{},"85":{},"94":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["asciidoc",{"_index":906,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["asf",{"_index":3095,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["ask",{"_index":231,"title":{},"name":{},"text":{"2":{},"51":{},"69":{},"77":{}},"component":{}}],["aspect",{"_index":412,"title":{},"name":{},"text":{"5":{},"17":{},"84":{},"93":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["assembl",{"_index":503,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{}}],["assign",{"_index":599,"title":{"32":{}},"name":{},"text":{"8":{},"9":{},"16":{},"32":{},"46":{},"113":{},"121":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"331":{},"339":{},"347":{},"354":{},"364":{},"374":{},"379":{},"387":{},"407":{},"415":{},"426":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["assist",{"_index":1108,"title":{},"name":{},"text":{"15":{}},"component":{}}],["associ",{"_index":1712,"title":{},"name":{},"text":{"34":{},"43":{},"85":{},"94":{},"330":{},"338":{},"346":{},"353":{},"363":{},"422":{},"427":{},"431":{},"435":{},"442":{},"446":{}},"component":{}}],["assum",{"_index":935,"title":{},"name":{},"text":{"13":{},"41":{},"60":{},"61":{},"62":{},"176":{},"185":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["assumpt",{"_index":497,"title":{},"name":{},"text":{"7":{}},"component":{}}],["async",{"_index":1095,"title":{},"name":{},"text":{"15":{}},"component":{}}],["at.{tag",{"_index":2810,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["attach",{"_index":671,"title":{},"name":{},"text":{"9":{}},"component":{}}],["attach_log",{"_index":3152,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["attent",{"_index":1590,"title":{},"name":{},"text":{"30":{}},"component":{}}],["attribut",{"_index":2022,"title":{"63-3":{},"71-3":{},"87-1":{},"96-1":{}},"name":{},"text":{"40":{},"42":{},"44":{},"45":{},"48":{},"61":{},"63":{},"69":{},"71":{},"77":{},"85":{},"94":{},"113":{},"121":{},"374":{},"379":{},"387":{}},"component":{}}],["aug",{"_index":2501,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["auth",{"_index":3703,"title":{},"name":{},"text":{"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["auth.databas",{"_index":2168,"title":{},"name":{},"text":{"44":{}},"component":{}}],["auth.database=airflow",{"_index":2933,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{}},"component":{}}],["auth.database=druid",{"_index":3288,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["auth.database=superset",{"_index":2173,"title":{},"name":{},"text":{"44":{},"374":{},"380":{},"388":{}},"component":{}}],["auth.password",{"_index":2167,"title":{},"name":{},"text":{"44":{}},"component":{}}],["auth.password=airflow",{"_index":2932,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{}},"component":{}}],["auth.password=druid",{"_index":3287,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["auth.password=redi",{"_index":2935,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{}},"component":{}}],["auth.password=superset",{"_index":2172,"title":{},"name":{},"text":{"44":{},"374":{},"380":{},"388":{}},"component":{}}],["auth.rootpassword=minio",{"_index":3612,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["auth.rootuser=minio",{"_index":3611,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["auth.stackable.tech/v1alpha1",{"_index":1911,"title":{},"name":{},"text":{"37":{}},"component":{}}],["auth.usernam",{"_index":2166,"title":{},"name":{},"text":{"44":{}},"component":{}}],["auth.username=airflow",{"_index":2931,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{}},"component":{}}],["auth.username=druid",{"_index":3286,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["auth.username=superset",{"_index":2171,"title":{},"name":{},"text":{"44":{},"374":{},"380":{},"388":{}},"component":{}}],["authent",{"_index":65,"title":{"35":{},"37":{},"40":{},"37-6":{},"40-8":{},"113-7":{},"121-7":{},"258-4":{},"269-4":{},"274-2":{},"274-3":{},"275-9":{},"275-10":{},"282-9":{},"282-10":{},"285-1":{},"290-9":{},"290-10":{},"293-1":{},"374-6":{},"379-1":{},"387-1":{},"396-6":{},"402-6":{},"407-6":{},"407-11":{},"415-6":{},"415-11":{},"426-2":{},"434-2":{},"445-2":{}},"name":{},"text":{"1":{},"5":{},"14":{},"23":{},"33":{},"35":{},"37":{},"40":{},"46":{},"63":{},"69":{},"70":{},"71":{},"77":{},"78":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"238":{},"258":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"374":{},"379":{},"380":{},"387":{},"388":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["authentication.stackable.tech/v1alpha1",{"_index":2035,"title":{},"name":{},"text":{"40":{},"63":{},"71":{},"258":{},"269":{},"285":{},"293":{},"426":{},"434":{},"445":{}},"component":{}}],["authenticationclass",{"_index":1878,"title":{"63":{},"71":{},"37-8":{},"40-7":{}},"name":{"63":{},"71":{}},"text":{"37":{},"40":{},"63":{},"70":{},"71":{},"78":{},"113":{},"121":{},"258":{},"269":{},"285":{},"293":{},"374":{},"379":{},"387":{},"426":{},"434":{},"445":{}},"component":{}}],["authenticationconfig",{"_index":1895,"title":{},"name":{},"text":{"37":{},"113":{},"121":{},"274":{},"275":{},"282":{},"290":{},"374":{},"379":{},"387":{}},"component":{}}],["authenticationconfig.userregistrationrol",{"_index":3065,"title":{},"name":{},"text":{"113":{},"121":{},"374":{},"379":{},"387":{}},"component":{}}],["authenticator.properti",{"_index":4047,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["authn",{"_index":1775,"title":{},"name":{},"text":{"35":{},"37":{}},"component":{}}],["authn_token_manag",{"_index":1728,"title":{},"name":{"35":{}},"text":{},"component":{}}],["author",{"_index":442,"title":{"7":{},"48":{},"14-9":{},"113-10":{},"121-10":{},"131-9":{},"138-9":{},"145-10":{},"151-11":{},"160-11":{},"285-4":{},"293-4":{},"374-9":{},"379-4":{},"387-4":{},"396-7":{},"402-7":{},"407-7":{},"415-7":{}},"name":{},"text":{"5":{},"7":{},"14":{},"33":{},"48":{},"62":{},"85":{},"94":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"285":{},"293":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["authorization.yaml",{"_index":4015,"title":{},"name":{},"text":{"396":{},"402":{}},"component":{}}],["authorizt",{"_index":2243,"title":{},"name":{},"text":{"48":{}},"component":{}}],["auto",{"_index":1643,"title":{"51-6":{}},"name":{},"text":{"32":{},"51":{},"280":{},"285":{},"293":{}},"component":{}}],["auto.create.topics.en",{"_index":3695,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["autocomplet",{"_index":2320,"title":{},"name":{},"text":{"51":{}},"component":{}}],["autogener",{"_index":2033,"title":{},"name":{},"text":{"40":{},"85":{},"86":{},"94":{},"95":{},"258":{},"269":{},"286":{},"294":{},"426":{},"434":{},"445":{}},"component":{}}],["autom",{"_index":408,"title":{},"name":{},"text":{"5":{},"16":{},"41":{}},"component":{}}],["automat",{"_index":169,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"11":{},"16":{},"35":{},"38":{},"39":{},"50":{},"52":{},"60":{},"61":{},"67":{},"68":{},"69":{},"75":{},"76":{},"77":{},"79":{},"85":{},"88":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"297":{},"298":{},"303":{},"307":{},"308":{},"314":{},"315":{},"316":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["autotl",{"_index":2031,"title":{"85-2":{},"94-2":{}},"name":{},"text":{"40":{},"84":{},"85":{},"86":{},"93":{},"94":{},"95":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["autotls.ca",{"_index":2875,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["autotls.ca.autogener",{"_index":2878,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["autotls.ca.secret",{"_index":2876,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["avail",{"_index":546,"title":{"52-3":{},"54-1":{},"55-1":{},"56-1":{},"58-1":{},"61-3":{},"332-4":{},"340-4":{},"348-4":{},"355-3":{},"365-3":{}},"name":{},"text":{"8":{},"28":{},"34":{},"36":{},"41":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"69":{},"77":{},"101":{},"102":{},"107":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"130":{},"137":{},"144":{},"145":{},"151":{},"160":{},"169":{},"170":{},"176":{},"177":{},"185":{},"186":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{},"222":{},"223":{},"229":{},"238":{},"249":{},"250":{},"258":{},"269":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"303":{},"313":{},"314":{},"321":{},"329":{},"337":{},"345":{},"356":{},"358":{},"366":{},"368":{},"373":{},"374":{},"379":{},"380":{},"387":{},"388":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"415":{},"416":{},"425":{},"426":{},"434":{},"445":{}},"component":{}}],["avatica",{"_index":3272,"title":{},"name":{},"text":{"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{}},"component":{}}],["averag",{"_index":1335,"title":{},"name":{},"text":{"23":{},"61":{}},"component":{}}],["averageload",{"_index":3478,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["avg",{"_index":2622,"title":{},"name":{},"text":{"61":{}},"component":{}}],["avg(\"valu",{"_index":2644,"title":{},"name":{},"text":{"61":{}},"component":{}}],["avg(duration_min",{"_index":2674,"title":{},"name":{},"text":{"62":{}},"component":{}}],["avg(tip_amount",{"_index":1348,"title":{},"name":{},"text":{"23":{}},"component":{}}],["avg_duration_min",{"_index":2675,"title":{},"name":{},"text":{"62":{}},"component":{}}],["avg_measur",{"_index":2645,"title":{},"name":{},"text":{"61":{}},"component":{}}],["avoid",{"_index":1042,"title":{},"name":{},"text":{"15":{},"26":{},"30":{},"31":{},"38":{},"219":{},"226":{},"235":{},"301":{},"311":{},"319":{}},"component":{}}],["aw",{"_index":1963,"title":{},"name":{},"text":{"39":{},"69":{},"77":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["await",{"_index":1100,"title":{},"name":{},"text":{"15":{}},"component":{}}],["awar",{"_index":773,"title":{},"name":{},"text":{"11":{},"29":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["away",{"_index":1567,"title":{},"name":{},"text":{"30":{}},"component":{}}],["aws.region",{"_index":3729,"title":{},"name":{},"text":{"274":{},"275":{},"285":{},"293":{}},"component":{}}],["axi",{"_index":1349,"title":{},"name":{},"text":{"23":{}},"component":{}}],["azur",{"_index":1780,"title":{"36-7":{}},"name":{},"text":{},"component":{}}],["b",{"_index":2465,"title":{},"name":{},"text":{"60":{},"61":{},"259":{},"270":{}},"component":{}}],["b580dd55bc87",{"_index":2578,"title":{},"name":{},"text":{"61":{}},"component":{}}],["back",{"_index":558,"title":{},"name":{},"text":{"8":{},"23":{},"30":{},"102":{},"108":{},"113":{},"121":{},"152":{},"161":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["backend",{"_index":447,"title":{"47":{},"85-1":{},"94-1":{}},"name":{},"text":{"5":{},"10":{},"22":{},"30":{},"35":{},"39":{},"40":{},"44":{},"47":{},"63":{},"71":{},"84":{},"85":{},"86":{},"93":{},"94":{},"95":{},"102":{},"108":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"223":{},"229":{},"230":{},"238":{},"239":{},"258":{},"269":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["backoff",{"_index":2344,"title":{},"name":{},"text":{"52":{},"54":{}},"component":{}}],["backport",{"_index":1121,"title":{},"name":{},"text":{"16":{}},"component":{}}],["backup",{"_index":2233,"title":{},"name":{},"text":{"47":{}},"component":{}}],["bad",{"_index":1399,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{}},"component":{}}],["banzai",{"_index":1610,"title":{},"name":{},"text":{"31":{}},"component":{}}],["bare",{"_index":1523,"title":{},"name":{},"text":{"30":{}},"component":{}}],["barrier",{"_index":1389,"title":{},"name":{},"text":{"25":{}},"component":{}}],["base",{"_index":77,"title":{},"name":{},"text":{"1":{},"5":{},"7":{},"9":{},"11":{},"13":{},"14":{},"35":{},"41":{},"48":{},"51":{},"54":{},"58":{},"60":{},"61":{},"62":{},"68":{},"76":{},"85":{},"94":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"299":{},"309":{},"317":{},"330":{},"338":{},"346":{},"353":{},"363":{},"374":{},"379":{},"387":{},"422":{},"427":{},"431":{},"435":{},"442":{},"446":{}},"component":{}}],["base64",{"_index":184,"title":{},"name":{},"text":{"1":{},"280":{},"285":{},"293":{},"407":{},"415":{}},"component":{}}],["basenam",{"_index":4088,"title":{},"name":{},"text":{"422":{},"431":{},"442":{}},"component":{}}],["baseoper",{"_index":3111,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["basesensoroper",{"_index":3109,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["bash",{"_index":2284,"title":{"51-7":{}},"name":{},"text":{"51":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["bash_command='echo",{"_index":3009,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["bashoper",{"_index":2992,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["bashrc",{"_index":2323,"title":{},"name":{},"text":{"51":{}},"component":{}}],["basi",{"_index":1036,"title":{},"name":{},"text":{"15":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["basic",{"_index":1232,"title":{"44-9":{}},"name":{},"text":{"19":{},"44":{},"45":{},"285":{},"293":{},"427":{},"435":{},"446":{}},"component":{}}],["batch/v1",{"_index":3038,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["battl",{"_index":1547,"title":{},"name":{},"text":{"30":{}},"component":{}}],["bcrypt",{"_index":4003,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["be",{"_index":579,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"29":{},"32":{},"33":{},"34":{},"35":{},"39":{},"41":{},"274":{},"275":{},"282":{},"285":{},"290":{},"293":{},"356":{},"366":{}},"component":{}}],["becam",{"_index":1526,"title":{},"name":{},"text":{"30":{}},"component":{}}],["becom",{"_index":1416,"title":{},"name":{},"text":{"26":{},"27":{},"30":{},"38":{},"39":{},"48":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["befor",{"_index":957,"title":{"23-2":{}},"name":{},"text":{"13":{},"16":{},"27":{},"36":{},"37":{},"44":{},"62":{},"113":{},"121":{},"177":{},"186":{},"204":{},"214":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"415":{},"436":{},"447":{}},"component":{}}],["begin",{"_index":1301,"title":{"23-2":{}},"name":{},"text":{"204":{},"214":{}},"component":{}}],["behalf",{"_index":553,"title":{},"name":{},"text":{"8":{}},"component":{}}],["behav",{"_index":1607,"title":{},"name":{},"text":{"31":{},"34":{},"44":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["behavior",{"_index":1512,"title":{"36-4":{}},"name":{},"text":{"29":{},"31":{},"32":{},"36":{},"38":{}},"component":{}}],["behind",{"_index":1861,"title":{},"name":{},"text":{"36":{}},"component":{}}],["belong",{"_index":944,"title":{},"name":{},"text":{"13":{}},"component":{}}],["below",{"_index":223,"title":{},"name":{},"text":{"2":{},"5":{},"11":{},"13":{},"18":{},"22":{},"26":{},"28":{},"34":{},"40":{},"41":{},"44":{},"45":{},"46":{},"48":{},"50":{},"51":{},"52":{},"59":{},"61":{},"68":{},"76":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"196":{},"203":{},"213":{},"232":{},"241":{},"250":{},"258":{},"259":{},"269":{},"270":{},"280":{},"285":{},"293":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["benefit",{"_index":1542,"title":{"34-5":{},"49-2":{},"49-5":{},"49-8":{}},"name":{},"text":{"30":{},"39":{},"47":{},"49":{}},"component":{}}],["bernauer",{"_index":1884,"title":{},"name":{},"text":{"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["bernd",{"_index":1457,"title":{},"name":{},"text":{"28":{},"48":{}},"component":{}}],["bespok",{"_index":1776,"title":{},"name":{},"text":{"35":{}},"component":{}}],["best",{"_index":23,"title":{"15-1":{}},"name":{},"text":{"1":{},"2":{},"9":{},"13":{},"14":{},"26":{},"28":{},"31":{},"34":{},"40":{},"48":{},"102":{},"108":{},"113":{},"121":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["beta",{"_index":1801,"title":{},"name":{},"text":{"36":{}},"component":{}}],["better",{"_index":761,"title":{},"name":{},"text":{"11":{},"13":{},"26":{},"32":{},"34":{},"38":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["between",{"_index":560,"title":{"43-8":{}},"name":{},"text":{"8":{},"26":{},"30":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"63":{},"70":{},"71":{},"78":{},"84":{},"85":{},"93":{},"94":{},"102":{},"108":{},"113":{},"121":{},"219":{},"226":{},"235":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{}},"component":{}}],["bfee",{"_index":4135,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["big",{"_index":29,"title":{},"name":{},"text":{"1":{},"2":{},"32":{},"48":{},"62":{}},"component":{}}],["bigger",{"_index":459,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bigint",{"_index":2758,"title":{},"name":{},"text":{"62":{}},"component":{}}],["bin/zkcli.sh",{"_index":4123,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["binari",{"_index":1460,"title":{"34-8":{},"51-1":{}},"name":{},"text":{"28":{},"34":{},"36":{},"51":{}},"component":{}}],["binary/build.r",{"_index":1139,"title":{},"name":{},"text":{"16":{}},"component":{}}],["bind",{"_index":1901,"title":{},"name":{},"text":{"37":{},"63":{},"71":{},"113":{},"121":{},"285":{},"293":{},"331":{},"339":{},"347":{},"354":{},"364":{}},"component":{}}],["bindcredenti",{"_index":1903,"title":{},"name":{},"text":{"37":{},"63":{},"71":{},"285":{},"293":{}},"component":{}}],["bindcredentialssecret",{"_index":1900,"title":{},"name":{},"text":{"37":{}},"component":{}}],["bit",{"_index":1514,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["bitnami",{"_index":2928,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{},"131":{},"138":{},"145":{},"151":{},"160":{},"232":{},"241":{},"374":{},"380":{},"388":{}},"component":{}}],["bitnami/postgresql",{"_index":2929,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"238":{},"374":{},"380":{},"388":{}},"component":{}}],["bitnami/redi",{"_index":2934,"title":{},"name":{},"text":{"102":{},"108":{},"116":{},"124":{}},"component":{}}],["blank",{"_index":188,"title":{},"name":{},"text":{"1":{}},"component":{}}],["block",{"_index":3512,"title":{},"name":{},"text":{"193":{},"201":{},"211":{},"274":{},"275":{},"285":{},"293":{},"301":{},"311":{},"319":{}},"component":{}}],["blocksiz",{"_index":3579,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["blue",{"_index":2541,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"113":{},"121":{}},"component":{}}],["bob",{"_index":4000,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["bodi",{"_index":2637,"title":{},"name":{},"text":{"61":{}},"component":{}}],["body=self.application_fil",{"_index":3148,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["boiler",{"_index":1561,"title":{},"name":{},"text":{"30":{}},"component":{}}],["boilerpl",{"_index":2901,"title":{},"name":{},"text":{"87":{},"96":{}},"component":{}}],["bonu",{"_index":2712,"title":{},"name":{},"text":{"62":{}},"component":{}}],["bool",{"_index":2207,"title":{},"name":{},"text":{"45":{},"113":{},"121":{}},"component":{}}],["boostrap.config.properti",{"_index":3762,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["bootstrap",{"_index":103,"title":{},"name":{},"text":{"1":{}},"component":{}}],["bootstrap.conf",{"_index":3733,"title":{},"name":{},"text":{"276":{},"283":{},"285":{},"291":{},"293":{}},"component":{}}],["both",{"_index":130,"title":{},"name":{},"text":{"1":{},"10":{},"19":{},"23":{},"27":{},"41":{},"48":{},"61":{},"69":{},"77":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"176":{},"177":{},"185":{},"186":{},"204":{},"214":{},"396":{},"402":{},"407":{},"415":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["bottom",{"_index":1351,"title":{},"name":{},"text":{"23":{}},"component":{}}],["bound",{"_index":2857,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["box",{"_index":179,"title":{},"name":{},"text":{"1":{},"2":{},"113":{},"121":{}},"component":{}}],["branch",{"_index":345,"title":{},"name":{},"text":{"4":{},"16":{},"27":{},"36":{},"55":{}},"component":{}}],["break",{"_index":1591,"title":{},"name":{},"text":{"30":{},"31":{},"34":{},"39":{},"41":{},"44":{},"45":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["breed",{"_index":258,"title":{},"name":{},"text":{"2":{}},"component":{}}],["brief",{"_index":88,"title":{},"name":{},"text":{"1":{}},"component":{}}],["bring",{"_index":383,"title":{},"name":{},"text":{"5":{}},"component":{}}],["broad",{"_index":1755,"title":{},"name":{},"text":{"35":{}},"component":{}}],["broken",{"_index":4054,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["broker",{"_index":2448,"title":{"243-5":{},"244-11":{},"252-5":{},"253-11":{},"263-5":{},"264-11":{}},"name":{},"text":{"60":{},"61":{},"67":{},"75":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{}},"component":{}}],["brows",{"_index":162,"title":{"52-3":{},"54-1":{},"55-1":{},"56-1":{},"58-1":{}},"name":{},"text":{"1":{},"60":{},"61":{},"62":{}},"component":{}}],["browser",{"_index":2507,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"69":{},"77":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"374":{},"380":{},"388":{},"408":{},"416":{}},"component":{}}],["bucket",{"_index":420,"title":{"39":{},"39-8":{},"39-12":{},"332-8":{},"340-8":{},"348-8":{},"355-7":{},"365-7":{},"396-3":{},"402-3":{},"407-3":{},"415-3":{}},"name":{},"text":{"5":{},"10":{},"22":{},"23":{},"39":{},"45":{},"46":{},"52":{},"54":{},"60":{},"61":{},"62":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"232":{},"238":{},"241":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["bucket.connect",{"_index":1987,"title":{},"name":{},"text":{"39":{}},"component":{}}],["bucket/spark",{"_index":3892,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["bucket_host",{"_index":2003,"title":{},"name":{},"text":{"39":{}},"component":{}}],["bucket_nam",{"_index":1980,"title":{},"name":{},"text":{"39":{}},"component":{}}],["bucket_port",{"_index":2011,"title":{},"name":{},"text":{"39":{}},"component":{}}],["bucket_region",{"_index":2013,"title":{},"name":{},"text":{"39":{}},"component":{}}],["bucket_subregion",{"_index":2014,"title":{},"name":{},"text":{"39":{}},"component":{}}],["bucketnam",{"_index":713,"title":{},"name":{},"text":{"10":{},"22":{},"39":{},"45":{},"131":{},"138":{},"145":{},"151":{},"160":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["buckets[0].name=hive,buckets[0].policy=non",{"_index":3654,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["bug",{"_index":403,"title":{},"name":{},"text":{"5":{},"13":{},"426":{},"434":{},"445":{}},"component":{}}],["build",{"_index":51,"title":{"79":{},"88":{},"51-5":{},"66-2":{},"74-2":{},"83-2":{},"92-2":{},"101-3":{},"107-3":{},"130-3":{},"137-3":{},"144-3":{},"169-3":{},"195-2":{},"222-3":{},"249-3":{},"279-3":{},"313-3":{},"329-2":{},"337-2":{},"345-2":{},"373-3":{},"395-3":{},"401-3":{},"425-3":{}},"name":{"79":{},"88":{}},"text":{"1":{},"2":{},"13":{},"15":{},"16":{},"23":{},"31":{},"36":{},"41":{},"49":{},"51":{},"60":{},"61":{},"62":{},"66":{},"74":{},"79":{},"83":{},"88":{},"92":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"195":{},"222":{},"249":{},"279":{},"286":{},"294":{},"313":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"356":{},"363":{},"366":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["build_product_images.pi",{"_index":1151,"title":{},"name":{},"text":{"16":{}},"component":{}}],["builder",{"_index":1082,"title":{"297-3":{},"298-4":{},"301-2":{},"307-3":{},"308-4":{},"311-2":{},"315-3":{},"316-4":{},"319-2":{}},"name":{},"text":{"15":{}},"component":{}}],["built",{"_index":84,"title":{},"name":{},"text":{"1":{},"16":{},"17":{},"30":{},"41":{},"50":{},"55":{},"79":{},"88":{},"330":{},"338":{},"346":{},"353":{},"358":{},"363":{},"368":{}},"component":{}}],["bulk",{"_index":1995,"title":{},"name":{},"text":{"39":{},"61":{}},"component":{}}],["bump",{"_index":371,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bunch",{"_index":2160,"title":{},"name":{},"text":{"44":{}},"component":{}}],["bundl",{"_index":259,"title":{"297-3":{},"298-4":{},"301-2":{},"303-1":{},"307-3":{},"308-4":{},"311-2":{},"314-1":{},"315-3":{},"316-4":{},"319-2":{},"321-1":{}},"name":{},"text":{"2":{},"7":{},"14":{},"44":{},"50":{},"55":{},"56":{},"60":{},"61":{},"62":{},"127":{},"134":{},"141":{},"148":{},"157":{},"166":{},"173":{},"176":{},"182":{},"185":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{},"299":{},"301":{},"303":{},"304":{},"309":{},"311":{},"314":{},"317":{},"319":{},"321":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"396":{},"402":{},"407":{},"415":{},"422":{},"431":{},"442":{}},"component":{}}],["bundle.tar.gz",{"_index":1005,"title":{},"name":{},"text":{"14":{},"301":{},"311":{},"319":{}},"component":{}}],["burden",{"_index":1750,"title":{},"name":{},"text":{"35":{}},"component":{}}],["busi",{"_index":2668,"title":{},"name":{},"text":{"62":{}},"component":{}}],["button",{"_index":2542,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"113":{},"121":{},"408":{},"416":{}},"component":{}}],["buy",{"_index":1977,"title":{},"name":{},"text":{"39":{}},"component":{}}],["bypass",{"_index":1944,"title":{},"name":{},"text":{"38":{}},"component":{}}],["byte",{"_index":2624,"title":{},"name":{},"text":{"61":{},"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["c",{"_index":354,"title":{},"name":{},"text":{"4":{},"51":{},"60":{},"61":{},"102":{},"108":{},"113":{},"121":{},"259":{},"270":{}},"component":{}}],["c\".to_str",{"_index":1086,"title":{},"name":{},"text":{"15":{}},"component":{}}],["c)%n",{"_index":3686,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["ca",{"_index":1976,"title":{},"name":{},"text":{"39":{},"40":{},"63":{},"69":{},"71":{},"77":{},"85":{},"86":{},"94":{},"95":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["ca.crt",{"_index":2039,"title":{},"name":{},"text":{"40":{},"69":{},"77":{},"85":{},"94":{},"407":{},"415":{}},"component":{}}],["ca.key",{"_index":2877,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["cacert",{"_index":1975,"title":{},"name":{},"text":{"39":{},"40":{},"63":{},"69":{},"71":{},"77":{},"407":{},"415":{}},"component":{}}],["cach",{"_index":672,"title":{},"name":{},"text":{"9":{},"14":{},"32":{},"250":{},"258":{},"269":{}},"component":{}}],["cadenc",{"_index":1875,"title":{},"name":{},"text":{"36":{}},"component":{}}],["calcul",{"_index":3081,"title":{},"name":{},"text":{"113":{},"121":{},"356":{},"366":{}},"component":{}}],["call",{"_index":470,"title":{},"name":{},"text":{"7":{},"9":{},"14":{},"15":{},"32":{},"34":{},"48":{},"51":{},"60":{},"61":{},"62":{},"113":{},"114":{},"115":{},"121":{},"122":{},"123":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"176":{},"177":{},"185":{},"186":{},"204":{},"214":{},"223":{},"229":{},"238":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"304":{},"322":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"380":{},"387":{},"388":{},"436":{},"447":{}},"component":{}}],["callout",{"_index":3445,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["came",{"_index":1463,"title":{},"name":{},"text":{"28":{}},"component":{}}],["camelcas",{"_index":1025,"title":{},"name":{},"text":{"14":{}},"component":{}}],["campaign",{"_index":2175,"title":{},"name":{},"text":{"44":{}},"component":{}}],["candid",{"_index":1395,"title":{},"name":{},"text":{"25":{},"32":{}},"component":{}}],["canva",{"_index":189,"title":{},"name":{},"text":{"1":{}},"component":{}}],["can’t",{"_index":2135,"title":{},"name":{},"text":{"42":{}},"component":{}}],["capabl",{"_index":970,"title":{},"name":{},"text":{"13":{}},"component":{}}],["capac",{"_index":566,"title":{},"name":{},"text":{"8":{},"9":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["capit",{"_index":1206,"title":{},"name":{},"text":{"17":{}},"component":{}}],["car",{"_index":3806,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["card",{"_index":2726,"title":{},"name":{},"text":{"62":{}},"component":{}}],["care",{"_index":70,"title":{},"name":{},"text":{"1":{},"7":{},"23":{},"39":{},"45":{},"374":{},"379":{},"387":{}},"component":{}}],["cargo",{"_index":358,"title":{},"name":{},"text":{"4":{},"16":{},"51":{},"66":{},"74":{},"79":{},"88":{},"130":{},"137":{},"144":{},"195":{},"222":{},"249":{},"279":{},"313":{},"329":{},"337":{},"345":{},"373":{},"391":{},"392":{},"393":{},"395":{},"397":{},"398":{},"399":{},"401":{},"403":{},"404":{},"405":{},"411":{},"412":{},"413":{},"419":{},"421":{},"423":{},"425":{},"428":{},"430":{},"432":{},"439":{},"441":{},"443":{}},"component":{}}],["cargo.lock",{"_index":2831,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["cargo.toml",{"_index":347,"title":{},"name":{},"text":{"4":{}},"component":{}}],["carri",{"_index":3444,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["case",{"_index":151,"title":{"40-6":{}},"name":{},"text":{"1":{},"7":{},"11":{},"13":{},"16":{},"17":{},"19":{},"30":{},"31":{},"35":{},"38":{},"39":{},"40":{},"41":{},"42":{},"49":{},"55":{},"57":{},"60":{},"61":{},"62":{},"63":{},"68":{},"71":{},"76":{},"114":{},"116":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"160":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"219":{},"223":{},"226":{},"229":{},"235":{},"238":{},"250":{},"258":{},"269":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"356":{},"358":{},"363":{},"365":{},"366":{},"368":{},"374":{},"379":{},"387":{},"407":{},"415":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["cash",{"_index":2766,"title":{},"name":{},"text":{"62":{}},"component":{}}],["cat",{"_index":1314,"title":{},"name":{},"text":{"23":{},"196":{},"203":{},"213":{},"250":{},"259":{},"270":{},"280":{},"285":{},"293":{},"332":{},"340":{},"348":{}},"component":{}}],["catalog",{"_index":2117,"title":{"42":{},"43":{},"43-6":{},"43-7":{},"43-8":{},"43-9":{}},"name":{},"text":{"42":{},"43":{},"46":{},"408":{},"416":{}},"component":{}}],["cataloglabelselector",{"_index":4056,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["catchup=fals",{"_index":2998,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["categori",{"_index":2869,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["caus",{"_index":1444,"title":{},"name":{},"text":{"27":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["caveat",{"_index":1970,"title":{},"name":{},"text":{"39":{}},"component":{}}],["celeryexecutor",{"_index":2963,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["center",{"_index":407,"title":{},"name":{},"text":{"5":{}},"component":{}}],["central",{"_index":305,"title":{},"name":{},"text":{"2":{},"29":{},"30":{},"37":{},"41":{},"48":{},"49":{}},"component":{}}],["ceph",{"_index":1964,"title":{},"name":{},"text":{"39":{}},"component":{}}],["cert",{"_index":1752,"title":{},"name":{},"text":{"35":{},"40":{},"63":{},"69":{},"71":{},"77":{}},"component":{}}],["certain",{"_index":1111,"title":{},"name":{},"text":{"15":{},"68":{},"76":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"280":{},"285":{},"293":{},"374":{},"379":{},"387":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["certif",{"_index":1322,"title":{},"name":{},"text":{"23":{},"30":{},"35":{},"62":{},"69":{},"77":{},"84":{},"85":{},"86":{},"93":{},"94":{},"95":{},"258":{},"269":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["certificate’",{"_index":2858,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["certsecretclass",{"_index":2028,"title":{},"name":{},"text":{"40":{},"69":{},"77":{}},"component":{}}],["cest",{"_index":2411,"title":{},"name":{},"text":{"55":{},"56":{},"60":{},"61":{}},"component":{}}],["cf",{"_index":3485,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["chain",{"_index":1316,"title":{},"name":{},"text":{"23":{},"85":{},"94":{},"113":{},"121":{},"301":{},"311":{},"319":{}},"component":{}}],["chanc",{"_index":2264,"title":{},"name":{},"text":{"49":{}},"component":{}}],["chang",{"_index":922,"title":{"27":{},"16-2":{},"16-3":{},"16-4":{},"16-5":{},"16-6":{}},"name":{},"text":{"12":{},"13":{},"16":{},"26":{},"27":{},"29":{},"30":{},"33":{},"34":{},"38":{},"39":{},"41":{},"44":{},"46":{},"47":{},"60":{},"61":{},"68":{},"76":{},"79":{},"88":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"245":{},"250":{},"254":{},"258":{},"265":{},"269":{},"280":{},"285":{},"293":{},"426":{},"434":{},"445":{}},"component":{}}],["changelog",{"_index":349,"title":{},"name":{},"text":{"4":{},"16":{}},"component":{}}],["changelog.md",{"_index":357,"title":{},"name":{},"text":{"4":{}},"component":{}}],["channel",{"_index":1833,"title":{},"name":{},"text":{"36":{},"152":{},"161":{}},"component":{}}],["chapter",{"_index":2193,"title":{},"name":{},"text":{"45":{}},"component":{}}],["charg",{"_index":2767,"title":{},"name":{},"text":{"62":{}},"component":{}}],["chart",{"_index":363,"title":{"53-2":{},"60-8":{},"61-10":{}},"name":{},"text":{"4":{},"13":{},"16":{},"19":{},"23":{},"44":{},"60":{},"61":{},"62":{},"79":{},"88":{},"131":{},"138":{},"145":{},"151":{},"160":{},"195":{},"232":{},"241":{},"329":{},"337":{},"345":{},"358":{},"368":{},"374":{},"380":{},"388":{}},"component":{}}],["cheap",{"_index":2736,"title":{},"name":{},"text":{"62":{}},"component":{}}],["check",{"_index":958,"title":{},"name":{},"text":{"13":{},"16":{},"23":{},"35":{},"37":{},"45":{},"55":{},"69":{},"77":{},"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"259":{},"270":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["checklist",{"_index":1186,"title":{},"name":{},"text":{"16":{}},"component":{}}],["childrennum",{"_index":3581,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["chile\",\"type\":\"earthquake\",\"horizontalerror\":null,\"deptherror\":25.0,\"magerror\":0.2,\"magnst\":null,\"status\":\"reviewed\",\"locationsource\":\"iscgem\",\"magsource\":\"iscgem",{"_index":2493,"title":{},"name":{},"text":{"60":{}},"component":{}}],["chmod",{"_index":330,"title":{},"name":{},"text":{"3":{},"51":{},"102":{},"108":{},"113":{},"121":{},"408":{},"416":{}},"component":{}}],["choic",{"_index":1190,"title":{},"name":{},"text":{"16":{},"25":{},"44":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["choos",{"_index":1611,"title":{"48":{}},"name":{},"text":{"31":{},"61":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"410":{},"418":{}},"component":{}}],["choose_agent_programming_languag",{"_index":1456,"title":{},"name":{"28":{}},"text":{},"component":{}}],["choose_authorization_engin",{"_index":2241,"title":{},"name":{"48":{}},"text":{},"component":{}}],["choose_orchestrator_storage_backend",{"_index":2225,"title":{},"name":{"47":{}},"text":{},"component":{}}],["choose_project_languag",{"_index":1369,"title":{},"name":{"25":{}},"text":{},"component":{}}],["choose_repository_structur",{"_index":1402,"title":{},"name":{"26":{}},"text":{},"component":{}}],["choose_review_mechan",{"_index":1434,"title":{},"name":{"27":{}},"text":{},"component":{}}],["chose",{"_index":2085,"title":{},"name":{},"text":{"41":{}},"component":{}}],["chosen",{"_index":500,"title":{},"name":{},"text":{"7":{},"8":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{},"52":{},"61":{},"285":{},"293":{}},"component":{}}],["chown",{"_index":3048,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["chroot",{"_index":3722,"title":{},"name":{},"text":{"274":{},"275":{},"282":{},"290":{}},"component":{}}],["ci",{"_index":1405,"title":{},"name":{},"text":{"26":{},"41":{}},"component":{}}],["ci/cd",{"_index":480,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["citi",{"_index":2655,"title":{},"name":{},"text":{"62":{}},"component":{}}],["citynam",{"_index":3376,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["claim",{"_index":573,"title":{"39-12":{}},"name":{},"text":{"8":{},"39":{},"85":{},"94":{},"113":{},"121":{},"280":{},"285":{},"293":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["claimnam",{"_index":3040,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["clap_complet",{"_index":2317,"title":{},"name":{},"text":{"51":{}},"component":{}}],["clarifi",{"_index":734,"title":{},"name":{},"text":{"10":{}},"component":{}}],["clariti",{"_index":2384,"title":{},"name":{},"text":{"55":{}},"component":{}}],["class",{"_index":576,"title":{},"name":{},"text":{"8":{},"10":{},"22":{},"113":{},"121":{},"145":{},"151":{},"160":{},"176":{},"185":{},"223":{},"229":{},"230":{},"238":{},"239":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{},"434":{},"445":{}},"component":{}}],["class.yaml",{"_index":3632,"title":{},"name":{},"text":{"230":{},"239":{}},"component":{}}],["classpath",{"_index":3436,"title":{},"name":{},"text":{"176":{},"185":{},"358":{},"368":{}},"component":{}}],["clean",{"_index":111,"title":{"408-5":{},"416-5":{}},"name":{},"text":{"1":{},"27":{},"204":{},"214":{},"259":{},"270":{},"356":{},"366":{}},"component":{}}],["cleaner",{"_index":1041,"title":{},"name":{},"text":{"15":{},"27":{},"45":{}},"component":{}}],["cleanup",{"_index":1489,"title":{},"name":{},"text":{"29":{}},"component":{}}],["clear",{"_index":609,"title":{},"name":{},"text":{"8":{},"17":{},"30":{},"113":{},"121":{}},"component":{}}],["clearli",{"_index":1230,"title":{},"name":{},"text":{"17":{},"38":{},"62":{}},"component":{}}],["cli",{"_index":1040,"title":{"62-12":{},"408-3":{},"416-3":{}},"name":{},"text":{"15":{},"33":{},"44":{},"49":{},"396":{},"402":{},"407":{},"408":{},"409":{},"415":{},"416":{},"417":{}},"component":{}}],["cli#kubernet",{"_index":1826,"title":{},"name":{},"text":{"36":{}},"component":{}}],["cli/trino",{"_index":4067,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["click",{"_index":2508,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{}},"component":{}}],["client",{"_index":654,"title":{"40-8":{}},"name":{},"text":{"9":{},"11":{},"15":{},"16":{},"30":{},"40":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"69":{},"77":{},"113":{},"121":{},"127":{},"134":{},"141":{},"148":{},"157":{},"166":{},"173":{},"176":{},"182":{},"185":{},"191":{},"199":{},"204":{},"209":{},"214":{},"219":{},"226":{},"230":{},"235":{},"239":{},"246":{},"255":{},"258":{},"266":{},"269":{},"299":{},"309":{},"317":{},"332":{},"340":{},"348":{},"355":{},"358":{},"365":{},"368":{},"407":{},"408":{},"415":{},"416":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"442":{},"445":{},"446":{}},"component":{}}],["client.portunification=tru",{"_index":4096,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["client.rest.apiexcept",{"_index":3184,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["client::client",{"_index":1092,"title":{},"name":{},"text":{"15":{}},"component":{}}],["clientauthent",{"_index":2040,"title":{},"name":{},"text":{"40":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["clientcertsecretclass",{"_index":2043,"title":{},"name":{},"text":{"40":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["clientport",{"_index":4095,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["clippi",{"_index":1126,"title":{},"name":{},"text":{"16":{}},"component":{}}],["clone",{"_index":1119,"title":{},"name":{},"text":{"16":{},"26":{},"51":{},"66":{},"74":{}},"component":{}}],["close",{"_index":956,"title":{},"name":{},"text":{"13":{},"16":{},"30":{}},"component":{}}],["cloud",{"_index":72,"title":{},"name":{},"text":{"1":{},"5":{},"12":{},"23":{}},"component":{}}],["cloudera",{"_index":2253,"title":{},"name":{},"text":{"48":{}},"component":{}}],["cluster",{"_index":18,"title":{"1-15":{},"23-18":{},"23-25":{},"36-5":{},"43-6":{},"43-7":{},"43-8":{},"43-9":{},"52-5":{},"52-6":{},"54-3":{},"54-4":{},"58-3":{},"58-4":{},"102-3":{},"108-3":{},"113-19":{},"113-20":{},"121-19":{},"121-20":{},"131-5":{},"138-5":{},"145-5":{},"151-5":{},"160-5":{},"170-2":{},"176-2":{},"185-2":{},"374-12":{},"379-7":{},"387-7":{},"408-3":{},"416-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"15":{},"16":{},"17":{},"19":{},"23":{},"30":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"48":{},"50":{},"52":{},"54":{},"55":{},"56":{},"58":{},"68":{},"76":{},"79":{},"85":{},"88":{},"94":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"114":{},"115":{},"116":{},"120":{},"121":{},"122":{},"123":{},"124":{},"127":{},"129":{},"131":{},"134":{},"136":{},"138":{},"141":{},"143":{},"145":{},"148":{},"150":{},"151":{},"152":{},"153":{},"154":{},"157":{},"159":{},"160":{},"161":{},"162":{},"163":{},"166":{},"168":{},"170":{},"173":{},"175":{},"176":{},"177":{},"178":{},"179":{},"182":{},"184":{},"185":{},"186":{},"187":{},"188":{},"191":{},"193":{},"194":{},"195":{},"196":{},"199":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"209":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"219":{},"223":{},"226":{},"229":{},"230":{},"231":{},"232":{},"235":{},"238":{},"239":{},"240":{},"241":{},"243":{},"244":{},"246":{},"248":{},"250":{},"252":{},"253":{},"255":{},"257":{},"258":{},"259":{},"260":{},"261":{},"263":{},"264":{},"266":{},"268":{},"269":{},"270":{},"271":{},"272":{},"274":{},"275":{},"278":{},"280":{},"282":{},"284":{},"285":{},"286":{},"287":{},"288":{},"290":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"299":{},"300":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"314":{},"315":{},"316":{},"317":{},"318":{},"321":{},"322":{},"323":{},"324":{},"328":{},"330":{},"331":{},"332":{},"336":{},"338":{},"339":{},"340":{},"344":{},"346":{},"347":{},"348":{},"352":{},"353":{},"354":{},"355":{},"356":{},"357":{},"358":{},"362":{},"363":{},"364":{},"365":{},"366":{},"367":{},"368":{},"372":{},"374":{},"378":{},"379":{},"380":{},"381":{},"382":{},"386":{},"387":{},"388":{},"389":{},"390":{},"394":{},"396":{},"400":{},"402":{},"406":{},"407":{},"408":{},"409":{},"410":{},"414":{},"415":{},"416":{},"417":{},"418":{},"420":{},"421":{},"422":{},"426":{},"427":{},"429":{},"430":{},"431":{},"434":{},"435":{},"436":{},"437":{},"438":{},"440":{},"441":{},"442":{},"445":{},"446":{},"447":{},"448":{},"449":{}},"component":{}}],["cluster.pi",{"_index":336,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cluster.yaml",{"_index":4011,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["clusterip",{"_index":1001,"title":{},"name":{},"text":{"14":{},"15":{},"193":{},"201":{},"211":{}},"component":{}}],["clustermod",{"_index":3884,"title":{},"name":{},"text":{"332":{},"340":{},"348":{}},"component":{}}],["clusternam",{"_index":1002,"title":{},"name":{},"text":{"14":{},"166":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{}},"component":{}}],["clusterref",{"_index":3321,"title":{},"name":{},"text":{"152":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"259":{},"269":{},"270":{},"280":{},"285":{},"286":{},"293":{},"294":{},"426":{},"427":{},"434":{},"435":{},"436":{},"445":{},"446":{},"447":{}},"component":{}}],["clusterrol",{"_index":3072,"title":{"297-3":{},"298-4":{},"307-3":{},"308-4":{},"315-3":{},"316-4":{}},"name":{},"text":{"113":{},"121":{},"297":{},"298":{},"307":{},"308":{},"315":{},"316":{},"354":{},"364":{}},"component":{}}],["clusterrolebind",{"_index":3076,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["cluster’",{"_index":2870,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["clutter",{"_index":1452,"title":{},"name":{},"text":{"27":{}},"component":{}}],["cm",{"_index":1052,"title":{},"name":{},"text":{"15":{},"102":{},"108":{},"113":{},"121":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["cn=admin,dc=example,dc=org",{"_index":2782,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["cn=integrationtest,ou=users,dc=example,dc=org",{"_index":3756,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["cnab",{"_index":2150,"title":{},"name":{},"text":{"44":{}},"component":{}}],["cni",{"_index":2339,"title":{},"name":{},"text":{"52":{},"54":{},"55":{},"56":{},"58":{}},"component":{}}],["co",{"_index":1863,"title":{},"name":{},"text":{"36":{},"45":{}},"component":{}}],["coast",{"_index":2491,"title":{},"name":{},"text":{"60":{}},"component":{}}],["code",{"_index":252,"title":{"113-21":{},"121-21":{}},"name":{},"text":{"2":{},"7":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"26":{},"27":{},"28":{},"30":{},"38":{},"41":{},"42":{},"48":{},"51":{},"113":{},"121":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"356":{},"363":{},"366":{}},"component":{}}],["codebas",{"_index":1809,"title":{},"name":{},"text":{"36":{}},"component":{}}],["codelldb",{"_index":985,"title":{},"name":{},"text":{"13":{}},"component":{}}],["coin",{"_index":1436,"title":{},"name":{},"text":{"27":{}},"component":{}}],["col",{"_index":1346,"title":{},"name":{},"text":{"23":{}},"component":{}}],["collaps",{"_index":3352,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["colleagu",{"_index":2266,"title":{},"name":{},"text":{"49":{}},"component":{}}],["collect",{"_index":612,"title":{},"name":{},"text":{"8":{},"28":{},"45":{},"50":{},"58":{}},"component":{}}],["collector",{"_index":1467,"title":{},"name":{},"text":{"28":{}},"component":{}}],["coloc",{"_index":3802,"title":{},"name":{},"text":{"301":{},"311":{},"319":{}},"component":{}}],["color",{"_index":2636,"title":{},"name":{},"text":{"61":{}},"component":{}}],["column",{"_index":530,"title":{},"name":{},"text":{"7":{},"14":{},"23":{},"62":{},"114":{},"122":{},"152":{},"161":{},"177":{},"186":{}},"component":{}}],["com.example:oth",{"_index":3874,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["com.example:som",{"_index":3871,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["combin",{"_index":527,"title":{},"name":{},"text":{"7":{},"14":{},"15":{},"41":{},"61":{},"79":{},"88":{},"329":{},"337":{},"345":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["come",{"_index":885,"title":{},"name":{},"text":{"12":{},"13":{},"26":{},"36":{},"42":{},"48":{},"86":{},"95":{},"102":{},"108":{},"113":{},"121":{},"176":{},"185":{}},"component":{}}],["comma",{"_index":2902,"title":{},"name":{},"text":{"87":{},"96":{},"422":{},"431":{},"442":{}},"component":{}}],["command",{"_index":149,"title":{"33":{},"64-1":{},"72-1":{},"81-1":{},"90-1":{},"98-1":{},"104-1":{},"110-1":{},"118-1":{},"126-1":{},"133-1":{},"140-1":{},"147-1":{},"156-1":{},"165-1":{},"172-1":{},"181-1":{},"190-1":{},"198-1":{},"208-1":{},"218-1":{},"225-1":{},"234-1":{},"244-1":{},"253-1":{},"264-1":{},"275-1":{},"281-1":{},"282-1":{},"289-1":{},"290-1":{},"298-1":{},"308-1":{},"316-1":{},"326-1":{},"334-1":{},"342-1":{},"350-1":{},"360-1":{},"369-1":{},"376-1":{},"384-1":{},"392-1":{},"398-1":{},"404-1":{},"412-1":{},"421-1":{},"430-1":{},"441-1":{}},"name":{},"text":{"1":{},"3":{},"15":{},"16":{},"17":{},"30":{},"32":{},"33":{},"38":{},"46":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{},"72":{},"74":{},"79":{},"81":{},"88":{},"90":{},"98":{},"101":{},"102":{},"104":{},"107":{},"108":{},"110":{},"113":{},"114":{},"116":{},"118":{},"121":{},"122":{},"124":{},"126":{},"130":{},"133":{},"137":{},"140":{},"144":{},"147":{},"152":{},"154":{},"156":{},"161":{},"163":{},"165":{},"169":{},"172":{},"176":{},"177":{},"179":{},"181":{},"185":{},"186":{},"188":{},"190":{},"198":{},"204":{},"206":{},"208":{},"214":{},"216":{},"218":{},"222":{},"225":{},"232":{},"234":{},"241":{},"244":{},"249":{},"253":{},"259":{},"261":{},"264":{},"270":{},"272":{},"275":{},"279":{},"280":{},"281":{},"282":{},"285":{},"286":{},"288":{},"289":{},"290":{},"293":{},"294":{},"296":{},"298":{},"304":{},"306":{},"308":{},"313":{},"316":{},"322":{},"324":{},"326":{},"334":{},"342":{},"350":{},"356":{},"358":{},"360":{},"366":{},"368":{},"369":{},"373":{},"374":{},"376":{},"380":{},"382":{},"384":{},"388":{},"390":{},"392":{},"395":{},"398":{},"401":{},"404":{},"410":{},"412":{},"418":{},"421":{},"425":{},"426":{},"430":{},"434":{},"436":{},"438":{},"441":{},"445":{},"447":{},"449":{}},"component":{}}],["command(vec![\"/bin/bash\".to_str",{"_index":1085,"title":{},"name":{},"text":{"15":{}},"component":{}}],["command_pattern",{"_index":1652,"title":{},"name":{"33":{}},"text":{},"component":{}}],["commandlin",{"_index":385,"title":{},"name":{},"text":{"5":{},"152":{},"161":{},"178":{},"187":{}},"component":{}}],["commandline_arg",{"_index":2853,"title":{},"name":{"80":{},"89":{},"97":{},"103":{},"109":{},"117":{},"125":{},"132":{},"139":{},"146":{},"155":{},"164":{},"171":{},"180":{},"189":{},"197":{},"207":{},"217":{},"224":{},"233":{},"242":{},"251":{},"262":{},"273":{},"281":{},"289":{},"297":{},"307":{},"315":{},"325":{},"333":{},"341":{},"349":{},"359":{},"370":{},"375":{},"383":{},"391":{},"397":{},"403":{},"411":{},"419":{},"428":{},"439":{}},"text":{},"component":{}}],["comment",{"_index":1132,"title":{},"name":{},"text":{"16":{},"25":{},"152":{},"161":{}},"component":{}}],["commentlength",{"_index":3370,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["commit",{"_index":364,"title":{"27-8":{},"27-9":{}},"name":{},"text":{"4":{},"26":{},"27":{},"41":{}},"component":{}}],["committ",{"_index":1450,"title":{},"name":{},"text":{"27":{}},"component":{}}],["common",{"_index":388,"title":{"65":{},"73":{},"243-3":{},"244-9":{},"252-3":{},"253-9":{},"263-3":{},"264-9":{}},"name":{},"text":{"5":{},"9":{},"11":{},"12":{},"16":{},"18":{},"21":{},"31":{},"34":{},"37":{},"39":{},"40":{},"52":{},"54":{},"55":{},"56":{},"58":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"85":{},"94":{},"113":{},"116":{},"121":{},"124":{},"131":{},"138":{},"145":{},"151":{},"154":{},"160":{},"163":{},"179":{},"188":{},"206":{},"216":{},"230":{},"232":{},"239":{},"241":{},"243":{},"244":{},"252":{},"253":{},"258":{},"261":{},"263":{},"264":{},"269":{},"272":{},"288":{},"296":{},"332":{},"340":{},"348":{},"355":{},"358":{},"365":{},"368":{},"373":{},"382":{},"390":{},"407":{},"408":{},"410":{},"415":{},"416":{},"418":{},"426":{},"434":{},"438":{},"445":{},"449":{}},"component":{"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{}}}],["commonli",{"_index":2795,"title":{},"name":{},"text":{"67":{},"70":{},"75":{},"78":{}},"component":{}}],["commons=0.2.0",{"_index":2406,"title":{},"name":{},"text":{"55":{}},"component":{}}],["commons=0.3.0",{"_index":3259,"title":{},"name":{},"text":{"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["commun",{"_index":397,"title":{},"name":{},"text":{"5":{},"9":{},"17":{},"19":{},"25":{},"30":{},"35":{},"36":{},"40":{},"193":{},"201":{},"211":{},"258":{},"269":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["community.github.io/helm",{"_index":1235,"title":{},"name":{},"text":{"19":{}},"component":{}}],["community/kub",{"_index":1236,"title":{},"name":{},"text":{"19":{}},"component":{}}],["compact",{"_index":2204,"title":{},"name":{},"text":{"45":{}},"component":{}}],["compani",{"_index":292,"title":{},"name":{},"text":{"2":{},"34":{},"43":{},"49":{}},"component":{}}],["compar",{"_index":1967,"title":{},"name":{},"text":{"39":{},"41":{},"43":{},"67":{},"75":{},"427":{},"435":{},"446":{}},"component":{}}],["comparison",{"_index":2254,"title":{},"name":{},"text":{"48":{}},"component":{}}],["compat",{"_index":1556,"title":{},"name":{},"text":{"30":{},"31":{},"36":{},"39":{},"41":{},"60":{},"61":{},"62":{},"223":{},"229":{},"238":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["compatibl",{"_index":580,"title":{},"name":{},"text":{"8":{}},"component":{}}],["compen",{"_index":1934,"title":{},"name":{},"text":{"38":{}},"component":{}}],["competit",{"_index":1624,"title":{},"name":{},"text":{"32":{}},"component":{}}],["compil",{"_index":1123,"title":{"51-1":{}},"name":{},"text":{"16":{},"28":{},"36":{},"51":{},"79":{},"88":{},"195":{}},"component":{}}],["complet",{"_index":1300,"title":{"51-6":{}},"name":{},"text":{"22":{},"24":{},"29":{},"33":{},"36":{},"37":{},"38":{},"41":{},"45":{},"47":{},"51":{},"52":{},"54":{},"114":{},"122":{},"274":{},"275":{},"282":{},"290":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{},"436":{},"447":{}},"component":{}}],["complex",{"_index":472,"title":{},"name":{},"text":{"7":{},"14":{},"29":{},"30":{},"38":{},"39":{},"42":{},"45":{},"48":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["complianc",{"_index":3098,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["compliant",{"_index":2177,"title":{},"name":{},"text":{"44":{}},"component":{}}],["complic",{"_index":1593,"title":{},"name":{},"text":{"30":{},"40":{},"42":{},"43":{}},"component":{}}],["compon",{"_index":194,"title":{"30":{},"34":{},"2-3":{},"34-8":{},"34-10":{},"329-3":{},"337-3":{},"345-3":{}},"name":{},"text":{"2":{},"5":{},"8":{},"12":{},"17":{},"26":{},"30":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"41":{},"45":{},"46":{},"48":{},"52":{},"54":{},"58":{},"67":{},"75":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"176":{},"177":{},"185":{},"186":{},"204":{},"214":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{},"373":{},"395":{},"401":{}},"component":{}}],["compos",{"_index":1933,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["comprehens",{"_index":1187,"title":{},"name":{},"text":{"16":{}},"component":{}}],["compris",{"_index":239,"title":{},"name":{},"text":{"2":{}},"component":{}}],["compromis",{"_index":2250,"title":{},"name":{},"text":{"48":{}},"component":{}}],["comput",{"_index":2628,"title":{},"name":{},"text":{"61":{}},"component":{}}],["con",{"_index":1365,"title":{"25-7":{},"26-7":{},"27-7":{},"28-7":{},"29-7":{},"30-7":{},"31-7":{},"35-5":{},"37-5":{},"38-6":{},"39-5":{},"40-5":{},"41-16":{},"42-5":{},"43-5":{},"44-7":{},"48-7":{}},"name":{},"text":{"47":{}},"component":{}}],["concat",{"_index":3629,"title":{},"name":{},"text":{"230":{},"239":{}},"component":{}}],["concept",{"_index":425,"title":{"6":{}},"name":{},"text":{"5":{},"10":{},"15":{},"22":{},"30":{},"38":{},"40":{},"48":{},"70":{},"78":{},"84":{},"93":{},"374":{},"379":{},"387":{}},"component":{}}],["conceptu",{"_index":1034,"title":{},"name":{},"text":{"15":{}},"component":{}}],["concern",{"_index":665,"title":{},"name":{},"text":{"9":{},"10":{},"35":{},"45":{}},"component":{}}],["conclud",{"_index":4141,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["concret",{"_index":1358,"title":{},"name":{},"text":{"24":{},"37":{},"44":{}},"component":{}}],["condit",{"_index":3102,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["conf.pi",{"_index":2103,"title":{},"name":{},"text":{"41":{}},"component":{}}],["config",{"_index":139,"title":{"15-2":{},"15-3":{},"38-7":{},"40-8":{},"97-1":{},"98-2":{},"103-1":{},"104-2":{},"109-1":{},"110-2":{},"117-1":{},"118-2":{},"125-1":{},"126-2":{},"132-1":{},"133-2":{},"139-1":{},"140-2":{},"146-1":{},"147-2":{},"155-1":{},"156-2":{},"164-1":{},"165-2":{},"171-1":{},"172-2":{},"180-1":{},"181-2":{},"189-1":{},"190-2":{},"197-1":{},"198-2":{},"207-1":{},"208-2":{},"217-1":{},"218-2":{},"224-1":{},"225-2":{},"233-1":{},"234-2":{},"242-1":{},"244-2":{},"251-1":{},"253-2":{},"262-1":{},"264-2":{},"273-1":{},"275-2":{},"281-2":{},"282-2":{},"289-2":{},"290-2":{},"297-1":{},"298-2":{},"307-1":{},"308-2":{},"315-1":{},"316-2":{},"369-2":{},"370-1":{},"375-1":{},"376-2":{},"383-1":{},"384-2":{},"391-1":{},"392-2":{},"397-1":{},"398-2":{},"403-1":{},"404-2":{},"411-1":{},"412-2":{},"419-1":{},"421-2":{},"428-1":{},"430-2":{},"439-1":{},"441-2":{}},"name":{},"text":{"1":{},"9":{},"15":{},"23":{},"29":{},"31":{},"32":{},"34":{},"37":{},"38":{},"40":{},"41":{},"97":{},"98":{},"103":{},"104":{},"109":{},"110":{},"117":{},"118":{},"125":{},"126":{},"131":{},"132":{},"133":{},"138":{},"139":{},"140":{},"145":{},"146":{},"147":{},"151":{},"152":{},"155":{},"156":{},"160":{},"161":{},"164":{},"165":{},"166":{},"170":{},"171":{},"172":{},"173":{},"176":{},"177":{},"180":{},"181":{},"182":{},"185":{},"186":{},"189":{},"190":{},"196":{},"197":{},"198":{},"203":{},"207":{},"208":{},"213":{},"217":{},"218":{},"223":{},"224":{},"225":{},"229":{},"230":{},"233":{},"234":{},"238":{},"239":{},"242":{},"244":{},"250":{},"251":{},"253":{},"258":{},"259":{},"262":{},"264":{},"269":{},"270":{},"273":{},"274":{},"275":{},"276":{},"280":{},"281":{},"282":{},"283":{},"285":{},"286":{},"289":{},"290":{},"291":{},"293":{},"294":{},"297":{},"298":{},"303":{},"307":{},"308":{},"314":{},"315":{},"316":{},"321":{},"369":{},"370":{},"374":{},"375":{},"376":{},"379":{},"380":{},"383":{},"384":{},"387":{},"388":{},"391":{},"392":{},"396":{},"397":{},"398":{},"402":{},"403":{},"404":{},"407":{},"411":{},"412":{},"415":{},"419":{},"420":{},"421":{},"426":{},"428":{},"429":{},"430":{},"434":{},"439":{},"440":{},"441":{},"445":{}},"component":{}}],["config.clientauthentication.authenticationclass",{"_index":3704,"title":{},"name":{},"text":{"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["config.internaltl",{"_index":3702,"title":{},"name":{},"text":{"258":{},"269":{}},"component":{}}],["config.properti",{"_index":4044,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["config.tl",{"_index":2041,"title":{},"name":{},"text":{"40":{},"258":{},"269":{}},"component":{}}],["config.tls.secretclass",{"_index":4057,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["config.yaml",{"_index":3811,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["config/fish/config.fish",{"_index":2324,"title":{},"name":{},"text":{"51":{}},"component":{}}],["config_map_key_ref",{"_index":1074,"title":{},"name":{},"text":{"15":{}},"component":{}}],["config_map_nam",{"_index":1027,"title":{},"name":{},"text":{"14":{}},"component":{}}],["config_properti",{"_index":3662,"title":{},"name":{"243":{},"252":{},"263":{},"274":{},"420":{},"429":{},"440":{}},"text":{},"component":{}}],["configmap",{"_index":438,"title":{"11":{},"38":{},"11-3":{},"14-7":{},"15-5":{},"15-6":{},"15-7":{},"15-8":{},"39-12":{},"42-6":{},"42-7":{},"102-12":{},"108-12":{},"113-15":{},"121-15":{},"436-3":{},"447-3":{}},"name":{},"text":{"5":{},"7":{},"11":{},"14":{},"15":{},"17":{},"38":{},"39":{},"40":{},"42":{},"46":{},"68":{},"76":{},"102":{},"108":{},"113":{},"121":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"166":{},"173":{},"182":{},"191":{},"193":{},"199":{},"201":{},"209":{},"211":{},"219":{},"226":{},"235":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"263":{},"264":{},"266":{},"269":{},"274":{},"275":{},"282":{},"290":{},"299":{},"301":{},"303":{},"304":{},"309":{},"311":{},"314":{},"317":{},"319":{},"321":{},"322":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"436":{},"442":{},"445":{},"446":{},"447":{}},"component":{}}],["configmap/secret",{"_index":1922,"title":{"38-7":{},"38-8":{}},"name":{},"text":{"38":{}},"component":{}}],["configmap_nam",{"_index":1070,"title":{},"name":{},"text":{"15":{}},"component":{}}],["configmap`",{"_index":3801,"title":{},"name":{},"text":{"301":{},"311":{},"319":{}},"component":{}}],["configmapbuild",{"_index":1049,"title":{},"name":{},"text":{"15":{}},"component":{}}],["configmapbuilder::new",{"_index":1053,"title":{},"name":{},"text":{"15":{}},"component":{}}],["configmapkeyselector",{"_index":1065,"title":{},"name":{},"text":{"15":{}},"component":{}}],["configmapkeyselector::default",{"_index":1077,"title":{},"name":{},"text":{"15":{}},"component":{}}],["configmapnam",{"_index":533,"title":{},"name":{},"text":{"7":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"250":{},"258":{},"269":{},"396":{},"402":{}},"component":{}}],["configmaps/secret",{"_index":1941,"title":{},"name":{},"text":{"38":{}},"component":{}}],["configoverrid",{"_index":3311,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"282":{},"285":{},"290":{},"293":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["configur",{"_index":126,"title":{"64":{},"72":{},"81":{},"90":{},"98":{},"104":{},"110":{},"118":{},"126":{},"133":{},"140":{},"147":{},"156":{},"165":{},"172":{},"181":{},"190":{},"198":{},"208":{},"218":{},"225":{},"234":{},"244":{},"253":{},"264":{},"275":{},"282":{},"290":{},"298":{},"308":{},"316":{},"326":{},"334":{},"342":{},"350":{},"360":{},"369":{},"376":{},"384":{},"392":{},"398":{},"404":{},"412":{},"421":{},"430":{},"441":{},"9-2":{},"14-8":{},"34-10":{},"34-11":{},"39-8":{},"51-6":{},"68-4":{},"76-4":{},"102-5":{},"102-6":{},"108-5":{},"108-6":{},"113-2":{},"113-3":{},"121-2":{},"121-3":{},"131-13":{},"131-14":{},"138-13":{},"138-14":{},"145-14":{},"145-15":{},"151-15":{},"151-16":{},"160-15":{},"160-16":{},"170-4":{},"170-5":{},"176-4":{},"176-5":{},"185-4":{},"185-5":{},"196-2":{},"196-3":{},"203-2":{},"203-3":{},"213-2":{},"213-3":{},"223-4":{},"223-5":{},"229-4":{},"229-5":{},"238-4":{},"238-5":{},"250-3":{},"250-4":{},"258-5":{},"258-6":{},"269-5":{},"269-6":{},"274-1":{},"274-6":{},"274-7":{},"275-8":{},"275-13":{},"275-14":{},"280-2":{},"280-3":{},"282-8":{},"282-13":{},"285-8":{},"285-9":{},"290-8":{},"290-13":{},"293-8":{},"293-9":{},"303-3":{},"303-4":{},"314-3":{},"314-4":{},"321-3":{},"321-4":{},"332-7":{},"340-7":{},"348-7":{},"355-6":{},"365-6":{},"374-14":{},"374-15":{},"379-9":{},"379-10":{},"387-9":{},"387-10":{},"396-17":{},"396-18":{},"402-17":{},"402-18":{},"407-20":{},"407-21":{},"415-20":{},"415-21":{},"420-1":{},"421-8":{},"426-4":{},"426-5":{},"429-1":{},"430-8":{},"434-4":{},"434-5":{},"440-1":{},"441-8":{},"445-4":{},"445-5":{}},"name":{"64":{},"72":{},"81":{},"90":{},"98":{},"104":{},"110":{},"118":{},"126":{},"133":{},"140":{},"147":{},"156":{},"165":{},"172":{},"181":{},"190":{},"198":{},"208":{},"218":{},"225":{},"234":{},"244":{},"253":{},"264":{},"275":{},"282":{},"290":{},"298":{},"308":{},"316":{},"326":{},"334":{},"342":{},"350":{},"360":{},"369":{},"376":{},"384":{},"392":{},"398":{},"404":{},"412":{},"421":{},"430":{},"441":{}},"text":{"1":{},"2":{},"5":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{},"16":{},"19":{},"32":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"42":{},"44":{},"45":{},"52":{},"54":{},"55":{},"56":{},"58":{},"63":{},"68":{},"71":{},"76":{},"85":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"209":{},"211":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"235":{},"238":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"263":{},"264":{},"266":{},"269":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"290":{},"293":{},"299":{},"303":{},"304":{},"309":{},"314":{},"317":{},"321":{},"322":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"422":{},"426":{},"427":{},"429":{},"430":{},"431":{},"434":{},"435":{},"436":{},"440":{},"441":{},"442":{},"445":{},"446":{},"447":{}},"component":{}}],["conflict",{"_index":2200,"title":{},"name":{},"text":{"45":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["conform",{"_index":2886,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["confus",{"_index":1700,"title":{},"name":{},"text":{"34":{}},"component":{}}],["congratul",{"_index":3769,"title":{},"name":{},"text":{"286":{},"294":{},"408":{},"416":{}},"component":{}}],["conn",{"_index":1989,"title":{},"name":{},"text":{"39":{}},"component":{}}],["conn.inline_connect",{"_index":1992,"title":{},"name":{},"text":{"39":{}},"component":{}}],["connect",{"_index":68,"title":{"14":{},"7-4":{},"53-1":{},"62-12":{},"113-19":{},"121-19":{},"131-11":{},"138-11":{},"145-12":{},"151-13":{},"160-13":{},"274-5":{},"275-12":{},"282-12":{},"290-12":{},"374-12":{},"379-7":{},"387-7":{},"396-11":{},"402-11":{},"407-14":{},"415-14":{}},"name":{},"text":{"1":{},"5":{},"7":{},"10":{},"11":{},"15":{},"22":{},"23":{},"39":{},"40":{},"42":{},"43":{},"45":{},"53":{},"57":{},"60":{},"61":{},"62":{},"63":{},"69":{},"70":{},"71":{},"77":{},"78":{},"102":{},"108":{},"113":{},"114":{},"115":{},"121":{},"122":{},"123":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"153":{},"157":{},"160":{},"162":{},"176":{},"185":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"246":{},"252":{},"253":{},"255":{},"263":{},"264":{},"266":{},"274":{},"275":{},"282":{},"286":{},"290":{},"294":{},"299":{},"309":{},"317":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"380":{},"381":{},"382":{},"387":{},"388":{},"389":{},"390":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"422":{},"426":{},"431":{},"434":{},"436":{},"437":{},"442":{},"445":{},"447":{},"448":{}},"component":{}}],["connect_str",{"_index":1061,"title":{},"name":{},"text":{"15":{}},"component":{}}],["connect_string\").await",{"_index":1107,"title":{},"name":{},"text":{"15":{}},"component":{}}],["connection.yaml",{"_index":3630,"title":{},"name":{},"text":{"230":{},"239":{}},"component":{}}],["connection/bucket",{"_index":3299,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["connection_str",{"_index":1104,"title":{},"name":{},"text":{"15":{}},"component":{}}],["connections.celerybrokerurl",{"_index":2950,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["connections.celeryresultbackend",{"_index":2948,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["connections.secretkey",{"_index":2943,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["connections.sqlalchemydatabaseuri",{"_index":2945,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["connector",{"_index":2121,"title":{},"name":{},"text":{"42":{},"407":{},"415":{}},"component":{}}],["connstr",{"_index":3292,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"223":{},"229":{},"230":{},"238":{},"239":{}},"component":{}}],["consensu",{"_index":2231,"title":{},"name":{},"text":{"47":{}},"component":{}}],["consequ",{"_index":1362,"title":{"25-5":{},"25-6":{},"26-5":{},"26-6":{},"27-5":{},"27-6":{},"28-5":{},"28-6":{},"29-5":{},"29-6":{},"30-5":{},"30-6":{},"31-5":{},"31-6":{},"32-4":{},"32-5":{},"33-4":{},"33-5":{},"36-15":{},"36-16":{},"38-4":{},"38-5":{},"44-5":{},"44-6":{},"47-5":{},"47-6":{},"48-5":{},"48-6":{}},"name":{},"text":{},"component":{}}],["consid",{"_index":608,"title":{"25-3":{},"26-3":{},"27-3":{},"28-3":{},"29-3":{},"30-3":{},"31-3":{},"32-2":{},"33-2":{},"34-2":{},"35-3":{},"36-13":{},"37-3":{},"38-2":{},"39-3":{},"40-3":{},"41-6":{},"41-13":{},"42-3":{},"43-3":{},"44-3":{},"47-3":{},"48-3":{}},"name":{},"text":{"8":{},"13":{},"30":{},"31":{},"39":{},"41":{},"47":{}},"component":{}}],["consider",{"_index":540,"title":{"8-3":{}},"name":{},"text":{"57":{},"60":{},"61":{},"62":{}},"component":{}}],["consist",{"_index":378,"title":{},"name":{},"text":{"5":{},"9":{},"12":{},"16":{},"17":{},"22":{},"32":{},"33":{},"37":{},"50":{},"60":{},"61":{},"102":{},"108":{},"113":{},"121":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["consol",{"_index":2377,"title":{},"name":{},"text":{"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["consoleservic",{"_index":3645,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["consoleservice.type=nodeport,consoleservice.nodeport=nul",{"_index":3658,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["constraint",{"_index":613,"title":{},"name":{},"text":{"8":{},"68":{},"76":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["construct",{"_index":1030,"title":{},"name":{},"text":{"14":{},"33":{},"45":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["consult",{"_index":802,"title":{},"name":{},"text":{"11":{},"15":{},"116":{},"124":{},"131":{},"138":{},"145":{},"151":{},"154":{},"160":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"396":{},"402":{},"407":{},"410":{},"415":{},"418":{},"438":{},"449":{}},"component":{}}],["consum",{"_index":774,"title":{"14-7":{},"15-3":{},"15-6":{}},"name":{},"text":{"11":{},"14":{},"60":{},"61":{},"85":{},"86":{},"87":{},"94":{},"95":{},"96":{},"259":{},"270":{}},"component":{}}],["contact",{"_index":398,"title":{},"name":{},"text":{"5":{},"53":{}},"component":{}}],["contain",{"_index":109,"title":{"41-8":{},"41-9":{}},"name":{},"text":{"1":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"15":{},"16":{},"18":{},"22":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"49":{},"50":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"69":{},"71":{},"74":{},"77":{},"79":{},"80":{},"81":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"101":{},"102":{},"107":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"130":{},"131":{},"134":{},"137":{},"138":{},"141":{},"144":{},"145":{},"148":{},"151":{},"157":{},"160":{},"166":{},"169":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"193":{},"195":{},"196":{},"199":{},"201":{},"203":{},"204":{},"209":{},"211":{},"213":{},"214":{},"219":{},"222":{},"223":{},"226":{},"229":{},"232":{},"235":{},"238":{},"241":{},"243":{},"244":{},"246":{},"249":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"290":{},"293":{},"299":{},"301":{},"303":{},"309":{},"311":{},"313":{},"314":{},"317":{},"319":{},"321":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"373":{},"374":{},"380":{},"388":{},"395":{},"396":{},"401":{},"402":{},"407":{},"415":{},"422":{},"425":{},"426":{},"427":{},"431":{},"434":{},"435":{},"436":{},"442":{},"445":{},"446":{},"447":{}},"component":{}}],["containerbuilder::new(\"mi",{"_index":1084,"title":{},"name":{},"text":{"15":{}},"component":{}}],["containerd://1.5.2",{"_index":148,"title":{},"name":{},"text":{"1":{}},"component":{}}],["content",{"_index":1006,"title":{"38-7":{},"127-2":{},"134-2":{},"141-2":{},"148-2":{},"157-2":{},"166-2":{},"173-2":{},"182-2":{},"191-2":{},"199-2":{},"209-2":{},"219-2":{},"226-2":{},"235-2":{},"246-2":{},"255-2":{},"266-2":{},"299-2":{},"309-2":{},"317-2":{},"422-4":{},"431-4":{},"442-4":{}},"name":{},"text":{"14":{},"15":{},"23":{},"34":{},"38":{},"39":{},"85":{},"94":{},"102":{},"108":{},"114":{},"122":{},"152":{},"161":{},"177":{},"186":{},"259":{},"270":{},"280":{},"285":{},"286":{},"293":{},"294":{},"304":{},"322":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{},"408":{},"416":{},"427":{},"435":{},"436":{},"446":{},"447":{}},"component":{}}],["content_repo",{"_index":3752,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["context",{"_index":484,"title":{"25-1":{},"26-1":{},"27-1":{},"28-1":{},"29-1":{},"30-1":{},"31-1":{},"32-1":{},"33-1":{},"34-1":{},"35-1":{},"36-1":{},"37-1":{},"38-1":{},"39-1":{},"40-1":{},"41-2":{},"41-3":{},"42-1":{},"43-1":{},"44-1":{},"45-1":{},"47-1":{},"48-1":{}},"name":{},"text":{"7":{},"9":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"84":{},"93":{},"113":{},"121":{}},"component":{}}],["continent",{"_index":2530,"title":{},"name":{},"text":{"60":{}},"component":{}}],["continu",{"_index":2444,"title":{},"name":{},"text":{"60":{},"62":{},"152":{},"161":{},"408":{},"416":{}},"component":{}}],["contrast",{"_index":3732,"title":{},"name":{},"text":{"276":{},"283":{},"291":{}},"component":{}}],["contribut",{"_index":926,"title":{"16":{},"13-1":{}},"name":{},"text":{"13":{},"27":{}},"component":{}}],["contributor",{"_index":1114,"title":{},"name":{},"text":{"16":{},"113":{},"121":{}},"component":{}}],["contributor’",{"_index":930,"title":{"13":{}},"name":{},"text":{},"component":{}}],["control",{"_index":78,"title":{"39-11":{}},"name":{},"text":{"1":{},"7":{},"9":{},"14":{},"33":{},"34":{},"35":{},"38":{},"39":{},"40":{},"48":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"68":{},"70":{},"76":{},"78":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["conveni",{"_index":729,"title":{},"name":{},"text":{"10":{}},"component":{}}],["convent",{"_index":430,"title":{},"name":{},"text":{"5":{},"15":{},"16":{}},"component":{}}],["convers",{"_index":1142,"title":{},"name":{},"text":{"16":{},"17":{}},"component":{}}],["convert",{"_index":1331,"title":{},"name":{},"text":{"23":{},"30":{},"79":{},"88":{}},"component":{}}],["cooki",{"_index":2953,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["coordin",{"_index":660,"title":{"330-5":{},"338-5":{},"346-5":{},"353-5":{},"363-5":{}},"name":{},"text":{"9":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"196":{},"203":{},"213":{},"245":{},"254":{},"265":{},"330":{},"338":{},"346":{},"353":{},"363":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["coordinator=fals",{"_index":4071,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["copi",{"_index":1501,"title":{},"name":{},"text":{"29":{},"38":{},"43":{},"51":{},"102":{},"108":{},"113":{},"121":{},"204":{},"214":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["copyright",{"_index":3096,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["core",{"_index":783,"title":{},"name":{},"text":{"11":{},"13":{},"31":{},"32":{},"113":{},"121":{},"151":{},"160":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"209":{},"211":{},"213":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["core::v1",{"_index":1064,"title":{},"name":{},"text":{"15":{}},"component":{}}],["corelimit",{"_index":3087,"title":{},"name":{},"text":{"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["correct",{"_index":1691,"title":{},"name":{},"text":{"34":{},"37":{},"38":{},"41":{},"113":{},"114":{},"121":{},"122":{},"176":{},"185":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["correctli",{"_index":758,"title":{},"name":{},"text":{"11":{},"16":{},"102":{},"108":{},"113":{},"121":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{}},"component":{}}],["correspond",{"_index":2544,"title":{},"name":{},"text":{"60":{},"61":{},"63":{},"71":{},"84":{},"85":{},"93":{},"94":{},"113":{},"121":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["cost",{"_index":2629,"title":{},"name":{},"text":{"61":{},"131":{},"138":{},"145":{},"151":{},"160":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["count",{"_index":697,"title":{},"name":{},"text":{"9":{},"60":{},"61":{},"62":{},"152":{},"161":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"408":{},"416":{}},"component":{}}],["counterparti",{"_index":1739,"title":{},"name":{},"text":{"35":{}},"component":{}}],["countryisocod",{"_index":3380,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["countrynam",{"_index":3377,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["coupl",{"_index":1419,"title":{},"name":{},"text":{"26":{},"29":{},"30":{},"44":{}},"component":{}}],["cours",{"_index":973,"title":{},"name":{},"text":{"13":{},"61":{}},"component":{}}],["cover",{"_index":42,"title":{},"name":{},"text":{"1":{},"13":{},"16":{},"36":{},"49":{},"84":{},"93":{}},"component":{}}],["coverag",{"_index":3881,"title":{"332-9":{},"340-9":{},"348-9":{},"355-8":{},"365-8":{}},"name":{},"text":{},"component":{}}],["covid",{"_index":2662,"title":{},"name":{},"text":{"62":{}},"component":{}}],["cp",{"_index":2316,"title":{},"name":{},"text":{"51":{},"176":{},"185":{},"195":{},"204":{},"214":{}},"component":{}}],["cpu",{"_index":669,"title":{"196-7":{},"203-7":{},"213-7":{},"250-8":{},"258-10":{},"269-10":{},"280-7":{},"285-13":{},"293-13":{},"407-25":{},"415-25":{},"426-9":{},"434-9":{},"445-9":{}},"name":{},"text":{"9":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["cr",{"_index":1668,"title":{},"name":{},"text":{"33":{}},"component":{}}],["crate",{"_index":2312,"title":{},"name":{},"text":{"51":{}},"component":{}}],["crate2nix",{"_index":2834,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["crd",{"_index":432,"title":{"39":{},"37-7":{},"42-6":{},"42-7":{},"332-9":{},"340-9":{},"348-9":{},"355-8":{},"365-8":{}},"name":{},"text":{"5":{},"14":{},"16":{},"30":{},"32":{},"33":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"46":{},"63":{},"66":{},"69":{},"70":{},"71":{},"74":{},"77":{},"78":{},"79":{},"83":{},"88":{},"92":{},"101":{},"107":{},"116":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"154":{},"160":{},"163":{},"169":{},"179":{},"188":{},"195":{},"206":{},"216":{},"222":{},"232":{},"241":{},"249":{},"250":{},"258":{},"261":{},"269":{},"272":{},"279":{},"280":{},"285":{},"288":{},"293":{},"296":{},"303":{},"306":{},"313":{},"314":{},"321":{},"324":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"355":{},"358":{},"365":{},"368":{},"373":{},"382":{},"390":{},"395":{},"396":{},"401":{},"402":{},"407":{},"410":{},"415":{},"418":{},"425":{},"426":{},"434":{},"438":{},"445":{},"449":{}},"component":{}}],["creat",{"_index":133,"title":{"15-5":{},"16-7":{},"29-10":{},"60-15":{},"61-17":{},"62-10":{},"113-20":{},"121-20":{},"131-5":{},"138-5":{},"145-5":{},"151-5":{},"160-5":{},"332-1":{},"340-1":{},"348-1":{},"396-13":{},"396-14":{},"402-13":{},"402-14":{},"407-16":{},"407-17":{},"415-16":{},"415-17":{}},"name":{},"text":{"1":{},"3":{},"5":{},"7":{},"11":{},"13":{},"14":{},"15":{},"16":{},"23":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"49":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"69":{},"71":{},"77":{},"79":{},"85":{},"88":{},"94":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"179":{},"182":{},"185":{},"186":{},"188":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"206":{},"209":{},"211":{},"213":{},"214":{},"216":{},"219":{},"223":{},"226":{},"229":{},"230":{},"232":{},"235":{},"238":{},"239":{},"241":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"260":{},"263":{},"264":{},"266":{},"269":{},"270":{},"271":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"297":{},"298":{},"299":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"314":{},"315":{},"316":{},"317":{},"321":{},"322":{},"323":{},"324":{},"329":{},"330":{},"331":{},"332":{},"337":{},"338":{},"339":{},"340":{},"345":{},"346":{},"347":{},"348":{},"353":{},"354":{},"356":{},"358":{},"363":{},"364":{},"366":{},"368":{},"374":{},"379":{},"380":{},"382":{},"387":{},"388":{},"390":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"436":{},"438":{},"442":{},"445":{},"446":{},"447":{},"449":{}},"component":{}}],["create/append",{"_index":3565,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["create_test_cluster.pi",{"_index":329,"title":{},"name":{},"text":{"3":{},"16":{},"44":{}},"component":{}}],["creation",{"_index":1112,"title":{"102-3":{},"108-3":{},"374-3":{},"380-3":{},"388-3":{}},"name":{},"text":{"15":{},"177":{},"186":{},"250":{},"258":{},"269":{},"380":{},"388":{}},"component":{}}],["creationtimestamp",{"_index":1674,"title":{},"name":{},"text":{"33":{}},"component":{}}],["credenti",{"_index":172,"title":{"10-6":{},"39-6":{},"39-8":{},"39-9":{},"102-2":{},"108-2":{},"114-2":{},"122-2":{},"145-9":{},"151-9":{},"160-9":{},"332-6":{},"340-6":{},"348-6":{},"355-5":{},"365-5":{},"374-2":{},"380-2":{},"388-2":{}},"name":{},"text":{"1":{},"10":{},"22":{},"37":{},"39":{},"45":{},"57":{},"63":{},"71":{},"84":{},"93":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["credentials.yaml",{"_index":3218,"title":{},"name":{},"text":{"114":{},"122":{},"230":{},"239":{},"286":{},"294":{},"380":{},"388":{}},"component":{}}],["credentialssecret",{"_index":2966,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["credit",{"_index":2725,"title":{},"name":{},"text":{"62":{}},"component":{}}],["criteria",{"_index":2804,"title":{},"name":{},"text":{"68":{},"76":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["criterion",{"_index":2248,"title":{},"name":{},"text":{"48":{}},"component":{}}],["critic",{"_index":296,"title":{},"name":{},"text":{"2":{},"16":{}},"component":{}}],["cross",{"_index":2132,"title":{},"name":{},"text":{"42":{}},"component":{}}],["csi",{"_index":552,"title":{"80-1":{},"81-2":{},"89-1":{},"90-2":{}},"name":{},"text":{"8":{},"12":{},"35":{},"79":{},"86":{},"88":{},"95":{},"279":{}},"component":{}}],["csi_endpoint",{"_index":2854,"title":{},"name":{},"text":{"80":{},"81":{},"89":{},"90":{}},"component":{}}],["csv",{"_index":1317,"title":{},"name":{},"text":{"23":{},"374":{},"379":{},"387":{}},"component":{}}],["csv_export",{"_index":3978,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["cumbersom",{"_index":3037,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"286":{},"294":{}},"component":{}}],["curl",{"_index":325,"title":{"23-21":{}},"name":{},"text":{"3":{},"23":{},"51":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"304":{},"305":{},"322":{},"323":{},"408":{},"409":{},"416":{},"417":{}},"component":{}}],["current",{"_index":435,"title":{},"name":{},"text":{"5":{},"12":{},"15":{},"19":{},"25":{},"29":{},"30":{},"32":{},"34":{},"36":{},"38":{},"39":{},"41":{},"42":{},"43":{},"47":{},"53":{},"54":{},"57":{},"58":{},"60":{},"61":{},"79":{},"88":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"120":{},"121":{},"129":{},"136":{},"143":{},"150":{},"159":{},"168":{},"175":{},"184":{},"193":{},"194":{},"201":{},"202":{},"211":{},"212":{},"221":{},"223":{},"228":{},"229":{},"237":{},"238":{},"245":{},"248":{},"254":{},"257":{},"265":{},"268":{},"274":{},"275":{},"278":{},"280":{},"282":{},"284":{},"285":{},"290":{},"292":{},"293":{},"302":{},"303":{},"312":{},"314":{},"320":{},"321":{},"328":{},"332":{},"336":{},"340":{},"344":{},"348":{},"352":{},"355":{},"356":{},"362":{},"365":{},"366":{},"372":{},"374":{},"378":{},"379":{},"386":{},"387":{},"394":{},"400":{},"406":{},"414":{},"424":{},"433":{},"436":{},"444":{},"447":{}},"component":{}}],["current_measur",{"_index":2647,"title":{},"name":{},"text":{"61":{}},"component":{}}],["currentcompactedkv",{"_index":3456,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["curv",{"_index":1469,"title":{},"name":{},"text":{"28":{}},"component":{}}],["custom",{"_index":966,"title":{"49":{},"35-8":{},"113-18":{},"121-18":{},"243-1":{},"244-7":{},"252-1":{},"253-7":{},"263-1":{},"264-7":{},"275-7":{},"282-7":{},"290-7":{},"421-7":{},"430-7":{},"441-7":{}},"name":{"49":{}},"text":{"13":{},"16":{},"17":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"39":{},"47":{},"48":{},"49":{},"84":{},"93":{},"102":{},"108":{},"113":{},"116":{},"121":{},"124":{},"193":{},"195":{},"196":{},"201":{},"203":{},"211":{},"213":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"279":{},"282":{},"285":{},"290":{},"293":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["customer’",{"_index":1753,"title":{},"name":{},"text":{"35":{}},"component":{}}],["cycl",{"_index":1162,"title":{},"name":{},"text":{"16":{},"30":{},"36":{}},"component":{}}],["c{2",{"_index":3339,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["d",{"_index":185,"title":{},"name":{},"text":{"1":{},"60":{},"61":{},"114":{},"122":{},"152":{},"161":{},"177":{},"186":{}},"component":{}}],["daemon",{"_index":2836,"title":{},"name":{},"text":{"79":{},"88":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"250":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["daemonset",{"_index":489,"title":{},"name":{},"text":{"7":{},"14":{},"304":{},"322":{}},"component":{}}],["dag",{"_index":437,"title":{"102-11":{},"108-11":{},"113-14":{},"113-21":{},"121-14":{},"121-21":{}},"name":{},"text":{"5":{},"8":{},"102":{},"108":{},"113":{},"114":{},"115":{},"116":{},"121":{},"122":{},"123":{},"124":{}},"component":{}}],["dag.cli",{"_index":3029,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dag=dag",{"_index":3026,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dag_id",{"_index":3253,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["dag_id='sparkapp_dag",{"_index":3205,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["dag_id='test_airflow_dag",{"_index":2995,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dag_run",{"_index":3019,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dag_run_id",{"_index":3252,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["dagrun_timeout=timedelta(minutes=60",{"_index":2999,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dags/test_airflow_dag.pi",{"_index":3030,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["danger",{"_index":1508,"title":{},"name":{},"text":{"29":{}},"component":{}}],["darwin",{"_index":2302,"title":{},"name":{},"text":{"51":{}},"component":{}}],["dashboard",{"_index":803,"title":{"12":{},"23-28":{},"60-7":{},"60-15":{},"61-9":{},"61-17":{},"62-5":{},"62-10":{}},"name":{},"text":{"13":{},"23":{},"52":{},"54":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"121":{},"152":{},"161":{},"374":{},"380":{},"388":{}},"component":{}}],["data",{"_index":30,"title":{"5":{},"23":{},"60":{},"61":{},"62":{},"23-11":{},"23-19":{},"23-28":{},"60-2":{},"60-5":{},"60-16":{},"61-2":{},"61-7":{},"61-18":{},"62-2":{},"62-11":{},"102-1":{},"108-1":{},"152-6":{},"152-7":{},"161-6":{},"161-7":{},"196-5":{},"203-5":{},"213-5":{},"250-6":{},"258-8":{},"269-8":{},"396-15":{},"402-15":{},"407-18":{},"407-23":{},"415-18":{},"415-23":{},"426-7":{},"434-7":{},"445-7":{}},"name":{"60":{},"61":{},"62":{}},"text":{"1":{},"2":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{},"23":{},"30":{},"31":{},"32":{},"34":{},"37":{},"38":{},"39":{},"42":{},"43":{},"45":{},"48":{},"49":{},"50":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"65":{},"73":{},"86":{},"95":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"120":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{},"166":{},"168":{},"173":{},"175":{},"177":{},"182":{},"184":{},"186":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"209":{},"211":{},"213":{},"214":{},"223":{},"229":{},"238":{},"250":{},"258":{},"259":{},"269":{},"270":{},"304":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"372":{},"373":{},"374":{},"378":{},"379":{},"380":{},"381":{},"386":{},"387":{},"388":{},"389":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"415":{},"416":{},"424":{},"426":{},"427":{},"433":{},"434":{},"435":{},"436":{},"444":{},"445":{},"446":{},"447":{}},"component":{}}],["data.html",{"_index":2367,"title":{},"name":{},"text":{"54":{}},"component":{}}],["data.remove(entri",{"_index":1102,"title":{},"name":{},"text":{"15":{}},"component":{}}],["data/raw",{"_index":2762,"title":{},"name":{},"text":{"62":{}},"component":{}}],["data/yellow_tripdata_2021",{"_index":3854,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["databas",{"_index":272,"title":{"47-9":{},"102-8":{},"108-8":{},"113-5":{},"114-4":{},"121-5":{},"122-4":{},"131-4":{},"138-4":{},"145-4":{},"151-4":{},"160-4":{},"374-1":{},"374-4":{},"380-1":{},"380-4":{},"388-1":{},"388-4":{}},"name":{},"text":{"2":{},"7":{},"14":{},"23":{},"30":{},"44":{},"47":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"280":{},"285":{},"293":{},"358":{},"368":{},"374":{},"379":{},"380":{},"387":{},"388":{}},"component":{}}],["database_repo",{"_index":3751,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["datadir",{"_index":4102,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["dataflow",{"_index":1330,"title":{},"name":{},"text":{"23":{}},"component":{}}],["datanod",{"_index":686,"title":{},"name":{},"text":{"9":{},"67":{},"75":{},"152":{},"161":{},"177":{},"186":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{}},"component":{}}],["datanucleus.connectionpool.maxpools",{"_index":3607,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["dataschema",{"_index":3359,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["dataset",{"_index":284,"title":{"332-3":{},"332-4":{},"332-5":{},"340-3":{},"340-4":{},"340-5":{},"348-3":{},"348-4":{},"348-5":{},"355-2":{},"355-3":{},"355-4":{},"365-2":{},"365-3":{},"365-4":{}},"name":{},"text":{"2":{},"23":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["datasourc",{"_index":2520,"title":{},"name":{},"text":{"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"380":{},"388":{}},"component":{}}],["date",{"_index":1380,"title":{"68-2":{},"76-2":{}},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"56":{},"60":{},"61":{},"79":{},"85":{},"88":{},"94":{}},"component":{}}],["date_diff('minut",{"_index":2765,"title":{},"name":{},"text":{"62":{}},"component":{}}],["datetim",{"_index":2811,"title":{},"name":{},"text":{"68":{},"76":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["day",{"_index":2340,"title":{},"name":{},"text":{"52":{},"54":{},"56":{},"58":{},"61":{},"152":{},"161":{}},"component":{}}],["db+postgresql://airflow:airflow@airflow",{"_index":2949,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["dbeaver",{"_index":2653,"title":{"62-12":{}},"name":{},"text":{"62":{}},"component":{}}],["dbtype",{"_index":3291,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"223":{},"229":{},"230":{},"238":{},"239":{}},"component":{}}],["dd",{"_index":3690,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["de",{"_index":2251,"title":{},"name":{},"text":{"48":{}},"component":{}}],["de4e",{"_index":2592,"title":{},"name":{},"text":{"61":{}},"component":{}}],["deactiv",{"_index":3700,"title":{},"name":{},"text":{"258":{},"269":{}},"component":{}}],["deadnod",{"_index":3454,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["deal",{"_index":1870,"title":{},"name":{},"text":{"36":{}},"component":{}}],["deb",{"_index":1684,"title":{},"name":{},"text":{"34":{}},"component":{}}],["debug",{"_index":986,"title":{},"name":{},"text":{"13":{},"14":{},"28":{},"38":{},"49":{},"102":{},"108":{},"195":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["decentr",{"_index":1558,"title":{},"name":{},"text":{"30":{}},"component":{}}],["decid",{"_index":1035,"title":{"29":{},"30":{}},"name":{},"text":{"15":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"62":{}},"component":{}}],["decide_reuse_of_oper",{"_index":1596,"title":{},"name":{"31":{}},"text":{},"component":{}}],["decis",{"_index":474,"title":{"46":{},"25-2":{},"25-4":{},"26-2":{},"26-4":{},"27-2":{},"27-4":{},"28-2":{},"28-4":{},"29-2":{},"29-4":{},"30-2":{},"30-4":{},"31-2":{},"31-4":{},"32-3":{},"33-3":{},"34-3":{},"34-4":{},"35-2":{},"35-4":{},"36-12":{},"36-14":{},"37-2":{},"37-4":{},"38-3":{},"39-2":{},"39-4":{},"40-2":{},"40-4":{},"41-4":{},"41-5":{},"41-15":{},"42-2":{},"42-4":{},"43-2":{},"43-4":{},"44-2":{},"44-4":{},"45-2":{},"47-2":{},"47-4":{},"48-2":{},"48-4":{}},"name":{},"text":{"7":{},"8":{},"14":{},"25":{},"27":{},"30":{},"36":{},"38":{},"39":{},"41":{},"44":{},"46":{},"47":{},"48":{},"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["declar",{"_index":248,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"8":{},"14":{},"33":{},"85":{},"86":{},"87":{},"94":{},"95":{},"96":{},"116":{},"124":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["decod",{"_index":3741,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["decoupl",{"_index":487,"title":{},"name":{},"text":{"7":{},"14":{},"30":{},"41":{},"45":{}},"component":{}}],["decreas",{"_index":2660,"title":{},"name":{},"text":{"62":{}},"component":{}}],["dedic",{"_index":393,"title":{"39-11":{}},"name":{},"text":{"5":{},"10":{},"39":{},"41":{},"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["deep",{"_index":440,"title":{"23-16":{},"131-8":{},"138-8":{},"145-8":{},"151-8":{},"151-10":{},"160-8":{},"160-10":{}},"name":{},"text":{"5":{},"10":{},"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{}},"component":{}}],["deeper",{"_index":457,"title":{},"name":{},"text":{"6":{},"23":{}},"component":{}}],["deepstorag",{"_index":737,"title":{},"name":{},"text":{"10":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{}},"component":{}}],["def",{"_index":3127,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["default",{"_index":74,"title":{"29-9":{},"29-10":{},"407-26":{},"415-26":{},"422-2":{},"431-2":{},"442-2":{}},"name":{},"text":{"1":{},"7":{},"8":{},"9":{},"11":{},"14":{},"22":{},"23":{},"29":{},"32":{},"34":{},"39":{},"40":{},"42":{},"45":{},"48":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"71":{},"79":{},"85":{},"86":{},"87":{},"88":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"117":{},"118":{},"119":{},"121":{},"122":{},"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"146":{},"147":{},"149":{},"151":{},"152":{},"155":{},"156":{},"158":{},"160":{},"161":{},"164":{},"165":{},"167":{},"170":{},"171":{},"172":{},"174":{},"176":{},"177":{},"180":{},"181":{},"183":{},"185":{},"186":{},"189":{},"190":{},"191":{},"192":{},"193":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"203":{},"204":{},"207":{},"208":{},"209":{},"210":{},"211":{},"213":{},"214":{},"217":{},"218":{},"219":{},"220":{},"223":{},"224":{},"225":{},"226":{},"227":{},"229":{},"230":{},"232":{},"233":{},"234":{},"235":{},"236":{},"238":{},"239":{},"241":{},"242":{},"243":{},"244":{},"247":{},"250":{},"251":{},"252":{},"253":{},"256":{},"258":{},"259":{},"262":{},"263":{},"264":{},"267":{},"269":{},"270":{},"273":{},"274":{},"275":{},"277":{},"280":{},"281":{},"282":{},"285":{},"286":{},"289":{},"290":{},"293":{},"294":{},"297":{},"298":{},"300":{},"301":{},"303":{},"304":{},"307":{},"308":{},"310":{},"311":{},"314":{},"315":{},"316":{},"318":{},"319":{},"321":{},"322":{},"325":{},"326":{},"327":{},"330":{},"332":{},"333":{},"334":{},"335":{},"338":{},"340":{},"341":{},"342":{},"343":{},"346":{},"348":{},"349":{},"350":{},"351":{},"353":{},"355":{},"356":{},"359":{},"360":{},"361":{},"363":{},"365":{},"366":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"379":{},"380":{},"383":{},"384":{},"385":{},"387":{},"388":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"408":{},"411":{},"412":{},"413":{},"415":{},"416":{},"419":{},"420":{},"421":{},"423":{},"426":{},"428":{},"429":{},"430":{},"432":{},"434":{},"436":{},"439":{},"440":{},"441":{},"443":{},"445":{},"447":{}},"component":{}}],["default.default.svc.cluster.local:16020",{"_index":3474,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["default.default.svc.cluster.local:2181",{"_index":779,"title":{},"name":{},"text":{"11":{}},"component":{}}],["default.default.svc.cluster.local:2181,simpl",{"_index":777,"title":{},"name":{},"text":{"11":{}},"component":{}}],["default.default.svc.cluster.local:2282",{"_index":4139,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["default.default.svc.cluster.local:2282,simpl",{"_index":4132,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["default.default.svc.cluster.local:2282/znod",{"_index":4133,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["default.default.svc.cluster.local:9864/webhdfs/v1/testdata.txt?op=create&user.name=stackable&namenoderpcaddress=simpl",{"_index":3572,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["default:2282",{"_index":4124,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["default:8080/status/clust",{"_index":3450,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["default:8080/users/schema",{"_index":3483,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["default:8080/version/clust",{"_index":3448,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["default=fals",{"_index":2208,"title":{},"name":{},"text":{"45":{}},"component":{}}],["defer",{"_index":2068,"title":{},"name":{},"text":{"41":{}},"component":{}}],["defin",{"_index":462,"title":{"7-3":{},"39-12":{},"44-10":{},"113-19":{},"113-20":{},"121-19":{},"121-20":{},"131-10":{},"138-10":{},"145-11":{},"151-12":{},"160-12":{}},"name":{},"text":{"7":{},"9":{},"10":{},"11":{},"14":{},"17":{},"23":{},"27":{},"36":{},"37":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"62":{},"85":{},"86":{},"94":{},"95":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"177":{},"186":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{},"230":{},"239":{},"274":{},"275":{},"282":{},"290":{},"304":{},"322":{},"330":{},"331":{},"332":{},"338":{},"339":{},"340":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"358":{},"363":{},"364":{},"365":{},"368":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["defined_reuse_of_k8",{"_index":1520,"title":{},"name":{"30":{}},"text":{},"component":{}}],["definit",{"_index":334,"title":{"42":{},"10-4":{},"44-9":{},"45-3":{}},"name":{},"text":{"3":{},"10":{},"13":{},"16":{},"23":{},"36":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"48":{},"62":{},"79":{},"88":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"213":{},"223":{},"229":{},"230":{},"238":{},"239":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"436":{},"440":{},"441":{},"445":{},"447":{}},"component":{}}],["definition_of_s3_object",{"_index":1958,"title":{},"name":{"39":{}},"text":{},"component":{}}],["degre",{"_index":1932,"title":{},"name":{},"text":{"38":{},"41":{},"48":{}},"component":{}}],["deleg",{"_index":1769,"title":{},"name":{},"text":{"35":{},"43":{},"113":{},"121":{}},"component":{}}],["delet",{"_index":1675,"title":{},"name":{},"text":{"33":{},"68":{},"76":{},"152":{},"161":{},"204":{},"214":{},"427":{},"435":{},"436":{},"446":{},"447":{}},"component":{}}],["deliber",{"_index":1535,"title":{},"name":{},"text":{"30":{}},"component":{}}],["delta",{"_index":3373,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["deltabucket",{"_index":3375,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["demand",{"_index":1757,"title":{},"name":{},"text":{"35":{}},"component":{}}],["demo",{"_index":2145,"title":{"54":{},"59":{},"49-1":{},"49-3":{},"50-3":{},"52-3":{},"52-4":{},"52-7":{},"54-1":{},"54-2":{}},"name":{"54":{}},"text":{"44":{},"49":{},"50":{},"52":{},"53":{},"54":{},"59":{},"60":{},"61":{},"62":{},"114":{},"122":{}},"component":{}}],["demonstr",{"_index":524,"title":{},"name":{},"text":{"7":{},"15":{},"50":{},"52":{},"54":{},"113":{},"121":{},"232":{},"241":{}},"component":{}}],["demos.yaml",{"_index":2269,"title":{},"name":{},"text":{"49":{}},"component":{}}],["demos/stacks/releas",{"_index":2265,"title":{},"name":{},"text":{"49":{}},"component":{}}],["deni",{"_index":2307,"title":{"53-4":{}},"name":{},"text":{"51":{},"53":{}},"component":{}}],["dep",{"_index":3864,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["depend",{"_index":320,"title":{"245":{},"254":{},"265":{},"276":{},"283":{},"291":{},"330":{},"338":{},"346":{},"353":{},"363":{},"23-14":{},"23-24":{},"102-1":{},"108-1":{},"116-1":{},"124-1":{},"232-1":{},"241-1":{},"330-2":{},"330-4":{},"338-2":{},"338-4":{},"346-2":{},"346-4":{},"353-2":{},"353-4":{},"358-1":{},"363-2":{},"363-4":{},"368-1":{}},"name":{"245":{},"254":{},"265":{},"276":{},"283":{},"291":{}},"text":{"3":{},"7":{},"8":{},"11":{},"14":{},"16":{},"23":{},"26":{},"28":{},"30":{},"31":{},"35":{},"36":{},"37":{},"38":{},"41":{},"44":{},"48":{},"50":{},"52":{},"57":{},"60":{},"61":{},"62":{},"84":{},"93":{},"102":{},"108":{},"114":{},"115":{},"116":{},"122":{},"123":{},"124":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{},"170":{},"176":{},"177":{},"178":{},"179":{},"185":{},"186":{},"187":{},"188":{},"204":{},"205":{},"206":{},"214":{},"215":{},"216":{},"230":{},"231":{},"232":{},"239":{},"240":{},"241":{},"259":{},"260":{},"261":{},"270":{},"271":{},"272":{},"285":{},"286":{},"287":{},"288":{},"293":{},"294":{},"295":{},"296":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"356":{},"357":{},"358":{},"363":{},"365":{},"366":{},"367":{},"368":{},"380":{},"381":{},"388":{},"389":{},"408":{},"409":{},"410":{},"416":{},"417":{},"418":{},"436":{},"437":{},"438":{},"447":{},"448":{},"449":{}},"component":{}}],["dependencies/jar",{"_index":3937,"title":{},"name":{},"text":{"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["dependencies/jars/hadoop",{"_index":3859,"title":{},"name":{},"text":{"330":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["deploy",{"_index":12,"title":{"1-11":{},"23-4":{},"23-9":{},"23-10":{},"23-13":{},"23-18":{},"23-23":{},"23-25":{},"54-5":{},"58-5":{},"60-1":{},"61-1":{},"62-1":{},"170-2":{},"176-2":{},"185-2":{},"304-1":{},"304-2":{},"322-1":{},"322-2":{},"436-1":{},"436-2":{},"447-1":{},"447-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"11":{},"14":{},"15":{},"23":{},"28":{},"30":{},"31":{},"32":{},"35":{},"41":{},"43":{},"44":{},"47":{},"48":{},"50":{},"55":{},"56":{},"60":{},"61":{},"62":{},"66":{},"74":{},"79":{},"83":{},"88":{},"92":{},"101":{},"107":{},"114":{},"116":{},"122":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"152":{},"154":{},"160":{},"161":{},"163":{},"169":{},"177":{},"179":{},"186":{},"188":{},"195":{},"204":{},"206":{},"214":{},"216":{},"222":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"249":{},"258":{},"259":{},"261":{},"269":{},"270":{},"272":{},"274":{},"275":{},"276":{},"279":{},"282":{},"283":{},"286":{},"288":{},"290":{},"291":{},"294":{},"296":{},"304":{},"306":{},"313":{},"322":{},"324":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"355":{},"358":{},"365":{},"368":{},"373":{},"382":{},"390":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"410":{},"415":{},"416":{},"418":{},"425":{},"426":{},"434":{},"436":{},"438":{},"445":{},"447":{},"449":{}},"component":{}}],["deploy/helm",{"_index":1169,"title":{},"name":{},"text":{"16":{}},"component":{}}],["deploy/helm/hdf",{"_index":3530,"title":{},"name":{},"text":{"195":{}},"component":{}}],["deploy/helm/secret",{"_index":2829,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["deploy/manifest",{"_index":3826,"title":{},"name":{},"text":{"329":{},"337":{},"345":{}},"component":{}}],["deploy/nificluster.yaml",{"_index":3739,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["deprec",{"_index":1778,"title":{"36-3":{}},"name":{},"text":{"36":{},"47":{}},"component":{}}],["derbi",{"_index":3268,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"152":{},"157":{},"161":{},"223":{},"229":{},"238":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["deriv",{"_index":2067,"title":{},"name":{},"text":{"41":{},"79":{},"88":{}},"component":{}}],["derive(clon",{"_index":1019,"title":{},"name":{},"text":{"14":{}},"component":{}}],["desc",{"_index":2525,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"152":{},"161":{}},"component":{}}],["describ",{"_index":1158,"title":{},"name":{},"text":{"16":{},"32":{},"33":{},"38":{},"41":{},"45":{},"50":{},"54":{},"55":{},"56":{},"58":{},"63":{},"69":{},"70":{},"71":{},"77":{},"78":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{},"195":{},"329":{},"331":{},"332":{},"337":{},"339":{},"340":{},"345":{},"347":{},"348":{},"354":{},"364":{},"436":{},"447":{}},"component":{}}],["descript",{"_index":888,"title":{},"name":{},"text":{"12":{},"16":{},"31":{},"44":{},"52":{},"54":{},"56":{},"58":{},"60":{},"61":{},"62":{},"232":{},"241":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{}},"component":{}}],["descriptor",{"_index":2188,"title":{},"name":{},"text":{"45":{}},"component":{}}],["deseri",{"_index":1020,"title":{},"name":{},"text":{"14":{}},"component":{}}],["design",{"_index":461,"title":{},"name":{},"text":{"6":{},"30":{},"31":{},"44":{},"62":{},"356":{},"366":{}},"component":{}}],["desir",{"_index":1028,"title":{},"name":{},"text":{"14":{},"16":{},"25":{},"33":{},"60":{},"61":{},"62":{}},"component":{}}],["dest",{"_index":3042,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dest_dir",{"_index":3045,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dest_dir}/example_bash_operator.pi",{"_index":3054,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dest_dir}/example_branch_datetime_operator.pi",{"_index":3058,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["dest_dir}/example_complex.pi",{"_index":3056,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["deta",{"_index":4110,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["detail",{"_index":217,"title":{"15-4":{},"39-6":{},"39-7":{},"39-9":{}},"name":{},"text":{"2":{},"10":{},"11":{},"13":{},"16":{},"19":{},"30":{},"32":{},"37":{},"39":{},"43":{},"44":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["detect",{"_index":1202,"title":{},"name":{},"text":{"16":{},"42":{},"60":{}},"component":{}}],["determin",{"_index":1796,"title":{},"name":{},"text":{"36":{},"63":{},"71":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["determinist",{"_index":2815,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["dev",{"_index":372,"title":{},"name":{},"text":{"4":{},"30":{},"32":{},"55":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"195":{},"206":{},"216":{},"232":{},"241":{},"249":{},"261":{},"272":{},"279":{},"288":{},"296":{},"306":{},"313":{},"324":{},"330":{},"338":{},"346":{},"353":{},"358":{},"363":{},"368":{},"382":{},"390":{},"410":{},"418":{},"425":{},"438":{},"449":{}},"component":{}}],["dev/airflow",{"_index":3265,"title":{},"name":{},"text":{"116":{},"124":{}},"component":{}}],["dev/common",{"_index":3263,"title":{},"name":{},"text":{"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["dev/druid",{"_index":3400,"title":{},"name":{},"text":{"154":{},"163":{}},"component":{}}],["dev/hbas",{"_index":3504,"title":{},"name":{},"text":{"179":{},"188":{}},"component":{}}],["dev/hdf",{"_index":3399,"title":{},"name":{},"text":{"154":{},"163":{},"179":{},"188":{},"206":{},"216":{}},"component":{}}],["dev/hiv",{"_index":3660,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["dev/index.yaml",{"_index":2354,"title":{},"name":{},"text":{"53":{}},"component":{}}],["dev/kafka",{"_index":3711,"title":{},"name":{},"text":{"261":{},"272":{}},"component":{}}],["dev/nifi",{"_index":3789,"title":{},"name":{},"text":{"288":{},"296":{}},"component":{}}],["dev/nightli",{"_index":3735,"title":{},"name":{},"text":{"279":{}},"component":{}}],["dev/nul",{"_index":3239,"title":{},"name":{},"text":{"114":{},"122":{},"152":{},"161":{},"259":{},"270":{},"304":{},"322":{},"380":{},"388":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["dev/opa",{"_index":3820,"title":{},"name":{},"text":{"306":{},"324":{}},"component":{}}],["dev/secret",{"_index":3264,"title":{},"name":{},"text":{"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"279":{},"288":{},"296":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["dev/spark",{"_index":3950,"title":{},"name":{},"text":{"358":{},"368":{}},"component":{}}],["dev/superset",{"_index":3987,"title":{},"name":{},"text":{"382":{},"390":{}},"component":{}}],["dev/trino",{"_index":4076,"title":{},"name":{},"text":{"410":{},"418":{}},"component":{}}],["dev/zookeep",{"_index":3397,"title":{},"name":{},"text":{"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"261":{},"272":{},"288":{},"296":{},"438":{},"449":{}},"component":{}}],["develop",{"_index":116,"title":{"12":{},"13-4":{}},"name":{},"text":{"1":{},"4":{},"7":{},"10":{},"12":{},"13":{},"16":{},"17":{},"27":{},"28":{},"30":{},"35":{},"36":{},"45":{},"47":{},"49":{},"53":{},"79":{},"88":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"195":{},"222":{},"249":{},"279":{},"313":{},"329":{},"337":{},"345":{},"373":{},"374":{},"379":{},"387":{},"395":{},"401":{},"425":{}},"component":{}}],["development_dashboard",{"_index":804,"title":{},"name":{"12":{}},"text":{},"component":{}}],["deviat",{"_index":1694,"title":{},"name":{},"text":{"34":{}},"component":{}}],["dfs.datanode.name.dir",{"_index":3543,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["dfs.namenod",{"_index":3509,"title":{},"name":{},"text":{"191":{},"199":{},"209":{}},"component":{}}],["dfs.namenode.num.checkpoints.retain",{"_index":3536,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["dfs.nameservic",{"_index":3511,"title":{},"name":{},"text":{"191":{},"199":{},"209":{}},"component":{}}],["dfsreplic",{"_index":3324,"title":{},"name":{},"text":{"152":{},"161":{},"177":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["diagram",{"_index":721,"title":{},"name":{},"text":{"10":{},"60":{},"61":{},"62":{},"63":{},"70":{},"71":{},"78":{}},"component":{}}],["dialog",{"_index":3387,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["dict",{"_index":3105,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["dictat",{"_index":2872,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["dictionari",{"_index":3926,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["dicuss",{"_index":2228,"title":{},"name":{},"text":{"47":{}},"component":{}}],["didn’t",{"_index":2404,"title":{},"name":{},"text":{"55":{},"61":{}},"component":{}}],["diff",{"_index":2648,"title":{},"name":{},"text":{"61":{}},"component":{}}],["differ",{"_index":584,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"16":{},"26":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"48":{},"50":{},"57":{},"61":{},"258":{},"269":{},"280":{},"285":{},"293":{},"304":{},"322":{},"329":{},"337":{},"345":{},"358":{},"368":{},"426":{},"427":{},"434":{},"435":{},"436":{},"445":{},"446":{},"447":{}},"component":{}}],["differenti",{"_index":2862,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["difficult",{"_index":1417,"title":{},"name":{},"text":{"26":{},"36":{},"37":{},"38":{}},"component":{}}],["diffurl",{"_index":3369,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["dilut",{"_index":1943,"title":{},"name":{},"text":{"38":{}},"component":{}}],["dimens",{"_index":2077,"title":{},"name":{},"text":{"41":{},"152":{},"161":{}},"component":{}}],["dimensionsspec",{"_index":3366,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["dir",{"_index":1502,"title":{},"name":{},"text":{"29":{},"102":{},"108":{},"113":{},"121":{},"196":{},"203":{},"213":{},"407":{},"415":{}},"component":{}}],["direct",{"_index":637,"title":{},"name":{},"text":{"8":{},"43":{},"44":{},"115":{},"123":{}},"component":{}}],["directli",{"_index":67,"title":{},"name":{},"text":{"1":{},"13":{},"15":{},"23":{},"34":{},"37":{},"38":{},"113":{},"114":{},"121":{},"122":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{},"422":{},"431":{},"442":{}},"component":{}}],["directori",{"_index":1130,"title":{"34":{},"29-8":{},"34-12":{}},"name":{},"text":{"16":{},"17":{},"29":{},"34":{},"37":{},"46":{},"51":{},"87":{},"96":{},"151":{},"152":{},"160":{},"161":{},"177":{},"186":{},"204":{},"214":{},"276":{},"283":{},"286":{},"291":{},"294":{},"436":{},"447":{}},"component":{}}],["directory_structur",{"_index":1681,"title":{},"name":{"34":{}},"text":{},"component":{}}],["disabl",{"_index":3220,"title":{},"name":{},"text":{"114":{},"122":{},"250":{},"258":{},"269":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["disadvantag",{"_index":3833,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["discov",{"_index":47,"title":{"11-6":{}},"name":{},"text":{"1":{},"15":{},"19":{},"166":{},"173":{},"182":{}},"component":{}}],["discoveri",{"_index":390,"title":{"11":{},"15":{},"127":{},"134":{},"141":{},"148":{},"157":{},"166":{},"173":{},"182":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{},"299":{},"309":{},"317":{},"422":{},"431":{},"442":{},"11-3":{},"11-4":{},"11-5":{},"14-5":{},"14-7":{},"15-2":{},"15-3":{},"15-5":{},"15-6":{},"15-7":{},"15-8":{},"42-6":{},"42-7":{},"436-3":{},"447-3":{}},"name":{"127":{},"134":{},"141":{},"148":{},"157":{},"166":{},"173":{},"182":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{},"299":{},"309":{},"317":{},"422":{},"431":{},"442":{}},"text":{"5":{},"7":{},"11":{},"14":{},"15":{},"40":{},"42":{},"127":{},"134":{},"141":{},"148":{},"151":{},"157":{},"160":{},"166":{},"173":{},"182":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{},"246":{},"250":{},"255":{},"258":{},"266":{},"269":{},"299":{},"301":{},"309":{},"311":{},"317":{},"319":{},"422":{},"427":{},"431":{},"435":{},"442":{},"446":{}},"component":{}}],["discuss",{"_index":903,"title":{"34-7":{}},"name":{},"text":{"12":{},"13":{},"27":{},"30":{},"34":{},"39":{},"40":{},"44":{},"48":{}},"component":{}}],["disk",{"_index":1719,"title":{},"name":{},"text":{"34":{},"53":{}},"component":{}}],["display",{"_index":3063,"title":{},"name":{},"text":{"113":{},"121":{},"177":{},"186":{},"204":{},"214":{}},"component":{}}],["disposed.\\n",{"_index":3188,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["disput",{"_index":2768,"title":{},"name":{},"text":{"62":{}},"component":{}}],["dist/hadoop",{"_index":3515,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["distinct",{"_index":683,"title":{},"name":{},"text":{"9":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["distinguish",{"_index":2125,"title":{},"name":{},"text":{"42":{}},"component":{}}],["distribut",{"_index":236,"title":{"60-9":{},"61-11":{}},"name":{},"text":{"2":{},"9":{},"11":{},"32":{},"34":{},"42":{},"45":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"170":{},"176":{},"185":{},"332":{},"340":{},"348":{}},"component":{}}],["distro",{"_index":2288,"title":{},"name":{},"text":{"51":{}},"component":{}}],["divert",{"_index":1717,"title":{},"name":{},"text":{"34":{}},"component":{}}],["divid",{"_index":465,"title":{},"name":{},"text":{"7":{},"115":{},"123":{},"153":{},"162":{},"178":{},"187":{},"205":{},"215":{},"231":{},"240":{},"260":{},"271":{},"287":{},"295":{},"305":{},"323":{},"357":{},"367":{},"381":{},"389":{},"409":{},"417":{},"437":{},"448":{}},"component":{}}],["dn",{"_index":2861,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["do",{"_index":1586,"title":{},"name":{},"text":{"30":{},"40":{},"41":{},"79":{},"88":{},"113":{},"121":{}},"component":{}}],["do_xcom_push=tru",{"_index":3211,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["doc",{"_index":1133,"title":{},"name":{},"text":{"16":{},"32":{},"131":{},"138":{},"145":{},"151":{},"160":{},"232":{},"241":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["docker",{"_index":105,"title":{"41-12":{},"41-19":{},"41-20":{},"79-1":{},"88-1":{},"100-2":{},"101-2":{},"106-2":{},"107-2":{},"112-2":{},"120-2":{},"130-2":{},"137-2":{},"144-2":{},"168-2":{},"169-2":{},"175-2":{},"184-2":{},"194-2":{},"202-2":{},"212-2":{},"221-2":{},"222-2":{},"228-2":{},"237-2":{},"248-2":{},"249-2":{},"257-2":{},"268-2":{},"278-2":{},"279-2":{},"284-2":{},"292-2":{},"302-2":{},"312-2":{},"313-2":{},"320-2":{},"328-2":{},"336-2":{},"344-2":{},"352-2":{},"362-2":{},"372-2":{},"373-2":{},"378-2":{},"386-2":{},"394-2":{},"395-2":{},"400-2":{},"401-2":{},"406-2":{},"414-2":{},"424-2":{},"425-2":{},"433-2":{},"444-2":{}},"name":{},"text":{"1":{},"12":{},"13":{},"16":{},"41":{},"66":{},"74":{},"79":{},"83":{},"88":{},"92":{},"98":{},"99":{},"100":{},"101":{},"102":{},"104":{},"105":{},"106":{},"107":{},"108":{},"110":{},"111":{},"112":{},"114":{},"118":{},"119":{},"120":{},"122":{},"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"168":{},"169":{},"172":{},"174":{},"175":{},"177":{},"181":{},"183":{},"184":{},"186":{},"190":{},"192":{},"194":{},"195":{},"198":{},"200":{},"202":{},"204":{},"208":{},"210":{},"212":{},"214":{},"218":{},"220":{},"221":{},"222":{},"225":{},"227":{},"228":{},"234":{},"236":{},"237":{},"244":{},"247":{},"248":{},"249":{},"253":{},"256":{},"257":{},"264":{},"267":{},"268":{},"275":{},"277":{},"278":{},"279":{},"282":{},"284":{},"290":{},"292":{},"298":{},"300":{},"302":{},"308":{},"310":{},"312":{},"313":{},"316":{},"318":{},"320":{},"326":{},"327":{},"328":{},"329":{},"330":{},"332":{},"334":{},"335":{},"336":{},"337":{},"338":{},"340":{},"342":{},"343":{},"344":{},"345":{},"346":{},"348":{},"350":{},"351":{},"352":{},"353":{},"355":{},"356":{},"360":{},"361":{},"362":{},"363":{},"365":{},"366":{},"369":{},"371":{},"372":{},"373":{},"374":{},"376":{},"377":{},"378":{},"380":{},"384":{},"385":{},"386":{},"388":{},"392":{},"393":{},"394":{},"395":{},"398":{},"399":{},"400":{},"401":{},"404":{},"405":{},"406":{},"412":{},"413":{},"414":{},"421":{},"423":{},"424":{},"425":{},"430":{},"432":{},"433":{},"441":{},"443":{},"444":{}},"component":{}}],["docker.stackable.tech/stack",{"_index":1167,"title":{},"name":{},"text":{"16":{}},"component":{}}],["docker.stackable.tech/stackable/$product:$product_vers",{"_index":2057,"title":{},"name":{},"text":{"41":{}},"component":{}}],["docker.stackable.tech/stackable/airflow",{"_index":2914,"title":{},"name":{},"text":{"98":{},"99":{},"100":{},"101":{},"104":{},"105":{},"106":{},"107":{},"110":{},"111":{},"112":{},"118":{},"119":{},"120":{}},"component":{}}],["docker.stackable.tech/stackable/druid",{"_index":3267,"title":{},"name":{},"text":{"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{}},"component":{}}],["docker.stackable.tech/stackable/h",{"_index":3595,"title":{},"name":{},"text":{"218":{},"220":{},"221":{},"222":{},"225":{},"227":{},"228":{},"234":{},"236":{},"237":{}},"component":{}}],["docker.stackable.tech/stackable/hadoop",{"_index":3523,"title":{},"name":{},"text":{"194":{},"202":{},"212":{}},"component":{}}],["docker.stackable.tech/stackable/hbas",{"_index":3402,"title":{},"name":{},"text":{"165":{},"167":{},"168":{},"169":{},"172":{},"174":{},"175":{},"181":{},"183":{},"184":{}},"component":{}}],["docker.stackable.tech/stackable/hdf",{"_index":3506,"title":{},"name":{},"text":{"190":{},"192":{},"195":{},"198":{},"200":{},"208":{},"210":{}},"component":{}}],["docker.stackable.tech/stackable/kafka",{"_index":3667,"title":{},"name":{},"text":{"244":{},"247":{},"248":{},"249":{},"253":{},"256":{},"257":{},"264":{},"267":{},"268":{}},"component":{}}],["docker.stackable.tech/stackable/ni",{"_index":3888,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["docker.stackable.tech/stackable/nifi",{"_index":3731,"title":{},"name":{},"text":{"275":{},"277":{},"278":{},"279":{},"282":{},"284":{},"290":{},"292":{}},"component":{}}],["docker.stackable.tech/stackable/opa",{"_index":3792,"title":{},"name":{},"text":{"298":{},"300":{},"302":{},"308":{},"310":{},"312":{},"313":{},"316":{},"318":{},"320":{}},"component":{}}],["docker.stackable.tech/stackable/pyspark",{"_index":3084,"title":{},"name":{},"text":{"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["docker.stackable.tech/stackable/spark",{"_index":2212,"title":{},"name":{},"text":{"45":{},"326":{},"327":{},"328":{},"330":{},"332":{},"334":{},"335":{},"336":{},"338":{},"340":{},"342":{},"343":{},"344":{},"346":{},"348":{},"350":{},"351":{},"352":{},"353":{},"355":{},"360":{},"361":{},"362":{},"363":{},"365":{}},"component":{}}],["docker.stackable.tech/stackable/superset",{"_index":3952,"title":{},"name":{},"text":{"369":{},"371":{},"372":{},"373":{},"376":{},"377":{},"378":{},"384":{},"385":{},"386":{}},"component":{}}],["docker.stackable.tech/stackable/test",{"_index":3559,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["docker.stackable.tech/stackable/tools:0.2.0",{"_index":3043,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["docker.stackable.tech/stackable/trino",{"_index":3989,"title":{},"name":{},"text":{"392":{},"393":{},"394":{},"395":{},"398":{},"399":{},"400":{},"401":{},"404":{},"405":{},"406":{},"412":{},"413":{},"414":{}},"component":{}}],["docker.stackable.tech/stackable/zookeep",{"_index":4087,"title":{},"name":{},"text":{"421":{},"423":{},"424":{},"425":{},"430":{},"432":{},"433":{},"441":{},"443":{},"444":{}},"component":{}}],["docker.stackable.tech/stackable/zookeeper:3.8.0",{"_index":4122,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["docker/dockerfil",{"_index":1166,"title":{},"name":{},"text":{"16":{},"79":{},"88":{}},"component":{}}],["docker/dockerfile.devel",{"_index":3528,"title":{},"name":{},"text":{"195":{}},"component":{}}],["dockerfil",{"_index":807,"title":{},"name":{},"text":{"12":{},"13":{},"41":{}},"component":{}}],["docs/components/nifi",{"_index":3726,"title":{},"name":{},"text":{"274":{},"275":{},"285":{},"293":{}},"component":{}}],["docs/html/administr",{"_index":3727,"title":{},"name":{},"text":{"274":{},"275":{},"285":{},"293":{}},"component":{}}],["docs/modules/root/partials/support",{"_index":1147,"title":{},"name":{},"text":{"16":{}},"component":{}}],["document",{"_index":204,"title":{"2":{},"17":{},"25":{},"16-5":{}},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"8":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"25":{},"26":{},"34":{},"36":{},"39":{},"44":{},"45":{},"46":{},"47":{},"51":{},"52":{},"54":{},"60":{},"61":{},"62":{},"63":{},"71":{},"85":{},"94":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"274":{},"275":{},"285":{},"293":{},"331":{},"332":{},"339":{},"340":{},"347":{},"348":{},"354":{},"364":{},"374":{},"379":{},"380":{},"387":{},"388":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["doesn’t",{"_index":59,"title":{},"name":{},"text":{"1":{},"33":{},"34":{},"41":{},"44":{},"67":{},"75":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["domain",{"_index":1295,"title":{},"name":{},"text":{"22":{},"35":{},"37":{},"80":{},"81":{},"84":{},"89":{},"90":{},"93":{}},"component":{}}],["domain.loc",{"_index":1899,"title":{},"name":{},"text":{"37":{}},"component":{}}],["done",{"_index":674,"title":{},"name":{},"text":{"9":{},"23":{},"29":{},"30":{},"31":{},"34":{},"35":{},"38":{},"41":{},"79":{},"87":{},"88":{},"96":{},"102":{},"108":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["don’t",{"_index":117,"title":{"31-9":{}},"name":{},"text":{"1":{},"2":{},"30":{},"31":{},"40":{},"41":{},"42":{},"45":{},"50":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"69":{},"77":{},"79":{},"88":{}},"component":{}}],["doubl",{"_index":2759,"title":{},"name":{},"text":{"62":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["doubt",{"_index":1474,"title":{},"name":{},"text":{"28":{}},"component":{}}],["down",{"_index":1550,"title":{},"name":{},"text":{"30":{},"44":{},"52":{},"54":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["download",{"_index":318,"title":{},"name":{},"text":{"3":{},"23":{},"51":{},"66":{},"74":{},"83":{},"92":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"195":{},"222":{},"249":{},"279":{},"313":{},"329":{},"337":{},"345":{},"373":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"415":{},"416":{},"425":{}},"component":{}}],["downsid",{"_index":1163,"title":{},"name":{},"text":{"16":{},"61":{}},"component":{}}],["downstream",{"_index":1565,"title":{},"name":{},"text":{"30":{}},"component":{}}],["draft",{"_index":1521,"title":{},"name":{},"text":{"30":{},"36":{},"48":{}},"component":{}}],["dramat",{"_index":2108,"title":{},"name":{},"text":{"41":{}},"component":{}}],["drastic",{"_index":2661,"title":{},"name":{},"text":{"62":{}},"component":{}}],["drawback",{"_index":1472,"title":{"34-6":{}},"name":{},"text":{"28":{}},"component":{}}],["drive",{"_index":3944,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["driven",{"_index":911,"title":{},"name":{},"text":{"12":{}},"component":{}}],["driver",{"_index":1360,"title":{"25-2":{},"26-2":{},"27-2":{},"28-2":{},"29-2":{},"30-2":{},"31-2":{},"34-3":{},"35-2":{},"36-12":{},"37-2":{},"39-2":{},"40-2":{},"41-5":{},"42-2":{},"43-2":{},"44-2":{},"45-2":{},"47-2":{},"48-2":{}},"name":{},"text":{"27":{},"48":{},"86":{},"95":{},"113":{},"121":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"223":{},"229":{},"238":{},"330":{},"331":{},"332":{},"338":{},"339":{},"340":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"356":{},"358":{},"363":{},"364":{},"365":{},"366":{},"368":{}},"component":{}}],["driver/executor",{"_index":3883,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["driver_info",{"_index":3170,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["driver_info[\"podnam",{"_index":3174,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["driver_pod_nam",{"_index":3173,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["driverinfo",{"_index":3169,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["druid",{"_index":196,"title":{"60":{},"61":{},"129":{},"136":{},"143":{},"150":{},"159":{},"2-5":{},"20-2":{},"23-12":{},"23-13":{},"23-18":{},"23-20":{},"23-27":{},"60-3":{},"61-5":{},"131-5":{},"131-11":{},"138-5":{},"138-11":{},"145-5":{},"145-12":{},"151-5":{},"151-13":{},"152-4":{},"160-5":{},"160-13":{},"161-4":{},"374-12":{},"379-7":{},"387-7":{}},"name":{"60":{},"61":{}},"text":{"2":{},"3":{},"5":{},"7":{},"10":{},"11":{},"12":{},"14":{},"18":{},"23":{},"39":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"374":{},"379":{},"387":{}},"component":{"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{}}}],["druid.server.http.numthread",{"_index":3313,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["druid.stackable.tech/v1alpha1",{"_index":736,"title":{},"name":{},"text":{"10":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{}},"component":{}}],["druid.yaml",{"_index":3342,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["druid/v2/sql",{"_index":3308,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["druid://simpl",{"_index":3278,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["druid=0.7.0",{"_index":3396,"title":{},"name":{},"text":{"154":{},"163":{}},"component":{}}],["druid_avatica_jdbc",{"_index":3271,"title":{},"name":{},"text":{"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{}},"component":{}}],["druid_rout",{"_index":3280,"title":{},"name":{},"text":{"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{}},"component":{}}],["druid_sqalchemi",{"_index":3309,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["druid_sqlalchemi",{"_index":3275,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["druidclust",{"_index":716,"title":{},"name":{},"text":{"10":{},"11":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{}},"component":{}}],["druidcluster.crd.yaml",{"_index":3283,"title":{},"name":{},"text":{"130":{},"137":{},"144":{}},"component":{}}],["druidclusters`",{"_index":3304,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["druidconnect",{"_index":1333,"title":{},"name":{},"text":{"23":{},"374":{},"379":{},"387":{}},"component":{}}],["druidconnection.crd.yaml",{"_index":3956,"title":{},"name":{},"text":{"373":{}},"component":{}}],["ds/secret",{"_index":2842,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["due",{"_index":2086,"title":{},"name":{},"text":{"41":{},"426":{},"434":{},"445":{}},"component":{}}],["dummyoper",{"_index":2994,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["duplic",{"_index":1594,"title":{},"name":{},"text":{"30":{},"31":{},"38":{},"41":{},"61":{}},"component":{}}],["durat",{"_index":3230,"title":{},"name":{},"text":{"114":{},"122":{},"356":{},"366":{},"380":{},"388":{}},"component":{}}],["duration_min",{"_index":2716,"title":{},"name":{},"text":{"62":{}},"component":{}}],["dure",{"_index":805,"title":{},"name":{},"text":{"12":{},"25":{},"27":{},"29":{},"30":{},"33":{},"38":{},"44":{},"45":{}},"component":{}}],["duti",{"_index":684,"title":{},"name":{},"text":{"9":{}},"component":{}}],["dynam",{"_index":1759,"title":{},"name":{},"text":{"35":{},"152":{},"161":{}},"component":{}}],["e",{"_index":3185,"title":{},"name":{},"text":{"113":{},"121":{},"259":{},"270":{}},"component":{}}],["e.g",{"_index":164,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"14":{},"32":{},"33":{},"40":{},"42":{},"43":{},"48":{},"50":{},"51":{},"52":{},"53":{},"57":{},"60":{},"61":{},"62":{},"69":{},"77":{},"102":{},"108":{},"114":{},"122":{},"204":{},"214":{},"230":{},"239":{},"243":{},"244":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"355":{},"365":{},"408":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["e267",{"_index":2007,"title":{},"name":{},"text":{"39":{}},"component":{}}],["e59bf4fe3bb4",{"_index":2010,"title":{},"name":{},"text":{"39":{}},"component":{}}],["each",{"_index":266,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"10":{},"11":{},"13":{},"15":{},"16":{},"20":{},"32":{},"33":{},"35":{},"36":{},"37":{},"41":{},"55":{},"79":{},"85":{},"88":{},"94":{},"102":{},"108":{},"113":{},"121":{},"152":{},"161":{},"177":{},"186":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{},"219":{},"226":{},"235":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"301":{},"311":{},"319":{},"330":{},"331":{},"332":{},"338":{},"339":{},"340":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"358":{},"363":{},"364":{},"365":{},"368":{},"407":{},"415":{},"420":{},"421":{},"422":{},"426":{},"427":{},"429":{},"430":{},"431":{},"434":{},"435":{},"440":{},"441":{},"442":{},"445":{},"446":{}},"component":{}}],["earli",{"_index":1505,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["earlier",{"_index":3090,"title":{},"name":{},"text":{"113":{},"121":{},"408":{},"416":{}},"component":{}}],["earliest",{"_index":2817,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["earthquak",{"_index":2334,"title":{"60":{},"60-9":{}},"name":{"60":{}},"text":{"52":{},"54":{},"60":{}},"component":{}}],["eas",{"_index":1602,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{}}],["easi",{"_index":102,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"27":{},"28":{},"29":{},"30":{},"39":{},"40":{},"41":{},"42":{},"47":{},"55":{}},"component":{}}],["easier",{"_index":961,"title":{},"name":{},"text":{"13":{},"16":{},"26":{},"27":{},"29":{},"38":{},"39":{},"43":{},"49":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["easiest",{"_index":2792,"title":{},"name":{},"text":{"66":{},"74":{},"83":{},"92":{},"101":{},"107":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"160":{},"169":{},"195":{},"222":{},"249":{},"279":{},"313":{},"329":{},"337":{},"345":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["easili",{"_index":113,"title":{},"name":{},"text":{"1":{},"5":{},"13":{},"16":{},"30":{},"32":{},"33":{},"34":{},"49":{},"330":{},"338":{},"346":{},"353":{},"363":{},"408":{},"416":{}},"component":{}}],["echo",{"_index":186,"title":{},"name":{},"text":{"1":{},"51":{},"79":{},"88":{},"259":{},"270":{},"280":{},"285":{},"286":{},"293":{},"294":{}},"component":{}}],["ecosystem",{"_index":245,"title":{},"name":{},"text":{"2":{},"48":{}},"component":{}}],["edit",{"_index":3391,"title":{},"name":{},"text":{"152":{},"161":{},"331":{},"339":{},"347":{}},"component":{}}],["editor",{"_index":929,"title":{"13-5":{}},"name":{},"text":{"13":{},"23":{},"60":{},"61":{},"62":{}},"component":{}}],["ednpoint",{"_index":2221,"title":{},"name":{},"text":{"45":{}},"component":{}}],["effect",{"_index":1613,"title":{},"name":{},"text":{"31":{},"38":{},"41":{},"60":{},"61":{},"84":{},"93":{},"380":{},"388":{}},"component":{}}],["effici",{"_index":427,"title":{},"name":{},"text":{"5":{},"62":{}},"component":{}}],["effort",{"_index":1415,"title":{},"name":{},"text":{"26":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"36":{},"39":{},"40":{},"44":{},"45":{},"48":{}},"component":{}}],["eitz",{"_index":2581,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ek",{"_index":1783,"title":{"36-8":{}},"name":{},"text":{},"component":{}}],["elasticsearch",{"_index":2242,"title":{},"name":{},"text":{"48":{}},"component":{}}],["elect",{"_index":3719,"title":{},"name":{},"text":{"274":{},"275":{},"282":{},"290":{}},"component":{}}],["element",{"_index":3034,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"176":{},"185":{},"274":{},"275":{},"282":{},"290":{},"329":{},"337":{},"345":{}},"component":{}}],["elif",{"_index":3203,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["elimin",{"_index":3830,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["elsewher",{"_index":3928,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["elvish",{"_index":2319,"title":{},"name":{},"text":{"51":{}},"component":{}}],["email",{"_index":2790,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["emb",{"_index":1890,"title":{},"name":{},"text":{"37":{}},"component":{}}],["embed",{"_index":2985,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"223":{},"229":{},"238":{}},"component":{}}],["emit",{"_index":2445,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["emphasi",{"_index":1207,"title":{},"name":{},"text":{"17":{}},"component":{}}],["employe",{"_index":2271,"title":{},"name":{},"text":{"49":{}},"component":{}}],["empti",{"_index":3562,"title":{},"name":{},"text":{"204":{},"214":{},"232":{},"241":{}},"component":{}}],["emul",{"_index":1648,"title":{},"name":{},"text":{"32":{}},"component":{}}],["enabl",{"_index":60,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"7":{},"11":{},"14":{},"18":{},"23":{},"40":{},"44":{},"51":{},"60":{},"61":{},"62":{},"67":{},"68":{},"69":{},"70":{},"75":{},"76":{},"77":{},"78":{},"193":{},"201":{},"211":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["enable/dis",{"_index":2537,"title":{},"name":{},"text":{"60":{}},"component":{}}],["encapsul",{"_index":732,"title":{"330-3":{},"338-3":{},"346-3":{},"353-3":{},"363-3":{}},"name":{},"text":{"10":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["enclos",{"_index":720,"title":{},"name":{},"text":{"10":{}},"component":{}}],["encod",{"_index":3977,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["encrypt",{"_index":66,"title":{"258-3":{},"269-3":{},"426-1":{},"434-1":{},"445-1":{}},"name":{},"text":{"1":{},"23":{},"35":{},"40":{},"223":{},"229":{},"238":{},"243":{},"244":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"407":{},"415":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["end",{"_index":1304,"title":{"23":{}},"name":{"23":{}},"text":{"23":{},"30":{},"35":{},"36":{},"39":{},"41":{},"48":{},"50":{},"52":{},"54":{},"62":{},"102":{},"108":{},"113":{},"121":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["end_data_pipeline_exampl",{"_index":1305,"title":{},"name":{"23":{}},"text":{},"component":{}}],["endpoint",{"_index":1242,"title":{"39-6":{},"39-7":{},"39-9":{},"80-1":{},"81-2":{},"89-1":{},"90-2":{}},"name":{},"text":{"19":{},"39":{},"40":{},"45":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"193":{},"201":{},"211":{},"286":{},"294":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["endpojnt",{"_index":2222,"title":{},"name":{},"text":{"45":{}},"component":{}}],["enforc",{"_index":486,"title":{},"name":{},"text":{"7":{},"14":{},"28":{},"35":{},"37":{},"62":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["engin",{"_index":268,"title":{"48":{}},"name":{},"text":{"2":{},"7":{},"14":{},"48":{},"62":{}},"component":{}}],["engine/vers",{"_index":1837,"title":{},"name":{},"text":{"36":{}},"component":{}}],["english",{"_index":1367,"title":{"25":{},"25-9":{}},"name":{},"text":{"25":{},"46":{}},"component":{}}],["enough",{"_index":768,"title":{},"name":{},"text":{"11":{},"30":{},"32":{},"35":{}},"component":{}}],["enrich",{"_index":2794,"title":{"67":{},"75":{}},"name":{"67":{},"75":{}},"text":{"67":{},"70":{},"75":{},"78":{}},"component":{}}],["enrichment.stackable.tech/en",{"_index":2798,"title":{},"name":{},"text":{"67":{},"75":{}},"component":{}}],["enrichment.stackable.tech/nod",{"_index":2800,"title":{},"name":{},"text":{"67":{},"75":{}},"component":{}}],["ensembl",{"_index":3664,"title":{},"name":{},"text":{"243":{},"244":{},"245":{},"252":{},"253":{},"254":{},"263":{},"264":{},"265":{},"274":{},"275":{},"276":{},"282":{},"283":{},"290":{},"291":{},"424":{},"433":{},"444":{}},"component":{}}],["ensur",{"_index":645,"title":{},"name":{},"text":{"8":{},"14":{},"16":{},"27":{},"30":{},"31":{},"39":{},"52":{},"54":{},"55":{},"56":{},"58":{},"66":{},"68":{},"74":{},"76":{},"79":{},"83":{},"88":{},"92":{},"101":{},"107":{},"114":{},"122":{},"130":{},"137":{},"144":{},"169":{},"176":{},"185":{},"195":{},"222":{},"249":{},"279":{},"301":{},"311":{},"313":{},"319":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"363":{},"373":{},"374":{},"380":{},"388":{},"395":{},"401":{},"425":{}},"component":{}}],["entail",{"_index":3217,"title":{},"name":{},"text":{"114":{},"122":{},"374":{}},"component":{}}],["enter",{"_index":1834,"title":{},"name":{},"text":{"36":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"176":{},"185":{},"374":{},"380":{},"388":{},"408":{},"416":{}},"component":{}}],["enterpris",{"_index":1764,"title":{},"name":{},"text":{"35":{}},"component":{}}],["entir",{"_index":731,"title":{},"name":{},"text":{"10":{},"23":{},"38":{},"44":{}},"component":{}}],["entiti",{"_index":2191,"title":{},"name":{},"text":{"45":{}},"component":{}}],["entri",{"_index":350,"title":{},"name":{},"text":{"4":{},"7":{},"14":{},"15":{},"16":{},"44":{},"45":{},"87":{},"96":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{},"436":{},"447":{}},"component":{}}],["entry_from_cm",{"_index":1096,"title":{},"name":{},"text":{"15":{}},"component":{}}],["entry_from_cm(cli",{"_index":1105,"title":{},"name":{},"text":{"15":{}},"component":{}}],["enum",{"_index":1981,"title":{},"name":{},"text":{"39":{},"42":{},"45":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["enum(ldap",{"_index":1912,"title":{},"name":{},"text":{"37":{}},"component":{}}],["env",{"_index":1088,"title":{},"name":{},"text":{"15":{},"98":{},"99":{},"101":{},"102":{},"104":{},"105":{},"107":{},"108":{},"110":{},"111":{},"113":{},"118":{},"119":{},"121":{},"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"169":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"222":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"249":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"279":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"313":{},"316":{},"318":{},"326":{},"327":{},"334":{},"335":{},"342":{},"343":{},"350":{},"351":{},"360":{},"361":{},"369":{},"371":{},"373":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"395":{},"398":{},"399":{},"401":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"425":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["env.sh",{"_index":3413,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["env_var_arg",{"_index":2917,"title":{},"name":{"99":{},"105":{},"111":{},"119":{},"128":{},"135":{},"142":{},"149":{},"158":{},"167":{},"174":{},"183":{},"192":{},"200":{},"210":{},"220":{},"227":{},"236":{},"247":{},"256":{},"267":{},"277":{},"300":{},"310":{},"318":{},"327":{},"335":{},"343":{},"351":{},"361":{},"371":{},"377":{},"385":{},"393":{},"399":{},"405":{},"413":{},"423":{},"432":{},"443":{}},"text":{},"component":{}}],["env_var_from_cm(nam",{"_index":1068,"title":{},"name":{},"text":{"15":{}},"component":{}}],["environ",{"_index":220,"title":{"13-4":{},"98-4":{},"102-5":{},"102-7":{},"104-4":{},"108-5":{},"108-7":{},"110-4":{},"113-2":{},"113-4":{},"118-4":{},"121-2":{},"121-4":{},"126-4":{},"131-13":{},"131-15":{},"133-4":{},"138-13":{},"138-15":{},"140-4":{},"145-14":{},"145-16":{},"147-4":{},"151-15":{},"151-17":{},"156-4":{},"160-15":{},"160-17":{},"165-4":{},"172-4":{},"181-4":{},"190-4":{},"196-2":{},"196-4":{},"198-4":{},"203-2":{},"203-4":{},"208-4":{},"213-2":{},"213-4":{},"218-4":{},"223-4":{},"223-6":{},"225-4":{},"229-4":{},"229-6":{},"234-4":{},"238-4":{},"238-6":{},"244-4":{},"250-3":{},"250-5":{},"253-4":{},"258-5":{},"258-7":{},"264-4":{},"269-5":{},"269-7":{},"275-4":{},"280-2":{},"280-4":{},"282-4":{},"285-8":{},"285-10":{},"290-4":{},"293-8":{},"293-10":{},"298-5":{},"303-3":{},"303-5":{},"308-5":{},"314-3":{},"314-5":{},"316-5":{},"321-3":{},"321-5":{},"326-3":{},"334-3":{},"342-3":{},"350-3":{},"360-3":{},"369-4":{},"374-14":{},"374-16":{},"376-4":{},"379-9":{},"379-11":{},"384-4":{},"387-9":{},"387-11":{},"392-4":{},"396-17":{},"396-19":{},"398-4":{},"402-17":{},"402-19":{},"404-4":{},"407-20":{},"407-22":{},"412-4":{},"415-20":{},"415-22":{},"421-4":{},"426-4":{},"426-6":{},"430-4":{},"434-4":{},"434-6":{},"441-4":{},"445-4":{},"445-6":{}},"name":{},"text":{"2":{},"7":{},"12":{},"13":{},"15":{},"16":{},"29":{},"32":{},"39":{},"41":{},"45":{},"47":{},"48":{},"49":{},"51":{},"80":{},"81":{},"89":{},"90":{},"98":{},"101":{},"102":{},"104":{},"107":{},"108":{},"110":{},"113":{},"118":{},"121":{},"126":{},"130":{},"131":{},"133":{},"137":{},"138":{},"140":{},"144":{},"145":{},"147":{},"151":{},"156":{},"160":{},"165":{},"169":{},"170":{},"172":{},"176":{},"181":{},"185":{},"190":{},"196":{},"198":{},"203":{},"208":{},"213":{},"218":{},"222":{},"223":{},"225":{},"229":{},"234":{},"238":{},"244":{},"249":{},"250":{},"253":{},"258":{},"264":{},"269":{},"275":{},"279":{},"280":{},"282":{},"285":{},"290":{},"293":{},"297":{},"298":{},"303":{},"307":{},"308":{},"313":{},"314":{},"315":{},"316":{},"321":{},"326":{},"332":{},"334":{},"340":{},"342":{},"348":{},"350":{},"355":{},"360":{},"365":{},"369":{},"373":{},"374":{},"376":{},"379":{},"384":{},"387":{},"392":{},"395":{},"396":{},"398":{},"401":{},"402":{},"404":{},"407":{},"412":{},"415":{},"420":{},"421":{},"425":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["envoverrid",{"_index":2980,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["envvar",{"_index":1062,"title":{},"name":{},"text":{"15":{}},"component":{}}],["envvar::default",{"_index":1079,"title":{},"name":{},"text":{"15":{}},"component":{}}],["envvarsourc",{"_index":1066,"title":{},"name":{},"text":{"15":{}},"component":{}}],["envvarsource::default",{"_index":1078,"title":{},"name":{},"text":{"15":{}},"component":{}}],["eof",{"_index":3533,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"332":{},"340":{},"348":{}},"component":{}}],["ephemer",{"_index":2890,"title":{},"name":{},"text":{"86":{},"87":{},"95":{},"96":{}},"component":{}}],["ephemeralvolumesourc",{"_index":2899,"title":{},"name":{},"text":{"87":{},"96":{}},"component":{}}],["equal",{"_index":1048,"title":{},"name":{},"text":{"15":{},"60":{},"87":{},"96":{}},"component":{}}],["equival",{"_index":2001,"title":{},"name":{},"text":{"39":{}},"component":{}}],["error",{"_index":987,"title":{},"name":{},"text":{"13":{},"16":{},"52":{},"54":{},"60":{},"61":{},"223":{},"229":{},"238":{},"380":{},"388":{}},"component":{}}],["error::operatorresult",{"_index":1093,"title":{},"name":{},"text":{"15":{}},"component":{}}],["escap",{"_index":3419,"title":{},"name":{},"text":{"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["especi",{"_index":651,"title":{},"name":{},"text":{"9":{}},"component":{}}],["establish",{"_index":1945,"title":{},"name":{},"text":{"38":{},"39":{},"47":{},"48":{},"113":{},"121":{},"436":{},"447":{}},"component":{}}],["etc",{"_index":531,"title":{},"name":{},"text":{"7":{},"14":{},"25":{},"33":{},"34":{},"35":{},"37":{},"113":{},"121":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"274":{},"275":{},"282":{},"290":{},"374":{},"379":{},"380":{},"387":{},"388":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["etc/nix/nix.conf",{"_index":2844,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["etc/opt",{"_index":1692,"title":{},"name":{},"text":{"34":{}},"component":{}}],["etc/opt/stack",{"_index":1715,"title":{},"name":{},"text":{"34":{}},"component":{}}],["etc/stackable/airflow",{"_index":2903,"title":{},"name":{},"text":{"97":{},"98":{},"99":{},"103":{},"104":{},"105":{},"109":{},"110":{},"111":{},"117":{},"118":{},"119":{}},"component":{}}],["etc/stackable/druid",{"_index":3266,"title":{},"name":{},"text":{"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"146":{},"147":{},"149":{},"151":{},"155":{},"156":{},"158":{},"160":{}},"component":{}}],["etc/stackable/h",{"_index":3594,"title":{},"name":{},"text":{"217":{},"218":{},"220":{},"224":{},"225":{},"227":{},"233":{},"234":{},"236":{}},"component":{}}],["etc/stackable/hbas",{"_index":3401,"title":{},"name":{},"text":{"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"180":{},"181":{},"183":{}},"component":{}}],["etc/stackable/hdf",{"_index":3505,"title":{},"name":{},"text":{"189":{},"190":{},"192":{},"197":{},"198":{},"200":{},"207":{},"208":{},"210":{}},"component":{}}],["etc/stackable/kafka",{"_index":3661,"title":{},"name":{},"text":{"242":{},"244":{},"247":{},"250":{},"251":{},"253":{},"256":{},"258":{},"262":{},"264":{},"267":{},"269":{}},"component":{}}],["etc/stackable/nifi",{"_index":3712,"title":{},"name":{},"text":{"273":{},"275":{},"277":{},"281":{},"282":{},"289":{},"290":{}},"component":{}}],["etc/stackable/opa",{"_index":3790,"title":{},"name":{},"text":{"297":{},"298":{},"300":{},"303":{},"307":{},"308":{},"310":{},"314":{},"315":{},"316":{},"318":{},"321":{}},"component":{}}],["etc/stackable/superset",{"_index":3951,"title":{},"name":{},"text":{"369":{},"370":{},"371":{},"375":{},"376":{},"377":{},"383":{},"384":{},"385":{}},"component":{}}],["etc/stackable/trino",{"_index":3988,"title":{},"name":{},"text":{"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"411":{},"412":{},"413":{},"415":{}},"component":{}}],["etc/stackable/zookeep",{"_index":4077,"title":{},"name":{},"text":{"419":{},"421":{},"423":{},"426":{},"428":{},"430":{},"432":{},"434":{},"439":{},"441":{},"443":{},"445":{}},"component":{}}],["etc/systemd/system",{"_index":1492,"title":{},"name":{},"text":{"29":{}},"component":{}}],["etcd",{"_index":1585,"title":{"47-7":{}},"name":{},"text":{"30":{},"47":{}},"component":{}}],["etl",{"_index":1328,"title":{},"name":{},"text":{"23":{}},"component":{}}],["eu",{"_index":3489,"title":{},"name":{},"text":{"177":{},"186":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["evalu",{"_index":468,"title":{},"name":{},"text":{"7":{},"39":{}},"component":{}}],["even",{"_index":902,"title":{},"name":{},"text":{"12":{},"16":{},"30":{},"31":{},"36":{},"37":{},"41":{},"45":{},"47":{}},"component":{}}],["event",{"_index":289,"title":{},"name":{},"text":{"2":{},"38":{},"45":{},"60":{},"61":{}},"component":{}}],["eventcount",{"_index":3332,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["eventlog",{"_index":2196,"title":{},"name":{},"text":{"45":{}},"component":{}}],["eventu",{"_index":3388,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["everyon",{"_index":1646,"title":{},"name":{},"text":{"32":{}},"component":{}}],["everyth",{"_index":740,"title":{},"name":{},"text":{"10":{},"16":{},"23":{},"30":{},"31":{},"44":{},"52":{},"54":{},"285":{},"293":{}},"component":{}}],["everywher",{"_index":429,"title":{},"name":{},"text":{"5":{},"51":{}},"component":{}}],["evict",{"_index":2805,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["evolv",{"_index":1949,"title":{},"name":{},"text":{"38":{}},"component":{}}],["exact",{"_index":765,"title":{},"name":{},"text":{"11":{},"41":{},"49":{},"84":{},"93":{}},"component":{}}],["exactli",{"_index":796,"title":{},"name":{},"text":{"11":{},"14":{},"37":{},"41":{},"62":{}},"component":{}}],["examin",{"_index":1175,"title":{},"name":{},"text":{"16":{},"62":{}},"component":{}}],["exampl",{"_index":89,"title":{"3-2":{},"9-6":{},"10-3":{},"11-2":{},"14-3":{},"22-2":{},"22-4":{},"84-5":{},"93-5":{},"127-1":{},"134-1":{},"141-1":{},"148-1":{},"152-6":{},"157-1":{},"161-6":{},"166-1":{},"173-1":{},"182-1":{},"191-1":{},"199-1":{},"209-1":{},"219-1":{},"223-7":{},"226-1":{},"229-7":{},"235-1":{},"238-7":{},"246-1":{},"255-1":{},"266-1":{},"299-1":{},"309-1":{},"317-1":{},"329-4":{},"332-2":{},"337-4":{},"340-2":{},"345-4":{},"348-2":{},"355-1":{},"365-1":{}},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"9":{},"10":{},"11":{},"14":{},"15":{},"16":{},"17":{},"22":{},"30":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"41":{},"42":{},"44":{},"45":{},"48":{},"57":{},"63":{},"69":{},"71":{},"77":{},"84":{},"85":{},"86":{},"87":{},"93":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"115":{},"116":{},"121":{},"122":{},"123":{},"124":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{},"170":{},"176":{},"179":{},"185":{},"188":{},"196":{},"203":{},"206":{},"213":{},"216":{},"217":{},"218":{},"223":{},"224":{},"225":{},"229":{},"233":{},"234":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"299":{},"303":{},"306":{},"309":{},"314":{},"317":{},"321":{},"324":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"356":{},"358":{},"363":{},"365":{},"366":{},"368":{},"374":{},"379":{},"380":{},"382":{},"387":{},"388":{},"390":{},"396":{},"402":{},"407":{},"415":{},"426":{},"427":{},"434":{},"435":{},"438":{},"445":{},"446":{},"449":{}},"component":{}}],["example.md",{"_index":2263,"title":{},"name":{},"text":{"48":{}},"component":{}}],["example2",{"_index":3001,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["example_bash_operator.pi",{"_index":3033,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["example_complex",{"_index":3240,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["example_valu",{"_index":3003,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["examples/simpl",{"_index":4010,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["examples_2.12",{"_index":3844,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["except",{"_index":3097,"title":{},"name":{},"text":{"113":{},"121":{},"193":{},"201":{},"211":{},"408":{},"416":{}},"component":{}}],["excerpt",{"_index":1688,"title":{},"name":{},"text":{"34":{}},"component":{}}],["exclud",{"_index":317,"title":{},"name":{},"text":{"3":{},"25":{},"27":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["excludepackag",{"_index":3873,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["exclus",{"_index":1563,"title":{},"name":{},"text":{"30":{},"31":{},"47":{},"48":{},"85":{},"94":{}},"component":{}}],["exec",{"_index":2852,"title":{},"name":{},"text":{"79":{},"88":{},"177":{},"186":{},"204":{},"214":{},"356":{},"366":{}},"component":{}}],["execut",{"_index":123,"title":{"60-10":{},"60-14":{},"61-12":{},"61-16":{},"62-6":{},"62-9":{}},"name":{},"text":{"1":{},"2":{},"16":{},"30":{},"34":{},"51":{},"60":{},"61":{},"62":{},"79":{},"88":{},"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"356":{},"357":{},"358":{},"366":{},"367":{},"368":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["executable.jar",{"_index":4013,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["execute(self",{"_index":3140,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["executor",{"_index":2962,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"330":{},"331":{},"332":{},"338":{},"339":{},"340":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"356":{},"358":{},"363":{},"364":{},"365":{},"366":{},"368":{}},"component":{}}],["executor(",{"_index":3938,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["exisit",{"_index":801,"title":{},"name":{},"text":{"11":{}},"component":{}}],["exist",{"_index":237,"title":{"31":{},"15-9":{},"19-4":{},"52-5":{},"54-3":{},"58-3":{}},"name":{},"text":{"2":{},"11":{},"12":{},"13":{},"19":{},"25":{},"30":{},"31":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"46":{},"48":{},"49":{},"62":{},"85":{},"94":{},"113":{},"121":{},"245":{},"254":{},"265":{},"276":{},"283":{},"291":{},"297":{},"298":{},"307":{},"308":{},"315":{},"316":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["exit",{"_index":3024,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["expand",{"_index":1972,"title":{},"name":{},"text":{"39":{},"41":{}},"component":{}}],["expect",{"_index":641,"title":{},"name":{},"text":{"8":{},"29":{},"30":{},"34":{},"44":{},"47":{},"48":{},"60":{},"68":{},"76":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"274":{},"275":{},"282":{},"285":{},"290":{},"293":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["expens",{"_index":1768,"title":{},"name":{},"text":{"35":{}},"component":{}}],["experi",{"_index":977,"title":{},"name":{},"text":{"13":{},"37":{},"55":{}},"component":{}}],["experienc",{"_index":1777,"title":{},"name":{},"text":{"35":{}},"component":{}}],["experiment",{"_index":2843,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["expertis",{"_index":2230,"title":{},"name":{},"text":{"47":{}},"component":{}}],["expir",{"_index":2803,"title":{"68-2":{},"76-2":{}},"name":{},"text":{"68":{},"76":{},"85":{},"94":{}},"component":{}}],["expiri",{"_index":2816,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["explain",{"_index":787,"title":{},"name":{},"text":{"11":{},"17":{},"32":{},"41":{},"131":{},"138":{},"145":{},"151":{},"160":{},"330":{},"338":{},"346":{},"353":{},"363":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["explan",{"_index":3305,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["explicit",{"_index":341,"title":{},"name":{},"text":{"4":{},"36":{}},"component":{}}],["explicitli",{"_index":597,"title":{},"name":{},"text":{"8":{},"258":{},"269":{},"274":{},"275":{},"285":{},"293":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["explor",{"_index":301,"title":{},"name":{},"text":{"2":{},"23":{},"60":{},"61":{},"62":{}},"component":{}}],["exponenti",{"_index":2343,"title":{},"name":{},"text":{"52":{},"54":{}},"component":{}}],["export",{"_index":2909,"title":{},"name":{},"text":{"98":{},"99":{},"102":{},"104":{},"105":{},"108":{},"110":{},"111":{},"113":{},"114":{},"118":{},"119":{},"121":{},"122":{},"126":{},"128":{},"131":{},"133":{},"135":{},"138":{},"140":{},"142":{},"145":{},"147":{},"149":{},"151":{},"156":{},"158":{},"160":{},"165":{},"167":{},"170":{},"172":{},"174":{},"176":{},"181":{},"183":{},"185":{},"190":{},"192":{},"193":{},"196":{},"198":{},"200":{},"201":{},"203":{},"208":{},"210":{},"211":{},"213":{},"218":{},"220":{},"223":{},"225":{},"227":{},"229":{},"234":{},"236":{},"238":{},"244":{},"247":{},"250":{},"253":{},"256":{},"258":{},"264":{},"267":{},"269":{},"275":{},"277":{},"280":{},"282":{},"285":{},"290":{},"293":{},"298":{},"300":{},"303":{},"308":{},"310":{},"314":{},"316":{},"318":{},"321":{},"326":{},"327":{},"334":{},"335":{},"342":{},"343":{},"350":{},"351":{},"360":{},"361":{},"369":{},"371":{},"374":{},"376":{},"377":{},"379":{},"380":{},"384":{},"385":{},"387":{},"388":{},"392":{},"393":{},"396":{},"398":{},"399":{},"402":{},"404":{},"405":{},"407":{},"412":{},"413":{},"415":{},"421":{},"423":{},"426":{},"430":{},"432":{},"434":{},"441":{},"443":{},"445":{}},"component":{}}],["expos",{"_index":997,"title":{"15-2":{}},"name":{},"text":{"14":{},"15":{},"37":{},"57":{},"102":{},"108":{},"113":{},"121":{},"127":{},"134":{},"141":{},"148":{},"157":{},"166":{},"173":{},"182":{},"191":{},"193":{},"199":{},"201":{},"209":{},"211":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{},"299":{},"303":{},"309":{},"314":{},"317":{},"321":{},"407":{},"415":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["exposeconfig",{"_index":2965,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["express",{"_index":1650,"title":{"33":{}},"name":{},"text":{"34":{},"40":{},"46":{},"48":{},"51":{},"63":{},"70":{},"71":{},"78":{},"113":{},"121":{},"374":{},"379":{},"387":{}},"component":{}}],["extend",{"_index":2016,"title":{"40-7":{}},"name":{},"text":{"40":{},"44":{}},"component":{}}],["extens",{"_index":982,"title":{},"name":{},"text":{"13":{},"30":{},"50":{},"84":{},"93":{},"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["extern",{"_index":155,"title":{"14-11":{},"102-1":{},"108-1":{},"332-3":{},"332-4":{},"332-5":{},"332-6":{},"332-7":{},"340-3":{},"340-4":{},"340-5":{},"340-6":{},"340-7":{},"348-3":{},"348-4":{},"348-5":{},"348-6":{},"348-7":{},"355-2":{},"355-3":{},"355-4":{},"355-5":{},"355-6":{},"365-2":{},"365-3":{},"365-4":{},"365-5":{},"365-6":{}},"name":{},"text":{"1":{},"8":{},"11":{},"14":{},"16":{},"28":{},"31":{},"39":{},"40":{},"44":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"67":{},"75":{},"85":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["external_loc",{"_index":2760,"title":{},"name":{},"text":{"62":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["extra",{"_index":1695,"title":{},"name":{},"text":{"34":{},"39":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"79":{},"84":{},"88":{},"93":{},"114":{},"122":{},"274":{},"275":{},"276":{},"282":{},"283":{},"286":{},"290":{},"291":{},"294":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["extract",{"_index":999,"title":{},"name":{},"text":{"14":{},"176":{},"185":{},"286":{},"294":{}},"component":{}}],["extrem",{"_index":1994,"title":{},"name":{},"text":{"39":{},"45":{},"47":{}},"component":{}}],["ey",{"_index":1574,"title":{},"name":{},"text":{"30":{}},"component":{}}],["f",{"_index":1161,"title":{},"name":{},"text":{"16":{},"23":{},"60":{},"61":{},"66":{},"74":{},"79":{},"88":{},"101":{},"107":{},"114":{},"122":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"152":{},"160":{},"161":{},"169":{},"177":{},"186":{},"195":{},"196":{},"203":{},"204":{},"213":{},"214":{},"222":{},"230":{},"239":{},"249":{},"250":{},"258":{},"259":{},"269":{},"270":{},"279":{},"280":{},"285":{},"286":{},"293":{},"294":{},"303":{},"304":{},"313":{},"314":{},"321":{},"322":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"356":{},"366":{},"373":{},"380":{},"388":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"415":{},"416":{},"425":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["f3f530bc8325",{"_index":2595,"title":{},"name":{},"text":{"61":{}},"component":{}}],["f4a460",{"_index":3126,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["face",{"_index":1527,"title":{},"name":{},"text":{"30":{},"33":{},"37":{}},"component":{}}],["facilit",{"_index":281,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{}}],["fact",{"_index":1546,"title":{},"name":{},"text":{"30":{},"41":{}},"component":{}}],["facto",{"_index":2252,"title":{},"name":{},"text":{"48":{}},"component":{}}],["factor",{"_index":611,"title":{},"name":{},"text":{"8":{}},"component":{}}],["fail",{"_index":1180,"title":{},"name":{},"text":{"16":{},"52":{},"54":{},"113":{},"121":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["failov",{"_index":3513,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["failure_st",{"_index":3155,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["fairli",{"_index":1864,"title":{},"name":{},"text":{"36":{},"41":{},"47":{},"48":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["fals",{"_index":514,"title":{},"name":{},"text":{"7":{},"40":{},"42":{},"63":{},"71":{},"80":{},"81":{},"87":{},"89":{},"90":{},"96":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"117":{},"118":{},"119":{},"121":{},"122":{},"125":{},"126":{},"128":{},"132":{},"133":{},"135":{},"139":{},"140":{},"142":{},"146":{},"147":{},"149":{},"152":{},"155":{},"156":{},"158":{},"161":{},"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"180":{},"181":{},"183":{},"189":{},"190":{},"192":{},"197":{},"198":{},"200":{},"207":{},"208":{},"210":{},"217":{},"218":{},"220":{},"224":{},"225":{},"227":{},"233":{},"234":{},"236":{},"242":{},"244":{},"247":{},"250":{},"251":{},"253":{},"256":{},"258":{},"262":{},"264":{},"267":{},"269":{},"273":{},"275":{},"277":{},"281":{},"282":{},"289":{},"290":{},"297":{},"298":{},"300":{},"304":{},"307":{},"308":{},"310":{},"315":{},"316":{},"318":{},"322":{},"325":{},"326":{},"327":{},"333":{},"334":{},"335":{},"341":{},"342":{},"343":{},"349":{},"350":{},"351":{},"359":{},"360":{},"361":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"380":{},"383":{},"384":{},"385":{},"388":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"411":{},"412":{},"413":{},"415":{},"419":{},"421":{},"423":{},"428":{},"430":{},"432":{},"439":{},"441":{},"443":{}},"component":{}}],["famili",{"_index":3484,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["familiar",{"_index":406,"title":{},"name":{},"text":{"5":{},"25":{},"26":{},"28":{},"29":{},"32":{},"34":{},"176":{},"185":{}},"component":{}}],["familiaris",{"_index":54,"title":{},"name":{},"text":{"1":{}},"component":{}}],["far",{"_index":1037,"title":{},"name":{},"text":{"15":{},"29":{},"30":{},"31":{},"41":{},"60":{},"61":{},"66":{},"74":{},"83":{},"92":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"195":{},"222":{},"249":{},"279":{},"313":{},"329":{},"337":{},"345":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["fare_amount",{"_index":2719,"title":{},"name":{},"text":{"62":{}},"component":{}}],["fashion",{"_index":718,"title":{},"name":{},"text":{"10":{},"39":{},"44":{},"131":{},"138":{},"145":{},"151":{},"160":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"374":{},"379":{},"387":{},"426":{},"434":{},"445":{}},"component":{}}],["fast",{"_index":302,"title":{},"name":{},"text":{"2":{},"7":{},"16":{},"36":{},"62":{}},"component":{}}],["faster",{"_index":668,"title":{},"name":{},"text":{"9":{},"79":{},"88":{}},"component":{}}],["faulti",{"_index":3534,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"303":{},"314":{},"321":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["favor",{"_index":1968,"title":{},"name":{},"text":{"39":{}},"component":{}}],["favorit",{"_index":2506,"title":{},"name":{},"text":{"60":{},"61":{},"62":{}},"component":{}}],["featur",{"_index":63,"title":{"5-2":{}},"name":{},"text":{"1":{},"5":{},"13":{},"16":{},"23":{},"30":{},"32":{},"36":{},"38":{},"41":{},"48":{},"51":{},"79":{},"88":{},"152":{},"161":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"259":{},"270":{},"286":{},"294":{},"301":{},"311":{},"319":{},"408":{},"416":{}},"component":{}}],["fee",{"_index":2740,"title":{},"name":{},"text":{"62":{}},"component":{}}],["feedback",{"_index":227,"title":{},"name":{},"text":{"2":{},"13":{}},"component":{}}],["feel",{"_index":1606,"title":{},"name":{},"text":{"31":{},"32":{},"44":{}},"component":{}}],["felix",{"_index":1925,"title":{},"name":{},"text":{"38":{},"39":{},"42":{},"43":{}},"component":{}}],["fetch",{"_index":2330,"title":{},"name":{},"text":{"52":{},"61":{}},"component":{}}],["few",{"_index":735,"title":{},"name":{},"text":{"10":{},"12":{},"41":{},"60":{},"61":{},"102":{},"108":{},"113":{},"121":{},"176":{},"177":{},"185":{},"186":{},"204":{},"214":{}},"component":{}}],["field",{"_index":788,"title":{},"name":{},"text":{"11":{},"15":{},"17":{},"32":{},"37":{},"63":{},"71":{},"84":{},"85":{},"93":{},"94":{},"102":{},"108":{},"114":{},"122":{},"127":{},"134":{},"141":{},"148":{},"157":{},"219":{},"226":{},"235":{},"246":{},"250":{},"255":{},"258":{},"266":{},"269":{},"299":{},"309":{},"317":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"422":{},"431":{},"442":{}},"component":{}}],["figur",{"_index":739,"title":{},"name":{},"text":{"10":{}},"component":{}}],["file",{"_index":93,"title":{"29":{},"29-9":{},"29-10":{},"34-10":{},"34-13":{},"53-3":{}},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"23":{},"28":{},"29":{},"33":{},"34":{},"38":{},"42":{},"44":{},"45":{},"46":{},"49":{},"51":{},"53":{},"60":{},"61":{},"62":{},"79":{},"85":{},"88":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"209":{},"211":{},"213":{},"214":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"243":{},"244":{},"252":{},"253":{},"259":{},"263":{},"264":{},"270":{},"274":{},"275":{},"276":{},"280":{},"282":{},"283":{},"285":{},"286":{},"290":{},"291":{},"293":{},"294":{},"301":{},"304":{},"311":{},"319":{},"322":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"408":{},"416":{},"420":{},"421":{},"427":{},"429":{},"430":{},"435":{},"436":{},"440":{},"441":{},"446":{},"447":{}},"component":{}}],["file:zoo.cfg",{"_index":4085,"title":{},"name":{},"text":{"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["file=/home/sbernauer/downloads/releases.yaml",{"_index":2361,"title":{},"name":{},"text":{"53":{}},"component":{}}],["fileid",{"_index":3582,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["filenam",{"_index":1221,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filestatu",{"_index":3576,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["filestatus",{"_index":3575,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["filesystem",{"_index":1689,"title":{},"name":{},"text":{"34":{},"45":{},"49":{}},"component":{}}],["filter",{"_index":1341,"title":{},"name":{},"text":{"23":{},"62":{},"63":{},"71":{},"85":{},"94":{}},"component":{}}],["final",{"_index":1184,"title":{"41-13":{}},"name":{},"text":{"16":{},"23":{},"30":{},"33":{},"34":{},"38":{},"177":{},"186":{},"286":{},"294":{},"426":{},"434":{},"445":{}},"component":{}}],["find",{"_index":121,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"10":{},"11":{},"18":{},"24":{},"26":{},"28":{},"29":{},"32":{},"33":{},"34":{},"36":{},"46":{},"50":{},"60":{},"61":{},"62":{},"114":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"356":{},"366":{},"380":{},"388":{},"408":{},"416":{}},"component":{}}],["fine",{"_index":1172,"title":{},"name":{},"text":{"16":{}},"component":{}}],["fingerprint",{"_index":2874,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["finish",{"_index":110,"title":{},"name":{},"text":{"1":{},"3":{},"57":{},"60":{},"61":{},"62":{},"152":{},"161":{},"330":{},"338":{},"346":{},"353":{},"363":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["first",{"_index":208,"title":{"114":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"304":{},"322":{},"356":{},"366":{},"380":{},"388":{},"408":{},"416":{},"436":{},"447":{}},"name":{},"text":{"2":{},"5":{},"10":{},"16":{},"23":{},"25":{},"30":{},"33":{},"36":{},"41":{},"43":{},"44":{},"49":{},"56":{},"60":{},"61":{},"66":{},"74":{},"83":{},"85":{},"92":{},"94":{},"101":{},"102":{},"107":{},"108":{},"113":{},"114":{},"115":{},"121":{},"122":{},"123":{},"130":{},"137":{},"144":{},"152":{},"153":{},"161":{},"162":{},"169":{},"176":{},"177":{},"178":{},"185":{},"186":{},"187":{},"195":{},"204":{},"205":{},"214":{},"215":{},"222":{},"231":{},"232":{},"240":{},"241":{},"249":{},"259":{},"260":{},"270":{},"271":{},"279":{},"286":{},"287":{},"294":{},"295":{},"304":{},"305":{},"313":{},"322":{},"323":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"357":{},"367":{},"373":{},"374":{},"380":{},"381":{},"388":{},"389":{},"395":{},"401":{},"408":{},"409":{},"416":{},"417":{},"425":{},"436":{},"437":{},"447":{},"448":{}},"component":{}}],["first_step",{"_index":3216,"title":{},"name":{"114":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"304":{},"322":{},"356":{},"366":{},"380":{},"388":{},"408":{},"416":{},"436":{},"447":{}},"text":{},"component":{}}],["firstli",{"_index":40,"title":{},"name":{},"text":{"1":{}},"component":{}}],["fish",{"_index":2285,"title":{"51-8":{}},"name":{},"text":{"51":{}},"component":{}}],["fit",{"_index":1587,"title":{},"name":{},"text":{"30":{},"40":{},"427":{},"435":{},"446":{}},"component":{}}],["five",{"_index":3747,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["fix",{"_index":402,"title":{},"name":{},"text":{"5":{},"13":{},"16":{},"27":{},"32":{},"36":{}},"component":{}}],["flag",{"_index":2270,"title":{},"name":{},"text":{"49":{},"116":{},"124":{},"152":{},"161":{},"179":{},"188":{},"206":{},"216":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"396":{},"402":{},"407":{},"415":{},"438":{},"449":{}},"component":{}}],["flask",{"_index":3061,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["flask_env",{"_index":3982,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["flexibl",{"_index":409,"title":{},"name":{},"text":{"5":{},"30":{},"32":{},"39":{},"43":{},"44":{},"45":{},"48":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["float",{"_index":3159,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["florian",{"_index":1370,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"48":{}},"component":{}}],["flow",{"_index":762,"title":{},"name":{},"text":{"11":{},"43":{},"280":{},"285":{},"293":{}},"component":{}}],["flowfile_repo",{"_index":3748,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["flush",{"_index":2546,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["fmt",{"_index":1128,"title":{},"name":{},"text":{"16":{}},"component":{}}],["fn",{"_index":1067,"title":{},"name":{},"text":{"15":{},"39":{}},"component":{}}],["focu",{"_index":933,"title":{},"name":{},"text":{"13":{},"36":{},"38":{}},"component":{}}],["focus",{"_index":1464,"title":{},"name":{},"text":{"28":{},"31":{}},"component":{}}],["folder",{"_index":644,"title":{},"name":{},"text":{"8":{},"34":{},"60":{},"61":{},"62":{},"79":{},"88":{},"113":{},"121":{},"280":{},"285":{},"293":{},"427":{},"435":{},"446":{}},"component":{}}],["follow",{"_index":96,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"8":{},"13":{},"15":{},"16":{},"17":{},"20":{},"26":{},"32":{},"33":{},"34":{},"36":{},"38":{},"40":{},"41":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"66":{},"69":{},"70":{},"71":{},"74":{},"77":{},"78":{},"79":{},"81":{},"84":{},"85":{},"86":{},"88":{},"90":{},"93":{},"94":{},"95":{},"98":{},"100":{},"102":{},"104":{},"106":{},"108":{},"110":{},"112":{},"113":{},"114":{},"116":{},"118":{},"120":{},"121":{},"122":{},"124":{},"126":{},"127":{},"129":{},"131":{},"133":{},"134":{},"136":{},"138":{},"140":{},"141":{},"143":{},"145":{},"147":{},"148":{},"150":{},"151":{},"152":{},"154":{},"156":{},"157":{},"159":{},"160":{},"161":{},"163":{},"165":{},"166":{},"168":{},"170":{},"172":{},"173":{},"175":{},"176":{},"177":{},"179":{},"181":{},"182":{},"184":{},"185":{},"186":{},"188":{},"190":{},"191":{},"193":{},"194":{},"198":{},"199":{},"201":{},"202":{},"204":{},"206":{},"208":{},"209":{},"211":{},"212":{},"214":{},"216":{},"218":{},"219":{},"221":{},"225":{},"226":{},"228":{},"232":{},"234":{},"235":{},"237":{},"241":{},"244":{},"246":{},"248":{},"253":{},"255":{},"257":{},"259":{},"261":{},"264":{},"266":{},"268":{},"270":{},"272":{},"274":{},"275":{},"278":{},"280":{},"281":{},"282":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"292":{},"293":{},"294":{},"295":{},"296":{},"298":{},"299":{},"302":{},"304":{},"306":{},"308":{},"309":{},"312":{},"316":{},"317":{},"320":{},"322":{},"324":{},"326":{},"328":{},"330":{},"332":{},"334":{},"336":{},"338":{},"340":{},"342":{},"344":{},"346":{},"348":{},"350":{},"352":{},"353":{},"355":{},"356":{},"358":{},"360":{},"362":{},"363":{},"365":{},"366":{},"368":{},"369":{},"372":{},"374":{},"376":{},"378":{},"379":{},"380":{},"382":{},"384":{},"386":{},"387":{},"388":{},"390":{},"392":{},"394":{},"396":{},"398":{},"400":{},"402":{},"404":{},"406":{},"407":{},"408":{},"409":{},"410":{},"412":{},"414":{},"415":{},"416":{},"417":{},"418":{},"421":{},"422":{},"424":{},"430":{},"431":{},"433":{},"436":{},"438":{},"441":{},"442":{},"444":{},"447":{},"449":{}},"component":{}}],["fondermann",{"_index":1458,"title":{},"name":{},"text":{"28":{},"48":{}},"component":{}}],["foo",{"_index":2881,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["foo/bar/properties.yaml",{"_index":2906,"title":{},"name":{},"text":{"97":{},"98":{},"103":{},"104":{},"109":{},"110":{},"117":{},"118":{},"125":{},"126":{},"132":{},"133":{},"139":{},"140":{},"146":{},"147":{},"155":{},"156":{},"164":{},"165":{},"171":{},"172":{},"180":{},"181":{},"189":{},"190":{},"197":{},"198":{},"207":{},"208":{},"217":{},"218":{},"224":{},"225":{},"233":{},"234":{},"242":{},"244":{},"251":{},"253":{},"262":{},"264":{},"273":{},"275":{},"281":{},"282":{},"289":{},"290":{},"297":{},"298":{},"307":{},"308":{},"315":{},"316":{},"369":{},"370":{},"375":{},"376":{},"383":{},"384":{},"391":{},"392":{},"397":{},"398":{},"403":{},"404":{},"411":{},"412":{},"419":{},"421":{},"428":{},"430":{},"439":{},"441":{}},"component":{}}],["foobar",{"_index":4083,"title":{},"name":{},"text":{"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["foocommand",{"_index":1658,"title":{},"name":{},"text":{"33":{}},"component":{}}],["foorestart",{"_index":1659,"title":{},"name":{},"text":{"33":{}},"component":{}}],["foostart",{"_index":1660,"title":{},"name":{},"text":{"33":{}},"component":{}}],["for=condition=readi",{"_index":3767,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["forc",{"_index":1553,"title":{},"name":{},"text":{"30":{},"31":{},"37":{},"48":{}},"component":{}}],["forget",{"_index":1948,"title":{},"name":{},"text":{"38":{}},"component":{}}],["fork",{"_index":1117,"title":{},"name":{},"text":{"16":{},"30":{},"31":{}},"component":{}}],["form",{"_index":932,"title":{},"name":{},"text":{"13":{},"35":{},"46":{},"47":{},"48":{},"85":{},"87":{},"94":{},"96":{},"193":{},"201":{},"211":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"408":{},"416":{}},"component":{}}],["format",{"_index":907,"title":{"39-12":{},"85-6":{},"94-6":{}},"name":{},"text":{"12":{},"13":{},"16":{},"17":{},"23":{},"39":{},"49":{},"60":{},"61":{},"62":{},"68":{},"76":{},"85":{},"94":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"209":{},"213":{},"223":{},"229":{},"238":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["format=csv_unquot",{"_index":4068,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["format_datetime(tpep_pickup_datetim",{"_index":2670,"title":{},"name":{},"text":{"62":{}},"component":{}}],["forward",{"_index":1247,"title":{"23-26":{}},"name":{},"text":{"19":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"223":{},"229":{},"238":{},"259":{},"270":{},"304":{},"322":{},"374":{},"380":{},"388":{},"408":{},"416":{}},"component":{}}],["found",{"_index":1144,"title":{},"name":{},"text":{"16":{},"27":{},"34":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{},"176":{},"177":{},"185":{},"186":{},"250":{},"258":{},"269":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["foundat",{"_index":1437,"title":{},"name":{},"text":{"27":{},"113":{},"121":{}},"component":{}}],["four",{"_index":2078,"title":{},"name":{},"text":{"41":{}},"component":{}}],["fragment",{"_index":1387,"title":{},"name":{},"text":{"25":{}},"component":{}}],["framework",{"_index":1012,"title":{},"name":{},"text":{"14":{},"15":{},"16":{},"31":{},"36":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["franck",{"_index":1373,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"41":{},"48":{}},"component":{}}],["free",{"_index":606,"title":{},"name":{},"text":{"8":{},"13":{},"85":{},"94":{}},"component":{}}],["freeli",{"_index":1710,"title":{},"name":{},"text":{"34":{}},"component":{}}],["frequenc",{"_index":2686,"title":{},"name":{},"text":{"62":{}},"component":{}}],["frequent",{"_index":886,"title":{},"name":{},"text":{"12":{}},"component":{}}],["friendli",{"_index":1225,"title":{},"name":{},"text":{"17":{}},"component":{}}],["from_iso8601_timestamp('2019",{"_index":2770,"title":{},"name":{},"text":{"62":{}},"component":{}}],["from_iso8601_timestamp('2022",{"_index":2772,"title":{},"name":{},"text":{"62":{}},"component":{}}],["front",{"_index":1965,"title":{},"name":{},"text":{"39":{}},"component":{}}],["frontend",{"_index":2548,"title":{},"name":{},"text":{"60":{},"61":{},"62":{}},"component":{}}],["fs.defaultf",{"_index":3507,"title":{},"name":{},"text":{"191":{},"199":{},"209":{}},"component":{}}],["fs.s3a.aws.credentials.provid",{"_index":2214,"title":{},"name":{},"text":{"45":{}},"component":{}}],["fs.s3a.bucket..aws.credentials.provid",{"_index":2215,"title":{},"name":{},"text":{"45":{}},"component":{}}],["fs.trash.interv",{"_index":3535,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["fulfil",{"_index":659,"title":{},"name":{},"text":{"9":{},"16":{},"131":{},"138":{},"145":{},"151":{},"160":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["full",{"_index":224,"title":{"22-2":{}},"name":{},"text":{"2":{},"27":{},"30":{},"63":{},"71":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"285":{},"286":{},"293":{},"294":{},"374":{},"379":{},"387":{},"396":{},"402":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["full_document_url_from_config_map",{"_index":1029,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fulli",{"_index":260,"title":{"44-10":{}},"name":{},"text":{"2":{},"5":{},"39":{},"41":{},"44":{},"45":{},"48":{},"84":{},"93":{},"285":{},"293":{}},"component":{}}],["function",{"_index":893,"title":{"44":{}},"name":{},"text":{"12":{},"29":{},"30":{},"31":{},"36":{},"39":{},"44":{},"46":{},"47":{},"48":{},"280":{},"285":{},"293":{}},"component":{}}],["fundament",{"_index":759,"title":{},"name":{},"text":{"11":{}},"component":{}}],["further",{"_index":463,"title":{"7-5":{},"8-7":{},"9-7":{},"11-7":{}},"name":{},"text":{"7":{},"9":{},"11":{},"14":{},"16":{},"30":{},"44":{},"52":{},"230":{},"239":{},"274":{},"275":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{}},"component":{}}],["furthermor",{"_index":996,"title":{},"name":{},"text":{"14":{}},"component":{}}],["futur",{"_index":1920,"title":{},"name":{},"text":{"37":{},"41":{},"42":{},"44":{},"52":{},"54":{},"57":{},"58":{},"245":{},"254":{},"265":{},"285":{},"293":{}},"component":{}}],["future.keywords.in",{"_index":513,"title":{},"name":{},"text":{"7":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["ga",{"_index":1805,"title":{},"name":{},"text":{"36":{}},"component":{}}],["gaia",{"_index":2259,"title":{},"name":{},"text":{"48":{}},"component":{}}],["gain",{"_index":456,"title":{},"name":{},"text":{"6":{},"30":{}},"component":{}}],["garbag",{"_index":1466,"title":{},"name":{},"text":{"28":{}},"component":{}}],["gate",{"_index":1192,"title":{},"name":{},"text":{"16":{}},"component":{}}],["gather",{"_index":1582,"title":{},"name":{},"text":{"30":{}},"component":{}}],["gb",{"_index":3417,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["gener",{"_index":147,"title":{"39-11":{}},"name":{},"text":{"1":{},"7":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"23":{},"28":{},"30":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"44":{},"50":{},"51":{},"60":{},"62":{},"63":{},"70":{},"71":{},"78":{},"79":{},"85":{},"88":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"280":{},"285":{},"293":{},"297":{},"298":{},"303":{},"307":{},"308":{},"314":{},"315":{},"316":{},"321":{},"356":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"408":{},"416":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"442":{},"445":{},"446":{}},"component":{}}],["geograph",{"_index":2529,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["geolog",{"_index":2549,"title":{},"name":{},"text":{"60":{}},"component":{}}],["german",{"_index":1366,"title":{"25-8":{}},"name":{},"text":{"25":{},"61":{}},"component":{}}],["germani",{"_index":2535,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["get",{"_index":19,"title":{"1":{},"115":{},"123":{},"153":{},"162":{},"178":{},"187":{},"205":{},"215":{},"231":{},"240":{},"260":{},"271":{},"287":{},"295":{},"305":{},"323":{},"357":{},"367":{},"381":{},"389":{},"409":{},"417":{},"437":{},"448":{},"168-2":{},"175-2":{},"184-2":{},"248-2":{},"257-2":{},"268-2":{},"302-2":{},"312-2":{},"320-2":{},"328-2":{},"336-2":{},"344-2":{},"352-2":{},"362-2":{},"372-2":{},"378-2":{},"386-2":{},"424-2":{},"433-2":{},"444-2":{}},"name":{},"text":{"1":{},"3":{},"13":{},"27":{},"30":{},"41":{},"50":{},"62":{},"436":{},"447":{}},"component":{}}],["get::(nam",{"_index":1099,"title":{},"name":{},"text":{"15":{}},"component":{}}],["getting_start",{"_index":21,"title":{},"name":{"1":{}},"text":{},"component":{}}],["gigabyt",{"_index":3697,"title":{},"name":{},"text":{"250":{},"258":{},"269":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["git",{"_index":352,"title":{"41-8":{},"41-9":{}},"name":{},"text":{"4":{},"12":{},"13":{},"16":{},"41":{},"49":{},"79":{},"88":{}},"component":{}}],["github",{"_index":887,"title":{},"name":{},"text":{"12":{},"13":{},"16":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"222":{},"249":{},"279":{},"313":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["github.com/stackabletech/issues/[issu",{"_index":394,"title":{},"name":{},"text":{"5":{}},"component":{}}],["gitlen",{"_index":990,"title":{},"name":{},"text":{"13":{}},"component":{}}],["give",{"_index":87,"title":{},"name":{},"text":{"1":{},"2":{},"29":{},"30":{},"38":{},"39":{},"44":{},"48":{},"49":{},"57":{},"60":{},"61":{},"62":{}},"component":{}}],["given",{"_index":499,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"15":{},"22":{},"41":{},"60":{},"61":{},"62":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"166":{},"173":{},"182":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{},"299":{},"309":{},"317":{},"358":{},"368":{}},"component":{}}],["givennam",{"_index":2787,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["gke",{"_index":1784,"title":{"36-9":{}},"name":{},"text":{"36":{}},"component":{}}],["glass",{"_index":2510,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["global",{"_index":1483,"title":{"29-8":{},"37-8":{}},"name":{},"text":{"29":{},"35":{},"85":{},"94":{}},"component":{}}],["glossari",{"_index":2048,"title":{"41-1":{}},"name":{},"text":{},"component":{}}],["gnu",{"_index":2291,"title":{},"name":{},"text":{"51":{}},"component":{}}],["gnu.ex",{"_index":2299,"title":{},"name":{},"text":{"51":{}},"component":{}}],["go",{"_index":132,"title":{"28-9":{},"44-10":{},"60-13":{},"61-15":{},"62-8":{}},"name":{},"text":{"1":{},"10":{},"19":{},"27":{},"28":{},"30":{},"32":{},"33":{},"44":{},"49":{},"51":{},"60":{},"61":{},"62":{},"152":{},"161":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"358":{},"368":{},"380":{},"388":{},"408":{},"416":{}},"component":{}}],["goal",{"_index":192,"title":{"2-2":{},"52-1":{}},"name":{},"text":{"9":{},"32":{},"33":{}},"component":{}}],["good",{"_index":942,"title":{},"name":{},"text":{"13":{},"16":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{}},"component":{}}],["googl",{"_index":1223,"title":{"36-9":{}},"name":{},"text":{"17":{},"36":{}},"component":{}}],["govern",{"_index":586,"title":{},"name":{},"text":{"8":{},"113":{},"121":{}},"component":{}}],["gpu",{"_index":670,"title":{},"name":{},"text":{"9":{}},"component":{}}],["graalvm",{"_index":1471,"title":{},"name":{},"text":{"28":{}},"component":{}}],["grace",{"_index":1813,"title":{},"name":{},"text":{"36":{}},"component":{}}],["gracefulli",{"_index":2808,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["gradual",{"_index":1971,"title":{},"name":{},"text":{"39":{}},"component":{}}],["grammar",{"_index":1210,"title":{},"name":{},"text":{"17":{}},"component":{}}],["grant",{"_index":3972,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["granularityspec",{"_index":3360,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["graph",{"_index":639,"title":{},"name":{},"text":{"8":{},"67":{},"75":{},"115":{},"123":{}},"component":{}}],["graphic",{"_index":2774,"title":{},"name":{},"text":{"62":{}},"component":{}}],["great",{"_index":115,"title":{},"name":{},"text":{"1":{},"60":{},"61":{},"114":{},"122":{},"152":{},"161":{},"304":{},"322":{},"380":{},"388":{},"436":{},"447":{}},"component":{}}],["greater",{"_index":2538,"title":{},"name":{},"text":{"60":{},"193":{},"201":{},"211":{},"219":{},"226":{},"235":{}},"component":{}}],["green",{"_index":1538,"title":{},"name":{},"text":{"30":{},"52":{},"54":{}},"component":{}}],["grep",{"_index":3709,"title":{},"name":{},"text":{"259":{},"270":{}},"component":{}}],["group",{"_index":309,"title":{"9":{},"9-4":{}},"name":{"9":{}},"text":{"2":{},"5":{},"9":{},"32":{},"60":{},"61":{},"62":{},"63":{},"71":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"209":{},"211":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"235":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["group=self.api_group",{"_index":3145,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["group’",{"_index":3810,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["grow",{"_index":916,"title":{},"name":{},"text":{"12":{},"25":{},"52":{},"54":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["guarante",{"_index":3836,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["guid",{"_index":0,"title":{"13":{},"17":{},"1-1":{}},"name":{},"text":{"1":{},"3":{},"16":{},"17":{},"23":{},"36":{},"52":{},"59":{},"60":{},"61":{},"62":{},"115":{},"123":{},"152":{},"153":{},"161":{},"162":{},"178":{},"187":{},"205":{},"215":{},"230":{},"231":{},"239":{},"240":{},"260":{},"271":{},"287":{},"295":{},"305":{},"323":{},"330":{},"338":{},"346":{},"353":{},"357":{},"358":{},"363":{},"367":{},"368":{},"381":{},"389":{},"408":{},"409":{},"416":{},"417":{},"436":{},"437":{},"447":{},"448":{}},"component":{}}],["guidanc",{"_index":1294,"title":{},"name":{},"text":{"22":{}},"component":{}}],["guide.html#system_properti",{"_index":3728,"title":{},"name":{},"text":{"274":{},"275":{},"285":{},"293":{}},"component":{}}],["guidelin",{"_index":536,"title":{"14":{},"15":{}},"name":{},"text":{"7":{},"14":{},"16":{},"17":{},"27":{},"38":{}},"component":{}}],["gurante",{"_index":3838,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["h",{"_index":3244,"title":{},"name":{},"text":{"114":{},"122":{},"152":{},"161":{},"177":{},"186":{}},"component":{}}],["ha",{"_index":2234,"title":{},"name":{},"text":{"47":{},"48":{}},"component":{}}],["hadoop",{"_index":198,"title":{"2-7":{}},"name":{},"text":{"11":{},"12":{},"18":{},"34":{},"48":{},"166":{},"173":{},"177":{},"182":{},"186":{},"191":{},"195":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{}},"component":{}}],["hadoop.log.dir",{"_index":3327,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["hadoop.log.file=hadoop.log",{"_index":3328,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["hadoop.root.logg",{"_index":3330,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["hadoop.root.logger=info,consol",{"_index":3326,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["hadoop3",{"_index":1284,"title":{},"name":{},"text":{"20":{},"336":{},"344":{},"352":{},"362":{}},"component":{}}],["hadoop3.2",{"_index":1281,"title":{},"name":{},"text":{"20":{},"328":{},"330":{},"332":{},"336":{},"344":{},"352":{},"362":{}},"component":{}}],["hadoop_conf_dir",{"_index":3539,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["hadoop_hom",{"_index":3538,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["half",{"_index":679,"title":{},"name":{},"text":{"9":{},"39":{}},"component":{}}],["halfpenni",{"_index":1882,"title":{},"name":{},"text":{"37":{}},"component":{}}],["hand",{"_index":34,"title":{},"name":{},"text":{"1":{},"11":{},"56":{},"114":{},"122":{}},"component":{}}],["handl",{"_index":621,"title":{"29":{},"40-6":{}},"name":{},"text":{"8":{},"16":{},"36":{},"38":{},"40":{},"42":{},"45":{},"46":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["happen",{"_index":2569,"title":{},"name":{},"text":{"61":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["hard",{"_index":595,"title":{},"name":{},"text":{"8":{},"31":{},"38":{},"41":{},"47":{},"48":{}},"component":{}}],["harden",{"_index":3828,"title":{"330-3":{},"338-3":{},"346-3":{},"353-3":{},"363-3":{}},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["harder",{"_index":1426,"title":{},"name":{},"text":{"26":{},"27":{},"30":{},"32":{},"33":{},"38":{}},"component":{}}],["hardwar",{"_index":424,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["hash",{"_index":4002,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["hashicorp",{"_index":1724,"title":{"35-7":{}},"name":{},"text":{"35":{},"85":{},"94":{}},"component":{}}],["have",{"_index":1670,"title":{},"name":{},"text":{"33":{},"36":{},"41":{},"48":{},"55":{},"60":{},"61":{},"152":{},"161":{},"204":{},"214":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"330":{},"338":{},"346":{},"353":{},"363":{},"408":{},"416":{}},"component":{}}],["hbase",{"_index":197,"title":{"168":{},"175":{},"184":{},"2-6":{},"20-3":{},"170-2":{},"176-2":{},"177-4":{},"185-2":{},"186-4":{}},"name":{},"text":{"2":{},"5":{},"11":{},"12":{},"18":{},"52":{},"54":{},"55":{},"56":{},"58":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{}},"component":{"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{}}}],["hbase.rest.threads.min",{"_index":3415,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["hbase.rootdir",{"_index":3414,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["hbase.stackable.tech/v1alpha1",{"_index":790,"title":{},"name":{},"text":{"11":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{}},"component":{}}],["hbase.yaml",{"_index":3442,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["hbase.zookeeper.quorum",{"_index":3406,"title":{},"name":{},"text":{"166":{},"173":{},"182":{}},"component":{}}],["hbase=0.4.0",{"_index":3503,"title":{},"name":{},"text":{"179":{},"188":{}},"component":{}}],["hbase_conf_dir",{"_index":3435,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["hbase_conf_dir/hbas",{"_index":3437,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["hbase_heaps",{"_index":3416,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["hbase_opt",{"_index":3412,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["hbaseclust",{"_index":791,"title":{},"name":{},"text":{"11":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{}},"component":{}}],["hbasecluster.crd.yaml",{"_index":3408,"title":{},"name":{},"text":{"169":{}},"component":{}}],["hbaseopt",{"_index":3409,"title":{},"name":{},"text":{"170":{},"176":{},"185":{}},"component":{}}],["hbaserootdir",{"_index":3403,"title":{},"name":{},"text":{"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{}},"component":{}}],["hdf",{"_index":199,"title":{"194":{},"202":{},"212":{},"2-7":{},"20-4":{},"131-3":{},"138-3":{},"145-3":{},"151-3":{},"151-10":{},"152-3":{},"160-3":{},"160-10":{},"161-3":{},"177-3":{},"186-3":{},"193-2":{},"201-2":{},"204-3":{},"211-2":{},"214-3":{}},"name":{},"text":{"2":{},"5":{},"9":{},"11":{},"12":{},"18":{},"42":{},"45":{},"52":{},"54":{},"55":{},"56":{},"58":{},"67":{},"75":{},"131":{},"138":{},"145":{},"151":{},"152":{},"154":{},"160":{},"161":{},"163":{},"166":{},"170":{},"173":{},"176":{},"177":{},"179":{},"182":{},"185":{},"186":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{}},"component":{"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{}}}],["hdfs&createflag=&createparent=true&overwrite=fals",{"_index":3573,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["hdfs.stackable.tech/v1alpha1",{"_index":688,"title":{},"name":{},"text":{"9":{},"11":{},"152":{},"161":{},"177":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{}},"component":{}}],["hdfs.yaml",{"_index":3322,"title":{},"name":{},"text":{"152":{},"161":{},"177":{},"186":{},"204":{},"214":{}},"component":{}}],["hdfs/hdfshighavailabilitywithqjm.html",{"_index":3516,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["hdfs://path/to/druiddeepstorag",{"_index":3298,"title":{},"name":{},"text":{"131":{},"138":{},"145":{}},"component":{}}],["hdfs://{clusternam",{"_index":3508,"title":{},"name":{},"text":{"191":{},"199":{},"209":{}},"component":{}}],["hdfs=0.5.0",{"_index":3395,"title":{},"name":{},"text":{"154":{},"163":{},"179":{},"188":{},"206":{},"216":{}},"component":{}}],["hdfscluster",{"_index":689,"title":{},"name":{},"text":{"9":{},"11":{},"152":{},"161":{},"177":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{}},"component":{}}],["hdfsconfigmapnam",{"_index":789,"title":{},"name":{},"text":{"11":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{}},"component":{}}],["hdfsdirectori",{"_index":2124,"title":{},"name":{},"text":{"42":{}},"component":{}}],["head",{"_index":367,"title":{},"name":{},"text":{"4":{},"17":{}},"component":{}}],["heap",{"_index":3549,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["heapsizemb",{"_index":3470,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["heavi",{"_index":1763,"title":{},"name":{},"text":{"35":{}},"component":{}}],["heavili",{"_index":797,"title":{},"name":{},"text":{"11":{}},"component":{}}],["hello",{"_index":3023,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"304":{},"322":{}},"component":{}}],["helm",{"_index":968,"title":{"53-2":{},"66-1":{},"74-1":{},"83-1":{},"92-1":{},"101-1":{},"107-1":{},"116-4":{},"124-4":{},"130-1":{},"137-1":{},"144-1":{},"154-3":{},"163-3":{},"169-1":{},"179-3":{},"188-3":{},"195-1":{},"206-3":{},"216-3":{},"222-1":{},"232-3":{},"232-8":{},"241-3":{},"241-8":{},"249-1":{},"261-3":{},"272-3":{},"279-1":{},"288-3":{},"296-3":{},"306-3":{},"313-1":{},"324-3":{},"329-1":{},"337-1":{},"345-1":{},"358-4":{},"368-4":{},"373-1":{},"382-3":{},"390-3":{},"395-1":{},"401-1":{},"410-3":{},"418-3":{},"425-1":{},"438-3":{},"449-3":{}},"name":{},"text":{"13":{},"16":{},"19":{},"23":{},"44":{},"51":{},"53":{},"66":{},"74":{},"79":{},"83":{},"88":{},"92":{},"101":{},"102":{},"107":{},"108":{},"115":{},"116":{},"123":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"153":{},"154":{},"160":{},"162":{},"163":{},"169":{},"178":{},"179":{},"187":{},"188":{},"195":{},"196":{},"203":{},"205":{},"206":{},"213":{},"215":{},"216":{},"222":{},"223":{},"229":{},"231":{},"232":{},"238":{},"240":{},"241":{},"249":{},"258":{},"260":{},"261":{},"269":{},"271":{},"272":{},"279":{},"280":{},"285":{},"287":{},"288":{},"293":{},"295":{},"296":{},"297":{},"298":{},"305":{},"306":{},"307":{},"308":{},"313":{},"315":{},"316":{},"323":{},"324":{},"329":{},"331":{},"337":{},"339":{},"345":{},"347":{},"354":{},"357":{},"358":{},"364":{},"367":{},"368":{},"373":{},"374":{},"380":{},"381":{},"382":{},"388":{},"389":{},"390":{},"395":{},"401":{},"409":{},"410":{},"417":{},"418":{},"425":{},"426":{},"434":{},"437":{},"438":{},"445":{},"448":{},"449":{}},"component":{}}],["helmchart",{"_index":2164,"title":{},"name":{},"text":{"44":{},"232":{},"241":{}},"component":{}}],["help",{"_index":37,"title":{},"name":{},"text":{"1":{},"2":{},"12":{},"14":{},"25":{},"41":{},"49":{},"50":{},"51":{},"62":{}},"component":{}}],["helper",{"_index":1018,"title":{},"name":{},"text":{"14":{},"15":{},"204":{},"214":{}},"component":{}}],["henc",{"_index":1687,"title":{},"name":{},"text":{"34":{},"116":{},"124":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["hennig",{"_index":1926,"title":{},"name":{},"text":{"38":{},"39":{},"42":{},"43":{}},"component":{}}],["here",{"_index":98,"title":{"60-13":{},"61-15":{},"62-8":{}},"name":{},"text":{"1":{},"2":{},"8":{},"10":{},"12":{},"14":{},"29":{},"32":{},"34":{},"37":{},"41":{},"42":{},"44":{},"45":{},"51":{},"60":{},"61":{},"62":{},"63":{},"71":{},"114":{},"116":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"160":{},"176":{},"185":{},"193":{},"201":{},"211":{},"250":{},"258":{},"269":{},"274":{},"275":{},"282":{},"285":{},"290":{},"293":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["here’",{"_index":506,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{}}],["hessel",{"_index":1377,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"48":{}},"component":{}}],["hh",{"_index":3691,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["hicapac",{"_index":695,"title":{},"name":{},"text":{"9":{}},"component":{}}],["hierarch",{"_index":4103,"title":{},"name":{},"text":{"427":{},"435":{},"436":{},"446":{},"447":{}},"component":{}}],["hierarchi",{"_index":1690,"title":{},"name":{},"text":{"34":{}},"component":{}}],["high",{"_index":277,"title":{},"name":{},"text":{"2":{},"7":{},"12":{},"13":{},"14":{},"28":{},"38":{},"41":{},"47":{},"48":{},"60":{},"61":{},"196":{},"203":{},"213":{},"274":{},"275":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["higher",{"_index":700,"title":{},"name":{},"text":{"9":{},"25":{},"26":{},"29":{},"48":{},"301":{},"311":{},"319":{}},"component":{}}],["highest",{"_index":2738,"title":{},"name":{},"text":{"62":{}},"component":{}}],["highli",{"_index":2189,"title":{},"name":{},"text":{"45":{},"193":{},"201":{},"211":{}},"component":{}}],["highlight",{"_index":1224,"title":{},"name":{},"text":{"17":{},"114":{},"122":{}},"component":{}}],["hint",{"_index":947,"title":{},"name":{},"text":{"13":{}},"component":{}}],["histor",{"_index":2451,"title":{},"name":{},"text":{"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{}},"component":{}}],["histori",{"_index":1424,"title":{"45":{},"45-3":{},"45-4":{}},"name":{"45":{}},"text":{"26":{},"27":{},"45":{},"46":{}},"component":{}}],["historyserv",{"_index":2219,"title":{},"name":{},"text":{"45":{}},"component":{}}],["hive",{"_index":200,"title":{"221":{},"228":{},"237":{},"2-8":{},"20-5":{},"396-4":{},"396-12":{},"402-4":{},"402-12":{},"407-4":{},"407-15":{},"415-4":{},"415-15":{}},"name":{},"text":{"2":{},"5":{},"11":{},"12":{},"18":{},"39":{},"42":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"62":{},"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{}}}],["hive.demo",{"_index":2755,"title":{},"name":{},"text":{"62":{}},"component":{}}],["hive.demo.ny_taxi_data",{"_index":2764,"title":{},"name":{},"text":{"62":{}},"component":{}}],["hive.demo.ny_taxi_data_raw",{"_index":2757,"title":{},"name":{},"text":{"62":{}},"component":{}}],["hive.iri",{"_index":4017,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["hive.iris.iris_parquet",{"_index":4019,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["hive.properti",{"_index":4048,"title":{},"name":{},"text":{"396":{},"402":{}},"component":{}}],["hive.stackable.tech/v1alpha1",{"_index":3597,"title":{},"name":{},"text":{"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{}},"component":{}}],["hive=0.7.0",{"_index":3659,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["hiveclust",{"_index":3598,"title":{},"name":{},"text":{"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{}},"component":{}}],["hivecluster.crd.yaml",{"_index":3605,"title":{},"name":{},"text":{"222":{}},"component":{}}],["hiveconfigmapnam",{"_index":795,"title":{},"name":{},"text":{"11":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["hiveh",{"_index":3631,"title":{},"name":{},"text":{"230":{},"232":{},"239":{},"241":{}},"component":{}}],["ho",{"_index":3487,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["hold",{"_index":1540,"title":{},"name":{},"text":{"30":{},"38":{},"193":{},"201":{},"211":{}},"component":{}}],["home",{"_index":190,"title":{},"name":{},"text":{"32":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{}}}],["homepag",{"_index":400,"title":{},"name":{},"text":{"5":{},"12":{}},"component":{}}],["hood",{"_index":3300,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["hook",{"_index":3141,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["hook.create_custom_object",{"_index":3144,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["host",{"_index":136,"title":{"34":{}},"name":{},"text":{"1":{},"10":{},"11":{},"12":{},"22":{},"32":{},"39":{},"42":{},"45":{},"46":{},"98":{},"99":{},"101":{},"102":{},"104":{},"105":{},"107":{},"108":{},"110":{},"111":{},"113":{},"114":{},"118":{},"119":{},"121":{},"122":{},"126":{},"128":{},"130":{},"131":{},"133":{},"135":{},"137":{},"138":{},"140":{},"142":{},"144":{},"145":{},"147":{},"149":{},"151":{},"152":{},"156":{},"158":{},"160":{},"161":{},"165":{},"167":{},"169":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"222":{},"223":{},"225":{},"227":{},"229":{},"230":{},"234":{},"236":{},"238":{},"239":{},"244":{},"247":{},"249":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"279":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"313":{},"316":{},"318":{},"326":{},"327":{},"330":{},"332":{},"334":{},"335":{},"338":{},"340":{},"342":{},"343":{},"346":{},"348":{},"350":{},"351":{},"353":{},"355":{},"360":{},"361":{},"363":{},"365":{},"369":{},"371":{},"373":{},"374":{},"376":{},"377":{},"380":{},"384":{},"385":{},"388":{},"392":{},"393":{},"395":{},"396":{},"398":{},"399":{},"401":{},"402":{},"404":{},"405":{},"407":{},"412":{},"413":{},"415":{},"421":{},"423":{},"425":{},"430":{},"432":{},"436":{},"441":{},"443":{},"447":{}},"component":{}}],["hostnam",{"_index":1896,"title":{},"name":{},"text":{"37":{},"63":{},"67":{},"71":{},"75":{},"196":{},"203":{},"213":{},"285":{},"293":{}},"component":{}}],["hostpath",{"_index":570,"title":{},"name":{},"text":{"8":{},"193":{},"201":{},"211":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["hour",{"_index":2632,"title":{},"name":{},"text":{"61":{}},"component":{}}],["howto_operator_bash",{"_index":3006,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["howto_operator_bash_skip",{"_index":3020,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["howto_operator_bash_templ",{"_index":3015,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["htpasswd",{"_index":4004,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["http",{"_index":1321,"title":{"396-10":{},"402-10":{}},"name":{},"text":{"23":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"191":{},"199":{},"209":{},"223":{},"229":{},"238":{},"286":{},"294":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["http://172.18.0.2:30831",{"_index":2452,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.2:31324",{"_index":2371,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["http://172.18.0.2:32716",{"_index":2372,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["http://172.18.0.3:30167",{"_index":2438,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["http://172.18.0.3:30392",{"_index":2450,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.3:30503",{"_index":2442,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["http://172.18.0.3:31062",{"_index":2441,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["http://172.18.0.3:32108",{"_index":2458,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.3:32670",{"_index":2449,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.4:30109",{"_index":2456,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.4:30354",{"_index":2378,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["http://172.18.0.4:30356",{"_index":2454,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.4:30899",{"_index":2563,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://172.18.0.4:31026",{"_index":2376,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["http://172.18.0.4:31664",{"_index":2461,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.4:32246",{"_index":2562,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://172.18.0.4:32251",{"_index":2565,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://172.18.0.4:32295",{"_index":2437,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["http://172.18.0.4:32306",{"_index":2460,"title":{},"name":{},"text":{"60":{}},"component":{}}],["http://172.18.0.5:30016",{"_index":2567,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://172.18.0.5:30316",{"_index":2436,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["http://172.18.0.5:30476",{"_index":2560,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://172.18.0.5:30592",{"_index":2561,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://172.18.0.5:30837",{"_index":2559,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://172.18.0.5:32128",{"_index":2373,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["http://172.18.0.5:32595",{"_index":2568,"title":{},"name":{},"text":{"61":{}},"component":{}}],["http://localhost:12345",{"_index":1060,"title":{},"name":{},"text":{"15":{}},"component":{}}],["http://localhost:8080",{"_index":2987,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["http://localhost:8080/api/v1/dags/example_complex",{"_index":3247,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["http://localhost:8080/api/v1/dags/example_complex/dagrun",{"_index":3251,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["http://localhost:8080/api/v1/dags/example_complex/dagruns/\"$dag_id",{"_index":3255,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["http://localhost:8081/v1/data/test/hello",{"_index":3816,"title":{},"name":{},"text":{"304":{},"322":{}},"component":{}}],["http://localhost:8081/v1/data/test/world",{"_index":3818,"title":{},"name":{},"text":{"304":{},"322":{}},"component":{}}],["http://localhost:8088",{"_index":3971,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["http://localhost:8888/druid/indexer/v1/task",{"_index":3384,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["http://localhost:8888/druid/v2/sql",{"_index":3392,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["http://localhost:9090",{"_index":1251,"title":{},"name":{},"text":{"19":{}},"component":{}}],["http://simpl",{"_index":3447,"title":{},"name":{},"text":{"177":{},"186":{},"204":{},"214":{},"299":{},"309":{},"317":{}},"component":{}}],["http://www.apache.org/licenses/licens",{"_index":3099,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["http://{clustername}.{rolegroup}.svc.cluster.local:8081",{"_index":1003,"title":{},"name":{},"text":{"14":{}},"component":{}}],["http://{clustername}.{rolegroup}.svc.cluster.local:8081/data/v1/product/allow",{"_index":1008,"title":{},"name":{},"text":{"14":{}},"component":{}}],["https://172.18.0.2:30247/nifi",{"_index":165,"title":{},"name":{},"text":{"1":{}},"component":{}}],["https://172.18.0.3:30141",{"_index":2440,"title":{},"name":{},"text":{"57":{},"62":{}},"component":{}}],["https://172.18.0.3:32595",{"_index":3770,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["https://172.18.0.3:32595/nifi",{"_index":3772,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["https://172.18.0.5:30299/ui/query.html?20220210_161615_00000_a8nka",{"_index":4032,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["https://172.18.0.5:32721",{"_index":2375,"title":{},"name":{},"text":{"54":{},"57":{},"58":{}},"component":{}}],["https://airflow.apache.org",{"_index":810,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://airflow.apache.org/docs/apach",{"_index":2923,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["https://charts.bitnami.com/bitnami",{"_index":2165,"title":{},"name":{},"text":{"44":{},"102":{},"108":{},"116":{},"124":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"232":{},"238":{},"241":{},"374":{},"380":{},"388":{}},"component":{}}],["https://charts.min.io",{"_index":3640,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["https://ci.stackable.tech/job/airflow%20operator%20integration%20test",{"_index":815,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/druid%20operator%20integration%20test",{"_index":821,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/hbase%20operator%20integration%20test",{"_index":827,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/hdfs%20operator%20integration%20test",{"_index":833,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/hive%20operator%20integration%20test",{"_index":839,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/kafka%20operator%20integration%20test",{"_index":845,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/nifi%20operator%20integration%20test",{"_index":851,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/opa%20operator%20integration%20test",{"_index":877,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/spark%20on%20k8s%20operator%20integration%20test",{"_index":857,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/superset%20operator%20integration%20test",{"_index":864,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/trino%20operator%20integration%20test",{"_index":883,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://ci.stackable.tech/job/zookeeper%20operator%20integration%20test",{"_index":870,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://cloud.google.com/kubernet",{"_index":1836,"title":{},"name":{},"text":{"36":{}},"component":{}}],["https://docs.aws.amazon.com/eks/latest/userguide/kubernet",{"_index":1829,"title":{},"name":{},"text":{"36":{}},"component":{}}],["https://docs.microsoft.com/en",{"_index":1823,"title":{},"name":{},"text":{"36":{}},"component":{}}],["https://docs.openshift.com/contain",{"_index":1847,"title":{},"name":{},"text":{"36":{}},"component":{}}],["https://docs.stackable.tech",{"_index":1171,"title":{},"name":{},"text":{"16":{}},"component":{}}],["https://docs.stackable.tech/airflow/index.html",{"_index":816,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/druid/index.html",{"_index":822,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/hbase/index.html",{"_index":828,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/hdfs/index.html",{"_index":834,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/hive/index.html",{"_index":840,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/kafka/index.html",{"_index":846,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/nifi/index.html",{"_index":852,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/opa/index.html",{"_index":878,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/spark",{"_index":858,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/stackablectl/stable/demos/trino",{"_index":2366,"title":{},"name":{},"text":{"54":{}},"component":{}}],["https://docs.stackable.tech/superset/index.html",{"_index":865,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/trino/index.html",{"_index":884,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://docs.stackable.tech/zookeeper/index.html",{"_index":871,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://druid.apache.org",{"_index":817,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://druid.apache.org/data/wikipedia.json.gz",{"_index":3357,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["https://etcd.io",{"_index":2229,"title":{},"name":{},"text":{"47":{}},"component":{}}],["https://github.com/apache/airflow",{"_index":811,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/druid",{"_index":818,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/h",{"_index":836,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/hadoop",{"_index":830,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/hbas",{"_index":824,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/kafka",{"_index":842,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/nifi",{"_index":848,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/spark",{"_index":854,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/superset",{"_index":861,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/apache/zookeep",{"_index":867,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/kolloch/crate2nix",{"_index":2835,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["https://github.com/kubernetes/kubernetes/issues/72637",{"_index":1679,"title":{},"name":{},"text":{"33":{}},"component":{}}],["https://github.com/open",{"_index":873,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/airflow",{"_index":812,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/dock",{"_index":813,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/document",{"_index":904,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/druid",{"_index":819,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/h",{"_index":837,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/hbas",{"_index":825,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/hdf",{"_index":831,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/integr",{"_index":910,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/issu",{"_index":896,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/issues/issues/170",{"_index":1886,"title":{},"name":{},"text":{"37":{}},"component":{}}],["https://github.com/stackabletech/issues/issues/4",{"_index":1737,"title":{},"name":{},"text":{"35":{}},"component":{}}],["https://github.com/stackabletech/kafka",{"_index":843,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/nifi",{"_index":849,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/opa",{"_index":875,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/oper",{"_index":890,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/secret",{"_index":894,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/spark",{"_index":855,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/stackablectl",{"_index":2314,"title":{},"name":{},"text":{"51":{}},"component":{}}],["https://github.com/stackabletech/stackablectl/issues/39",{"_index":2363,"title":{},"name":{},"text":{"53":{}},"component":{}}],["https://github.com/stackabletech/stackablectl/releases/latest/download/stackablectl",{"_index":2293,"title":{},"name":{},"text":{"51":{}},"component":{}}],["https://github.com/stackabletech/superset",{"_index":862,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/t2",{"_index":914,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/trino",{"_index":881,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://github.com/stackabletech/zookeep",{"_index":868,"title":{},"name":{},"text":{"12":{},"40":{}},"component":{}}],["https://github.com/trinodb/trino",{"_index":880,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://hadoop.apache.org",{"_index":829,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://hadoop.apache.org/docs/stable/hadoop",{"_index":3514,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["https://hbase.apache.org",{"_index":823,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://hive.apache.org",{"_index":835,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://kafka.apache.org",{"_index":841,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://kind.sigs.k8s.io/docs/user/quick",{"_index":2403,"title":{},"name":{},"text":{"55":{}},"component":{}}],["https://kubernetes.io/releas",{"_index":1821,"title":{},"name":{},"text":{"36":{}},"component":{}}],["https://kubernetes.io/releases/vers",{"_index":1822,"title":{},"name":{},"text":{"36":{}},"component":{}}],["https://localhost:8443",{"_index":4069,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["https://localhost:8443/ui",{"_index":4073,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["https://localhost:8888",{"_index":3386,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["https://my.corp/stackable/repository/helm",{"_index":2360,"title":{},"name":{},"text":{"53":{}},"component":{}}],["https://nifi.apache.org",{"_index":847,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://nifi.apache.org/docs/nifi",{"_index":3725,"title":{},"name":{},"text":{"274":{},"275":{},"285":{},"293":{}},"component":{}}],["https://prometheu",{"_index":1234,"title":{},"name":{},"text":{"19":{}},"component":{}}],["https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_bash_operator.pi",{"_index":3053,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_branch_datetime_operator.pi",{"_index":3057,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_complex.pi",{"_index":3055,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["https://raw.githubusercontent.com/stackabletech/integr",{"_index":327,"title":{},"name":{},"text":{"3":{}},"component":{}}],["https://raw.githubusercontent.com/stackabletech/release/main/releases.yaml",{"_index":2356,"title":{},"name":{},"text":{"53":{}},"component":{}}],["https://raw.githubusercontent.com/stackabletech/stackablectl/main/demos/demo",{"_index":2359,"title":{},"name":{},"text":{"53":{}},"component":{}}],["https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/stack",{"_index":2357,"title":{},"name":{},"text":{"53":{}},"component":{}}],["https://repo.stackable.tech/repository/helm",{"_index":1311,"title":{},"name":{},"text":{"23":{},"53":{},"66":{},"74":{},"83":{},"92":{},"101":{},"107":{},"116":{},"124":{},"130":{},"137":{},"144":{},"154":{},"163":{},"169":{},"179":{},"188":{},"195":{},"206":{},"216":{},"222":{},"232":{},"241":{},"249":{},"261":{},"272":{},"279":{},"288":{},"296":{},"306":{},"313":{},"324":{},"329":{},"337":{},"345":{},"358":{},"368":{},"373":{},"382":{},"390":{},"395":{},"401":{},"410":{},"418":{},"425":{},"438":{},"449":{}},"component":{}}],["https://repo.stackable.tech/repository/packages/trino",{"_index":4066,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["https://repository.example.com/prod",{"_index":3870,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["https://spark.apache.org",{"_index":853,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://superset.apache.org",{"_index":860,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://trino.io",{"_index":879,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://www.openpolicyagent.org",{"_index":872,"title":{},"name":{},"text":{"12":{}},"component":{}}],["https://zookeeper.apache.org",{"_index":866,"title":{},"name":{},"text":{"12":{},"47":{}},"component":{}}],["hub",{"_index":1575,"title":{},"name":{},"text":{"30":{}},"component":{}}],["huge",{"_index":2146,"title":{},"name":{},"text":{"44":{}},"component":{}}],["hybrid",{"_index":423,"title":{},"name":{},"text":{"5":{}},"component":{}}],["i.",{"_index":521,"title":{},"name":{},"text":{"7":{},"23":{},"31":{},"33":{},"36":{},"41":{},"50":{},"114":{},"122":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["iceberg",{"_index":2122,"title":{},"name":{},"text":{"42":{}},"component":{}}],["id",{"_index":745,"title":{"13-5":{}},"name":{},"text":{"10":{},"28":{},"48":{},"68":{},"76":{},"79":{},"88":{},"113":{},"121":{},"145":{},"151":{},"160":{}},"component":{}}],["idea",{"_index":943,"title":{},"name":{},"text":{"13":{},"15":{},"30":{},"33":{},"60":{},"61":{},"62":{}},"component":{}}],["ideal",{"_index":1751,"title":{},"name":{},"text":{"35":{},"79":{},"88":{}},"component":{}}],["ident",{"_index":525,"title":{},"name":{},"text":{"7":{},"35":{},"36":{},"39":{},"43":{},"48":{},"131":{},"138":{},"145":{},"151":{},"160":{},"422":{},"431":{},"442":{}},"component":{}}],["identifi",{"_index":1407,"title":{},"name":{},"text":{"26":{},"30":{},"35":{},"36":{},"68":{},"76":{},"85":{},"94":{},"114":{},"122":{}},"component":{}}],["ifnotpres",{"_index":3904,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["ignor",{"_index":1200,"title":{},"name":{},"text":{"16":{},"30":{},"37":{},"41":{},"274":{},"275":{},"282":{},"290":{},"408":{},"416":{}},"component":{}}],["ignorecas",{"_index":1906,"title":{},"name":{},"text":{"37":{}},"component":{}}],["illustr",{"_index":561,"title":{},"name":{},"text":{"8":{},"34":{},"50":{},"61":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["imag",{"_index":909,"title":{"41":{},"16-3":{},"41-8":{},"41-9":{},"41-11":{},"41-12":{},"41-17":{},"41-18":{},"41-19":{},"41-20":{},"168-2":{},"175-2":{},"184-2":{},"248-2":{},"257-2":{},"268-2":{},"302-2":{},"312-2":{},"320-2":{},"328-2":{},"330-3":{},"336-2":{},"338-3":{},"344-2":{},"346-3":{},"352-2":{},"353-3":{},"362-2":{},"363-3":{},"372-2":{},"378-2":{},"386-2":{},"394-2":{},"400-2":{},"406-2":{},"414-2":{},"424-2":{},"433-2":{},"444-2":{}},"name":{},"text":{"12":{},"13":{},"16":{},"30":{},"41":{},"46":{},"52":{},"54":{},"55":{},"56":{},"58":{},"79":{},"86":{},"88":{},"95":{},"100":{},"101":{},"102":{},"106":{},"107":{},"108":{},"112":{},"113":{},"114":{},"120":{},"121":{},"122":{},"130":{},"137":{},"144":{},"145":{},"151":{},"160":{},"168":{},"169":{},"170":{},"175":{},"176":{},"177":{},"184":{},"185":{},"186":{},"194":{},"195":{},"196":{},"202":{},"203":{},"204":{},"212":{},"213":{},"214":{},"221":{},"222":{},"223":{},"228":{},"229":{},"237":{},"238":{},"243":{},"244":{},"248":{},"249":{},"252":{},"253":{},"257":{},"263":{},"264":{},"268":{},"278":{},"279":{},"280":{},"284":{},"285":{},"292":{},"293":{},"302":{},"303":{},"312":{},"313":{},"314":{},"320":{},"321":{},"328":{},"329":{},"330":{},"332":{},"336":{},"337":{},"338":{},"340":{},"344":{},"345":{},"346":{},"348":{},"352":{},"353":{},"355":{},"356":{},"362":{},"363":{},"365":{},"366":{},"372":{},"373":{},"374":{},"378":{},"380":{},"386":{},"388":{},"394":{},"395":{},"400":{},"401":{},"406":{},"414":{},"424":{},"425":{},"426":{},"433":{},"434":{},"436":{},"444":{},"445":{},"447":{}},"component":{}}],["image.repository=$repo,image.tag=$tag",{"_index":2830,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["image_vers",{"_index":1152,"title":{},"name":{},"text":{"16":{},"41":{}},"component":{}}],["images/tree/main/airflow",{"_index":814,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/druid",{"_index":820,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/h",{"_index":838,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/hadoop",{"_index":832,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/hbas",{"_index":826,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/kafka",{"_index":844,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/nifi",{"_index":850,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/opa",{"_index":876,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/spark",{"_index":856,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/superset",{"_index":863,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/trino",{"_index":882,"title":{},"name":{},"text":{"12":{}},"component":{}}],["images/tree/main/zookeep",{"_index":869,"title":{},"name":{},"text":{"12":{}},"component":{}}],["immedi",{"_index":373,"title":{},"name":{},"text":{"4":{},"33":{}},"component":{}}],["immut",{"_index":2105,"title":{},"name":{},"text":{"41":{}},"component":{}}],["impact",{"_index":901,"title":{},"name":{},"text":{"12":{},"26":{},"41":{},"62":{},"85":{},"94":{}},"component":{}}],["imper",{"_index":1676,"title":{},"name":{},"text":{"33":{}},"component":{}}],["imperson",{"_index":2128,"title":{},"name":{},"text":{"42":{}},"component":{}}],["implement",{"_index":535,"title":{"14":{},"15":{},"193":{},"201":{},"211":{},"301":{},"311":{},"319":{},"15-4":{},"44-9":{}},"name":{"193":{},"201":{},"211":{},"301":{},"311":{},"319":{}},"text":{"7":{},"8":{},"14":{},"26":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"48":{},"102":{},"108":{},"113":{},"121":{},"193":{},"201":{},"211":{},"285":{},"293":{},"301":{},"311":{},"319":{},"358":{},"368":{}},"component":{}}],["impli",{"_index":1605,"title":{},"name":{},"text":{"31":{},"113":{},"121":{},"427":{},"435":{},"446":{}},"component":{}}],["implicit",{"_index":591,"title":{},"name":{},"text":{"8":{},"48":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["import",{"_index":512,"title":{},"name":{},"text":{"7":{},"8":{},"12":{},"13":{},"25":{},"45":{},"102":{},"108":{},"113":{},"121":{},"193":{},"201":{},"211":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["improv",{"_index":934,"title":{},"name":{},"text":{"13":{},"36":{},"48":{},"61":{}},"component":{}}],["inact",{"_index":1448,"title":{},"name":{},"text":{"27":{}},"component":{}}],["inadvert",{"_index":1947,"title":{},"name":{},"text":{"38":{}},"component":{}}],["includ",{"_index":257,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"8":{},"17":{},"19":{},"26":{},"36":{},"39":{},"41":{},"42":{},"43":{},"44":{},"48":{},"49":{},"51":{},"53":{},"55":{},"56":{},"60":{},"61":{},"62":{},"84":{},"93":{},"114":{},"122":{},"127":{},"134":{},"141":{},"148":{},"157":{},"177":{},"186":{},"219":{},"226":{},"235":{},"246":{},"250":{},"255":{},"258":{},"266":{},"269":{},"274":{},"275":{},"282":{},"290":{},"299":{},"309":{},"317":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"380":{},"388":{},"436":{},"447":{}},"component":{}}],["incompat",{"_index":1760,"title":{},"name":{},"text":{"35":{},"41":{}},"component":{}}],["increas",{"_index":1543,"title":{},"name":{},"text":{"30":{},"41":{},"61":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"380":{},"388":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["increment",{"_index":2822,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["independ",{"_index":1146,"title":{"41-12":{},"41-19":{},"41-20":{}},"name":{},"text":{"16":{},"30":{},"41":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["index",{"_index":205,"title":{},"name":{"2":{},"6":{},"13":{},"18":{},"21":{},"24":{},"46":{},"50":{},"59":{},"65":{},"73":{},"82":{},"91":{},"100":{},"106":{},"112":{},"115":{},"120":{},"123":{},"129":{},"136":{},"143":{},"150":{},"153":{},"159":{},"162":{},"168":{},"175":{},"178":{},"184":{},"187":{},"194":{},"202":{},"205":{},"212":{},"215":{},"221":{},"228":{},"231":{},"237":{},"240":{},"248":{},"257":{},"260":{},"268":{},"271":{},"278":{},"284":{},"287":{},"292":{},"295":{},"302":{},"305":{},"312":{},"320":{},"323":{},"328":{},"336":{},"344":{},"352":{},"357":{},"362":{},"367":{},"372":{},"378":{},"381":{},"386":{},"389":{},"394":{},"400":{},"406":{},"409":{},"414":{},"417":{},"424":{},"433":{},"437":{},"444":{},"448":{}},"text":{"5":{}},"component":{}}],["index.yaml",{"_index":2349,"title":{"53-4":{}},"name":{},"text":{"53":{}},"component":{}}],["index_parallel",{"_index":3354,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["indic",{"_index":1110,"title":{},"name":{},"text":{"15":{},"60":{},"61":{}},"component":{}}],["indirect",{"_index":1510,"title":{},"name":{},"text":{"29":{},"40":{}},"component":{}}],["individu",{"_index":434,"title":{},"name":{},"text":{"5":{},"8":{},"12":{},"15":{},"18":{},"23":{},"26":{},"31":{},"37":{},"50":{},"55":{},"56":{},"79":{},"88":{},"102":{},"108":{},"113":{},"121":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["industri",{"_index":1713,"title":{},"name":{},"text":{"34":{}},"component":{}}],["infer",{"_index":2796,"title":{},"name":{},"text":{"67":{},"75":{},"285":{},"293":{}},"component":{}}],["influenc",{"_index":2066,"title":{},"name":{},"text":{"41":{}},"component":{}}],["info",{"_index":2337,"title":{},"name":{},"text":{"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"288":{},"290":{},"293":{},"294":{},"296":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["inform",{"_index":307,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"11":{},"12":{},"13":{},"15":{},"18":{},"22":{},"38":{},"41":{},"42":{},"43":{},"54":{},"56":{},"58":{},"60":{},"61":{},"62":{},"67":{},"70":{},"75":{},"78":{},"83":{},"92":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"176":{},"185":{},"329":{},"337":{},"345":{},"356":{},"358":{},"366":{},"368":{},"436":{},"447":{}},"component":{}}],["infrastructur",{"_index":104,"title":{},"name":{},"text":{"1":{},"2":{},"26":{},"30":{},"39":{}},"component":{}}],["ingest",{"_index":241,"title":{"23-19":{},"23-20":{},"23-21":{},"60-4":{},"61-6":{},"131-7":{},"138-7":{},"145-7":{},"151-7":{},"152-6":{},"160-7":{},"161-6":{}},"name":{},"text":{"2":{},"5":{},"10":{},"23":{},"52":{},"54":{},"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{}},"component":{}}],["ingestion_spec.json",{"_index":3353,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["inherit",{"_index":1639,"title":{},"name":{},"text":{"32":{},"407":{},"415":{}},"component":{}}],["init",{"_index":1390,"title":{},"name":{},"text":{"25":{},"35":{},"38":{},"79":{},"88":{},"102":{},"108":{}},"component":{}}],["init.crd.yaml",{"_index":2920,"title":{},"name":{},"text":{"101":{},"107":{}},"component":{}}],["initcontain",{"_index":3041,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["initi",{"_index":1396,"title":{"44":{},"102-8":{},"108-8":{},"113-5":{},"114-4":{},"121-5":{},"122-4":{},"374-4":{},"380-4":{},"388-4":{}},"name":{},"text":{"25":{},"26":{},"30":{},"37":{},"41":{},"44":{},"46":{},"48":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"280":{},"285":{},"293":{},"356":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{}},"component":{}}],["initialis",{"_index":3941,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["initlimit",{"_index":4084,"title":{},"name":{},"text":{"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["inject",{"_index":1758,"title":{},"name":{},"text":{"35":{},"38":{},"82":{},"86":{},"87":{},"91":{},"95":{},"96":{}},"component":{}}],["inlin",{"_index":704,"title":{"10-4":{},"39-7":{},"39-8":{},"39-11":{}},"name":{},"text":{"10":{},"13":{},"22":{},"25":{},"37":{},"39":{},"42":{},"45":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"238":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["inner",{"_index":2640,"title":{},"name":{},"text":{"61":{}},"component":{}}],["input",{"_index":482,"title":{},"name":{},"text":{"7":{},"14":{},"38":{},"131":{},"138":{},"145":{},"151":{},"160":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["input.context.identity.us",{"_index":517,"title":{},"name":{},"text":{"7":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["inputformat",{"_index":3358,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["inputsourc",{"_index":3356,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["insecur",{"_index":3992,"title":{"396-9":{},"402-9":{},"407-9":{},"415-9":{}},"name":{},"text":{"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["insert",{"_index":1921,"title":{"38-7":{}},"name":{},"text":{"38":{},"170":{},"176":{},"185":{}},"component":{}}],["insid",{"_index":667,"title":{},"name":{},"text":{"9":{},"19":{},"38":{},"40":{},"62":{},"79":{},"88":{},"131":{},"138":{},"145":{},"151":{},"160":{},"193":{},"201":{},"211":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{},"422":{},"431":{},"436":{},"442":{},"447":{}},"component":{}}],["inspect",{"_index":2428,"title":{"60-2":{},"61-2":{},"62-2":{}},"name":{},"text":{"57":{},"114":{},"116":{},"122":{},"124":{},"177":{},"186":{},"356":{},"358":{},"366":{},"368":{}},"component":{}}],["instal",{"_index":2,"title":{"51":{},"66":{},"74":{},"83":{},"92":{},"101":{},"107":{},"116":{},"124":{},"130":{},"137":{},"144":{},"154":{},"163":{},"169":{},"179":{},"188":{},"195":{},"206":{},"216":{},"222":{},"232":{},"241":{},"249":{},"261":{},"272":{},"279":{},"288":{},"296":{},"306":{},"313":{},"324":{},"329":{},"337":{},"345":{},"358":{},"368":{},"373":{},"382":{},"390":{},"395":{},"401":{},"410":{},"418":{},"425":{},"438":{},"449":{},"1-3":{},"1-4":{},"1-5":{},"1-6":{},"1-7":{},"1-8":{},"1-9":{},"1-10":{},"3-2":{},"19-2":{},"52-2":{},"52-4":{},"54-2":{},"55-2":{},"55-3":{},"56-2":{},"58-2":{},"396-2":{},"402-2":{},"407-2":{},"415-2":{}},"name":{"51":{},"66":{},"74":{},"83":{},"92":{},"101":{},"107":{},"116":{},"124":{},"130":{},"137":{},"144":{},"154":{},"163":{},"169":{},"179":{},"188":{},"195":{},"206":{},"216":{},"222":{},"232":{},"241":{},"249":{},"261":{},"272":{},"279":{},"288":{},"296":{},"306":{},"313":{},"324":{},"329":{},"337":{},"345":{},"358":{},"368":{},"373":{},"382":{},"390":{},"395":{},"401":{},"410":{},"418":{},"425":{},"438":{},"449":{}},"text":{"1":{},"2":{},"3":{},"5":{},"12":{},"13":{},"16":{},"19":{},"23":{},"28":{},"29":{},"34":{},"37":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"66":{},"74":{},"79":{},"83":{},"88":{},"92":{},"101":{},"102":{},"107":{},"108":{},"114":{},"115":{},"116":{},"122":{},"123":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{},"169":{},"170":{},"176":{},"177":{},"178":{},"179":{},"185":{},"186":{},"187":{},"188":{},"195":{},"196":{},"203":{},"204":{},"205":{},"206":{},"213":{},"214":{},"215":{},"216":{},"222":{},"223":{},"229":{},"230":{},"231":{},"232":{},"238":{},"239":{},"240":{},"241":{},"249":{},"250":{},"258":{},"259":{},"260":{},"261":{},"269":{},"270":{},"271":{},"272":{},"279":{},"280":{},"285":{},"286":{},"287":{},"288":{},"293":{},"294":{},"295":{},"296":{},"303":{},"304":{},"305":{},"306":{},"313":{},"314":{},"321":{},"322":{},"323":{},"324":{},"329":{},"330":{},"331":{},"332":{},"337":{},"338":{},"339":{},"340":{},"345":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"356":{},"357":{},"358":{},"363":{},"364":{},"365":{},"366":{},"367":{},"368":{},"373":{},"374":{},"380":{},"381":{},"382":{},"388":{},"389":{},"390":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"409":{},"410":{},"415":{},"416":{},"417":{},"418":{},"425":{},"426":{},"434":{},"436":{},"437":{},"438":{},"445":{},"447":{},"448":{},"449":{}},"component":{}}],["instanc",{"_index":73,"title":{},"name":{},"text":{"1":{},"7":{},"10":{},"11":{},"14":{},"16":{},"23":{},"32":{},"43":{},"57":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"160":{},"161":{},"162":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"219":{},"223":{},"226":{},"229":{},"231":{},"232":{},"235":{},"238":{},"240":{},"241":{},"250":{},"258":{},"259":{},"260":{},"269":{},"270":{},"271":{},"280":{},"303":{},"304":{},"305":{},"314":{},"321":{},"322":{},"323":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"381":{},"382":{},"387":{},"388":{},"389":{},"390":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["instancespernod",{"_index":1635,"title":{},"name":{},"text":{"32":{}},"component":{}}],["instanti",{"_index":1315,"title":{},"name":{},"text":{"23":{}},"component":{}}],["instead",{"_index":763,"title":{"26":{}},"name":{},"text":{"11":{},"19":{},"23":{},"30":{},"31":{},"33":{},"34":{},"36":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"46":{},"47":{},"48":{},"50":{},"52":{},"55":{},"61":{},"79":{},"88":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"286":{},"294":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["instruct",{"_index":97,"title":{},"name":{},"text":{"1":{},"23":{},"45":{},"51":{},"152":{},"161":{},"332":{},"340":{},"348":{}},"component":{}}],["insuffici",{"_index":605,"title":{},"name":{},"text":{"8":{}},"component":{}}],["integ",{"_index":1222,"title":{},"name":{},"text":{"17":{},"22":{}},"component":{}}],["integr",{"_index":294,"title":{"16-4":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"10":{},"12":{},"16":{},"31":{},"37":{},"45":{},"47":{},"48":{},"60":{},"61":{},"250":{},"258":{},"269":{}},"component":{}}],["integrationtest",{"_index":3757,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["intel",{"_index":2303,"title":{},"name":{},"text":{"51":{}},"component":{}}],["intellij",{"_index":978,"title":{},"name":{},"text":{"13":{}},"component":{}}],["intend",{"_index":45,"title":{},"name":{},"text":{"1":{},"6":{},"12":{},"23":{},"25":{},"30":{},"55":{},"67":{},"75":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["intention",{"_index":1201,"title":{},"name":{},"text":{"16":{}},"component":{}}],["inter",{"_index":616,"title":{},"name":{},"text":{"8":{}},"component":{}}],["interact",{"_index":251,"title":{},"name":{},"text":{"2":{},"5":{},"17":{},"23":{},"50":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"102":{},"108":{},"114":{},"116":{},"122":{},"124":{},"152":{},"154":{},"161":{},"163":{},"176":{},"177":{},"179":{},"185":{},"186":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["interconnect",{"_index":414,"title":{},"name":{},"text":{"5":{}},"component":{}}],["interest",{"_index":963,"title":{},"name":{},"text":{"13":{},"30":{},"49":{},"55":{},"60":{},"61":{}},"component":{}}],["interfac",{"_index":551,"title":{"23-20":{},"23-26":{},"286-5":{},"294-5":{},"408-4":{},"416-4":{}},"name":{},"text":{"8":{},"11":{},"15":{},"30":{},"31":{},"37":{},"44":{},"45":{},"60":{},"61":{},"62":{},"79":{},"80":{},"81":{},"88":{},"89":{},"90":{},"114":{},"122":{},"152":{},"161":{},"286":{},"294":{},"374":{},"379":{},"387":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["interfer",{"_index":617,"title":{},"name":{},"text":{"8":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"374":{},"379":{},"387":{},"426":{},"434":{},"445":{}},"component":{}}],["intern",{"_index":991,"title":{"14-10":{},"407-13":{},"415-13":{}},"name":{},"text":{"14":{},"16":{},"25":{},"41":{},"48":{},"49":{},"55":{},"60":{},"61":{},"84":{},"85":{},"93":{},"94":{},"127":{},"134":{},"141":{},"148":{},"152":{},"157":{},"161":{},"177":{},"186":{},"246":{},"255":{},"258":{},"259":{},"266":{},"269":{},"270":{},"286":{},"294":{},"299":{},"309":{},"317":{},"356":{},"366":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["internaltl",{"_index":3698,"title":{},"name":{},"text":{"258":{},"269":{},"407":{},"415":{}},"component":{}}],["internaltls.secretclass",{"_index":3701,"title":{},"name":{},"text":{"258":{},"269":{}},"component":{}}],["internaltrafficpolici",{"_index":3799,"title":{},"name":{},"text":{"301":{},"311":{},"319":{}},"component":{}}],["internet",{"_index":69,"title":{"53-1":{}},"name":{},"text":{"1":{},"23":{},"52":{},"53":{},"57":{},"60":{},"61":{},"62":{}},"component":{}}],["interoper",{"_index":2887,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["intersect",{"_index":2900,"title":{},"name":{},"text":{"87":{},"96":{}},"component":{}}],["interv",{"_index":2206,"title":{},"name":{},"text":{"45":{}},"component":{}}],["intervent",{"_index":1865,"title":{},"name":{},"text":{"36":{}},"component":{}}],["intra",{"_index":3517,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["introduc",{"_index":1220,"title":{},"name":{},"text":{"17":{},"37":{},"44":{},"223":{},"229":{},"238":{}},"component":{}}],["introducet",{"_index":2159,"title":{},"name":{},"text":{"44":{}},"component":{}}],["introduct",{"_index":191,"title":{"2-1":{},"14-1":{}},"name":{},"text":{},"component":{}}],["intuit",{"_index":2190,"title":{},"name":{},"text":{"45":{}},"component":{}}],["invalid",{"_index":2737,"title":{},"name":{},"text":{"62":{},"374":{},"379":{},"387":{}},"component":{}}],["invas",{"_index":1497,"title":{},"name":{},"text":{"29":{},"44":{}},"component":{}}],["invest",{"_index":1573,"title":{},"name":{},"text":{"30":{}},"component":{}}],["investig",{"_index":1940,"title":{},"name":{},"text":{"38":{}},"component":{}}],["invoc",{"_index":2430,"title":{},"name":{},"text":{"57":{}},"component":{}}],["invok",{"_index":2294,"title":{},"name":{},"text":{"51":{},"79":{},"88":{},"102":{},"108":{},"113":{},"121":{},"176":{},"185":{},"436":{},"447":{}},"component":{}}],["involv",{"_index":2185,"title":{},"name":{},"text":{"45":{}},"component":{}}],["io",{"_index":1461,"title":{},"name":{},"text":{"28":{}},"component":{}}],["ioconfig",{"_index":3355,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["iono",{"_index":1785,"title":{"36-10":{}},"name":{},"text":{"36":{}},"component":{}}],["ip",{"_index":76,"title":{},"name":{},"text":{"1":{},"23":{},"67":{},"75":{},"84":{},"93":{},"286":{},"294":{}},"component":{}}],["iri",{"_index":3993,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["is_admin",{"_index":515,"title":{},"name":{},"text":{"7":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["is_paus",{"_index":3248,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["isanonym",{"_index":3374,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["ish",{"_index":1997,"title":{},"name":{},"text":{"39":{}},"component":{}}],["islands\",\"type\":\"earthquake\",\"horizontalerror\":null,\"deptherror\":8.6,\"magerror\":0.41,\"magnst\":null,\"status\":\"reviewed\",\"locationsource\":\"iscgem\",\"magsource\":\"iscgem",{"_index":2481,"title":{},"name":{},"text":{"60":{}},"component":{}}],["isminor",{"_index":3372,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["isnew",{"_index":3371,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["isn’t",{"_index":2064,"title":{},"name":{},"text":{"41":{}},"component":{}}],["iso",{"_index":3365,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["isol",{"_index":1503,"title":{"39-6":{},"39-9":{}},"name":{},"text":{"29":{},"38":{},"39":{},"44":{},"427":{},"435":{},"446":{}},"component":{}}],["isr",{"_index":2471,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["isrobot",{"_index":3367,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["issu",{"_index":230,"title":{},"name":{},"text":{"2":{},"5":{},"12":{},"13":{},"16":{},"28":{},"30":{},"33":{},"35":{},"38":{},"39":{},"85":{},"86":{},"94":{},"95":{},"176":{},"185":{},"204":{},"214":{},"223":{},"229":{},"238":{},"356":{},"366":{},"436":{},"447":{}},"component":{}}],["isunpatrol",{"_index":3368,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["ital",{"_index":1219,"title":{},"name":{},"text":{"17":{}},"component":{}}],["item",{"_index":1134,"title":{},"name":{},"text":{"16":{}},"component":{}}],["iter",{"_index":1552,"title":{},"name":{},"text":{"30":{}},"component":{}}],["itself",{"_index":496,"title":{},"name":{},"text":{"7":{},"11":{},"35":{},"38":{},"41":{},"51":{},"60":{},"61":{},"69":{},"77":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"259":{},"270":{},"286":{},"294":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"356":{},"358":{},"363":{},"366":{},"368":{},"374":{},"380":{},"388":{}},"component":{}}],["it’",{"_index":340,"title":{},"name":{},"text":{"4":{},"10":{},"13":{},"17":{},"33":{},"35":{},"36":{},"37":{},"40":{},"42":{},"43":{},"45":{},"61":{},"152":{},"161":{},"230":{},"239":{},"436":{},"447":{}},"component":{}}],["it’d",{"_index":1661,"title":{},"name":{},"text":{"33":{}},"component":{}}],["i’m",{"_index":2244,"title":{},"name":{},"text":{"48":{}},"component":{}}],["januari",{"_index":1838,"title":{},"name":{},"text":{"36":{}},"component":{}}],["jar",{"_index":3434,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["jars/jobs/ni",{"_index":3848,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["jars/jobs/ny_tlc_report.pi",{"_index":3875,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["java",{"_index":1453,"title":{"28-8":{}},"name":{},"text":{"28":{},"176":{},"185":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"330":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"407":{},"415":{},"422":{},"426":{},"431":{},"434":{},"442":{},"445":{}},"component":{}}],["java_hom",{"_index":4051,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["jbdc",{"_index":3422,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["jdbc",{"_index":781,"title":{},"name":{},"text":{"11":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"176":{},"185":{},"223":{},"229":{},"238":{}},"component":{}}],["jdbc:avatica:remote:url=http://simpl",{"_index":3273,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["jdbc:derby://localhost:1527/var/druid/metadata.db;create=tru",{"_index":3343,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["jdbc:derby:;databasename=/stackable/metastore_db;create=tru",{"_index":3616,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["jdbc:derby:;databasename=/tmp/metastore_db;create=tru",{"_index":3608,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["jdbc:postgresql://druid",{"_index":3293,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["jdbc:postgresql://h",{"_index":3627,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["jdbc:postgresql://localhost:12345",{"_index":782,"title":{},"name":{},"text":{"11":{}},"component":{}}],["jdbc:postgresql://postgresql:5432/h",{"_index":3634,"title":{},"name":{},"text":{"230":{},"239":{}},"component":{}}],["jenkin",{"_index":808,"title":{},"name":{},"text":{"12":{}},"component":{}}],["jim",{"_index":1881,"title":{},"name":{},"text":{"37":{}},"component":{}}],["jinja2",{"_index":1157,"title":{},"name":{},"text":{"16":{}},"component":{}}],["jmx",{"_index":3520,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["job",{"_index":548,"title":{"330":{},"338":{},"346":{},"353":{},"363":{},"60-4":{},"61-6":{},"102-1":{},"108-1":{},"330-3":{},"332-1":{},"332-7":{},"338-3":{},"340-1":{},"340-7":{},"346-3":{},"348-1":{},"348-7":{},"353-3":{},"355-6":{},"356-1":{},"363-3":{},"365-6":{},"366-1":{}},"name":{},"text":{"8":{},"43":{},"45":{},"52":{},"54":{},"60":{},"61":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"329":{},"330":{},"331":{},"332":{},"337":{},"338":{},"339":{},"340":{},"345":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"356":{},"357":{},"358":{},"363":{},"364":{},"365":{},"366":{},"367":{},"368":{},"374":{},"380":{},"388":{}},"component":{}}],["job_depend",{"_index":3829,"title":{},"name":{"330":{},"338":{},"346":{},"353":{},"363":{}},"text":{},"component":{}}],["joblabel",{"_index":1244,"title":{},"name":{},"text":{"19":{}},"component":{}}],["join",{"_index":395,"title":{},"name":{},"text":{"5":{},"52":{},"54":{},"55":{},"56":{},"58":{},"61":{}},"component":{}}],["journal",{"_index":1721,"title":{},"name":{},"text":{"34":{},"193":{},"201":{},"211":{}},"component":{}}],["journalnod",{"_index":687,"title":{},"name":{},"text":{"9":{},"152":{},"161":{},"177":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["jq",{"_index":2572,"title":{},"name":{},"text":{"61":{},"79":{},"88":{},"114":{},"122":{},"178":{},"187":{}},"component":{}}],["json",{"_index":483,"title":{},"name":{},"text":{"7":{},"14":{},"23":{},"61":{},"79":{},"88":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"178":{},"187":{}},"component":{}}],["json_pp",{"_index":3451,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["jsonpath=\"{.data.password",{"_index":183,"title":{},"name":{},"text":{"1":{},"280":{},"285":{},"293":{}},"component":{}}],["jsonpath=\"{.items[?(@.metadata.name==\\\"$nifi_node_name\\\")].status.addresses[?(@.type==\\\"internalip\\\")].address",{"_index":3777,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["jsonpath=\"{.items[?(@.metadata.name==\\\"simpl",{"_index":3782,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["jsonpath='{.data.zookeep",{"_index":4094,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["jsonpath='{.status.condition}'=readi",{"_index":3227,"title":{},"name":{},"text":{"114":{},"122":{},"380":{},"388":{}},"component":{}}],["jsonpath='{.status.phase}'=succeed",{"_index":3948,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["jsonschema",{"_index":1021,"title":{},"name":{},"text":{"14":{}},"component":{}}],["judgement",{"_index":1229,"title":{},"name":{},"text":{"17":{}},"component":{}}],["june",{"_index":210,"title":{},"name":{},"text":{"2":{}},"component":{}}],["justif",{"_index":2246,"title":{},"name":{},"text":{"48":{}},"component":{}}],["jvm",{"_index":1470,"title":{"332-5":{},"332-6":{},"332-7":{},"340-5":{},"340-6":{},"340-7":{},"348-5":{},"348-6":{},"348-7":{},"355-4":{},"355-5":{},"355-6":{},"365-4":{},"365-5":{},"365-6":{}},"name":{},"text":{"28":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["k",{"_index":3262,"title":{},"name":{},"text":{"116":{},"124":{},"179":{},"188":{},"206":{},"216":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"438":{},"449":{}},"component":{}}],["k.o",{"_index":2247,"title":{},"name":{},"text":{"48":{}},"component":{}}],["k3",{"_index":7,"title":{"1-6":{}},"name":{},"text":{},"component":{}}],["k3d",{"_index":2821,"title":{"79-3":{},"88-3":{}},"name":{},"text":{"79":{},"88":{}},"component":{}}],["k8",{"_index":542,"title":{"8-6":{}},"name":{},"text":{"8":{},"12":{},"18":{},"23":{},"35":{},"36":{},"38":{},"39":{},"45":{},"52":{},"54":{},"55":{},"56":{},"58":{},"85":{},"94":{},"193":{},"201":{},"211":{},"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"331":{},"332":{},"333":{},"334":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"343":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{},"353":{},"354":{},"355":{},"358":{},"359":{},"360":{},"361":{},"362":{},"363":{},"364":{},"365":{},"368":{}},"component":{"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"331":{},"332":{},"333":{},"334":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"343":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{},"353":{},"354":{},"355":{},"356":{},"357":{},"358":{},"359":{},"360":{},"361":{},"362":{},"363":{},"364":{},"365":{},"366":{},"367":{},"368":{}}}],["k8s/index.html",{"_index":859,"title":{},"name":{},"text":{"12":{}},"component":{}}],["k8s:3.2.1",{"_index":3840,"title":{},"name":{},"text":{"330":{},"332":{}},"component":{}}],["k8s:3.3.0",{"_index":2213,"title":{},"name":{},"text":{"45":{},"113":{},"121":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["k8s=0.5.0",{"_index":3949,"title":{},"name":{},"text":{"358":{},"368":{}},"component":{}}],["k8s_openapi::api::core::v1::configmap",{"_index":1094,"title":{},"name":{},"text":{"15":{}},"component":{}}],["k8ssearch",{"_index":754,"title":{"85-4":{},"94-4":{}},"name":{},"text":{"10":{},"22":{},"63":{},"71":{},"85":{},"94":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"285":{},"293":{},"407":{},"415":{}},"component":{}}],["k8ssearch.searchnamespac",{"_index":2883,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["k8ssearch.searchnamespace.nam",{"_index":2885,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["k8ssearch.searchnamespace.pod",{"_index":2884,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["kafka",{"_index":16,"title":{"60":{},"61":{},"248":{},"257":{},"268":{},"1-13":{},"1-17":{},"2-9":{},"20-6":{},"23-3":{},"23-7":{},"23-10":{},"23-11":{},"60-2":{},"61-2":{},"259-3":{},"270-3":{}},"name":{"60":{},"61":{}},"text":{"1":{},"2":{},"5":{},"7":{},"11":{},"12":{},"14":{},"18":{},"23":{},"31":{},"34":{},"41":{},"48":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"67":{},"75":{},"242":{},"243":{},"244":{},"245":{},"246":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"253":{},"254":{},"255":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"427":{},"435":{},"446":{}},"component":{"242":{},"243":{},"244":{},"245":{},"246":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"253":{},"254":{},"255":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"264":{},"265":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{}}}],["kafka.stackable.svc.cluster.local:9092",{"_index":3668,"title":{},"name":{},"text":{"246":{},"255":{},"266":{}},"component":{}}],["kafka.stackable.tech/v1alpha1",{"_index":3663,"title":{},"name":{},"text":{"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{}},"component":{}}],["kafka.yaml",{"_index":3705,"title":{},"name":{},"text":{"259":{},"270":{}},"component":{}}],["kafka/authz",{"_index":3675,"title":{},"name":{},"text":{"250":{}},"component":{}}],["kafka2.8.0_stackable0.1.0",{"_index":2089,"title":{},"name":{},"text":{"41":{}},"component":{}}],["kafka2.9.0_stackable0.1.0",{"_index":2091,"title":{},"name":{},"text":{"41":{}},"component":{}}],["kafka2.9.0_stackable0.1.1",{"_index":2093,"title":{},"name":{},"text":{"41":{}},"component":{}}],["kafka=0.7.0",{"_index":3710,"title":{},"name":{},"text":{"261":{},"272":{}},"component":{}}],["kafkaappend",{"_index":3682,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["kafkacat",{"_index":2464,"title":{},"name":{},"text":{"60":{},"61":{},"259":{},"270":{}},"component":{}}],["kafkaclust",{"_index":1218,"title":{},"name":{},"text":{"17":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{},"427":{},"435":{},"446":{}},"component":{}}],["kafkacluster.crd.yaml",{"_index":3670,"title":{},"name":{},"text":{"249":{}},"component":{}}],["kcat",{"_index":3706,"title":{},"name":{},"text":{"259":{},"260":{},"270":{},"271":{}},"component":{}}],["keep",{"_index":923,"title":{},"name":{},"text":{"12":{},"16":{},"26":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"41":{},"48":{},"63":{},"71":{},"193":{},"201":{},"211":{},"358":{},"368":{},"408":{},"416":{}},"component":{}}],["kenworthi",{"_index":2183,"title":{},"name":{},"text":{"45":{}},"component":{}}],["kept",{"_index":1441,"title":{},"name":{},"text":{"27":{},"34":{},"41":{},"193":{},"201":{},"211":{}},"component":{}}],["kerbero",{"_index":1744,"title":{},"name":{},"text":{"35":{},"37":{},"42":{},"63":{},"70":{},"71":{},"78":{},"84":{},"93":{}},"component":{}}],["kerberosoverwrit",{"_index":1908,"title":{},"name":{},"text":{"37":{}},"component":{}}],["key",{"_index":744,"title":{},"name":{},"text":{"10":{},"15":{},"23":{},"30":{},"32":{},"35":{},"47":{},"69":{},"77":{},"85":{},"94":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"238":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["key/valu",{"_index":3911,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["keyboard",{"_index":35,"title":{},"name":{},"text":{"1":{}},"component":{}}],["keycloak",{"_index":2239,"title":{"48-10":{}},"name":{},"text":{"48":{}},"component":{}}],["keyerror",{"_index":3197,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["keypair",{"_index":2873,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["keysecret",{"_index":3744,"title":{},"name":{},"text":{"280":{},"285":{},"286":{},"293":{},"294":{}},"component":{}}],["keystor",{"_index":4058,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["keytab",{"_index":1745,"title":{},"name":{},"text":{"35":{}},"component":{}}],["keyword",{"_index":1188,"title":{},"name":{},"text":{"16":{}},"component":{}}],["kind",{"_index":6,"title":{"1-5":{},"52-6":{},"54-4":{},"58-4":{}},"name":{},"text":{"1":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{},"16":{},"19":{},"22":{},"33":{},"37":{},"38":{},"39":{},"40":{},"45":{},"50":{},"52":{},"54":{},"55":{},"56":{},"58":{},"63":{},"71":{},"79":{},"85":{},"86":{},"87":{},"88":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"179":{},"182":{},"185":{},"186":{},"188":{},"191":{},"195":{},"196":{},"199":{},"203":{},"204":{},"206":{},"209":{},"213":{},"214":{},"216":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"299":{},"303":{},"304":{},"306":{},"309":{},"314":{},"317":{},"321":{},"322":{},"324":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"358":{},"363":{},"365":{},"366":{},"368":{},"374":{},"379":{},"380":{},"382":{},"387":{},"388":{},"390":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"438":{},"440":{},"441":{},"445":{},"446":{},"447":{},"449":{}},"component":{}}],["kindest/node:v1.21.1",{"_index":2338,"title":{},"name":{},"text":{"52":{},"54":{},"55":{},"56":{},"58":{}},"component":{}}],["klestrup",{"_index":1730,"title":{},"name":{},"text":{"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["km",{"_index":2477,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["know",{"_index":764,"title":{},"name":{},"text":{"11":{},"13":{},"16":{},"30":{},"37":{},"48":{},"53":{},"55":{},"85":{},"94":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["know/understand",{"_index":2047,"title":{},"name":{},"text":{"40":{}},"component":{}}],["knowledg",{"_index":635,"title":{},"name":{},"text":{"8":{}},"component":{}}],["known",{"_index":636,"title":{},"name":{},"text":{"8":{},"11":{},"29":{},"39":{},"41":{},"43":{},"47":{},"61":{},"436":{},"447":{}},"component":{}}],["known/need",{"_index":2610,"title":{},"name":{},"text":{"61":{}},"component":{}}],["krb",{"_index":1756,"title":{},"name":{},"text":{"35":{}},"component":{}}],["ksv",{"_index":3865,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["kube",{"_index":1231,"title":{"30-8":{},"30-9":{}},"name":{},"text":{"19":{},"30":{},"47":{}},"component":{}}],["kubeconfig=/home/stackable/.kube/config",{"_index":2911,"title":{},"name":{},"text":{"98":{},"99":{},"101":{},"104":{},"105":{},"107":{},"110":{},"111":{},"118":{},"119":{},"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"169":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"222":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"249":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"279":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"313":{},"316":{},"318":{},"326":{},"327":{},"334":{},"335":{},"342":{},"343":{},"350":{},"351":{},"360":{},"361":{},"369":{},"371":{},"373":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"395":{},"398":{},"399":{},"401":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"425":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["kubectl",{"_index":4,"title":{"1-4":{},"286-7":{},"294-7":{}},"name":{},"text":{"1":{},"16":{},"19":{},"23":{},"33":{},"36":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"66":{},"74":{},"79":{},"88":{},"101":{},"102":{},"107":{},"108":{},"113":{},"114":{},"115":{},"121":{},"122":{},"123":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"152":{},"153":{},"160":{},"161":{},"162":{},"169":{},"177":{},"178":{},"186":{},"187":{},"196":{},"203":{},"204":{},"205":{},"213":{},"214":{},"215":{},"222":{},"223":{},"229":{},"230":{},"231":{},"238":{},"239":{},"240":{},"249":{},"250":{},"258":{},"259":{},"260":{},"269":{},"270":{},"271":{},"279":{},"280":{},"285":{},"286":{},"287":{},"293":{},"294":{},"295":{},"303":{},"304":{},"305":{},"313":{},"314":{},"321":{},"322":{},"323":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"356":{},"357":{},"366":{},"367":{},"373":{},"374":{},"380":{},"381":{},"388":{},"389":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"409":{},"415":{},"416":{},"417":{},"425":{},"426":{},"434":{},"436":{},"437":{},"445":{},"447":{},"448":{}},"component":{}}],["kubelet",{"_index":1517,"title":{"30-8":{}},"name":{},"text":{"30":{},"79":{},"88":{}},"component":{}}],["kuberent",{"_index":3827,"title":{},"name":{},"text":{"329":{},"337":{},"345":{}},"component":{}}],["kubernet",{"_index":3,"title":{"30":{},"31":{},"33":{},"36":{},"328":{},"336":{},"344":{},"352":{},"362":{},"1-3":{},"1-5":{},"1-6":{},"1-7":{},"20-9":{},"31-8":{},"35-6":{},"36-2":{},"36-5":{},"36-6":{},"36-7":{},"52-5":{},"54-3":{},"58-3":{},"113-19":{},"121-19":{},"193-1":{},"201-1":{},"211-1":{},"243-1":{},"244-7":{},"252-1":{},"253-7":{},"263-1":{},"264-7":{},"275-7":{},"282-7":{},"290-7":{},"421-7":{},"430-7":{},"441-7":{}},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"8":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"23":{},"28":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"38":{},"43":{},"45":{},"46":{},"47":{},"48":{},"50":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"65":{},"66":{},"67":{},"73":{},"74":{},"75":{},"79":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"100":{},"101":{},"102":{},"106":{},"107":{},"108":{},"112":{},"113":{},"114":{},"115":{},"116":{},"120":{},"121":{},"122":{},"123":{},"124":{},"129":{},"130":{},"131":{},"136":{},"137":{},"138":{},"143":{},"144":{},"145":{},"150":{},"151":{},"153":{},"154":{},"159":{},"160":{},"162":{},"163":{},"168":{},"169":{},"175":{},"178":{},"179":{},"184":{},"187":{},"188":{},"194":{},"195":{},"196":{},"202":{},"203":{},"205":{},"206":{},"212":{},"213":{},"215":{},"216":{},"219":{},"221":{},"222":{},"226":{},"228":{},"231":{},"232":{},"235":{},"237":{},"240":{},"241":{},"248":{},"249":{},"250":{},"257":{},"258":{},"260":{},"261":{},"268":{},"269":{},"271":{},"272":{},"274":{},"275":{},"278":{},"279":{},"280":{},"282":{},"284":{},"285":{},"287":{},"288":{},"290":{},"292":{},"293":{},"295":{},"296":{},"297":{},"298":{},"301":{},"302":{},"304":{},"305":{},"306":{},"307":{},"308":{},"311":{},"312":{},"313":{},"315":{},"316":{},"319":{},"320":{},"322":{},"323":{},"324":{},"328":{},"329":{},"330":{},"331":{},"332":{},"336":{},"337":{},"338":{},"339":{},"340":{},"344":{},"345":{},"346":{},"347":{},"348":{},"352":{},"353":{},"354":{},"355":{},"357":{},"358":{},"362":{},"363":{},"364":{},"365":{},"367":{},"368":{},"372":{},"373":{},"374":{},"378":{},"380":{},"381":{},"382":{},"386":{},"388":{},"389":{},"390":{},"394":{},"395":{},"396":{},"400":{},"401":{},"402":{},"406":{},"407":{},"409":{},"410":{},"414":{},"415":{},"417":{},"418":{},"422":{},"424":{},"425":{},"426":{},"427":{},"431":{},"433":{},"434":{},"435":{},"437":{},"438":{},"442":{},"444":{},"445":{},"446":{},"448":{},"449":{}},"component":{}}],["kubernetes.io/o",{"_index":692,"title":{},"name":{},"text":{"9":{},"152":{},"161":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"230":{},"238":{},"239":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"304":{},"314":{},"321":{},"322":{},"396":{},"402":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["kubernetes.io/opaqu",{"_index":3996,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["kubernetes://?__extra__=%7b%22extra__kubernetes__in_cluster%22%3a+true%2c+%22extra__kubernetes__kube_config%22%3a+%22%22%2c+%22extra__kubernetes__kube_config_path%22%3a+%22%22%2c+%22extra__kubernetes__namespace%22%3a+%22%22%7d",{"_index":3069,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["kubernetes_conn_id",{"_index":3117,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["kubernetes_in_clust",{"_index":3130,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["kuberneteshook",{"_index":3092,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["kuberneteshook(conn_id=self.kubernetes_conn_id",{"_index":3142,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["kuttl",{"_index":912,"title":{},"name":{},"text":{"12":{},"13":{},"16":{}},"component":{}}],["kwarg",{"_index":3132,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["l",{"_index":326,"title":{},"name":{},"text":{"3":{},"51":{},"60":{},"61":{},"102":{},"108":{},"113":{},"121":{},"286":{},"294":{},"356":{},"366":{}},"component":{}}],["lab",{"_index":58,"title":{},"name":{},"text":{"1":{},"23":{},"60":{},"61":{},"62":{}},"component":{}}],["label",{"_index":505,"title":{"43-10":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"14":{},"19":{},"22":{},"32":{},"43":{},"44":{},"54":{},"58":{},"63":{},"67":{},"68":{},"71":{},"75":{},"76":{},"85":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"145":{},"151":{},"160":{},"177":{},"186":{},"204":{},"214":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"285":{},"293":{},"301":{},"304":{},"311":{},"319":{},"322":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["labelselector",{"_index":1642,"title":{},"name":{},"text":{"32":{},"43":{}},"component":{}}],["lag",{"_index":1860,"title":{},"name":{},"text":{"36":{}},"component":{}}],["languag",{"_index":299,"title":{"25":{},"28":{}},"name":{},"text":{"2":{},"7":{},"14":{},"17":{},"25":{},"28":{},"46":{},"47":{},"48":{},"62":{},"113":{},"121":{}},"component":{}}],["lar",{"_index":1372,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"41":{},"48":{}},"component":{}}],["larg",{"_index":283,"title":{"26":{}},"name":{},"text":{"2":{},"10":{},"12":{},"26":{},"27":{},"36":{},"46":{},"47":{},"49":{},"62":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["largest",{"_index":1701,"title":{},"name":{},"text":{"34":{}},"component":{}}],["last",{"_index":2408,"title":{},"name":{},"text":{"55":{},"56":{},"60":{},"61":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["lastli",{"_index":1227,"title":{},"name":{},"text":{"17":{},"23":{},"230":{},"239":{}},"component":{}}],["lata",{"_index":2479,"title":{},"name":{},"text":{"60":{}},"component":{}}],["late",{"_index":2256,"title":{},"name":{},"text":{"48":{}},"component":{}}],["latenc",{"_index":494,"title":{},"name":{},"text":{"7":{},"14":{},"60":{},"61":{},"301":{},"311":{},"319":{}},"component":{}}],["later",{"_index":1177,"title":{},"name":{},"text":{"16":{},"25":{},"27":{},"30":{},"31":{},"39":{},"41":{},"42":{},"44":{},"45":{}},"component":{}}],["latest",{"_index":1120,"title":{},"name":{},"text":{"16":{},"20":{},"36":{},"41":{},"51":{},"55":{},"79":{},"88":{},"101":{},"102":{},"107":{},"108":{},"114":{},"122":{},"130":{},"137":{},"144":{},"145":{},"151":{},"160":{},"169":{},"170":{},"176":{},"177":{},"185":{},"186":{},"195":{},"196":{},"203":{},"204":{},"213":{},"214":{},"222":{},"223":{},"229":{},"238":{},"249":{},"279":{},"280":{},"285":{},"293":{},"303":{},"313":{},"314":{},"321":{},"356":{},"366":{},"373":{},"374":{},"380":{},"388":{},"395":{},"401":{},"408":{},"416":{},"425":{},"426":{},"434":{},"445":{}},"component":{}}],["latest(\"valu",{"_index":2646,"title":{},"name":{},"text":{"61":{}},"component":{}}],["latitud",{"_index":2588,"title":{},"name":{},"text":{"61":{}},"component":{}}],["latter",{"_index":1747,"title":{},"name":{},"text":{"35":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["launch",{"_index":3878,"title":{},"name":{},"text":{"331":{},"332":{},"339":{},"340":{},"347":{},"348":{},"354":{},"355":{},"364":{},"365":{}},"component":{}}],["law",{"_index":3100,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["layer",{"_index":2106,"title":{},"name":{},"text":{"41":{},"44":{},"50":{},"79":{},"88":{},"177":{},"186":{}},"component":{}}],["ldap",{"_index":431,"title":{"63-1":{},"71-1":{},"113-9":{},"113-12":{},"121-9":{},"121-12":{},"285-3":{},"285-6":{},"293-3":{},"293-6":{},"374-8":{},"374-11":{},"379-3":{},"379-6":{},"387-3":{},"387-6":{}},"name":{},"text":{"5":{},"37":{},"40":{},"48":{},"63":{},"69":{},"70":{},"71":{},"77":{},"78":{},"113":{},"114":{},"121":{},"122":{},"285":{},"293":{},"374":{},"379":{},"380":{},"387":{},"388":{}},"component":{}}],["ldap.serv",{"_index":1897,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ldapfieldnam",{"_index":2785,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["ldapoverwrit",{"_index":1905,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ldapstuff",{"_index":2044,"title":{},"name":{},"text":{"40":{}},"component":{}}],["lead",{"_index":1386,"title":{},"name":{},"text":{"25":{},"61":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["leader",{"_index":1630,"title":{},"name":{},"text":{"32":{},"60":{},"61":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["learn",{"_index":39,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"28":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"436":{},"438":{},"447":{},"449":{}},"component":{}}],["led",{"_index":918,"title":{},"name":{},"text":{"12":{}},"component":{}}],["left",{"_index":2514,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"114":{},"122":{}},"component":{}}],["legend",{"_index":2536,"title":{},"name":{},"text":{"60":{}},"component":{}}],["len",{"_index":988,"title":{},"name":{},"text":{"13":{}},"component":{}}],["length",{"_index":3585,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["less",{"_index":314,"title":{},"name":{},"text":{"3":{},"28":{},"29":{},"30":{},"34":{},"36":{},"38":{},"39":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["lessen",{"_index":2107,"title":{},"name":{},"text":{"41":{}},"component":{}}],["let",{"_index":1917,"title":{},"name":{},"text":{"37":{},"42":{},"62":{}},"component":{}}],["let’",{"_index":41,"title":{},"name":{},"text":{"1":{}},"component":{}}],["level",{"_index":250,"title":{"61":{}},"name":{"61":{}},"text":{"2":{},"7":{},"9":{},"12":{},"14":{},"28":{},"29":{},"32":{},"36":{},"41":{},"42":{},"61":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"280":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"358":{},"363":{},"368":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["leverag",{"_index":254,"title":{},"name":{},"text":{"2":{},"45":{}},"component":{}}],["lib",{"_index":1704,"title":{},"name":{},"text":{"34":{},"51":{}},"component":{}}],["lib/systemd/system",{"_index":1491,"title":{},"name":{},"text":{"29":{}},"component":{}}],["librari",{"_index":892,"title":{"15-9":{}},"name":{},"text":{"12":{},"28":{},"41":{},"47":{},"176":{},"177":{},"185":{},"186":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["licens",{"_index":1473,"title":{},"name":{},"text":{"28":{},"113":{},"121":{}},"component":{}}],["liebau",{"_index":1379,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"48":{}},"component":{}}],["life",{"_index":1835,"title":{},"name":{},"text":{"36":{},"41":{}},"component":{}}],["lifetim",{"_index":1795,"title":{},"name":{},"text":{"36":{},"45":{}},"component":{}}],["lightweight",{"_index":2151,"title":{},"name":{},"text":{"44":{}},"component":{}}],["likelyhood",{"_index":1946,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{}}],["limit",{"_index":246,"title":{},"name":{},"text":{"2":{},"8":{},"30":{},"35":{},"36":{},"41":{},"44":{},"47":{},"48":{},"60":{},"61":{},"62":{},"113":{},"121":{},"127":{},"134":{},"141":{},"148":{},"152":{},"157":{},"161":{},"196":{},"203":{},"213":{},"219":{},"226":{},"235":{},"246":{},"250":{},"255":{},"258":{},"266":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"299":{},"309":{},"317":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["line",{"_index":1215,"title":{"64-1":{},"72-1":{},"81-1":{},"90-1":{},"98-1":{},"104-1":{},"110-1":{},"118-1":{},"126-1":{},"133-1":{},"140-1":{},"147-1":{},"156-1":{},"165-1":{},"172-1":{},"181-1":{},"190-1":{},"198-1":{},"208-1":{},"218-1":{},"225-1":{},"234-1":{},"244-1":{},"253-1":{},"264-1":{},"275-1":{},"281-1":{},"282-1":{},"289-1":{},"290-1":{},"298-1":{},"308-1":{},"316-1":{},"326-1":{},"334-1":{},"342-1":{},"350-1":{},"360-1":{},"369-1":{},"376-1":{},"384-1":{},"392-1":{},"398-1":{},"404-1":{},"412-1":{},"421-1":{},"430-1":{},"441-1":{}},"name":{},"text":{"17":{},"23":{},"39":{},"42":{},"44":{},"50":{},"51":{},"62":{},"64":{},"72":{},"81":{},"90":{},"98":{},"102":{},"104":{},"108":{},"110":{},"113":{},"114":{},"116":{},"118":{},"121":{},"122":{},"124":{},"126":{},"133":{},"140":{},"147":{},"152":{},"154":{},"156":{},"161":{},"163":{},"165":{},"172":{},"179":{},"181":{},"188":{},"190":{},"198":{},"206":{},"208":{},"216":{},"218":{},"225":{},"232":{},"234":{},"241":{},"244":{},"253":{},"261":{},"264":{},"272":{},"275":{},"281":{},"282":{},"288":{},"289":{},"290":{},"296":{},"298":{},"304":{},"306":{},"308":{},"316":{},"322":{},"324":{},"326":{},"334":{},"342":{},"350":{},"358":{},"360":{},"368":{},"369":{},"376":{},"382":{},"384":{},"390":{},"392":{},"398":{},"404":{},"410":{},"412":{},"418":{},"421":{},"430":{},"436":{},"438":{},"441":{},"447":{},"449":{}},"component":{}}],["line.decod",{"_index":3182,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["link",{"_index":342,"title":{"26-10":{},"31-10":{},"32-6":{},"33-6":{},"36-17":{},"47-10":{},"48-11":{}},"name":{},"text":{"4":{},"7":{},"11":{},"12":{},"16":{},"29":{},"33":{},"36":{},"48":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"427":{},"435":{},"446":{}},"component":{}}],["linux",{"_index":693,"title":{"51-2":{}},"name":{},"text":{"9":{},"13":{},"51":{},"152":{},"161":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"230":{},"238":{},"239":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"304":{},"314":{},"321":{},"322":{},"396":{},"402":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["list",{"_index":225,"title":{"41-13":{},"54-5":{},"55-3":{},"57-1":{},"58-5":{},"60-1":{},"61-1":{},"61-3":{},"62-1":{}},"name":{},"text":{"2":{},"5":{},"8":{},"15":{},"17":{},"18":{},"29":{},"32":{},"33":{},"34":{},"41":{},"43":{},"44":{},"46":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"68":{},"76":{},"79":{},"88":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"303":{},"314":{},"321":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"422":{},"426":{},"429":{},"430":{},"431":{},"434":{},"436":{},"440":{},"441":{},"442":{},"445":{},"447":{}},"component":{}}],["listen",{"_index":1566,"title":{},"name":{},"text":{"30":{},"80":{},"81":{},"89":{},"90":{}},"component":{}}],["littl",{"_index":1414,"title":{},"name":{},"text":{"26":{},"27":{},"29":{},"36":{}},"component":{}}],["live",{"_index":1560,"title":{},"name":{},"text":{"30":{},"35":{},"61":{}},"component":{}}],["liveli",{"_index":3521,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["livenod",{"_index":3455,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["load",{"_index":417,"title":{"60-16":{},"61-18":{},"62-11":{}},"name":{},"text":{"5":{},"8":{},"16":{},"52":{},"54":{},"62":{},"79":{},"88":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"160":{},"161":{},"162":{},"195":{},"303":{},"314":{},"321":{},"374":{},"380":{},"388":{}},"component":{}}],["loadexampl",{"_index":2964,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["loadexamplesoninit",{"_index":3964,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["local",{"_index":492,"title":{"52-6":{},"54-4":{},"58-4":{}},"name":{},"text":{"7":{},"8":{},"14":{},"16":{},"49":{},"53":{},"79":{},"88":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"195":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"269":{},"285":{},"293":{},"301":{},"311":{},"319":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"380":{},"388":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["local:///stackable/spark/examples/jars/spark",{"_index":3886,"title":{},"name":{},"text":{"332":{},"340":{},"348":{}},"component":{}}],["local:///stackable/spark/examples/src/main/python/pi.pi",{"_index":3086,"title":{},"name":{},"text":{"113":{},"121":{},"356":{},"366":{}},"component":{}}],["local:///stackable/spark/jobs/ny_tlc_report.pi",{"_index":3890,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["localexecutor",{"_index":2976,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["localhost",{"_index":3344,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["localhost:9001",{"_index":3615,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["localhost:9092",{"_index":3708,"title":{},"name":{},"text":{"259":{},"270":{}},"component":{}}],["locat",{"_index":677,"title":{"29":{},"29-9":{},"29-10":{},"332-3":{},"332-4":{},"332-5":{},"332-6":{},"332-7":{},"340-3":{},"340-4":{},"340-5":{},"340-6":{},"340-7":{},"348-3":{},"348-4":{},"348-5":{},"348-6":{},"348-7":{},"355-2":{},"355-3":{},"355-4":{},"355-5":{},"355-6":{},"365-2":{},"365-3":{},"365-4":{},"365-5":{},"365-6":{}},"name":{},"text":{"9":{},"10":{},"22":{},"29":{},"34":{},"45":{},"46":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{},"166":{},"173":{},"176":{},"182":{},"185":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["lockfil",{"_index":2833,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["lockstep",{"_index":2049,"title":{"41-11":{},"41-17":{},"41-18":{}},"name":{},"text":{"41":{}},"component":{}}],["log",{"_index":187,"title":{"34-13":{}},"name":{},"text":{"1":{},"9":{},"34":{},"45":{},"46":{},"60":{},"61":{},"62":{},"113":{},"121":{},"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{},"230":{},"239":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"356":{},"358":{},"366":{},"368":{},"374":{},"379":{},"387":{},"407":{},"408":{},"415":{},"416":{},"436":{},"447":{}},"component":{}}],["log.dir",{"_index":3696,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log.properti",{"_index":4046,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["log4j",{"_index":3325,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.console.layout.conversionpattern=%d{iso8601",{"_index":3338,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["log4j.appender.console.layout=org.apache.log4j.patternlayout",{"_index":3337,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["log4j.appender.console.target=system.err",{"_index":3336,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["log4j.appender.console=org.apache.log4j.consoleappend",{"_index":3335,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["log4j.appender.eventcounter=org.apache.hadoop.log.metrics.eventcount",{"_index":3341,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["log4j.appender.kafkaappender.datepattern='.'yyyi",{"_index":3688,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.kafkaappender.file=${kafka.logs.dir}/server.log",{"_index":3692,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.kafkaappender.layout.conversionpattern=[%d",{"_index":3694,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.kafkaappender.layout=org.apache.log4j.patternlayout",{"_index":3693,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.kafkaappender=org.apache.log4j.dailyrollingfileappend",{"_index":3687,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.stdout.layout.conversionpattern=[%d",{"_index":3685,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.stdout.layout=org.apache.log4j.patternlayout",{"_index":3684,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.appender.stdout=org.apache.log4j.consoleappend",{"_index":3683,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.properti",{"_index":3671,"title":{"250-2":{},"258-2":{},"269-2":{}},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.rootlogger=${hadoop.root.logg",{"_index":3331,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["log4j.rootlogger=info",{"_index":3680,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["log4j.threshold=al",{"_index":3334,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["log_method",{"_index":3176,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["log_method(log",{"_index":3183,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["logdir",{"_index":2220,"title":{},"name":{},"text":{"45":{}},"component":{}}],["logfiledirectori",{"_index":2194,"title":{},"name":{},"text":{"45":{}},"component":{}}],["logger",{"_index":3329,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["logic",{"_index":1716,"title":{},"name":{},"text":{"34":{},"38":{},"39":{},"48":{}},"component":{}}],["login",{"_index":167,"title":{},"name":{},"text":{"1":{},"223":{},"229":{},"238":{},"286":{},"294":{},"408":{},"416":{}},"component":{}}],["long",{"_index":1869,"title":{},"name":{},"text":{"36":{},"102":{},"108":{},"114":{},"122":{},"152":{},"161":{},"176":{},"185":{},"374":{},"380":{},"388":{}},"component":{}}],["longer",{"_index":1804,"title":{},"name":{},"text":{"36":{}},"component":{}}],["longitud",{"_index":2586,"title":{},"name":{},"text":{"61":{}},"component":{}}],["longnam",{"_index":2582,"title":{},"name":{},"text":{"61":{}},"component":{}}],["look",{"_index":233,"title":{},"name":{},"text":{"2":{},"7":{},"9":{},"11":{},"13":{},"16":{},"29":{},"31":{},"34":{},"37":{},"40":{},"41":{},"42":{},"49":{},"51":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"63":{},"69":{},"71":{},"77":{},"85":{},"86":{},"94":{},"95":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"230":{},"239":{},"258":{},"259":{},"269":{},"270":{},"274":{},"275":{},"285":{},"286":{},"293":{},"294":{},"304":{},"322":{},"356":{},"358":{},"366":{},"368":{},"374":{},"379":{},"380":{},"381":{},"387":{},"388":{},"389":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"427":{},"434":{},"435":{},"436":{},"445":{},"446":{},"447":{}},"component":{}}],["lookup",{"_index":948,"title":{},"name":{},"text":{"13":{}},"component":{}}],["loos",{"_index":1418,"title":{},"name":{},"text":{"26":{},"29":{}},"component":{}}],["lose",{"_index":4126,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["lot",{"_index":31,"title":{},"name":{},"text":{"1":{},"25":{},"30":{},"31":{},"39":{},"41":{}},"component":{}}],["low",{"_index":1496,"title":{},"name":{},"text":{"29":{},"31":{},"60":{},"61":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["lower",{"_index":1392,"title":{},"name":{},"text":{"25":{}},"component":{}}],["lowest",{"_index":681,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ls",{"_index":2282,"title":{},"name":{},"text":{"50":{},"436":{},"447":{}},"component":{}}],["luka",{"_index":1374,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"30":{},"48":{}},"component":{}}],["m",{"_index":366,"title":{},"name":{},"text":{"4":{},"250":{},"258":{},"269":{}},"component":{}}],["m%n",{"_index":3340,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["mac",{"_index":2304,"title":{},"name":{},"text":{"51":{}},"component":{}}],["machin",{"_index":90,"title":{},"name":{},"text":{"1":{},"2":{},"9":{},"16":{},"32":{},"329":{},"337":{},"345":{}},"component":{}}],["maco",{"_index":2283,"title":{"51-4":{}},"name":{},"text":{"51":{}},"component":{}}],["made",{"_index":381,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"33":{},"36":{},"61":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"285":{},"293":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"356":{},"363":{},"366":{}},"component":{}}],["magnif",{"_index":2509,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["magnitud",{"_index":2528,"title":{},"name":{},"text":{"60":{}},"component":{}}],["mail",{"_index":2791,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["main",{"_index":351,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"16":{},"27":{},"30":{},"33":{},"38":{},"39":{},"41":{},"44":{},"55":{},"102":{},"108":{},"114":{},"122":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"379":{},"387":{}},"component":{}}],["mainapplicationfil",{"_index":3085,"title":{},"name":{},"text":{"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["mainclass",{"_index":3841,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["mainli",{"_index":2380,"title":{},"name":{},"text":{"55":{},"407":{},"415":{}},"component":{}}],["mainstream",{"_index":1871,"title":{},"name":{},"text":{"36":{}},"component":{}}],["maintain",{"_index":306,"title":{},"name":{},"text":{"2":{},"12":{},"35":{},"36":{},"41":{}},"component":{}}],["mainten",{"_index":920,"title":{},"name":{},"text":{"12":{},"36":{}},"component":{}}],["major",{"_index":1807,"title":{},"name":{},"text":{"36":{},"51":{}},"component":{}}],["make",{"_index":114,"title":{"304-3":{},"322-3":{}},"name":{},"text":{"1":{},"4":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"16":{},"17":{},"23":{},"26":{},"27":{},"29":{},"30":{},"32":{},"34":{},"36":{},"38":{},"39":{},"41":{},"44":{},"45":{},"48":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"62":{},"79":{},"88":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"301":{},"311":{},"319":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"363":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["malfunct",{"_index":3746,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["malt",{"_index":1620,"title":{},"name":{},"text":{"32":{},"40":{},"41":{},"42":{},"43":{}},"component":{}}],["manag",{"_index":80,"title":{"34":{},"35":{},"36-5":{}},"name":{},"text":{"1":{},"2":{},"8":{},"12":{},"13":{},"14":{},"19":{},"26":{},"28":{},"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"39":{},"43":{},"45":{},"46":{},"48":{},"50":{},"55":{},"62":{},"65":{},"66":{},"73":{},"74":{},"83":{},"85":{},"92":{},"94":{},"100":{},"101":{},"102":{},"106":{},"107":{},"108":{},"112":{},"113":{},"120":{},"121":{},"129":{},"131":{},"136":{},"138":{},"143":{},"145":{},"150":{},"151":{},"159":{},"160":{},"168":{},"169":{},"170":{},"175":{},"176":{},"184":{},"185":{},"194":{},"196":{},"202":{},"203":{},"212":{},"213":{},"221":{},"222":{},"223":{},"228":{},"229":{},"237":{},"238":{},"248":{},"249":{},"250":{},"257":{},"258":{},"268":{},"269":{},"274":{},"275":{},"278":{},"279":{},"280":{},"282":{},"284":{},"285":{},"290":{},"292":{},"293":{},"302":{},"303":{},"312":{},"313":{},"314":{},"320":{},"321":{},"328":{},"329":{},"331":{},"336":{},"337":{},"339":{},"344":{},"345":{},"347":{},"352":{},"354":{},"362":{},"364":{},"372":{},"373":{},"374":{},"378":{},"379":{},"386":{},"387":{},"394":{},"395":{},"396":{},"400":{},"401":{},"402":{},"406":{},"407":{},"414":{},"415":{},"424":{},"425":{},"426":{},"427":{},"433":{},"434":{},"435":{},"436":{},"444":{},"445":{},"446":{},"447":{}},"component":{}}],["management.xml",{"_index":3723,"title":{},"name":{},"text":{"274":{},"275":{},"282":{},"290":{}},"component":{}}],["manageri",{"_index":3834,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["manages/gener",{"_index":895,"title":{},"name":{},"text":{"12":{}},"component":{}}],["mandat",{"_index":1791,"title":{},"name":{},"text":{"36":{}},"component":{}}],["mandatori",{"_index":1199,"title":{},"name":{},"text":{"16":{},"40":{},"42":{}},"component":{}}],["mani",{"_index":61,"title":{},"name":{},"text":{"1":{},"5":{},"7":{},"10":{},"12":{},"13":{},"14":{},"23":{},"25":{},"27":{},"28":{},"30":{},"35":{},"48":{},"60":{},"61":{},"62":{},"274":{},"275":{},"282":{},"290":{},"330":{},"338":{},"346":{},"353":{},"358":{},"363":{},"368":{},"408":{},"416":{}},"component":{}}],["manifest",{"_index":92,"title":{},"name":{},"text":{"1":{},"9":{},"10":{},"16":{},"38":{},"44":{},"152":{},"161":{},"232":{},"241":{},"259":{},"270":{},"286":{},"294":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"363":{},"436":{},"447":{}},"component":{}}],["manual",{"_index":565,"title":{},"name":{},"text":{"8":{},"11":{},"15":{},"16":{},"32":{},"35":{},"41":{},"101":{},"107":{},"113":{},"114":{},"121":{},"122":{},"130":{},"137":{},"144":{},"151":{},"160":{},"169":{},"196":{},"203":{},"213":{},"222":{},"249":{},"279":{},"313":{},"373":{},"374":{},"379":{},"387":{},"395":{},"396":{},"401":{},"402":{},"407":{},"415":{},"425":{}},"component":{}}],["map",{"_index":1033,"title":{"15-2":{},"15-3":{},"43-8":{},"43-10":{},"60-9":{},"61-11":{},"332-7":{},"340-7":{},"348-7":{},"355-6":{},"365-6":{}},"name":{},"text":{"15":{},"32":{},"38":{},"41":{},"43":{},"60":{},"61":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"280":{},"285":{},"293":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["margin",{"_index":1352,"title":{},"name":{},"text":{"23":{},"60":{}},"component":{}}],["mark",{"_index":1806,"title":{},"name":{},"text":{"36":{},"41":{},"51":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["market",{"_index":2174,"title":{},"name":{},"text":{"44":{}},"component":{}}],["marri",{"_index":1570,"title":{},"name":{},"text":{"30":{},"44":{}},"component":{}}],["master",{"_index":3235,"title":{},"name":{},"text":{"114":{},"122":{},"170":{},"176":{},"177":{},"185":{},"186":{}},"component":{}}],["master:6379/0",{"_index":2952,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["match",{"_index":577,"title":{},"name":{},"text":{"8":{},"23":{},"32":{},"39":{},"44":{},"60":{},"61":{},"63":{},"71":{},"84":{},"93":{},"113":{},"121":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["matchexpress",{"_index":1631,"title":{},"name":{},"text":{"32":{}},"component":{}}],["matchlabel",{"_index":691,"title":{},"name":{},"text":{"9":{},"19":{},"32":{},"113":{},"121":{},"152":{},"161":{},"170":{},"176":{},"185":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"230":{},"238":{},"239":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"304":{},"314":{},"321":{},"322":{},"396":{},"402":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["matrix",{"_index":2095,"title":{},"name":{},"text":{"41":{}},"component":{}}],["matter",{"_index":743,"title":{},"name":{},"text":{"10":{},"41":{},"145":{},"151":{},"160":{}},"component":{}}],["matur",{"_index":1812,"title":{},"name":{},"text":{"36":{}},"component":{}}],["maven",{"_index":3869,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["max",{"_index":3551,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["max(passenger_count",{"_index":2680,"title":{},"name":{},"text":{"62":{}},"component":{}}],["max_passenger_count",{"_index":2681,"title":{},"name":{},"text":{"62":{}},"component":{}}],["maxheapsizemb",{"_index":3472,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["maxim",{"_index":426,"title":{},"name":{},"text":{"5":{}},"component":{}}],["maximum",{"_index":724,"title":{},"name":{},"text":{"10":{},"62":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"380":{},"388":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["mayb",{"_index":1999,"title":{},"name":{},"text":{"39":{},"43":{}},"component":{}}],["md5",{"_index":3622,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["mean",{"_index":629,"title":{},"name":{},"text":{"8":{},"33":{},"36":{},"41":{},"57":{},"79":{},"88":{},"196":{},"203":{},"213":{},"245":{},"254":{},"265":{},"276":{},"283":{},"291":{},"301":{},"311":{},"319":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["measur",{"_index":2556,"title":{},"name":{},"text":{"61":{},"62":{}},"component":{}}],["measurements.station_uuid",{"_index":2642,"title":{},"name":{},"text":{"61":{}},"component":{}}],["measurements/",{"_index":2652,"title":{},"name":{},"text":{"61":{}},"component":{}}],["mechan",{"_index":469,"title":{"27":{}},"name":{},"text":{"7":{},"16":{},"30":{},"39":{},"40":{},"42":{},"43":{},"46":{},"47":{},"48":{},"51":{},"85":{},"94":{},"114":{},"122":{},"177":{},"186":{},"374":{},"380":{},"388":{}},"component":{}}],["medium",{"_index":3837,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["meet",{"_index":1439,"title":{},"name":{},"text":{"27":{},"48":{}},"component":{}}],["megabyt",{"_index":3545,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["member",{"_index":728,"title":{},"name":{},"text":{"10":{},"25":{},"28":{}},"component":{}}],["memberof",{"_index":2786,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["memberof=cn=myteam,ou=teams,dc=example,dc=org",{"_index":2784,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["membership",{"_index":3064,"title":{},"name":{},"text":{"113":{},"121":{},"374":{},"379":{},"387":{}},"component":{}}],["memori",{"_index":663,"title":{"196-6":{},"203-6":{},"213-6":{},"250-7":{},"258-9":{},"269-9":{},"280-6":{},"285-12":{},"293-12":{},"407-24":{},"415-24":{},"426-8":{},"434-8":{},"445-8":{}},"name":{},"text":{"9":{},"28":{},"32":{},"60":{},"61":{},"113":{},"121":{},"196":{},"203":{},"213":{},"232":{},"241":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["memstoresizemb",{"_index":3457,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["mention",{"_index":337,"title":{},"name":{},"text":{"3":{},"16":{},"41":{},"223":{},"229":{},"238":{},"274":{},"275":{},"282":{},"290":{},"356":{},"366":{}},"component":{}}],["menu",{"_index":3389,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["menzel",{"_index":1375,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"30":{},"48":{}},"component":{}}],["merg",{"_index":1178,"title":{"39-10":{}},"name":{},"text":{"16":{},"27":{},"39":{},"49":{}},"component":{}}],["messag",{"_index":989,"title":{},"name":{},"text":{"13":{},"60":{},"61":{},"223":{},"229":{},"238":{}},"component":{}}],["metadata",{"_index":509,"title":{"23-15":{},"374-1":{},"380-1":{},"388-1":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"14":{},"15":{},"19":{},"22":{},"37":{},"38":{},"39":{},"40":{},"42":{},"45":{},"60":{},"61":{},"62":{},"63":{},"71":{},"79":{},"85":{},"86":{},"87":{},"88":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"299":{},"303":{},"304":{},"309":{},"314":{},"317":{},"321":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"440":{},"441":{},"445":{},"446":{},"447":{}},"component":{}}],["metadata.nam",{"_index":2969,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"177":{},"186":{},"204":{},"214":{},"250":{},"258":{},"269":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"374":{},"380":{},"388":{}},"component":{}}],["metadatastoragedatabas",{"_index":3290,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{}},"component":{}}],["metal",{"_index":1524,"title":{},"name":{},"text":{"30":{}},"component":{}}],["metastor",{"_index":288,"title":{},"name":{},"text":{"2":{},"5":{},"12":{},"42":{},"62":{},"219":{},"221":{},"223":{},"226":{},"228":{},"229":{},"230":{},"231":{},"232":{},"235":{},"237":{},"238":{},"239":{},"240":{},"241":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["method",{"_index":501,"title":{"39-12":{},"274-3":{},"275-10":{},"282-10":{},"290-10":{}},"name":{},"text":{"7":{},"14":{},"15":{},"32":{},"35":{},"37":{},"39":{},"44":{},"63":{},"66":{},"69":{},"70":{},"71":{},"74":{},"77":{},"78":{},"83":{},"92":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"195":{},"222":{},"223":{},"229":{},"232":{},"238":{},"241":{},"249":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"313":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"363":{},"373":{},"395":{},"396":{},"401":{},"402":{},"407":{},"415":{},"425":{}},"component":{}}],["metric",{"_index":1243,"title":{},"name":{},"text":{"19":{},"23":{},"45":{},"54":{},"57":{},"58":{},"62":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["metrocod",{"_index":3379,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["microservic",{"_index":479,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["middlemanag",{"_index":2453,"title":{},"name":{},"text":{"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{}},"component":{}}],["migrat",{"_index":1867,"title":{},"name":{},"text":{"36":{}},"component":{}}],["mihai",{"_index":1928,"title":{},"name":{},"text":{"38":{},"41":{},"45":{}},"component":{}}],["million",{"_index":2505,"title":{},"name":{},"text":{"60":{},"61":{},"62":{}},"component":{}}],["mimic",{"_index":1155,"title":{},"name":{},"text":{"16":{}},"component":{}}],["min",{"_index":3553,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["mind",{"_index":1615,"title":{},"name":{},"text":{"31":{},"63":{},"71":{}},"component":{}}],["mine",{"_index":3609,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["minim",{"_index":493,"title":{},"name":{},"text":{"7":{},"44":{},"85":{},"86":{},"94":{},"95":{},"331":{},"339":{},"347":{},"354":{},"364":{}},"component":{}}],["minimum",{"_index":1794,"title":{},"name":{},"text":{"36":{},"330":{},"338":{},"346":{},"353":{},"358":{},"363":{},"368":{}},"component":{}}],["minio",{"_index":741,"title":{"60-11":{},"61-13":{},"232-4":{},"241-4":{}},"name":{},"text":{"10":{},"39":{},"42":{},"45":{},"50":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"231":{},"232":{},"238":{},"239":{},"240":{},"241":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["minor",{"_index":375,"title":{},"name":{},"text":{"4":{},"25":{},"36":{},"41":{}},"component":{}}],["minut",{"_index":316,"title":{},"name":{},"text":{"3":{},"60":{},"61":{},"177":{},"186":{},"204":{},"214":{},"356":{},"366":{}},"component":{}}],["mirror",{"_index":2114,"title":{"53-2":{},"53-3":{}},"name":{},"text":{"41":{},"53":{}},"component":{}}],["misc",{"_index":809,"title":{},"name":{},"text":{"12":{}},"component":{}}],["miss",{"_index":1476,"title":{},"name":{},"text":{"28":{},"36":{},"38":{},"44":{}},"component":{}}],["mission",{"_index":295,"title":{},"name":{},"text":{"2":{}},"component":{}}],["mitig",{"_index":1500,"title":{},"name":{},"text":{"29":{},"33":{},"38":{},"41":{}},"component":{}}],["mix",{"_index":1425,"title":{},"name":{},"text":{"26":{},"41":{}},"component":{}}],["mkdir",{"_index":3047,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["mm",{"_index":3689,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["mnt/data",{"_index":572,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mo",{"_index":2500,"title":{},"name":{},"text":{"60":{}},"component":{}}],["mock",{"_index":623,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mode",{"_index":537,"title":{"8-1":{}},"name":{},"text":{"8":{},"11":{},"48":{},"102":{},"108":{},"113":{},"121":{},"196":{},"203":{},"213":{},"232":{},"241":{},"274":{},"275":{},"282":{},"290":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["mode=standalon",{"_index":3651,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["model",{"_index":1329,"title":{},"name":{},"text":{"23":{},"33":{},"38":{},"40":{},"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["modern",{"_index":240,"title":{},"name":{},"text":{"2":{},"60":{},"61":{},"62":{}},"component":{}}],["modifi",{"_index":666,"title":{},"name":{},"text":{"9":{},"43":{},"60":{},"61":{},"195":{},"285":{},"293":{}},"component":{}}],["modificationtim",{"_index":3587,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["modul",{"_index":1013,"title":{},"name":{},"text":{"14":{},"15":{},"26":{}},"component":{}}],["moment",{"_index":1814,"title":{},"name":{},"text":{"36":{},"41":{},"44":{},"63":{},"64":{},"69":{},"71":{},"72":{},"77":{},"102":{},"108":{},"113":{},"121":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["monitor",{"_index":389,"title":{"19":{},"102-4":{},"102-10":{},"108-4":{},"108-10":{},"113-1":{},"113-13":{},"121-1":{},"121-13":{},"131-12":{},"138-12":{},"145-13":{},"151-14":{},"160-14":{},"170-3":{},"176-3":{},"185-3":{},"193-3":{},"196-1":{},"201-3":{},"203-1":{},"211-3":{},"213-1":{},"223-3":{},"229-3":{},"238-3":{},"250-1":{},"258-1":{},"269-1":{},"280-1":{},"285-7":{},"293-7":{},"303-2":{},"314-2":{},"321-2":{},"374-13":{},"379-8":{},"387-8":{},"396-16":{},"402-16":{},"407-19":{},"415-19":{},"426-3":{},"434-3":{},"445-3":{}},"name":{"19":{}},"text":{"5":{},"18":{},"19":{},"30":{},"45":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["monitoring.coreos.com/v1",{"_index":1240,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mono",{"_index":1431,"title":{},"name":{},"text":{"26":{}},"component":{}}],["month",{"_index":1339,"title":{},"name":{},"text":{"23":{},"36":{},"62":{}},"component":{}}],["more",{"_index":48,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"9":{},"10":{},"13":{},"14":{},"19":{},"22":{},"23":{},"25":{},"26":{},"29":{},"30":{},"32":{},"34":{},"36":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"48":{},"49":{},"50":{},"55":{},"61":{},"62":{},"83":{},"92":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"152":{},"154":{},"160":{},"161":{},"163":{},"170":{},"176":{},"177":{},"179":{},"185":{},"186":{},"188":{},"196":{},"203":{},"204":{},"206":{},"213":{},"214":{},"216":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"250":{},"258":{},"259":{},"261":{},"269":{},"270":{},"272":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"288":{},"290":{},"293":{},"294":{},"296":{},"303":{},"304":{},"306":{},"314":{},"321":{},"322":{},"324":{},"332":{},"340":{},"348":{},"355":{},"356":{},"358":{},"365":{},"366":{},"368":{},"374":{},"379":{},"380":{},"382":{},"387":{},"388":{},"390":{},"396":{},"402":{},"407":{},"408":{},"410":{},"415":{},"416":{},"418":{},"426":{},"434":{},"436":{},"438":{},"445":{},"447":{},"449":{}},"component":{}}],["mostli",{"_index":1109,"title":{},"name":{},"text":{"15":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["motiv",{"_index":650,"title":{"9-1":{},"11-1":{}},"name":{},"text":{"9":{}},"component":{}}],["mount",{"_index":596,"title":{"15-7":{},"38-8":{},"102-11":{},"108-11":{},"113-14":{},"121-14":{},"332-4":{},"340-4":{},"348-4":{},"355-3":{},"365-3":{}},"name":{},"text":{"8":{},"11":{},"12":{},"14":{},"15":{},"35":{},"38":{},"40":{},"42":{},"79":{},"85":{},"86":{},"87":{},"88":{},"94":{},"95":{},"96":{},"98":{},"99":{},"101":{},"102":{},"104":{},"105":{},"107":{},"108":{},"110":{},"111":{},"113":{},"118":{},"119":{},"121":{},"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{},"165":{},"166":{},"167":{},"169":{},"172":{},"173":{},"174":{},"181":{},"182":{},"183":{},"190":{},"191":{},"192":{},"193":{},"196":{},"198":{},"199":{},"200":{},"201":{},"203":{},"208":{},"209":{},"210":{},"211":{},"213":{},"218":{},"220":{},"222":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"249":{},"250":{},"253":{},"256":{},"258":{},"264":{},"267":{},"269":{},"275":{},"277":{},"279":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"313":{},"316":{},"318":{},"326":{},"327":{},"330":{},"332":{},"334":{},"335":{},"338":{},"340":{},"342":{},"343":{},"346":{},"348":{},"350":{},"351":{},"353":{},"355":{},"360":{},"361":{},"363":{},"365":{},"369":{},"371":{},"373":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"395":{},"398":{},"399":{},"401":{},"404":{},"405":{},"407":{},"412":{},"413":{},"415":{},"421":{},"423":{},"425":{},"426":{},"430":{},"432":{},"434":{},"436":{},"441":{},"443":{},"445":{},"447":{}},"component":{}}],["mountpath",{"_index":2898,"title":{},"name":{},"text":{"86":{},"87":{},"95":{},"96":{},"102":{},"108":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["mous",{"_index":2534,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["move",{"_index":32,"title":{},"name":{},"text":{"1":{},"30":{},"31":{},"36":{},"37":{},"38":{},"60":{},"61":{}},"component":{}}],["ms",{"_index":2237,"title":{},"name":{},"text":{"47":{}},"component":{}}],["much",{"_index":244,"title":{},"name":{},"text":{"2":{},"13":{},"15":{},"25":{},"26":{},"27":{},"30":{},"38":{},"39":{},"41":{},"44":{},"47":{},"48":{},"79":{},"88":{}},"component":{}}],["multi",{"_index":298,"title":{},"name":{},"text":{"2":{},"26":{}},"component":{}}],["multipl",{"_index":379,"title":{"26":{},"26-9":{}},"name":{},"text":{"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"16":{},"23":{},"26":{},"32":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"45":{},"46":{},"47":{},"49":{},"60":{},"61":{},"62":{},"63":{},"68":{},"70":{},"71":{},"76":{},"78":{},"80":{},"81":{},"87":{},"89":{},"90":{},"96":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"113":{},"117":{},"118":{},"119":{},"121":{},"125":{},"126":{},"128":{},"132":{},"133":{},"135":{},"139":{},"140":{},"142":{},"146":{},"147":{},"149":{},"155":{},"156":{},"158":{},"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"180":{},"181":{},"183":{},"189":{},"190":{},"192":{},"197":{},"198":{},"200":{},"207":{},"208":{},"210":{},"217":{},"218":{},"220":{},"224":{},"225":{},"227":{},"233":{},"234":{},"236":{},"242":{},"244":{},"247":{},"251":{},"253":{},"256":{},"262":{},"264":{},"267":{},"273":{},"274":{},"275":{},"277":{},"281":{},"282":{},"285":{},"289":{},"290":{},"293":{},"297":{},"298":{},"300":{},"307":{},"308":{},"310":{},"315":{},"316":{},"318":{},"325":{},"326":{},"327":{},"330":{},"333":{},"334":{},"335":{},"338":{},"341":{},"342":{},"343":{},"346":{},"349":{},"350":{},"351":{},"353":{},"358":{},"359":{},"360":{},"361":{},"363":{},"368":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"379":{},"383":{},"384":{},"385":{},"387":{},"391":{},"392":{},"393":{},"397":{},"398":{},"399":{},"403":{},"404":{},"405":{},"407":{},"411":{},"412":{},"413":{},"415":{},"419":{},"421":{},"423":{},"428":{},"430":{},"432":{},"439":{},"441":{},"443":{}},"component":{}}],["multius",{"_index":3994,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["mutual",{"_index":2027,"title":{"69-4":{},"77-4":{}},"name":{},"text":{"40":{},"69":{},"77":{},"85":{},"94":{}},"component":{}}],["mv",{"_index":2296,"title":{},"name":{},"text":{"51":{}},"component":{}}],["mvp",{"_index":1549,"title":{},"name":{},"text":{"30":{}},"component":{}}],["my.kerberos.serv",{"_index":1914,"title":{},"name":{},"text":{"37":{}},"component":{}}],["my.ldap.serv",{"_index":2776,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["my.openldap.serv",{"_index":2780,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["my_env_var",{"_index":3315,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["my_valu",{"_index":3316,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"426":{},"434":{},"445":{}},"component":{}}],["mycorp",{"_index":2268,"title":{},"name":{},"text":{"49":{}},"component":{}}],["myidoffset",{"_index":2029,"title":{},"name":{},"text":{"40":{}},"component":{}}],["myrealm",{"_index":1916,"title":{},"name":{},"text":{"37":{}},"component":{}}],["mysql",{"_index":3284,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{},"374":{},"379":{},"387":{}},"component":{}}],["mytabl",{"_index":3307,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["n",{"_index":1868,"title":{},"name":{},"text":{"36":{},"177":{},"186":{},"204":{},"214":{}},"component":{}}],["n+1.0.0",{"_index":2062,"title":{},"name":{},"text":{"41":{}},"component":{}}],["n.0.0",{"_index":2061,"title":{},"name":{},"text":{"41":{}},"component":{}}],["n.b",{"_index":3927,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["na",{"_index":3491,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["name",{"_index":137,"title":{"39-8":{}},"name":{},"text":{"1":{},"2":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"19":{},"22":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"52":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"71":{},"79":{},"84":{},"85":{},"86":{},"87":{},"88":{},"93":{},"94":{},"95":{},"96":{},"98":{},"99":{},"101":{},"102":{},"104":{},"105":{},"107":{},"108":{},"110":{},"111":{},"113":{},"114":{},"118":{},"119":{},"121":{},"122":{},"126":{},"127":{},"128":{},"130":{},"131":{},"133":{},"134":{},"135":{},"137":{},"138":{},"140":{},"141":{},"142":{},"144":{},"145":{},"147":{},"148":{},"149":{},"151":{},"152":{},"156":{},"157":{},"158":{},"160":{},"161":{},"165":{},"166":{},"167":{},"169":{},"170":{},"172":{},"173":{},"174":{},"176":{},"177":{},"181":{},"182":{},"183":{},"185":{},"186":{},"190":{},"191":{},"192":{},"193":{},"195":{},"196":{},"198":{},"199":{},"200":{},"201":{},"203":{},"204":{},"208":{},"209":{},"210":{},"211":{},"213":{},"214":{},"218":{},"219":{},"220":{},"222":{},"223":{},"225":{},"226":{},"227":{},"229":{},"230":{},"232":{},"234":{},"235":{},"236":{},"238":{},"239":{},"241":{},"243":{},"244":{},"246":{},"247":{},"249":{},"250":{},"252":{},"253":{},"255":{},"256":{},"258":{},"259":{},"263":{},"264":{},"266":{},"267":{},"269":{},"270":{},"274":{},"275":{},"277":{},"279":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"297":{},"298":{},"299":{},"300":{},"303":{},"304":{},"307":{},"308":{},"309":{},"310":{},"313":{},"314":{},"315":{},"316":{},"317":{},"318":{},"321":{},"322":{},"326":{},"327":{},"330":{},"331":{},"332":{},"334":{},"335":{},"338":{},"339":{},"340":{},"342":{},"343":{},"346":{},"347":{},"348":{},"350":{},"351":{},"353":{},"354":{},"355":{},"356":{},"360":{},"361":{},"363":{},"364":{},"365":{},"366":{},"369":{},"371":{},"373":{},"374":{},"376":{},"377":{},"379":{},"380":{},"384":{},"385":{},"387":{},"388":{},"392":{},"393":{},"395":{},"396":{},"398":{},"399":{},"401":{},"402":{},"404":{},"405":{},"407":{},"408":{},"412":{},"413":{},"415":{},"416":{},"420":{},"421":{},"422":{},"423":{},"425":{},"426":{},"427":{},"429":{},"430":{},"431":{},"432":{},"434":{},"435":{},"436":{},"440":{},"441":{},"442":{},"443":{},"445":{},"446":{},"447":{}},"component":{}}],["name.to_str",{"_index":1071,"title":{},"name":{},"text":{"15":{}},"component":{}}],["name=integr",{"_index":1153,"title":{},"name":{},"text":{"16":{}},"component":{}}],["name=pyspark",{"_index":3947,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["name=self.application_nam",{"_index":3195,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["name=simpl",{"_index":3766,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["name_and_namespace(my_clust",{"_index":1055,"title":{},"name":{},"text":{"15":{}},"component":{}}],["namenod",{"_index":685,"title":{},"name":{},"text":{"9":{},"152":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{}},"component":{}}],["namenod’",{"_index":3548,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["namespac",{"_index":1045,"title":{"42-6":{},"42-7":{},"97-2":{},"98-3":{},"103-2":{},"104-3":{},"109-2":{},"110-3":{},"117-2":{},"118-3":{},"125-2":{},"126-3":{},"132-2":{},"133-3":{},"139-2":{},"140-3":{},"146-2":{},"147-3":{},"155-2":{},"156-3":{},"164-2":{},"165-3":{},"171-2":{},"172-3":{},"180-2":{},"181-3":{},"189-2":{},"190-3":{},"197-2":{},"198-3":{},"207-2":{},"208-3":{},"217-2":{},"218-3":{},"224-2":{},"225-3":{},"233-2":{},"234-3":{},"242-2":{},"244-3":{},"251-2":{},"253-3":{},"262-2":{},"264-3":{},"273-2":{},"275-3":{},"281-3":{},"282-3":{},"289-3":{},"290-3":{},"297-2":{},"298-3":{},"307-2":{},"308-3":{},"315-2":{},"316-3":{},"325-1":{},"326-2":{},"333-1":{},"334-2":{},"341-1":{},"342-2":{},"349-1":{},"350-2":{},"359-1":{},"360-2":{},"369-3":{},"370-2":{},"375-2":{},"376-3":{},"383-2":{},"384-3":{},"391-2":{},"392-3":{},"397-2":{},"398-3":{},"403-2":{},"404-3":{},"411-2":{},"412-3":{},"419-2":{},"421-3":{},"428-2":{},"430-3":{},"439-2":{},"441-3":{}},"name":{},"text":{"15":{},"17":{},"22":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"42":{},"45":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"71":{},"85":{},"86":{},"94":{},"95":{},"97":{},"98":{},"99":{},"103":{},"104":{},"105":{},"109":{},"110":{},"111":{},"113":{},"117":{},"118":{},"119":{},"121":{},"125":{},"126":{},"127":{},"128":{},"132":{},"133":{},"134":{},"135":{},"139":{},"140":{},"141":{},"142":{},"146":{},"147":{},"148":{},"149":{},"152":{},"155":{},"156":{},"157":{},"158":{},"161":{},"164":{},"165":{},"166":{},"167":{},"171":{},"172":{},"173":{},"174":{},"180":{},"181":{},"182":{},"183":{},"189":{},"190":{},"191":{},"192":{},"196":{},"197":{},"198":{},"199":{},"200":{},"203":{},"207":{},"208":{},"209":{},"210":{},"213":{},"217":{},"218":{},"219":{},"220":{},"224":{},"225":{},"226":{},"227":{},"232":{},"233":{},"234":{},"235":{},"236":{},"241":{},"242":{},"243":{},"244":{},"246":{},"247":{},"250":{},"251":{},"252":{},"253":{},"255":{},"256":{},"258":{},"262":{},"263":{},"264":{},"266":{},"267":{},"269":{},"273":{},"274":{},"275":{},"277":{},"281":{},"282":{},"286":{},"289":{},"290":{},"294":{},"297":{},"298":{},"299":{},"300":{},"307":{},"308":{},"309":{},"310":{},"315":{},"316":{},"317":{},"318":{},"325":{},"326":{},"327":{},"330":{},"332":{},"333":{},"334":{},"335":{},"338":{},"340":{},"341":{},"342":{},"343":{},"346":{},"348":{},"349":{},"350":{},"351":{},"353":{},"355":{},"356":{},"359":{},"360":{},"361":{},"363":{},"365":{},"366":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"379":{},"383":{},"384":{},"385":{},"387":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"411":{},"412":{},"413":{},"415":{},"419":{},"421":{},"423":{},"426":{},"427":{},"428":{},"430":{},"432":{},"434":{},"435":{},"439":{},"441":{},"443":{},"445":{},"446":{}},"component":{}}],["namespace.svc.cluster.loc",{"_index":2868,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["namespace=\"default",{"_index":3208,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["namespace=namespac",{"_index":3181,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["namespace=self.namespac",{"_index":3149,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["namespace}/{clust",{"_index":3420,"title":{},"name":{},"text":{"173":{},"182":{}},"component":{}}],["namespace}/{clusternam",{"_index":3404,"title":{},"name":{},"text":{"166":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{}},"component":{}}],["nativ",{"_index":1651,"title":{"33":{},"330-5":{},"338-5":{},"346-5":{},"353-5":{},"363-5":{}},"name":{},"text":{"33":{},"39":{},"46":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["natur",{"_index":1653,"title":{},"name":{},"text":{"33":{}},"component":{}}],["nav.doc",{"_index":343,"title":{},"name":{},"text":{"4":{}},"component":{}}],["navig",{"_index":3385,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["nbbc",{"_index":4005,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["near",{"_index":2443,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["nearli",{"_index":1761,"title":{},"name":{},"text":{"35":{}},"component":{}}],["necessari",{"_index":772,"title":{},"name":{},"text":{"11":{},"13":{},"16":{},"23":{},"25":{},"27":{},"28":{},"30":{},"31":{},"38":{},"39":{},"41":{},"48":{},"102":{},"108":{},"114":{},"116":{},"122":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"330":{},"338":{},"346":{},"353":{},"363":{},"374":{},"380":{},"382":{},"388":{},"390":{},"410":{},"418":{}},"component":{}}],["necessit",{"_index":1507,"title":{},"name":{},"text":{"29":{}},"component":{}}],["need",{"_index":95,"title":{},"name":{},"text":{"1":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"60":{},"61":{},"63":{},"67":{},"69":{},"71":{},"75":{},"77":{},"79":{},"85":{},"88":{},"94":{},"101":{},"102":{},"107":{},"108":{},"113":{},"114":{},"115":{},"121":{},"122":{},"123":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"152":{},"153":{},"160":{},"161":{},"162":{},"169":{},"170":{},"176":{},"177":{},"178":{},"185":{},"186":{},"187":{},"195":{},"196":{},"203":{},"204":{},"205":{},"213":{},"214":{},"215":{},"222":{},"223":{},"229":{},"230":{},"231":{},"232":{},"238":{},"239":{},"240":{},"241":{},"249":{},"259":{},"260":{},"270":{},"271":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"286":{},"287":{},"290":{},"293":{},"294":{},"295":{},"303":{},"304":{},"305":{},"313":{},"314":{},"321":{},"322":{},"323":{},"329":{},"330":{},"331":{},"332":{},"337":{},"338":{},"339":{},"340":{},"345":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"356":{},"357":{},"363":{},"364":{},"365":{},"366":{},"367":{},"373":{},"374":{},"380":{},"381":{},"388":{},"389":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"409":{},"415":{},"416":{},"417":{},"425":{},"426":{},"434":{},"437":{},"445":{},"448":{}},"component":{}}],["needlessli",{"_index":2075,"title":{},"name":{},"text":{"41":{}},"component":{}}],["neg",{"_index":1363,"title":{"25-6":{},"26-6":{},"27-6":{},"28-6":{},"29-6":{},"30-6":{},"31-6":{},"32-5":{},"33-5":{},"36-16":{},"38-5":{},"44-6":{},"47-6":{},"48-6":{}},"name":{},"text":{},"component":{}}],["network",{"_index":57,"title":{},"name":{},"text":{"1":{},"7":{},"14":{},"23":{},"28":{},"40":{},"57":{},"61":{},"98":{},"99":{},"101":{},"104":{},"105":{},"107":{},"110":{},"111":{},"118":{},"119":{},"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"169":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"222":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"249":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"279":{},"282":{},"290":{},"298":{},"300":{},"301":{},"308":{},"310":{},"311":{},"313":{},"316":{},"318":{},"319":{},"326":{},"327":{},"334":{},"335":{},"342":{},"343":{},"350":{},"351":{},"360":{},"361":{},"369":{},"371":{},"373":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"395":{},"398":{},"399":{},"401":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"425":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["never",{"_index":1699,"title":{},"name":{},"text":{"34":{},"41":{},"85":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["new",{"_index":25,"title":{"29-8":{},"49-1":{},"49-3":{},"49-4":{},"49-6":{},"49-7":{},"49-9":{}},"name":{},"text":{"1":{},"5":{},"13":{},"16":{},"17":{},"28":{},"29":{},"32":{},"33":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"48":{},"49":{},"51":{},"52":{},"54":{},"60":{},"61":{},"62":{},"69":{},"77":{},"85":{},"94":{},"177":{},"186":{},"204":{},"214":{},"223":{},"229":{},"238":{},"331":{},"332":{},"339":{},"340":{},"347":{},"348":{},"354":{},"355":{},"364":{},"365":{},"427":{},"435":{},"436":{},"446":{},"447":{}},"component":{}}],["newer",{"_index":324,"title":{},"name":{},"text":{"3":{}},"component":{}}],["newli",{"_index":2756,"title":{},"name":{},"text":{"62":{}},"component":{}}],["next",{"_index":374,"title":{"10-7":{},"114-6":{},"115-2":{},"116-5":{},"122-6":{},"123-2":{},"124-5":{},"152-8":{},"153-2":{},"154-4":{},"161-8":{},"162-2":{},"163-4":{},"177-6":{},"178-2":{},"179-4":{},"186-6":{},"187-2":{},"188-4":{},"204-5":{},"205-2":{},"206-4":{},"214-5":{},"215-2":{},"216-4":{},"230-4":{},"231-2":{},"232-9":{},"239-4":{},"240-2":{},"241-9":{},"259-5":{},"260-2":{},"261-4":{},"270-5":{},"271-2":{},"272-4":{},"286-8":{},"287-2":{},"288-4":{},"294-8":{},"295-2":{},"296-4":{},"304-4":{},"305-2":{},"306-4":{},"322-4":{},"323-2":{},"324-4":{},"357-2":{},"358-5":{},"367-2":{},"368-5":{},"380-6":{},"381-2":{},"382-4":{},"388-6":{},"389-2":{},"390-4":{},"408-6":{},"409-2":{},"410-4":{},"416-6":{},"417-2":{},"418-4":{},"436-4":{},"437-2":{},"438-4":{},"447-4":{},"448-2":{},"449-4":{}},"name":{},"text":{"4":{},"8":{},"16":{},"22":{},"55":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"121":{},"152":{},"161":{},"259":{},"270":{},"408":{},"416":{}},"component":{}}],["nf",{"_index":624,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nginx",{"_index":2894,"title":{},"name":{},"text":{"86":{},"95":{}},"component":{}}],["nice",{"_index":265,"title":{},"name":{},"text":{"2":{},"52":{},"54":{},"56":{},"58":{}},"component":{}}],["nifi",{"_index":17,"title":{"278":{},"284":{},"292":{},"1-14":{},"1-18":{},"2-10":{},"20-7":{},"23-3":{},"23-8":{},"23-10":{},"274-6":{},"275-13":{},"282-13":{},"286-3":{},"286-5":{},"290-13":{},"294-3":{},"294-5":{}},"name":{},"text":{"1":{},"3":{},"5":{},"11":{},"12":{},"18":{},"23":{},"37":{},"38":{},"52":{},"54":{},"55":{},"56":{},"58":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"294":{},"295":{},"296":{}},"component":{"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"294":{},"295":{},"296":{}}}],["nifi.config.properti",{"_index":3761,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["nifi.properti",{"_index":3724,"title":{},"name":{},"text":{"274":{},"275":{},"276":{},"283":{},"285":{},"291":{},"293":{}},"component":{}}],["nifi.stackable.tech/v1alpha1",{"_index":1893,"title":{},"name":{},"text":{"37":{},"38":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{}},"component":{}}],["nifi.yaml",{"_index":3764,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi=0.7.0",{"_index":3788,"title":{},"name":{},"text":{"288":{},"296":{}},"component":{}}],["nifi\\\")].spec.ports[?(@.name==\\\"https\\\")].nodeport",{"_index":3783,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_node_ip",{"_index":3779,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_node_ip=$(kubectl",{"_index":3776,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_node_nam",{"_index":3775,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_node_name=$(kubectl",{"_index":3773,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_service_port",{"_index":3784,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_service_port=$(kubectl",{"_index":3781,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_url",{"_index":3787,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifi_url=\"https://$nifi_node_ip:$nifi_service_port",{"_index":3786,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nifiauthenticationmethod",{"_index":1902,"title":{},"name":{},"text":{"37":{}},"component":{}}],["nificlust",{"_index":1894,"title":{},"name":{},"text":{"37":{},"38":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{}},"component":{}}],["nificluster.yaml",{"_index":3738,"title":{},"name":{},"text":{"279":{}},"component":{}}],["nightli",{"_index":1168,"title":{},"name":{},"text":{"16":{},"55":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"195":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["nikolau",{"_index":2053,"title":{},"name":{},"text":{"41":{}},"component":{}}],["nix",{"_index":2820,"title":{"79-2":{},"88-2":{}},"name":{},"text":{"79":{},"88":{}},"component":{}}],["nnw",{"_index":2484,"title":{},"name":{},"text":{"60":{}},"component":{}}],["node",{"_index":135,"title":{"32":{},"8-2":{},"67-2":{},"75-2":{},"84-2":{},"93-2":{},"113-17":{},"121-17":{},"274-1":{},"275-8":{},"282-8":{},"290-8":{},"301-1":{},"311-1":{},"319-1":{},"374-3":{},"380-3":{},"388-3":{}},"name":{},"text":{"1":{},"2":{},"7":{},"8":{},"9":{},"14":{},"30":{},"32":{},"34":{},"35":{},"40":{},"41":{},"46":{},"52":{},"54":{},"55":{},"56":{},"58":{},"63":{},"67":{},"71":{},"75":{},"79":{},"84":{},"87":{},"88":{},"93":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"238":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"301":{},"303":{},"304":{},"311":{},"314":{},"319":{},"321":{},"322":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["node,pod,service=secret",{"_index":2893,"title":{},"name":{},"text":{"86":{},"95":{}},"component":{}}],["node.example.com",{"_index":2864,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["node.properti",{"_index":4045,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["node1:port1,node2:port2",{"_index":4089,"title":{},"name":{},"text":{"422":{},"431":{},"442":{}},"component":{}}],["nodeip",{"_index":3778,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["nodenam",{"_index":1629,"title":{},"name":{},"text":{"32":{},"286":{},"294":{}},"component":{}}],["nodeport",{"_index":158,"title":{"422-3":{},"431-3":{},"442-3":{}},"name":{},"text":{"1":{},"15":{},"131":{},"138":{},"145":{},"151":{},"160":{},"193":{},"201":{},"211":{},"232":{},"241":{},"286":{},"294":{},"422":{},"426":{},"431":{},"434":{},"442":{},"445":{}},"component":{}}],["node’",{"_index":2848,"title":{},"name":{},"text":{"79":{},"84":{},"88":{},"93":{}},"component":{}}],["non",{"_index":625,"title":{},"name":{},"text":{"8":{},"29":{},"44":{},"45":{},"114":{},"122":{},"177":{},"186":{},"374":{},"380":{},"388":{}},"component":{}}],["none",{"_index":1057,"title":{},"name":{},"text":{"15":{},"35":{},"40":{},"69":{},"77":{},"113":{},"121":{},"152":{},"161":{},"297":{},"298":{},"300":{},"307":{},"308":{},"310":{},"315":{},"316":{},"318":{}},"component":{}}],["normal",{"_index":632,"title":{},"name":{},"text":{"8":{},"17":{},"43":{},"45":{},"52":{},"54":{},"61":{},"176":{},"185":{}},"component":{}}],["notabl",{"_index":1598,"title":{},"name":{},"text":{"31":{}},"component":{}}],["note",{"_index":216,"title":{"5":{},"301":{},"311":{},"319":{}},"name":{"301":{},"311":{},"319":{}},"text":{"2":{},"12":{},"30":{},"41":{},"69":{},"77":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"230":{},"238":{},"239":{},"280":{},"285":{},"293":{},"301":{},"303":{},"311":{},"314":{},"319":{},"321":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{},"374":{},"380":{},"388":{},"426":{},"434":{},"445":{}},"component":{}}],["notes.html#ocp",{"_index":1850,"title":{},"name":{},"text":{"36":{}},"component":{}}],["noth",{"_index":1141,"title":{"44-8":{}},"name":{},"text":{"16":{},"44":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["notic",{"_index":1800,"title":{},"name":{},"text":{"36":{},"44":{},"47":{},"61":{},"113":{},"121":{}},"component":{}}],["notif",{"_index":1969,"title":{},"name":{},"text":{"39":{}},"component":{}}],["notifi",{"_index":1672,"title":{},"name":{},"text":{"33":{}},"component":{}}],["notin",{"_index":1633,"title":{},"name":{},"text":{"32":{}},"component":{}}],["now",{"_index":405,"title":{},"name":{},"text":{"5":{},"16":{},"19":{},"30":{},"33":{},"38":{},"39":{},"44":{},"47":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"83":{},"92":{},"101":{},"107":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"130":{},"137":{},"144":{},"152":{},"154":{},"161":{},"163":{},"169":{},"177":{},"179":{},"186":{},"188":{},"195":{},"204":{},"206":{},"214":{},"216":{},"222":{},"230":{},"232":{},"239":{},"241":{},"249":{},"259":{},"261":{},"270":{},"272":{},"279":{},"286":{},"288":{},"294":{},"296":{},"304":{},"306":{},"313":{},"322":{},"324":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"356":{},"358":{},"366":{},"368":{},"373":{},"380":{},"382":{},"388":{},"390":{},"395":{},"401":{},"408":{},"410":{},"416":{},"418":{},"425":{},"436":{},"438":{},"447":{},"449":{}},"component":{}}],["null",{"_index":2709,"title":{},"name":{},"text":{"62":{},"69":{},"77":{},"232":{},"241":{},"258":{},"259":{},"269":{},"270":{}},"component":{}}],["number",{"_index":680,"title":{},"name":{},"text":{"9":{},"12":{},"16":{},"27":{},"36":{},"41":{},"47":{},"48":{},"60":{},"61":{},"62":{},"85":{},"94":{},"193":{},"201":{},"211":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"422":{},"431":{},"442":{}},"component":{}}],["ny",{"_index":2368,"title":{},"name":{},"text":{"54":{},"62":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["ny_taxi_data",{"_index":2669,"title":{},"name":{},"text":{"62":{}},"component":{}}],["o",{"_index":182,"title":{},"name":{},"text":{"1":{},"3":{},"51":{},"60":{},"61":{},"79":{},"88":{},"102":{},"108":{},"113":{},"121":{},"280":{},"285":{},"286":{},"293":{},"294":{},"426":{},"434":{},"445":{}},"component":{}}],["object",{"_index":703,"title":{"10-2":{},"39-6":{},"39-7":{},"39-9":{},"39-11":{},"39-12":{},"43-8":{},"193-1":{},"201-1":{},"211-1":{}},"name":{},"text":{"10":{},"17":{},"19":{},"21":{},"22":{},"32":{},"33":{},"35":{},"36":{},"38":{},"39":{},"40":{},"42":{},"43":{},"48":{},"60":{},"61":{},"62":{},"63":{},"65":{},"67":{},"68":{},"70":{},"71":{},"73":{},"75":{},"76":{},"78":{},"84":{},"85":{},"86":{},"87":{},"93":{},"94":{},"95":{},"96":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"193":{},"201":{},"211":{},"223":{},"229":{},"230":{},"238":{},"239":{},"280":{},"285":{},"293":{},"297":{},"298":{},"301":{},"303":{},"307":{},"308":{},"311":{},"314":{},"315":{},"316":{},"319":{},"321":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"422":{},"427":{},"431":{},"435":{},"442":{},"446":{}},"component":{}}],["objectmetabuild",{"_index":1051,"title":{},"name":{},"text":{"15":{}},"component":{}}],["objectmetabuilder::new",{"_index":1054,"title":{},"name":{},"text":{"15":{}},"component":{}}],["object’",{"_index":2860,"title":{},"name":{},"text":{"84":{},"87":{},"93":{},"96":{}},"component":{}}],["observ",{"_index":4117,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["obtain",{"_index":1935,"title":{},"name":{},"text":{"38":{},"113":{},"121":{}},"component":{}}],["obviou",{"_index":2608,"title":{},"name":{},"text":{"61":{}},"component":{}}],["oci",{"_index":2176,"title":{},"name":{},"text":{"44":{}},"component":{}}],["offer",{"_index":99,"title":{},"name":{},"text":{"1":{},"7":{},"12":{},"14":{},"15":{},"29":{},"33":{},"34":{},"36":{},"39":{},"47":{},"48":{},"60":{},"61":{},"62":{}},"component":{}}],["offici",{"_index":1253,"title":{},"name":{},"text":{"19":{},"34":{},"44":{},"55":{},"56":{},"79":{},"88":{},"274":{},"275":{},"285":{},"293":{},"422":{},"431":{},"442":{}},"component":{}}],["offset",{"_index":2495,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["ok",{"_index":1993,"title":{},"name":{},"text":{"39":{},"41":{}},"component":{}}],["ok(client",{"_index":1098,"title":{},"name":{},"text":{"15":{}},"component":{}}],["ok(match",{"_index":1988,"title":{},"name":{},"text":{"39":{}},"component":{}}],["okay",{"_index":1203,"title":{},"name":{},"text":{"16":{}},"component":{}}],["old",{"_index":1447,"title":{},"name":{},"text":{"27":{},"32":{},"41":{},"232":{},"241":{}},"component":{}}],["older",{"_index":1779,"title":{"36-3":{}},"name":{},"text":{"41":{},"79":{},"88":{},"223":{},"229":{},"238":{}},"component":{}}],["oliv",{"_index":1376,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"48":{}},"component":{}}],["omit",{"_index":622,"title":{},"name":{},"text":{"8":{},"374":{},"379":{},"387":{},"396":{},"402":{},"427":{},"435":{},"446":{}},"component":{}}],["on",{"_index":22,"title":{"26":{},"33":{}},"name":{},"text":{"1":{},"5":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{},"16":{},"26":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"49":{},"50":{},"60":{},"61":{},"62":{},"69":{},"77":{},"84":{},"85":{},"93":{},"94":{},"102":{},"108":{},"113":{},"114":{},"115":{},"121":{},"122":{},"123":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"250":{},"258":{},"259":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"303":{},"314":{},"321":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["onc",{"_index":129,"title":{},"name":{},"text":{"1":{},"5":{},"16":{},"36":{},"38":{},"41":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"177":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"230":{},"239":{},"356":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{}},"component":{}}],["ongo",{"_index":2148,"title":{},"name":{},"text":{"44":{}},"component":{}}],["onlin",{"_index":2352,"title":{},"name":{},"text":{"53":{}},"component":{}}],["onto",{"_index":2828,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["onward",{"_index":1819,"title":{},"name":{},"text":{"36":{}},"component":{}}],["oomkil",{"_index":3550,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["oozi",{"_index":270,"title":{},"name":{},"text":{"2":{}},"component":{}}],["op",{"_index":1580,"title":{},"name":{},"text":{"30":{},"50":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["opa",{"_index":443,"title":{"7":{},"14":{},"302":{},"312":{},"320":{},"7-1":{},"14-2":{},"14-3":{},"14-4":{},"14-8":{},"20-8":{},"131-9":{},"138-9":{},"145-10":{},"151-11":{},"160-11":{},"297-3":{},"298-4":{},"301-1":{},"301-2":{},"304-1":{},"307-3":{},"308-4":{},"311-1":{},"311-2":{},"315-3":{},"316-4":{},"319-1":{},"319-2":{},"322-1":{},"396-5":{},"402-5":{},"407-5":{},"415-5":{}},"name":{"7":{}},"text":{"5":{},"7":{},"11":{},"14":{},"15":{},"48":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"62":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"285":{},"293":{},"297":{},"298":{},"299":{},"300":{},"301":{},"302":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"311":{},"312":{},"313":{},"314":{},"315":{},"316":{},"317":{},"318":{},"319":{},"320":{},"321":{},"322":{},"323":{},"324":{},"396":{},"402":{},"407":{},"415":{}},"component":{"297":{},"298":{},"299":{},"300":{},"301":{},"302":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"311":{},"312":{},"313":{},"314":{},"315":{},"316":{},"317":{},"318":{},"319":{},"320":{},"321":{},"322":{},"323":{},"324":{}}}],["opa.authorizer.cache.expire.after.second",{"_index":3679,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["opa.authorizer.cache.initial.capac",{"_index":3677,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["opa.authorizer.cache.maximum.s",{"_index":3678,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["opa.r",{"_index":1014,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["opa.stackable.svc.cluster.local:8081",{"_index":3795,"title":{},"name":{},"text":{"299":{},"309":{},"317":{}},"component":{}}],["opa.stackable.svc.cluster.local:8081/v1/data/opa",{"_index":3796,"title":{},"name":{},"text":{"299":{},"309":{},"317":{}},"component":{}}],["opa.stackable.tech/bundl",{"_index":504,"title":{},"name":{},"text":{"7":{},"14":{},"301":{},"304":{},"311":{},"319":{},"322":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["opa.stackable.tech/v1alpha1",{"_index":3794,"title":{},"name":{},"text":{"299":{},"303":{},"304":{},"309":{},"314":{},"317":{},"321":{},"322":{}},"component":{}}],["opa.yaml",{"_index":3813,"title":{},"name":{},"text":{"304":{},"322":{}},"component":{}}],["opa=0.10.0",{"_index":3819,"title":{},"name":{},"text":{"306":{},"324":{}},"component":{}}],["opa_bundle_builder_clusterrol",{"_index":3791,"title":{"298-8":{},"300-3":{},"308-8":{},"310-3":{},"316-8":{},"318-3":{}},"name":{},"text":{"297":{},"298":{},"307":{},"308":{},"315":{},"316":{}},"component":{}}],["opa_bundle_builder_clusterrole=test",{"_index":3793,"title":{},"name":{},"text":{"298":{},"300":{},"308":{},"310":{},"316":{},"318":{}},"component":{}}],["opa_configur",{"_index":992,"title":{},"name":{"14":{}},"text":{},"component":{}}],["opaclust",{"_index":488,"title":{},"name":{},"text":{"7":{},"299":{},"303":{},"304":{},"309":{},"314":{},"317":{},"321":{},"322":{}},"component":{}}],["opacluster.crd.yaml",{"_index":3822,"title":{},"name":{},"text":{"313":{}},"component":{}}],["opaconfig",{"_index":1017,"title":{},"name":{},"text":{"14":{}},"component":{}}],["opaqu",{"_index":2936,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["open",{"_index":229,"title":{"20-8":{},"48-9":{},"53-4":{},"131-9":{},"138-9":{},"145-10":{},"151-11":{},"160-11":{}},"name":{},"text":{"2":{},"7":{},"12":{},"14":{},"25":{},"30":{},"33":{},"48":{},"53":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"176":{},"185":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"374":{},"380":{},"388":{}},"component":{}}],["openldap",{"_index":2775,"title":{"63-2":{},"71-2":{}},"name":{},"text":{"63":{},"69":{},"71":{},"77":{}},"component":{}}],["openldap.default.svc.cluster.loc",{"_index":3755,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["openpolicyag",{"_index":451,"title":{"302":{},"312":{},"320":{}},"name":{},"text":{"5":{},"7":{},"12":{},"14":{},"18":{},"299":{},"305":{},"309":{},"317":{},"323":{}},"component":{}}],["openshift",{"_index":581,"title":{"36-11":{}},"name":{},"text":{"8":{},"36":{}},"component":{}}],["openssl",{"_index":2311,"title":{},"name":{},"text":{"51":{}},"component":{}}],["oper",{"_index":11,"title":{"18":{},"31":{},"38":{},"55":{},"65":{},"73":{},"79":{},"82":{},"88":{},"91":{},"100":{},"106":{},"112":{},"120":{},"129":{},"136":{},"143":{},"150":{},"159":{},"168":{},"175":{},"184":{},"194":{},"202":{},"212":{},"221":{},"228":{},"237":{},"248":{},"257":{},"268":{},"278":{},"284":{},"292":{},"302":{},"312":{},"320":{},"328":{},"336":{},"344":{},"352":{},"362":{},"372":{},"378":{},"386":{},"394":{},"400":{},"406":{},"414":{},"424":{},"433":{},"444":{},"1-10":{},"5-4":{},"8-4":{},"13-3":{},"14-4":{},"14-8":{},"16-6":{},"19-1":{},"23-4":{},"23-5":{},"23-6":{},"23-7":{},"23-8":{},"23-13":{},"23-23":{},"31-8":{},"31-9":{},"38-7":{},"41-11":{},"41-12":{},"41-17":{},"41-18":{},"41-19":{},"41-20":{},"50-1":{},"55-1":{},"55-2":{},"55-3":{},"55-4":{},"66-2":{},"74-2":{},"83-2":{},"92-2":{},"101-3":{},"107-3":{},"116-2":{},"124-2":{},"130-3":{},"131-2":{},"131-3":{},"137-3":{},"138-2":{},"138-3":{},"144-3":{},"145-2":{},"145-3":{},"151-2":{},"151-3":{},"154-1":{},"160-2":{},"160-3":{},"163-1":{},"169-3":{},"179-1":{},"188-1":{},"206-1":{},"216-1":{},"222-3":{},"232-6":{},"241-6":{},"249-3":{},"261-1":{},"272-1":{},"279-3":{},"288-1":{},"296-1":{},"306-1":{},"313-3":{},"324-1":{},"329-2":{},"337-2":{},"345-2":{},"358-2":{},"368-2":{},"373-3":{},"382-1":{},"390-1":{},"395-3":{},"396-4":{},"396-5":{},"401-3":{},"402-4":{},"402-5":{},"407-4":{},"407-5":{},"410-1":{},"415-4":{},"415-5":{},"418-1":{},"425-3":{},"438-1":{},"449-1":{}},"name":{"55":{}},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"23":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"45":{},"46":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"193":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"201":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"211":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"243":{},"244":{},"246":{},"247":{},"248":{},"249":{},"250":{},"251":{},"252":{},"253":{},"255":{},"256":{},"257":{},"258":{},"259":{},"260":{},"261":{},"262":{},"263":{},"264":{},"266":{},"267":{},"268":{},"269":{},"270":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"286":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"294":{},"295":{},"296":{},"297":{},"298":{},"299":{},"300":{},"302":{},"303":{},"304":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"312":{},"313":{},"314":{},"315":{},"316":{},"317":{},"318":{},"320":{},"321":{},"322":{},"323":{},"324":{},"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"331":{},"332":{},"333":{},"334":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"343":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{},"353":{},"354":{},"356":{},"357":{},"358":{},"359":{},"360":{},"361":{},"362":{},"363":{},"364":{},"366":{},"367":{},"368":{},"369":{},"370":{},"371":{},"372":{},"373":{},"374":{},"375":{},"376":{},"377":{},"378":{},"379":{},"380":{},"381":{},"382":{},"383":{},"384":{},"385":{},"386":{},"387":{},"388":{},"389":{},"390":{},"391":{},"392":{},"393":{},"394":{},"395":{},"396":{},"397":{},"398":{},"399":{},"400":{},"401":{},"402":{},"403":{},"404":{},"405":{},"406":{},"407":{},"408":{},"409":{},"410":{},"411":{},"412":{},"413":{},"414":{},"415":{},"416":{},"417":{},"418":{},"419":{},"421":{},"422":{},"423":{},"424":{},"425":{},"426":{},"427":{},"428":{},"430":{},"431":{},"432":{},"433":{},"434":{},"435":{},"436":{},"437":{},"438":{},"439":{},"441":{},"442":{},"443":{},"444":{},"445":{},"446":{},"447":{},"448":{},"449":{}},"component":{"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{}}}],["operator/config",{"_index":2904,"title":{},"name":{},"text":{"97":{},"98":{},"99":{},"103":{},"104":{},"105":{},"109":{},"110":{},"111":{},"117":{},"118":{},"119":{},"125":{},"126":{},"128":{},"132":{},"133":{},"135":{},"139":{},"140":{},"142":{},"146":{},"147":{},"149":{},"155":{},"156":{},"158":{},"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"180":{},"181":{},"183":{},"189":{},"190":{},"192":{},"197":{},"198":{},"200":{},"207":{},"208":{},"210":{},"217":{},"218":{},"220":{},"224":{},"225":{},"227":{},"233":{},"234":{},"236":{},"242":{},"244":{},"247":{},"251":{},"253":{},"256":{},"262":{},"264":{},"267":{},"273":{},"275":{},"277":{},"281":{},"282":{},"289":{},"290":{},"297":{},"298":{},"300":{},"307":{},"308":{},"310":{},"315":{},"316":{},"318":{},"369":{},"370":{},"371":{},"375":{},"376":{},"377":{},"383":{},"384":{},"385":{},"391":{},"392":{},"393":{},"397":{},"398":{},"399":{},"403":{},"404":{},"405":{},"411":{},"412":{},"413":{},"419":{},"421":{},"423":{},"428":{},"430":{},"432":{},"439":{},"441":{},"443":{}},"component":{}}],["operator/crd",{"_index":3289,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["operator/crd/kafkacluster.crd.yaml",{"_index":3672,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["operator/crd/openpolicyagent.crd.yaml",{"_index":3803,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["operator/crd/trinocluster.crd.yaml",{"_index":4007,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["operator/crd/zookeepercluster.crd.yaml",{"_index":4092,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["operator/issues/466",{"_index":2020,"title":{},"name":{},"text":{"40":{}},"component":{}}],["operator:0.3.0",{"_index":3527,"title":{},"name":{},"text":{"195":{}},"component":{}}],["operator:latest",{"_index":2915,"title":{},"name":{},"text":{"98":{},"99":{},"101":{},"104":{},"105":{},"107":{},"110":{},"111":{},"118":{},"119":{},"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"169":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"222":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"249":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"279":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"313":{},"316":{},"318":{},"326":{},"327":{},"334":{},"335":{},"342":{},"343":{},"350":{},"351":{},"360":{},"361":{},"369":{},"371":{},"373":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"395":{},"398":{},"399":{},"401":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"425":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["operator[opa",{"_index":4055,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["operatorresult",{"_index":1097,"title":{},"name":{},"text":{"15":{}},"component":{}}],["operator’",{"_index":965,"title":{},"name":{},"text":{"13":{},"41":{},"85":{},"94":{}},"component":{}}],["opinion",{"_index":1623,"title":{},"name":{},"text":{"32":{}},"component":{}}],["opt",{"_index":1696,"title":{},"name":{},"text":{"34":{}},"component":{}}],["opt/stack",{"_index":1708,"title":{},"name":{},"text":{"34":{}},"component":{}}],["opt/stackable//binaryfil",{"_index":1707,"title":{},"name":{},"text":{"34":{}},"component":{}}],["optim",{"_index":619,"title":{},"name":{},"text":{"8":{}},"component":{}}],["option",{"_index":441,"title":{"25-3":{},"25-7":{},"26-3":{},"26-7":{},"27-3":{},"27-7":{},"28-3":{},"28-7":{},"29-3":{},"29-7":{},"30-3":{},"30-7":{},"31-3":{},"31-7":{},"32-2":{},"33-2":{},"34-2":{},"34-7":{},"35-3":{},"35-5":{},"36-13":{},"37-3":{},"37-5":{},"38-2":{},"38-6":{},"38-7":{},"38-8":{},"39-3":{},"39-5":{},"39-6":{},"39-7":{},"39-8":{},"39-9":{},"39-10":{},"39-11":{},"39-12":{},"40-3":{},"40-5":{},"41-6":{},"41-7":{},"41-10":{},"41-13":{},"41-16":{},"42-3":{},"42-5":{},"43-3":{},"43-5":{},"44-3":{},"44-5":{},"44-6":{},"44-7":{},"47-3":{},"48-2":{},"48-3":{},"48-7":{},"131-3":{},"138-3":{},"145-3":{},"151-3":{},"160-3":{},"243-1":{},"243-3":{},"243-4":{},"244-7":{},"244-9":{},"244-10":{},"252-1":{},"252-3":{},"252-4":{},"253-7":{},"253-9":{},"253-10":{},"263-1":{},"263-3":{},"263-4":{},"264-7":{},"264-9":{},"264-10":{},"275-7":{},"282-7":{},"290-7":{},"421-7":{},"430-7":{},"441-7":{}},"name":{},"text":{"5":{},"9":{},"10":{},"11":{},"14":{},"15":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"50":{},"63":{},"71":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"153":{},"160":{},"162":{},"170":{},"176":{},"178":{},"185":{},"187":{},"193":{},"195":{},"196":{},"201":{},"203":{},"205":{},"211":{},"213":{},"215":{},"223":{},"229":{},"231":{},"232":{},"238":{},"240":{},"241":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"260":{},"263":{},"264":{},"269":{},"271":{},"274":{},"275":{},"282":{},"285":{},"287":{},"290":{},"293":{},"295":{},"304":{},"305":{},"322":{},"323":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"409":{},"415":{},"417":{},"426":{},"434":{},"436":{},"437":{},"445":{},"447":{},"448":{}},"component":{}}],["option2",{"_index":2002,"title":{},"name":{},"text":{"39":{}},"component":{}}],["optional[str",{"_index":3129,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["oracl",{"_index":1475,"title":{},"name":{},"text":{"28":{},"42":{},"47":{}},"component":{}}],["orchestr",{"_index":1408,"title":{"47":{}},"name":{},"text":{"26":{},"30":{},"47":{}},"component":{}}],["order",{"_index":177,"title":{},"name":{},"text":{"1":{},"7":{},"13":{},"14":{},"23":{},"27":{},"30":{},"34":{},"39":{},"41":{},"44":{},"50":{},"60":{},"61":{},"62":{},"113":{},"121":{},"152":{},"161":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"258":{},"259":{},"269":{},"270":{},"286":{},"294":{},"299":{},"309":{},"317":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"426":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["org.apache.hadoop.fs.s3a.anonymousawscredentialsprovid",{"_index":3857,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["org.apache.hadoop.fs.s3a.simpleawscredentialsprovid",{"_index":3893,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["org.apache.nifi.authorization.fileaccesspolicyprovid",{"_index":3759,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["org.apache.nifi.authorization.fileusergroupprovid",{"_index":3758,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["org.apache.spark.examples.sparkpi",{"_index":3842,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["org.example.app",{"_index":3851,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["organ",{"_index":1412,"title":{},"name":{},"text":{"26":{},"427":{},"435":{},"446":{}},"component":{}}],["orient",{"_index":2665,"title":{},"name":{},"text":{"62":{}},"component":{}}],["origin",{"_index":370,"title":{},"name":{},"text":{"4":{},"23":{},"30":{},"42":{},"62":{}},"component":{}}],["orthogon",{"_index":1978,"title":{},"name":{},"text":{"39":{}},"component":{}}],["os",{"_index":1683,"title":{},"name":{},"text":{"34":{}},"component":{}}],["other",{"_index":760,"title":{},"name":{},"text":{"11":{},"33":{},"358":{},"368":{}},"component":{}}],["otherwis",{"_index":946,"title":{},"name":{},"text":{"13":{},"37":{},"38":{},"63":{},"67":{},"71":{},"75":{},"102":{},"108":{},"396":{},"402":{}},"component":{}}],["ou=users,dc=example,dc=org",{"_index":2778,"title":{},"name":{},"text":{"63":{},"71":{},"285":{},"293":{}},"component":{}}],["ourselv",{"_index":1554,"title":{},"name":{},"text":{"30":{},"45":{}},"component":{}}],["out",{"_index":28,"title":{},"name":{},"text":{"1":{},"2":{},"12":{},"16":{},"23":{},"25":{},"26":{},"28":{},"30":{},"33":{},"34":{},"40":{},"43":{},"44":{},"48":{},"50":{},"51":{},"55":{},"57":{},"61":{},"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"230":{},"238":{},"239":{},"259":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"380":{},"388":{},"408":{},"416":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["outcom",{"_index":1361,"title":{"25-4":{},"26-4":{},"27-4":{},"28-4":{},"29-4":{},"30-4":{},"31-4":{},"35-4":{},"36-14":{},"37-4":{},"38-3":{},"39-4":{},"40-4":{},"41-15":{},"42-4":{},"43-4":{},"44-4":{},"47-4":{},"48-4":{}},"name":{},"text":{"45":{}},"component":{}}],["outdat",{"_index":1498,"title":{},"name":{},"text":{"29":{},"41":{}},"component":{}}],["outlin",{"_index":1115,"title":{},"name":{},"text":{"16":{},"36":{}},"component":{}}],["output",{"_index":1154,"title":{},"name":{},"text":{"16":{},"56":{},"57":{},"60":{},"61":{},"62":{},"114":{},"122":{},"152":{},"161":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"330":{},"338":{},"346":{},"353":{},"363":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["output=jsonpath='{.subsets[0].addresses[0].nodenam",{"_index":3774,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["outsid",{"_index":756,"title":{"11-5":{},"11-6":{}},"name":{},"text":{"16":{},"40":{},"45":{},"193":{},"201":{},"211":{},"304":{},"322":{},"422":{},"431":{},"442":{}},"component":{}}],["over",{"_index":590,"title":{},"name":{},"text":{"8":{},"18":{},"25":{},"29":{},"30":{},"36":{},"39":{},"43":{},"47":{},"61":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"330":{},"338":{},"346":{},"353":{},"363":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["over)written",{"_index":3314,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["overal",{"_index":1979,"title":{},"name":{},"text":{"39":{},"44":{},"49":{}},"component":{}}],["overhead",{"_index":2110,"title":{},"name":{},"text":{"41":{}},"component":{}}],["overlap",{"_index":1811,"title":{},"name":{},"text":{"36":{}},"component":{}}],["overli",{"_index":1592,"title":{},"name":{},"text":{"30":{},"35":{}},"component":{}}],["overrid",{"_index":391,"title":{"102-5":{},"108-5":{},"113-2":{},"121-2":{},"131-13":{},"138-13":{},"145-14":{},"151-15":{},"160-15":{},"170-4":{},"176-4":{},"185-4":{},"196-2":{},"203-2":{},"213-2":{},"223-4":{},"229-4":{},"238-4":{},"250-3":{},"258-5":{},"269-5":{},"274-7":{},"275-14":{},"280-2":{},"285-8":{},"285-9":{},"293-8":{},"293-9":{},"303-3":{},"314-3":{},"321-3":{},"374-14":{},"379-9":{},"387-9":{},"396-17":{},"402-17":{},"407-20":{},"415-20":{},"426-4":{},"434-4":{},"445-4":{}},"name":{},"text":{"5":{},"9":{},"15":{},"29":{},"32":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["overridden",{"_index":699,"title":{},"name":{},"text":{"9":{},"34":{},"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["overriden",{"_index":3537,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["overview",{"_index":1,"title":{"1-2":{},"330-1":{},"331-1":{},"338-1":{},"339-1":{},"346-1":{},"347-1":{},"353-1":{},"354-1":{},"363-1":{},"364-1":{}},"name":{},"text":{"2":{},"13":{},"15":{},"18":{},"36":{},"152":{},"161":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["overwhelm",{"_index":1195,"title":{},"name":{},"text":{"16":{}},"component":{}}],["overwrit",{"_index":1909,"title":{},"name":{},"text":{"37":{},"45":{},"276":{},"283":{},"291":{}},"component":{}}],["overwritten",{"_index":1499,"title":{},"name":{},"text":{"29":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["own",{"_index":967,"title":{},"name":{},"text":{"13":{},"68":{},"76":{}},"component":{}}],["owner",{"_index":1918,"title":{},"name":{},"text":{"37":{},"204":{},"214":{}},"component":{}}],["ownerrefer",{"_index":1667,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ownerreference_from_resource(my_clust",{"_index":1056,"title":{},"name":{},"text":{"15":{}},"component":{}}],["ownership",{"_index":1904,"title":{},"name":{},"text":{"37":{},"39":{},"113":{},"121":{}},"component":{}}],["p",{"_index":2494,"title":{},"name":{},"text":{"60":{},"61":{},"102":{},"108":{},"113":{},"121":{},"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"259":{},"269":{},"270":{}},"component":{}}],["pace",{"_index":1856,"title":{},"name":{},"text":{"36":{}},"component":{}}],["packag",{"_index":466,"title":{"34-9":{},"330-5":{},"338-5":{},"346-5":{},"353-5":{},"363-5":{}},"name":{},"text":{"7":{},"14":{},"29":{},"30":{},"34":{},"41":{},"51":{},"131":{},"138":{},"145":{},"151":{},"160":{},"250":{},"258":{},"269":{},"276":{},"283":{},"291":{},"299":{},"304":{},"309":{},"317":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["package:1.0.0",{"_index":3872,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["page",{"_index":415,"title":{},"name":{},"text":{"5":{},"9":{},"11":{},"12":{},"13":{},"15":{},"17":{},"22":{},"59":{},"114":{},"116":{},"122":{},"124":{},"131":{},"138":{},"152":{},"154":{},"161":{},"163":{},"177":{},"179":{},"186":{},"188":{},"204":{},"206":{},"214":{},"216":{},"230":{},"232":{},"239":{},"241":{},"259":{},"261":{},"270":{},"272":{},"274":{},"275":{},"282":{},"286":{},"288":{},"290":{},"294":{},"296":{},"304":{},"306":{},"322":{},"324":{},"329":{},"337":{},"345":{},"358":{},"368":{},"380":{},"382":{},"388":{},"390":{},"408":{},"410":{},"416":{},"418":{},"436":{},"438":{},"447":{},"449":{}},"component":{}}],["pandem",{"_index":2664,"title":{},"name":{},"text":{"62":{}},"component":{}}],["panic",{"_index":2347,"title":{"53-4":{}},"name":{},"text":{"53":{}},"component":{}}],["paradigm",{"_index":3882,"title":{},"name":{},"text":{"332":{},"340":{},"348":{}},"component":{}}],["parallel",{"_index":2978,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["param",{"_index":3115,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["paramet",{"_index":708,"title":{"64-1":{},"72-1":{},"81-1":{},"90-1":{},"98-1":{},"104-1":{},"110-1":{},"118-1":{},"126-1":{},"133-1":{},"140-1":{},"147-1":{},"156-1":{},"165-1":{},"172-1":{},"181-1":{},"190-1":{},"198-1":{},"208-1":{},"218-1":{},"225-1":{},"234-1":{},"244-1":{},"253-1":{},"264-1":{},"275-1":{},"281-1":{},"282-1":{},"289-1":{},"290-1":{},"298-1":{},"308-1":{},"316-1":{},"326-1":{},"334-1":{},"342-1":{},"350-1":{},"360-1":{},"369-1":{},"376-1":{},"384-1":{},"392-1":{},"398-1":{},"404-1":{},"412-1":{},"421-1":{},"430-1":{},"441-1":{}},"name":{},"text":{"10":{},"60":{},"61":{},"64":{},"72":{},"81":{},"87":{},"90":{},"96":{},"98":{},"104":{},"110":{},"118":{},"126":{},"133":{},"140":{},"147":{},"156":{},"165":{},"172":{},"181":{},"190":{},"198":{},"208":{},"218":{},"225":{},"234":{},"244":{},"253":{},"264":{},"274":{},"275":{},"281":{},"282":{},"285":{},"289":{},"290":{},"293":{},"298":{},"308":{},"316":{},"326":{},"330":{},"334":{},"338":{},"342":{},"346":{},"350":{},"353":{},"360":{},"363":{},"369":{},"376":{},"384":{},"392":{},"398":{},"404":{},"412":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["params={\"example_key",{"_index":3002,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["parent",{"_index":1640,"title":{},"name":{},"text":{"32":{},"33":{},"34":{}},"component":{}}],["parquet",{"_index":2658,"title":{},"name":{},"text":{"62":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["pars",{"_index":3249,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["part",{"_index":33,"title":{},"name":{},"text":{"1":{},"23":{},"30":{},"34":{},"44":{},"45":{},"48":{},"55":{},"61":{},"69":{},"77":{},"100":{},"106":{},"112":{},"116":{},"120":{},"124":{},"168":{},"175":{},"176":{},"184":{},"185":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"332":{},"340":{},"348":{},"355":{},"365":{},"372":{},"374":{},"378":{},"379":{},"386":{},"387":{},"396":{},"402":{},"407":{},"415":{},"424":{},"426":{},"433":{},"434":{},"444":{},"445":{}},"component":{}}],["parti",{"_index":1309,"title":{},"name":{},"text":{"23":{},"34":{},"50":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"69":{},"77":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["partial",{"_index":1616,"title":{},"name":{},"text":{"31":{}},"component":{}}],["partialeq",{"_index":1022,"title":{},"name":{},"text":{"14":{}},"component":{}}],["particip",{"_index":1384,"title":{},"name":{},"text":{"25":{},"69":{},"77":{},"84":{},"93":{}},"component":{}}],["participt",{"_index":1391,"title":{},"name":{},"text":{"25":{}},"component":{}}],["particular",{"_index":2199,"title":{},"name":{},"text":{"45":{}},"component":{}}],["partit",{"_index":2469,"title":{},"name":{},"text":{"60":{},"61":{},"436":{},"447":{}},"component":{}}],["partitionsspec",{"_index":3383,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["pascalcas",{"_index":1217,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pass",{"_index":1191,"title":{},"name":{},"text":{"16":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["passeng",{"_index":1337,"title":{},"name":{},"text":{"23":{},"62":{}},"component":{}}],["passenger_count",{"_index":2685,"title":{},"name":{},"text":{"62":{}},"component":{}}],["password",{"_index":174,"title":{},"name":{},"text":{"1":{},"35":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"71":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["password=changeit",{"_index":4060,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["password_encrypt",{"_index":3621,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["past",{"_index":917,"title":{},"name":{},"text":{"12":{},"13":{},"30":{},"204":{},"214":{}},"component":{}}],["patch",{"_index":1149,"title":{},"name":{},"text":{"16":{},"36":{}},"component":{}}],["path",{"_index":571,"title":{},"name":{},"text":{"8":{},"17":{},"22":{},"34":{},"36":{},"45":{},"49":{},"51":{},"60":{},"61":{},"62":{},"80":{},"81":{},"89":{},"90":{},"102":{},"108":{},"113":{},"121":{},"223":{},"229":{},"230":{},"238":{},"239":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"396":{},"402":{},"407":{},"415":{},"426":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["path/to/java",{"_index":4052,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["path=keystore.p12",{"_index":4059,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["pathstyleaccess",{"_index":4016,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["pathsuffix",{"_index":3589,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["pattern",{"_index":792,"title":{},"name":{},"text":{"11":{},"16":{},"31":{},"32":{},"38":{},"39":{},"43":{},"60":{},"61":{}},"component":{}}],["paus",{"_index":3242,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["pay",{"_index":1589,"title":{},"name":{},"text":{"30":{}},"component":{}}],["payment_typ",{"_index":2718,"title":{},"name":{},"text":{"62":{}},"component":{}}],["pc",{"_index":2298,"title":{},"name":{},"text":{"51":{}},"component":{}}],["peak",{"_index":4040,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["pegelonlin",{"_index":2554,"title":{},"name":{},"text":{"61":{}},"component":{}}],["pem",{"_index":2888,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["peopl",{"_index":1385,"title":{},"name":{},"text":{"25":{},"27":{},"28":{},"32":{},"35":{},"43":{},"49":{},"55":{},"62":{}},"component":{}}],["per",{"_index":520,"title":{"37-7":{},"301-1":{},"311-1":{},"319-1":{}},"name":{},"text":{"7":{},"9":{},"15":{},"23":{},"26":{},"32":{},"33":{},"34":{},"37":{},"39":{},"45":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"301":{},"303":{},"311":{},"314":{},"319":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["percentag",{"_index":2739,"title":{},"name":{},"text":{"62":{}},"component":{}}],["perfect",{"_index":975,"title":{},"name":{},"text":{"13":{}},"component":{}}],["perform",{"_index":124,"title":{},"name":{},"text":{"1":{},"2":{},"16":{},"35":{},"38":{},"50":{},"60":{},"61":{},"69":{},"77":{},"131":{},"138":{},"145":{},"151":{},"160":{},"193":{},"201":{},"211":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{}},"component":{}}],["period",{"_index":380,"title":{},"name":{},"text":{"5":{},"7":{},"14":{},"36":{}},"component":{}}],["perl",{"_index":2313,"title":{},"name":{},"text":{"51":{}},"component":{}}],["permiss",{"_index":2350,"title":{"53-4":{}},"name":{},"text":{"53":{},"113":{},"121":{},"204":{},"214":{},"331":{},"339":{},"347":{},"354":{},"364":{},"374":{},"379":{},"387":{}},"component":{}}],["persist",{"_index":648,"title":{},"name":{},"text":{"8":{},"47":{},"60":{},"61":{},"62":{},"79":{},"88":{},"102":{},"108":{},"114":{},"122":{},"280":{},"285":{},"293":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"355":{},"356":{},"365":{},"366":{}},"component":{}}],["persistence.enabled=fals",{"_index":3653,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["persistentvolum",{"_index":547,"title":{},"name":{},"text":{"8":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["persistentvolumeclaim",{"_index":439,"title":{"8":{},"102-13":{},"108-13":{},"113-16":{},"121-16":{}},"name":{},"text":{"5":{},"8":{},"87":{},"96":{},"102":{},"108":{},"113":{},"121":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["persistentvoulmeclaim",{"_index":3887,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["person",{"_index":1214,"title":{},"name":{},"text":{"17":{},"30":{}},"component":{}}],["perspect",{"_index":3518,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["petal_length",{"_index":4022,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["petal_width",{"_index":4023,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["phase",{"_index":1397,"title":{},"name":{},"text":{"25":{},"45":{},"114":{},"122":{}},"component":{}}],["philippines\",\"type\":\"earthquake\",\"horizontalerror\":null,\"deptherror\":3.8,\"magerror\":0.34,\"magnst\":null,\"status\":\"reviewed\",\"locationsource\":\"iscgem\",\"magsource\":\"iscgem",{"_index":2486,"title":{},"name":{},"text":{"60":{}},"component":{}}],["phoenix",{"_index":3421,"title":{"176-6":{},"185-6":{}},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["physic",{"_index":676,"title":{},"name":{},"text":{"9":{}},"component":{}}],["pi",{"_index":3082,"title":{},"name":{},"text":{"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["pi.yaml",{"_index":3210,"title":{},"name":{},"text":{"113":{},"121":{},"356":{},"366":{}},"component":{}}],["pick",{"_index":1771,"title":{},"name":{},"text":{"35":{},"41":{},"48":{}},"component":{}}],["pictur",{"_index":460,"title":{},"name":{},"text":{"6":{}},"component":{}}],["piec",{"_index":1429,"title":{},"name":{},"text":{"26":{},"30":{}},"component":{}}],["pin",{"_index":2272,"title":{},"name":{},"text":{"49":{}},"component":{}}],["pip",{"_index":332,"title":{},"name":{},"text":{"3":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["pipelin",{"_index":293,"title":{"23":{}},"name":{},"text":{"2":{},"7":{},"10":{},"13":{},"14":{},"23":{},"26":{},"49":{},"50":{},"60":{},"61":{}},"component":{}}],["pki",{"_index":2871,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["place",{"_index":604,"title":{},"name":{},"text":{"8":{},"13":{},"26":{},"27":{},"29":{},"30":{},"31":{},"32":{},"38":{},"42":{},"45":{},"51":{},"60":{},"61":{}},"component":{}}],["placement",{"_index":602,"title":{},"name":{},"text":{"8":{},"32":{}},"component":{}}],["plainyaml",{"_index":2169,"title":{},"name":{},"text":{"44":{}},"component":{}}],["plan",{"_index":1576,"title":{},"name":{},"text":{"30":{},"31":{},"285":{},"293":{}},"component":{}}],["plane",{"_index":79,"title":{},"name":{},"text":{"1":{},"52":{},"54":{},"55":{},"56":{},"58":{}},"component":{}}],["plate",{"_index":1562,"title":{},"name":{},"text":{"30":{},"60":{}},"component":{}}],["platform",{"_index":26,"title":{"5":{},"5-2":{}},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"21":{},"23":{},"28":{},"34":{},"36":{},"37":{},"39":{},"45":{},"49":{},"50":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"65":{},"73":{},"100":{},"106":{},"112":{},"116":{},"120":{},"124":{},"131":{},"138":{},"145":{},"151":{},"154":{},"160":{},"163":{},"168":{},"175":{},"179":{},"184":{},"188":{},"206":{},"216":{},"232":{},"241":{},"259":{},"261":{},"270":{},"272":{},"288":{},"296":{},"306":{},"324":{},"358":{},"368":{},"372":{},"373":{},"378":{},"382":{},"386":{},"390":{},"395":{},"401":{},"410":{},"418":{},"424":{},"433":{},"438":{},"444":{},"449":{}},"component":{}}],["platform/4.6/release_notes/ocp",{"_index":1848,"title":{},"name":{},"text":{"36":{}},"component":{}}],["platform/4.7/release_notes/ocp",{"_index":1851,"title":{},"name":{},"text":{"36":{}},"component":{}}],["platform/4.8/release_notes/ocp",{"_index":1852,"title":{},"name":{},"text":{"36":{}},"component":{}}],["play",{"_index":264,"title":{},"name":{},"text":{"2":{},"50":{}},"component":{}}],["pleas",{"_index":214,"title":{},"name":{},"text":{"2":{},"5":{},"13":{},"16":{},"30":{},"34":{},"41":{},"50":{},"52":{},"59":{},"60":{},"61":{},"62":{},"63":{},"71":{},"102":{},"108":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["plot",{"_index":2539,"title":{},"name":{},"text":{"60":{}},"component":{}}],["plu",{"_index":3866,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["plug",{"_index":979,"title":{},"name":{},"text":{"13":{}},"component":{}}],["plugin",{"_index":1000,"title":{},"name":{},"text":{"14":{},"48":{},"79":{},"88":{}},"component":{}}],["plural=\"sparkappl",{"_index":3194,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["plural=self.plur",{"_index":3147,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["pod",{"_index":490,"title":{"67":{},"75":{},"38-8":{},"68-1":{},"76-1":{},"84-3":{},"93-3":{}},"name":{"67":{},"75":{}},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"22":{},"23":{},"32":{},"35":{},"37":{},"38":{},"52":{},"54":{},"57":{},"63":{},"67":{},"68":{},"70":{},"71":{},"75":{},"76":{},"78":{},"79":{},"82":{},"84":{},"85":{},"86":{},"87":{},"88":{},"91":{},"93":{},"94":{},"95":{},"96":{},"113":{},"114":{},"121":{},"122":{},"145":{},"151":{},"152":{},"160":{},"161":{},"166":{},"173":{},"182":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"204":{},"209":{},"211":{},"213":{},"214":{},"223":{},"229":{},"230":{},"238":{},"239":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"297":{},"298":{},"300":{},"301":{},"307":{},"308":{},"310":{},"311":{},"315":{},"316":{},"318":{},"319":{},"330":{},"331":{},"332":{},"338":{},"339":{},"340":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"356":{},"358":{},"363":{},"364":{},"365":{},"366":{},"368":{},"374":{},"380":{},"388":{},"407":{},"408":{},"415":{},"416":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"436":{},"442":{},"445":{},"446":{},"447":{}},"component":{}}],["pod.mi",{"_index":2866,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["pod.status.nodeip",{"_index":2801,"title":{},"name":{},"text":{"67":{},"75":{}},"component":{}}],["pod/nod",{"_index":1773,"title":{},"name":{},"text":{"35":{}},"component":{}}],["pod_nam",{"_index":3540,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["poddisruptionbudget",{"_index":2807,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["podnam",{"_index":3172,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["pod’",{"_index":2865,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["point",{"_index":522,"title":{},"name":{},"text":{"7":{},"8":{},"14":{},"16":{},"29":{},"30":{},"31":{},"41":{},"43":{},"44":{},"48":{},"68":{},"76":{},"87":{},"96":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"250":{},"258":{},"269":{},"299":{},"309":{},"317":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["poke(self",{"_index":3191,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["poke_interv",{"_index":3158,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["poke_interval=5",{"_index":3214,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["polic",{"_index":1004,"title":{},"name":{},"text":{"14":{},"285":{},"293":{}},"component":{}}],["polici",{"_index":255,"title":{"7-3":{},"14-3":{},"20-8":{},"36-2":{},"36-5":{},"48-9":{},"131-9":{},"138-9":{},"145-10":{},"151-11":{},"160-11":{},"304-3":{},"322-3":{}},"name":{},"text":{"2":{},"7":{},"8":{},"12":{},"14":{},"35":{},"36":{},"48":{},"62":{},"131":{},"138":{},"145":{},"151":{},"160":{},"232":{},"241":{},"250":{},"258":{},"269":{},"285":{},"293":{},"299":{},"301":{},"305":{},"306":{},"309":{},"311":{},"317":{},"319":{},"323":{},"324":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["polish",{"_index":2144,"title":{},"name":{},"text":{"44":{}},"component":{}}],["pool",{"_index":1394,"title":{},"name":{},"text":{"25":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{}},"component":{}}],["pop",{"_index":2309,"title":{},"name":{},"text":{"51":{}},"component":{}}],["popul",{"_index":2341,"title":{},"name":{},"text":{"52":{},"54":{},"85":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"176":{},"177":{},"185":{},"186":{}},"component":{}}],["popular",{"_index":2255,"title":{},"name":{},"text":{"48":{}},"component":{}}],["port",{"_index":150,"title":{"23-26":{}},"name":{},"text":{"1":{},"10":{},"11":{},"19":{},"22":{},"37":{},"39":{},"45":{},"63":{},"71":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"230":{},"238":{},"239":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"303":{},"304":{},"314":{},"321":{},"322":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["port(",{"_index":156,"title":{},"name":{},"text":{"1":{}},"component":{}}],["porter",{"_index":2149,"title":{},"name":{},"text":{"44":{}},"component":{}}],["porter/cnab",{"_index":2138,"title":{"44-10":{}},"name":{},"text":{},"component":{}}],["posit",{"_index":976,"title":{"25-5":{},"26-5":{},"27-5":{},"28-5":{},"29-5":{},"30-5":{},"31-5":{},"32-4":{},"33-4":{},"36-15":{},"38-4":{},"44-5":{},"47-5":{},"48-5":{}},"name":{},"text":{"13":{}},"component":{}}],["posix",{"_index":4106,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["possibl",{"_index":785,"title":{"63-3":{},"71-3":{}},"name":{},"text":{"11":{},"13":{},"15":{},"17":{},"29":{},"30":{},"31":{},"38":{},"41":{},"44":{},"49":{},"60":{},"61":{},"62":{},"63":{},"71":{},"102":{},"108":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"282":{},"290":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["post",{"_index":938,"title":{},"name":{},"text":{"13":{},"152":{},"161":{}},"component":{}}],["postgr",{"_index":2147,"title":{},"name":{},"text":{"44":{},"47":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{}},"component":{}}],["postgresql",{"_index":2123,"title":{},"name":{},"text":{"42":{},"44":{},"50":{},"58":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"231":{},"232":{},"238":{},"239":{},"240":{},"241":{},"374":{},"379":{},"380":{},"387":{},"388":{},"408":{},"416":{}},"component":{}}],["postgresql+psycopg2://airflow:airflow@airflow",{"_index":2946,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["postgresql.default.svc.cluster.local/airflow",{"_index":2947,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["postgresql.default.svc.cluster.local/superset",{"_index":3961,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["postgresql.default.svc.cluster.local:5432/h",{"_index":3628,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["postgresql/druid",{"_index":3294,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["postgresql://superset:superset@superset",{"_index":3960,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["postgresqldatabas",{"_index":3649,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["postgresqldatabase=h",{"_index":3626,"title":{},"name":{},"text":{"223":{},"229":{},"232":{},"238":{},"241":{}},"component":{}}],["postgresqlpassword",{"_index":3648,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["postgresqlpassword=h",{"_index":3625,"title":{},"name":{},"text":{"223":{},"229":{},"232":{},"238":{},"241":{}},"component":{}}],["postgresqlusernam",{"_index":3647,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["postgresqlusername=h",{"_index":3624,"title":{},"name":{},"text":{"223":{},"229":{},"232":{},"238":{},"241":{}},"component":{}}],["postgressql",{"_index":3636,"title":{"232-5":{},"241-5":{}},"name":{},"text":{},"component":{}}],["potenti",{"_index":733,"title":{"42-7":{}},"name":{},"text":{"10":{},"25":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"36":{},"38":{},"42":{},"47":{},"49":{},"62":{}},"component":{}}],["power",{"_index":273,"title":{},"name":{},"text":{"2":{},"7":{},"14":{},"60":{},"61":{}},"component":{}}],["powershel",{"_index":2286,"title":{"51-9":{}},"name":{},"text":{"51":{}},"component":{}}],["pr",{"_index":1446,"title":{},"name":{},"text":{"27":{}},"component":{}}],["pr117",{"_index":2402,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr118",{"_index":2401,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr119",{"_index":2400,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr120",{"_index":2399,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr121",{"_index":2398,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr122",{"_index":2396,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr123",{"_index":2397,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr125",{"_index":2395,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr126",{"_index":2394,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr127",{"_index":2393,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr128",{"_index":2392,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr129",{"_index":2391,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr130",{"_index":2390,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr131",{"_index":2389,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr132",{"_index":2388,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr133",{"_index":2387,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr134",{"_index":2386,"title":{},"name":{},"text":{"55":{}},"component":{}}],["pr135",{"_index":2385,"title":{},"name":{},"text":{"55":{}},"component":{}}],["practic",{"_index":1011,"title":{"15-1":{}},"name":{},"text":{"14":{},"16":{},"34":{},"35":{},"41":{},"329":{},"337":{},"345":{}},"component":{}}],["pre",{"_index":2279,"title":{"51-1":{}},"name":{},"text":{"50":{},"51":{},"116":{},"124":{},"177":{},"186":{},"330":{},"331":{},"332":{},"338":{},"339":{},"340":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"363":{},"364":{},"365":{}},"component":{}}],["preced",{"_index":2818,"title":{},"name":{},"text":{"68":{},"76":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["precis",{"_index":3546,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["predefin",{"_index":1015,"title":{},"name":{},"text":{"14":{}},"component":{}}],["predict",{"_index":1698,"title":{},"name":{},"text":{"34":{},"38":{},"41":{}},"component":{}}],["preempt",{"_index":1996,"title":{},"name":{},"text":{"39":{}},"component":{}}],["prefer",{"_index":972,"title":{},"name":{},"text":{"13":{},"34":{},"38":{},"44":{},"62":{},"67":{},"75":{},"114":{},"122":{},"152":{},"161":{},"374":{},"379":{},"387":{}},"component":{}}],["preferred_databas",{"_index":3980,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["prefix",{"_index":2195,"title":{},"name":{},"text":{"45":{},"60":{},"61":{},"62":{}},"component":{}}],["pregener",{"_index":1772,"title":{},"name":{},"text":{"35":{}},"component":{}}],["preinstal",{"_index":2063,"title":{},"name":{},"text":{"41":{}},"component":{}}],["prem",{"_index":2113,"title":{},"name":{},"text":{"41":{}},"component":{}}],["prepar",{"_index":1113,"title":{"16-1":{}},"name":{},"text":{"16":{},"44":{},"50":{},"52":{},"54":{},"55":{},"56":{},"58":{}},"component":{}}],["prerequisit",{"_index":344,"title":{"115-1":{},"123-1":{},"131-1":{},"138-1":{},"145-1":{},"151-1":{},"153-1":{},"160-1":{},"162-1":{},"178-1":{},"187-1":{},"205-1":{},"215-1":{},"231-1":{},"240-1":{},"260-1":{},"271-1":{},"287-1":{},"295-1":{},"305-1":{},"323-1":{},"357-1":{},"367-1":{},"381-1":{},"389-1":{},"396-1":{},"402-1":{},"407-1":{},"409-1":{},"415-1":{},"417-1":{},"437-1":{},"448-1":{}},"name":{},"text":{"4":{},"44":{},"131":{},"138":{},"145":{},"151":{},"160":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["present",{"_index":1382,"title":{},"name":{},"text":{"25":{},"47":{},"69":{},"77":{},"102":{},"108":{},"114":{},"122":{},"258":{},"269":{},"274":{},"275":{},"279":{},"282":{},"290":{},"297":{},"298":{},"307":{},"308":{},"315":{},"316":{},"356":{},"366":{},"426":{},"434":{},"445":{}},"component":{}}],["preserv",{"_index":2111,"title":{},"name":{},"text":{"41":{}},"component":{}}],["presto",{"_index":3981,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["pretti",{"_index":1677,"title":{},"name":{},"text":{"33":{},"39":{},"47":{},"61":{},"62":{}},"component":{}}],["prevent",{"_index":620,"title":{},"name":{},"text":{"8":{},"41":{},"102":{},"108":{},"113":{},"121":{},"204":{},"214":{}},"component":{}}],["previou",{"_index":1122,"title":{},"name":{},"text":{"16":{},"30":{},"102":{},"108":{},"113":{},"121":{},"176":{},"185":{}},"component":{}}],["previous",{"_index":2607,"title":{},"name":{},"text":{"61":{},"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{},"408":{},"416":{}},"component":{}}],["price",{"_index":1765,"title":{},"name":{},"text":{"35":{}},"component":{}}],["primari",{"_index":1892,"title":{},"name":{},"text":{"37":{},"40":{},"79":{},"87":{},"88":{},"96":{}},"component":{}}],["primarili",{"_index":1746,"title":{},"name":{},"text":{"35":{}},"component":{}}],["principl",{"_index":1435,"title":{},"name":{},"text":{"27":{},"38":{},"44":{}},"component":{}}],["print",{"_index":2432,"title":{},"name":{},"text":{"57":{},"60":{},"61":{}},"component":{}}],["prior",{"_index":1799,"title":{},"name":{},"text":{"36":{}},"component":{}}],["prioriti",{"_index":1493,"title":{},"name":{},"text":{"29":{}},"component":{}}],["prioritis",{"_index":589,"title":{},"name":{},"text":{"8":{}},"component":{}}],["privaci",{"_index":2308,"title":{},"name":{},"text":{"51":{}},"component":{}}],["privat",{"_index":56,"title":{},"name":{},"text":{"1":{},"16":{},"23":{},"85":{},"94":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["privileg",{"_index":3754,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["pro",{"_index":1364,"title":{"25-7":{},"26-7":{},"27-7":{},"28-7":{},"29-7":{},"30-7":{},"31-7":{},"35-5":{},"37-5":{},"38-6":{},"39-5":{},"40-5":{},"41-16":{},"42-5":{},"43-5":{},"44-7":{},"48-7":{}},"name":{},"text":{"47":{}},"component":{}}],["probabl",{"_index":1143,"title":{},"name":{},"text":{"16":{},"26":{},"29":{},"41":{},"47":{},"48":{},"62":{},"102":{},"108":{},"113":{},"121":{},"408":{},"416":{}},"component":{}}],["probe",{"_index":3522,"title":{},"name":{},"text":{"193":{},"201":{},"211":{},"436":{},"447":{}},"component":{}}],["problem",{"_index":949,"title":{"25-1":{},"26-1":{},"27-1":{},"28-1":{},"29-1":{},"30-1":{},"31-1":{},"32-1":{},"33-1":{},"34-1":{},"35-1":{},"36-1":{},"37-1":{},"38-1":{},"39-1":{},"40-1":{},"41-2":{},"42-1":{},"43-1":{},"44-1":{},"45-1":{},"47-1":{},"48-1":{}},"name":{},"text":{"13":{},"32":{},"38":{},"41":{},"44":{},"51":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"374":{},"379":{},"387":{},"426":{},"434":{},"445":{}},"component":{}}],["proce",{"_index":2328,"title":{"52-7":{}},"name":{},"text":{"52":{},"195":{}},"component":{}}],["procedur",{"_index":2273,"title":{},"name":{},"text":{"49":{}},"component":{}}],["process",{"_index":242,"title":{"23-11":{}},"name":{},"text":{"2":{},"5":{},"7":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"23":{},"27":{},"30":{},"31":{},"32":{},"41":{},"45":{},"47":{},"50":{},"52":{},"54":{},"60":{},"61":{},"62":{},"68":{},"76":{},"102":{},"108":{},"114":{},"116":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"380":{},"388":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["processor",{"_index":3502,"title":{},"name":{},"text":{"178":{},"187":{}},"component":{}}],["processwitherror",{"_index":2517,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["prod",{"_index":2850,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["produc",{"_index":2275,"title":{},"name":{},"text":{"49":{},"60":{},"61":{},"62":{},"85":{},"94":{},"259":{},"270":{},"374":{},"379":{},"387":{}},"component":{}}],["product",{"_index":52,"title":{"20":{},"37":{},"41":{},"7-4":{},"16-3":{},"37-7":{},"39-8":{},"41-9":{},"97-1":{},"98-2":{},"103-1":{},"104-2":{},"109-1":{},"110-2":{},"117-1":{},"118-2":{},"125-1":{},"126-2":{},"132-1":{},"133-2":{},"139-1":{},"140-2":{},"146-1":{},"147-2":{},"155-1":{},"156-2":{},"164-1":{},"165-2":{},"171-1":{},"172-2":{},"180-1":{},"181-2":{},"189-1":{},"190-2":{},"197-1":{},"198-2":{},"207-1":{},"208-2":{},"217-1":{},"218-2":{},"224-1":{},"225-2":{},"233-1":{},"234-2":{},"242-1":{},"244-2":{},"251-1":{},"253-2":{},"262-1":{},"264-2":{},"273-1":{},"275-2":{},"281-2":{},"282-2":{},"289-2":{},"290-2":{},"297-1":{},"298-2":{},"307-1":{},"308-2":{},"315-1":{},"316-2":{},"369-2":{},"370-1":{},"375-1":{},"376-2":{},"383-1":{},"384-2":{},"391-1":{},"392-2":{},"396-10":{},"397-1":{},"398-2":{},"402-10":{},"403-1":{},"404-2":{},"407-10":{},"411-1":{},"412-2":{},"415-10":{},"419-1":{},"421-2":{},"428-1":{},"430-2":{},"439-1":{},"441-2":{}},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"20":{},"26":{},"28":{},"30":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"69":{},"70":{},"71":{},"77":{},"78":{},"97":{},"98":{},"103":{},"104":{},"109":{},"110":{},"117":{},"118":{},"125":{},"126":{},"127":{},"132":{},"133":{},"134":{},"139":{},"140":{},"141":{},"146":{},"147":{},"148":{},"155":{},"156":{},"157":{},"164":{},"165":{},"171":{},"172":{},"180":{},"181":{},"189":{},"190":{},"197":{},"198":{},"207":{},"208":{},"217":{},"218":{},"219":{},"223":{},"224":{},"225":{},"226":{},"229":{},"230":{},"232":{},"233":{},"234":{},"235":{},"238":{},"239":{},"241":{},"242":{},"244":{},"246":{},"251":{},"253":{},"255":{},"262":{},"264":{},"266":{},"273":{},"274":{},"275":{},"281":{},"282":{},"285":{},"286":{},"289":{},"290":{},"293":{},"294":{},"297":{},"298":{},"299":{},"301":{},"307":{},"308":{},"309":{},"311":{},"315":{},"316":{},"317":{},"319":{},"369":{},"370":{},"375":{},"376":{},"383":{},"384":{},"391":{},"392":{},"396":{},"397":{},"398":{},"402":{},"403":{},"404":{},"407":{},"411":{},"412":{},"415":{},"419":{},"421":{},"428":{},"430":{},"439":{},"441":{}},"component":{}}],["product.rego",{"_index":511,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["product_config",{"_index":2907,"title":{"98-5":{},"99-1":{},"104-5":{},"105-1":{},"110-5":{},"111-1":{},"118-5":{},"119-1":{},"126-5":{},"128-1":{},"133-5":{},"135-1":{},"140-5":{},"142-1":{},"147-5":{},"149-1":{},"156-5":{},"158-1":{},"165-5":{},"167-1":{},"172-5":{},"174-1":{},"181-5":{},"183-1":{},"190-5":{},"192-1":{},"198-5":{},"200-1":{},"208-5":{},"210-1":{},"218-5":{},"220-1":{},"225-5":{},"227-1":{},"234-5":{},"236-1":{},"244-5":{},"247-1":{},"253-5":{},"256-1":{},"264-5":{},"267-1":{},"275-5":{},"277-1":{},"282-5":{},"290-5":{},"298-6":{},"300-1":{},"308-6":{},"310-1":{},"316-6":{},"318-1":{},"369-5":{},"371-1":{},"376-5":{},"377-1":{},"384-5":{},"385-1":{},"392-5":{},"393-1":{},"398-5":{},"399-1":{},"404-5":{},"405-1":{},"412-5":{},"413-1":{},"421-5":{},"423-1":{},"430-5":{},"432-1":{},"441-5":{},"443-1":{}},"name":{},"text":{},"component":{}}],["product_config=/foo/bar/properties.yaml",{"_index":2910,"title":{},"name":{},"text":{"98":{},"99":{},"104":{},"105":{},"110":{},"111":{},"118":{},"119":{},"126":{},"128":{},"133":{},"135":{},"140":{},"142":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"316":{},"318":{},"369":{},"371":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"398":{},"399":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["product_config=/my/product/config.yaml",{"_index":2912,"title":{},"name":{},"text":{"98":{},"99":{},"104":{},"105":{},"110":{},"111":{},"118":{},"119":{},"126":{},"128":{},"133":{},"135":{},"140":{},"142":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"316":{},"318":{},"369":{},"371":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"398":{},"399":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["product_image_vers",{"_index":2052,"title":{},"name":{"41":{}},"text":{},"component":{}}],["productauthent",{"_index":1877,"title":{"37-7":{}},"name":{},"text":{"37":{}},"component":{}}],["productclust",{"_index":1876,"title":{"37-6":{}},"name":{},"text":{"37":{}},"component":{}}],["productcrd",{"_index":2046,"title":{},"name":{},"text":{"40":{}},"component":{}}],["production/simpl",{"_index":1046,"title":{},"name":{},"text":{"15":{}},"component":{}}],["product’",{"_index":1891,"title":{},"name":{},"text":{"37":{}},"component":{}}],["profil",{"_index":2326,"title":{"422":{},"431":{},"442":{},"422-1":{},"431-1":{},"442-1":{}},"name":{},"text":{"51":{},"422":{},"427":{},"431":{},"435":{},"442":{},"446":{}},"component":{}}],["program",{"_index":1455,"title":{"28":{}},"name":{},"text":{"28":{},"46":{},"47":{}},"component":{}}],["progress",{"_index":339,"title":{},"name":{},"text":{"4":{},"33":{},"113":{},"121":{},"177":{},"186":{},"204":{},"214":{},"356":{},"366":{}},"component":{}}],["prohibit",{"_index":2133,"title":{},"name":{},"text":{"42":{}},"component":{}}],["project",{"_index":193,"title":{"2-2":{},"16-2":{}},"name":{},"text":{"16":{},"24":{},"25":{},"26":{},"27":{},"30":{},"31":{},"36":{},"176":{},"185":{},"193":{},"201":{},"211":{}},"component":{}}],["prometheu",{"_index":413,"title":{"19-1":{},"19-2":{},"19-3":{},"19-4":{}},"name":{},"text":{"5":{},"19":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["prometheus.io/scrap",{"_index":1246,"title":{},"name":{},"text":{"19":{}},"component":{}}],["promot",{"_index":1420,"title":{},"name":{},"text":{"26":{}},"component":{}}],["prompt",{"_index":3433,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["propag",{"_index":1950,"title":{},"name":{},"text":{"38":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["proper",{"_index":1165,"title":{},"name":{},"text":{"16":{},"26":{},"28":{},"29":{},"33":{},"407":{},"415":{}},"component":{}}],["properli",{"_index":1197,"title":{},"name":{},"text":{"16":{},"27":{}},"component":{}}],["properti",{"_index":1032,"title":{"102-6":{},"108-6":{},"113-3":{},"121-3":{},"131-14":{},"138-14":{},"145-15":{},"151-16":{},"160-16":{},"170-5":{},"176-5":{},"185-5":{},"196-3":{},"203-3":{},"213-3":{},"223-5":{},"229-5":{},"238-5":{},"250-4":{},"258-6":{},"269-6":{},"280-3":{},"303-4":{},"314-4":{},"321-4":{},"374-15":{},"379-10":{},"387-10":{},"396-18":{},"402-18":{},"407-21":{},"415-21":{},"420-1":{},"421-8":{},"426-5":{},"429-1":{},"430-8":{},"434-5":{},"440-1":{},"441-8":{},"445-5":{}},"name":{},"text":{"14":{},"22":{},"32":{},"38":{},"44":{},"45":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"182":{},"185":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"223":{},"229":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"276":{},"280":{},"282":{},"283":{},"285":{},"286":{},"290":{},"291":{},"293":{},"294":{},"303":{},"314":{},"321":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["propos",{"_index":2187,"title":{},"name":{},"text":{"45":{}},"component":{}}],["proposit",{"_index":1603,"title":{},"name":{},"text":{"31":{}},"component":{}}],["protocol",{"_index":1888,"title":{},"name":{},"text":{"37":{},"45":{},"63":{},"71":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{}},"component":{}}],["proud",{"_index":212,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["proven",{"_index":2180,"title":{},"name":{},"text":{"44":{},"56":{},"280":{},"285":{},"293":{}},"component":{}}],["provenance_repo",{"_index":3750,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["provid",{"_index":178,"title":{"14-6":{},"36-5":{},"250-2":{},"258-2":{},"269-2":{},"332-7":{},"340-7":{},"348-7":{},"355-6":{},"365-6":{}},"name":{},"text":{"1":{},"2":{},"5":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"22":{},"23":{},"26":{},"28":{},"29":{},"30":{},"35":{},"36":{},"37":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"54":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{},"69":{},"71":{},"73":{},"77":{},"79":{},"85":{},"87":{},"88":{},"94":{},"96":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"117":{},"118":{},"119":{},"121":{},"122":{},"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"146":{},"147":{},"149":{},"151":{},"155":{},"156":{},"158":{},"160":{},"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"176":{},"177":{},"180":{},"181":{},"183":{},"185":{},"186":{},"189":{},"190":{},"192":{},"193":{},"197":{},"198":{},"200":{},"201":{},"204":{},"207":{},"208":{},"210":{},"211":{},"214":{},"217":{},"218":{},"220":{},"223":{},"224":{},"225":{},"227":{},"229":{},"233":{},"234":{},"236":{},"238":{},"242":{},"243":{},"244":{},"245":{},"247":{},"250":{},"251":{},"252":{},"253":{},"254":{},"256":{},"258":{},"262":{},"263":{},"264":{},"265":{},"267":{},"269":{},"273":{},"274":{},"275":{},"276":{},"277":{},"279":{},"280":{},"281":{},"282":{},"283":{},"285":{},"286":{},"289":{},"290":{},"291":{},"293":{},"294":{},"297":{},"298":{},"299":{},"300":{},"307":{},"308":{},"309":{},"310":{},"315":{},"316":{},"317":{},"318":{},"325":{},"326":{},"327":{},"329":{},"330":{},"332":{},"333":{},"334":{},"335":{},"337":{},"338":{},"340":{},"341":{},"342":{},"343":{},"345":{},"346":{},"348":{},"349":{},"350":{},"351":{},"353":{},"355":{},"356":{},"359":{},"360":{},"361":{},"363":{},"365":{},"366":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"380":{},"383":{},"384":{},"385":{},"388":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"411":{},"412":{},"413":{},"415":{},"419":{},"421":{},"423":{},"426":{},"428":{},"430":{},"432":{},"434":{},"439":{},"441":{},"443":{},"445":{}},"component":{}}],["provis",{"_index":550,"title":{"330-2":{},"338-2":{},"346-2":{},"353-2":{},"363-2":{}},"name":{},"text":{"8":{},"23":{},"30":{},"35":{},"82":{},"84":{},"85":{},"87":{},"91":{},"93":{},"94":{},"96":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"358":{},"363":{},"368":{}},"component":{}}],["provision",{"_index":2032,"title":{},"name":{},"text":{"40":{},"79":{},"85":{},"86":{},"88":{},"94":{},"95":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["provisioner.yaml",{"_index":2840,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["pseudo",{"_index":2126,"title":{},"name":{},"text":{"42":{}},"component":{}}],["psql.pi",{"_index":3424,"title":{},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["pub",{"_index":1026,"title":{},"name":{},"text":{"14":{},"39":{}},"component":{}}],["public",{"_index":75,"title":{},"name":{},"text":{"1":{},"2":{},"12":{},"23":{},"69":{},"77":{},"232":{},"241":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["publish",{"_index":1326,"title":{},"name":{},"text":{"23":{},"30":{},"41":{},"101":{},"107":{},"127":{},"130":{},"134":{},"137":{},"141":{},"144":{},"148":{},"157":{},"166":{},"169":{},"173":{},"182":{},"191":{},"195":{},"199":{},"209":{},"219":{},"222":{},"226":{},"235":{},"246":{},"249":{},"255":{},"266":{},"279":{},"299":{},"304":{},"309":{},"313":{},"317":{},"322":{},"373":{},"395":{},"401":{},"422":{},"425":{},"431":{},"442":{}},"component":{}}],["pull",{"_index":941,"title":{"16-7":{}},"name":{},"text":{"13":{},"16":{},"27":{},"100":{},"106":{},"112":{},"120":{},"168":{},"175":{},"184":{},"194":{},"202":{},"212":{},"221":{},"228":{},"237":{},"248":{},"257":{},"268":{},"278":{},"284":{},"292":{},"302":{},"312":{},"320":{},"328":{},"332":{},"336":{},"340":{},"344":{},"348":{},"352":{},"355":{},"362":{},"365":{},"372":{},"378":{},"386":{},"394":{},"400":{},"406":{},"414":{},"424":{},"433":{},"444":{}},"component":{}}],["pure",{"_index":767,"title":{},"name":{},"text":{"11":{},"48":{}},"component":{}}],["purpos",{"_index":94,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"10":{},"12":{},"14":{},"23":{},"29":{},"30":{},"53":{},"62":{},"70":{},"78":{},"102":{},"108":{},"131":{},"138":{},"145":{},"151":{},"160":{},"195":{},"232":{},"241":{},"245":{},"254":{},"265":{},"274":{},"275":{},"282":{},"290":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"363":{},"374":{},"380":{},"388":{},"407":{},"415":{}},"component":{}}],["push",{"_index":368,"title":{},"name":{},"text":{"4":{},"30":{},"41":{},"44":{}},"component":{}}],["put",{"_index":664,"title":{},"name":{},"text":{"9":{},"11":{},"29":{},"34":{},"39":{},"42":{},"49":{},"60":{},"61":{},"62":{},"204":{},"214":{}},"component":{}}],["pv",{"_index":562,"title":{},"name":{},"text":{"8":{},"102":{},"108":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["pv/pvc",{"_index":649,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pvc",{"_index":543,"title":{},"name":{"8":{}},"text":{"102":{},"108":{},"113":{},"121":{},"280":{},"285":{},"293":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["pvc/volum",{"_index":3879,"title":{"332-4":{},"340-4":{},"348-4":{},"355-3":{},"365-3":{}},"name":{},"text":{},"component":{}}],["pyspark",{"_index":3083,"title":{"332-3":{},"332-4":{},"340-3":{},"340-4":{},"348-3":{},"348-4":{},"355-2":{},"355-3":{},"365-2":{},"365-3":{}},"name":{},"text":{"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{}},"component":{}}],["python",{"_index":322,"title":{"62-12":{},"330-5":{},"338-5":{},"346-5":{},"353-5":{},"363-5":{}},"name":{},"text":{"3":{},"13":{},"62":{},"113":{},"121":{},"127":{},"134":{},"141":{},"148":{},"157":{},"177":{},"186":{},"230":{},"239":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"387":{}},"component":{}}],["python3.9",{"_index":2958,"title":{},"name":{},"text":{"102":{},"108":{}},"component":{}}],["python38",{"_index":3070,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["python39",{"_index":1282,"title":{},"name":{},"text":{"20":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"328":{},"330":{},"332":{},"336":{},"344":{},"352":{},"362":{}},"component":{}}],["pythonpi",{"_index":3945,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["qualifi",{"_index":1010,"title":{},"name":{},"text":{"14":{},"41":{},"84":{},"93":{}},"component":{}}],["qualiti",{"_index":962,"title":{},"name":{},"text":{"13":{},"16":{},"31":{},"48":{}},"component":{}}],["quantiti",{"_index":578,"title":{},"name":{},"text":{"8":{}},"component":{}}],["queri",{"_index":303,"title":{"19-3":{},"23-27":{},"60-5":{},"61-7":{},"152-7":{},"161-7":{},"396-15":{},"402-15":{},"407-18":{},"415-18":{}},"name":{},"text":{"2":{},"5":{},"7":{},"11":{},"14":{},"19":{},"23":{},"43":{},"54":{},"56":{},"58":{},"60":{},"61":{},"62":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{},"176":{},"177":{},"185":{},"186":{},"286":{},"294":{},"299":{},"301":{},"304":{},"305":{},"306":{},"309":{},"311":{},"317":{},"319":{},"322":{},"323":{},"324":{},"380":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["query.json",{"_index":3390,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["query.max",{"_index":4049,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["querygranular",{"_index":3362,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["question",{"_index":232,"title":{},"name":{},"text":{"2":{},"13":{},"15":{},"33":{},"35":{},"41":{},"62":{}},"component":{}}],["queu",{"_index":2926,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["queue",{"_index":2462,"title":{"102-1":{},"108-1":{}},"name":{},"text":{"60":{},"61":{},"116":{},"124":{}},"component":{}}],["quick",{"_index":101,"title":{},"name":{},"text":{"1":{},"27":{}},"component":{}}],["quickest",{"_index":1513,"title":{},"name":{},"text":{"29":{}},"component":{}}],["quickli",{"_index":730,"title":{},"name":{},"text":{"10":{},"27":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["quickstart",{"_index":138,"title":{"3":{},"52":{}},"name":{"3":{},"52":{}},"text":{"1":{},"50":{},"52":{},"59":{},"116":{},"124":{},"152":{},"154":{},"161":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["quiet",{"_index":4120,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["quit",{"_index":1196,"title":{},"name":{},"text":{"16":{},"30":{}},"component":{}}],["quorum",{"_index":2025,"title":{},"name":{},"text":{"40":{},"176":{},"185":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["quorumtlssecretclass",{"_index":2042,"title":{},"name":{},"text":{"40":{},"426":{},"434":{},"445":{}},"component":{}}],["r",{"_index":2851,"title":{},"name":{},"text":{"79":{},"88":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["rais",{"_index":3201,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["random",{"_index":173,"title":{},"name":{},"text":{"1":{},"102":{},"108":{},"114":{},"122":{},"280":{},"285":{},"293":{},"374":{},"380":{},"388":{}},"component":{}}],["rang",{"_index":1340,"title":{},"name":{},"text":{"23":{},"36":{},"41":{}},"component":{}}],["range(3",{"_index":3010,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["ranger",{"_index":2238,"title":{"48-8":{}},"name":{},"text":{"48":{}},"component":{}}],["rare",{"_index":2613,"title":{},"name":{},"text":{"61":{}},"component":{}}],["raw",{"_index":1306,"title":{},"name":{},"text":{"23":{},"62":{}},"component":{}}],["razvan",{"_index":1927,"title":{},"name":{},"text":{"38":{},"41":{},"45":{}},"component":{}}],["rbac",{"_index":1164,"title":{"331":{},"339":{},"347":{},"354":{},"364":{}},"name":{"331":{},"339":{},"347":{},"354":{},"364":{}},"text":{"16":{},"331":{},"339":{},"347":{},"354":{},"364":{}},"component":{}}],["rbac.authorization.k8s.io",{"_index":3078,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["rbac.authorization.k8s.io/v1",{"_index":3071,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["re",{"_index":725,"title":{},"name":{},"text":{"10":{},"79":{},"88":{}},"component":{}}],["reach",{"_index":1548,"title":{},"name":{},"text":{"30":{},"36":{}},"component":{}}],["reachabl",{"_index":1038,"title":{},"name":{},"text":{"15":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["react",{"_index":2101,"title":{},"name":{},"text":{"41":{}},"component":{}}],["read",{"_index":215,"title":{"7-5":{},"8-7":{},"9-7":{},"11-7":{},"15-8":{}},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"11":{},"13":{},"14":{},"15":{},"23":{},"40":{},"41":{},"45":{},"52":{},"57":{},"60":{},"61":{},"63":{},"71":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"259":{},"260":{},"270":{},"271":{},"301":{},"304":{},"311":{},"319":{},"322":{},"329":{},"337":{},"345":{}},"component":{}}],["read/writ",{"_index":4140,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["readabl",{"_index":1477,"title":{},"name":{},"text":{"28":{},"177":{},"186":{}},"component":{}}],["readi",{"_index":387,"title":{},"name":{},"text":{"5":{},"23":{},"50":{},"52":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"83":{},"92":{},"101":{},"107":{},"114":{},"116":{},"122":{},"124":{},"130":{},"137":{},"144":{},"152":{},"154":{},"161":{},"163":{},"169":{},"179":{},"188":{},"195":{},"206":{},"216":{},"222":{},"230":{},"232":{},"239":{},"241":{},"249":{},"259":{},"261":{},"270":{},"272":{},"279":{},"286":{},"288":{},"294":{},"296":{},"306":{},"313":{},"324":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"358":{},"363":{},"368":{},"373":{},"382":{},"390":{},"395":{},"401":{},"408":{},"410":{},"416":{},"418":{},"425":{},"436":{},"438":{},"447":{},"449":{}},"component":{}}],["readme.adoc",{"_index":1173,"title":{},"name":{},"text":{"16":{}},"component":{}}],["readme.md",{"_index":1159,"title":{},"name":{},"text":{"16":{}},"component":{}}],["readrequestscount",{"_index":3459,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["readwrit",{"_index":3644,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["readwritemani",{"_index":633,"title":{},"name":{},"text":{"8":{}},"component":{}}],["readwriteonc",{"_index":569,"title":{},"name":{},"text":{"8":{},"86":{},"87":{},"95":{},"96":{},"102":{},"108":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["real",{"_index":271,"title":{},"name":{},"text":{"2":{},"28":{},"44":{},"47":{},"48":{},"60":{},"61":{}},"component":{}}],["realist",{"_index":1601,"title":{},"name":{},"text":{"31":{},"62":{}},"component":{}}],["realli",{"_index":1702,"title":{},"name":{},"text":{"34":{},"44":{}},"component":{}}],["realm",{"_index":1915,"title":{},"name":{},"text":{"37":{}},"component":{}}],["realtim",{"_index":2558,"title":{},"name":{},"text":{"61":{}},"component":{}}],["rearchitect",{"_index":2109,"title":{},"name":{},"text":{"41":{}},"component":{}}],["reason",{"_index":601,"title":{},"name":{},"text":{"8":{},"38":{},"41":{},"60":{},"61":{},"68":{},"76":{},"204":{},"214":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["rebas",{"_index":1445,"title":{},"name":{},"text":{"27":{}},"component":{}}],["rebuilt",{"_index":1137,"title":{},"name":{},"text":{"16":{}},"component":{}}],["recap",{"_index":2045,"title":{},"name":{},"text":{"40":{}},"component":{}}],["receiv",{"_index":1559,"title":{},"name":{},"text":{"30":{},"36":{}},"component":{}}],["recent",{"_index":1817,"title":{},"name":{},"text":{"36":{},"195":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["recheck",{"_index":3574,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["recommend",{"_index":983,"title":{},"name":{},"text":{"13":{},"23":{},"34":{},"45":{},"50":{},"55":{},"62":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"261":{},"272":{},"280":{},"285":{},"286":{},"288":{},"293":{},"294":{},"296":{},"306":{},"324":{},"330":{},"338":{},"346":{},"353":{},"358":{},"363":{},"368":{},"382":{},"390":{},"410":{},"418":{},"420":{},"421":{},"429":{},"430":{},"438":{},"440":{},"441":{},"449":{}},"component":{}}],["recompil",{"_index":2846,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["reconcil",{"_index":1673,"title":{},"name":{},"text":{"33":{},"39":{}},"component":{}}],["reconcili",{"_index":1938,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["record",{"_index":1319,"title":{"46":{},"61-4":{}},"name":{},"text":{"23":{},"46":{},"48":{},"60":{},"61":{},"62":{}},"component":{}}],["records/",{"_index":2447,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["recreat",{"_index":1599,"title":{},"name":{},"text":{"31":{},"427":{},"435":{},"446":{}},"component":{}}],["recurs",{"_index":2824,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["red",{"_index":1537,"title":{},"name":{},"text":{"30":{}},"component":{}}],["redact",{"_index":2431,"title":{},"name":{},"text":{"57":{}},"component":{}}],["redeploy",{"_index":2847,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["redhat",{"_index":1998,"title":{},"name":{},"text":{"39":{}},"component":{}}],["redi",{"_index":2927,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"116":{},"122":{},"124":{}},"component":{}}],["redirect",{"_index":3566,"title":{},"name":{},"text":{"204":{},"214":{},"286":{},"294":{}},"component":{}}],["redis://:redis@airflow",{"_index":3219,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["redis://:redis@redi",{"_index":2951,"title":{},"name":{},"text":{"102":{},"108":{}},"component":{}}],["reduc",{"_index":995,"title":{},"name":{},"text":{"14":{},"131":{},"138":{},"145":{},"151":{},"160":{},"301":{},"311":{},"319":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["ref",{"_index":346,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ref:`kubernet",{"_index":3118,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["refer",{"_index":523,"title":{"21":{},"10-2":{},"43-6":{},"43-7":{},"43-9":{},"85-3":{},"85-5":{},"94-3":{},"94-5":{}},"name":{},"text":{"7":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"21":{},"22":{},"30":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"45":{},"49":{},"61":{},"63":{},"71":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"230":{},"238":{},"239":{},"243":{},"244":{},"245":{},"250":{},"252":{},"253":{},"254":{},"258":{},"263":{},"264":{},"265":{},"269":{},"274":{},"275":{},"276":{},"282":{},"283":{},"290":{},"291":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"427":{},"434":{},"435":{},"445":{},"446":{}},"component":{}}],["referenc",{"_index":709,"title":{},"name":{},"text":{"10":{},"11":{},"22":{},"23":{},"33":{},"38":{},"49":{},"63":{},"68":{},"71":{},"76":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"145":{},"151":{},"160":{},"258":{},"269":{},"280":{},"285":{},"293":{},"297":{},"298":{},"307":{},"308":{},"315":{},"316":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"380":{},"388":{},"426":{},"434":{},"445":{}},"component":{}}],["referencenam",{"_index":1983,"title":{},"name":{},"text":{"39":{}},"component":{}}],["referer",{"_index":4109,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["refin",{"_index":2261,"title":{},"name":{},"text":{"48":{}},"component":{}}],["reflect",{"_index":2102,"title":{},"name":{},"text":{"41":{},"47":{}},"component":{}}],["refrain",{"_index":1859,"title":{},"name":{},"text":{"36":{}},"component":{}}],["refresh",{"_index":2982,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["regard",{"_index":228,"title":{},"name":{},"text":{"2":{},"8":{},"30":{},"62":{},"113":{},"121":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["regardless",{"_index":1686,"title":{},"name":{},"text":{"34":{},"41":{},"56":{},"61":{}},"component":{}}],["regener",{"_index":362,"title":{},"name":{},"text":{"4":{},"16":{},"51":{},"85":{},"94":{}},"component":{}}],["region",{"_index":3452,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["regionisocod",{"_index":3378,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["regionnam",{"_index":3381,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["regionserv",{"_index":3410,"title":{},"name":{},"text":{"170":{},"176":{},"177":{},"185":{},"186":{}},"component":{}}],["regist",{"_index":994,"title":{},"name":{},"text":{"14":{},"19":{},"30":{},"67":{},"75":{}},"component":{}}],["registr",{"_index":1534,"title":{},"name":{},"text":{"30":{}},"component":{}}],["registri",{"_index":2088,"title":{},"name":{},"text":{"41":{},"44":{},"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"380":{},"388":{},"426":{},"434":{},"445":{}},"component":{}}],["rego",{"_index":464,"title":{"14-6":{}},"name":{},"text":{"7":{},"14":{},"48":{},"299":{},"304":{},"309":{},"317":{},"322":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["regorul",{"_index":453,"title":{"131-10":{},"138-10":{},"145-11":{},"151-12":{},"160-12":{}},"name":{},"text":{"5":{},"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["regorulerefer",{"_index":3809,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["regular",{"_index":404,"title":{},"name":{},"text":{"5":{},"36":{},"301":{},"311":{},"319":{}},"component":{}}],["regularli",{"_index":2832,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["reimplement",{"_index":1533,"title":{},"name":{},"text":{"30":{},"33":{}},"component":{}}],["reinforc",{"_index":38,"title":{},"name":{},"text":{"1":{}},"component":{}}],["reinvent",{"_index":2178,"title":{},"name":{},"text":{"44":{}},"component":{}}],["rel",{"_index":1557,"title":{},"name":{},"text":{"30":{},"32":{},"37":{},"48":{},"356":{},"366":{}},"component":{}}],["relat",{"_index":899,"title":{},"name":{},"text":{"12":{},"13":{},"15":{},"18":{},"26":{},"41":{},"62":{},"102":{},"108":{},"114":{},"122":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"274":{},"275":{},"282":{},"290":{},"374":{},"380":{},"388":{}},"component":{}}],["relationship",{"_index":559,"title":{},"name":{},"text":{"8":{},"60":{},"61":{},"62":{},"63":{},"70":{},"71":{},"78":{}},"component":{}}],["releas",{"_index":209,"title":{"5":{},"56":{},"5-1":{},"49-7":{},"49-9":{},"56-1":{},"56-2":{},"56-3":{}},"name":{"56":{}},"text":{"2":{},"4":{},"5":{},"16":{},"19":{},"26":{},"27":{},"30":{},"36":{},"37":{},"41":{},"44":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"79":{},"88":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"222":{},"232":{},"241":{},"249":{},"279":{},"313":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["release.yaml",{"_index":3638,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["release_guid",{"_index":338,"title":{},"name":{"4":{}},"text":{},"component":{}}],["release_not",{"_index":377,"title":{},"name":{"5":{}},"text":{},"component":{}}],["released",{"_index":3650,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["releasenam",{"_index":3639,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["releases.yaml",{"_index":2277,"title":{},"name":{},"text":{"49":{}},"component":{}}],["releases/stacks/demo",{"_index":2346,"title":{"53-3":{}},"name":{},"text":{},"component":{}}],["relev",{"_index":411,"title":{},"name":{},"text":{"5":{},"8":{},"12":{},"13":{},"45":{},"49":{},"102":{},"108":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["reli",{"_index":1810,"title":{},"name":{},"text":{"36":{}},"component":{}}],["reliabl",{"_index":297,"title":{},"name":{},"text":{"2":{},"36":{}},"component":{}}],["remain",{"_index":1555,"title":{},"name":{},"text":{"30":{}},"component":{}}],["remark",{"_index":3899,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["rememb",{"_index":1047,"title":{},"name":{},"text":{"15":{},"55":{}},"component":{}}],["remot",{"_index":3808,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["remov",{"_index":108,"title":{"36-3":{}},"name":{},"text":{"1":{},"29":{},"34":{},"36":{},"356":{},"366":{},"408":{},"416":{}},"component":{}}],["renam",{"_index":1718,"title":{},"name":{},"text":{"34":{},"51":{},"102":{},"108":{},"113":{},"121":{}},"component":{}}],["render",{"_index":2527,"title":{},"name":{},"text":{"60":{},"61":{},"62":{}},"component":{}}],["renener",{"_index":3825,"title":{},"name":{},"text":{"329":{},"337":{},"345":{}},"component":{}}],["repair",{"_index":1654,"title":{},"name":{},"text":{"33":{}},"component":{}}],["repeat",{"_index":1617,"title":{},"name":{},"text":{"31":{},"39":{},"41":{}},"component":{}}],["repeatedli",{"_index":1614,"title":{},"name":{},"text":{"31":{}},"component":{}}],["repetit",{"_index":919,"title":{},"name":{},"text":{"12":{},"39":{}},"component":{}}],["replac",{"_index":269,"title":{},"name":{},"text":{"2":{},"38":{},"52":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"259":{},"270":{}},"component":{}}],["replic",{"_index":656,"title":{},"name":{},"text":{"9":{},"34":{},"204":{},"214":{}},"component":{}}],["replica",{"_index":657,"title":{"301-1":{},"311-1":{},"319-1":{}},"name":{},"text":{"9":{},"35":{},"40":{},"41":{},"60":{},"61":{},"84":{},"93":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"436":{},"440":{},"441":{},"445":{},"447":{}},"component":{}}],["replica.replicacount=1",{"_index":3258,"title":{},"name":{},"text":{"116":{},"124":{}},"component":{}}],["replicas=1",{"_index":3652,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["repo",{"_index":927,"title":{"13-2":{}},"name":{},"text":{"19":{},"23":{},"26":{},"41":{},"44":{},"51":{},"53":{},"66":{},"74":{},"83":{},"92":{},"101":{},"102":{},"107":{},"108":{},"116":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"154":{},"160":{},"163":{},"169":{},"179":{},"188":{},"195":{},"206":{},"216":{},"222":{},"223":{},"229":{},"232":{},"238":{},"241":{},"249":{},"261":{},"272":{},"279":{},"288":{},"296":{},"306":{},"313":{},"324":{},"329":{},"337":{},"345":{},"358":{},"368":{},"373":{},"374":{},"380":{},"382":{},"388":{},"390":{},"395":{},"401":{},"410":{},"418":{},"425":{},"438":{},"449":{}},"component":{}}],["repo:$tag",{"_index":2827,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["repo=secret",{"_index":2825,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["report",{"_index":392,"title":{},"name":{},"text":{"5":{},"13":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["report:0.1.0",{"_index":3889,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["repositori",{"_index":235,"title":{"26":{},"13-3":{},"26-8":{},"26-9":{}},"name":{},"text":{"2":{},"5":{},"8":{},"12":{},"13":{},"16":{},"23":{},"26":{},"27":{},"41":{},"44":{},"46":{},"49":{},"66":{},"74":{},"83":{},"92":{},"100":{},"101":{},"102":{},"106":{},"107":{},"108":{},"112":{},"114":{},"116":{},"120":{},"122":{},"124":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"154":{},"160":{},"163":{},"168":{},"169":{},"175":{},"179":{},"184":{},"188":{},"194":{},"195":{},"202":{},"206":{},"212":{},"216":{},"221":{},"222":{},"228":{},"232":{},"237":{},"241":{},"248":{},"249":{},"257":{},"261":{},"268":{},"272":{},"278":{},"279":{},"284":{},"288":{},"292":{},"296":{},"302":{},"306":{},"312":{},"313":{},"320":{},"324":{},"328":{},"329":{},"330":{},"332":{},"336":{},"337":{},"338":{},"340":{},"344":{},"345":{},"346":{},"348":{},"352":{},"353":{},"355":{},"358":{},"362":{},"363":{},"365":{},"368":{},"372":{},"373":{},"374":{},"378":{},"380":{},"382":{},"386":{},"388":{},"390":{},"394":{},"395":{},"400":{},"401":{},"406":{},"408":{},"410":{},"414":{},"416":{},"418":{},"424":{},"425":{},"433":{},"438":{},"444":{},"449":{}},"component":{}}],["repres",{"_index":3270,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{},"299":{},"309":{},"317":{}},"component":{}}],["represent",{"_index":1957,"title":{"39":{}},"name":{},"text":{"46":{}},"component":{}}],["reproduc",{"_index":2267,"title":{},"name":{},"text":{"49":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["reproducibl",{"_index":3835,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["reput",{"_index":1767,"title":{},"name":{},"text":{"35":{}},"component":{}}],["request",{"_index":333,"title":{"16-7":{},"196-6":{},"196-7":{},"203-6":{},"203-7":{},"213-6":{},"213-7":{},"250-7":{},"250-8":{},"258-9":{},"258-10":{},"269-9":{},"269-10":{},"280-6":{},"280-7":{},"285-12":{},"285-13":{},"293-12":{},"293-13":{},"304-3":{},"322-3":{},"407-24":{},"407-25":{},"415-24":{},"415-25":{},"426-8":{},"426-9":{},"434-8":{},"434-9":{},"445-8":{},"445-9":{}},"name":{},"text":{"3":{},"7":{},"8":{},"13":{},"16":{},"27":{},"33":{},"45":{},"47":{},"55":{},"86":{},"87":{},"95":{},"96":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"177":{},"186":{},"196":{},"203":{},"213":{},"232":{},"241":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"299":{},"301":{},"304":{},"309":{},"311":{},"317":{},"319":{},"322":{},"330":{},"338":{},"346":{},"353":{},"363":{},"374":{},"380":{},"388":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["requir",{"_index":321,"title":{"170-1":{},"176-1":{},"185-1":{},"223-1":{},"229-1":{},"238-1":{},"330-5":{},"338-5":{},"346-5":{},"353-5":{},"363-5":{}},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"11":{},"14":{},"16":{},"23":{},"27":{},"32":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"48":{},"50":{},"51":{},"54":{},"58":{},"60":{},"61":{},"62":{},"70":{},"78":{},"79":{},"80":{},"81":{},"87":{},"88":{},"89":{},"90":{},"96":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"116":{},"117":{},"118":{},"119":{},"121":{},"122":{},"124":{},"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"146":{},"147":{},"149":{},"151":{},"154":{},"155":{},"156":{},"158":{},"160":{},"163":{},"164":{},"165":{},"166":{},"167":{},"171":{},"172":{},"173":{},"174":{},"176":{},"177":{},"179":{},"180":{},"181":{},"182":{},"183":{},"185":{},"186":{},"188":{},"189":{},"190":{},"191":{},"192":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"203":{},"204":{},"206":{},"207":{},"208":{},"209":{},"210":{},"213":{},"214":{},"216":{},"217":{},"218":{},"220":{},"223":{},"224":{},"225":{},"227":{},"229":{},"230":{},"232":{},"233":{},"234":{},"236":{},"238":{},"239":{},"241":{},"242":{},"244":{},"245":{},"247":{},"250":{},"251":{},"253":{},"254":{},"256":{},"258":{},"259":{},"261":{},"262":{},"264":{},"265":{},"267":{},"269":{},"270":{},"272":{},"273":{},"274":{},"275":{},"277":{},"279":{},"281":{},"282":{},"285":{},"286":{},"288":{},"289":{},"290":{},"293":{},"294":{},"296":{},"297":{},"298":{},"300":{},"301":{},"307":{},"308":{},"310":{},"311":{},"315":{},"316":{},"318":{},"319":{},"325":{},"326":{},"327":{},"329":{},"330":{},"332":{},"333":{},"334":{},"335":{},"337":{},"338":{},"340":{},"341":{},"342":{},"343":{},"345":{},"346":{},"348":{},"349":{},"350":{},"351":{},"353":{},"355":{},"358":{},"359":{},"360":{},"361":{},"363":{},"365":{},"368":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"379":{},"382":{},"383":{},"384":{},"385":{},"387":{},"390":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"408":{},"410":{},"411":{},"412":{},"413":{},"415":{},"416":{},"418":{},"419":{},"421":{},"423":{},"426":{},"428":{},"430":{},"432":{},"434":{},"439":{},"441":{},"443":{},"445":{}},"component":{}}],["require/support",{"_index":1962,"title":{},"name":{},"text":{"39":{}},"component":{}}],["requisit",{"_index":3256,"title":{},"name":{},"text":{"116":{},"124":{}},"component":{}}],["resid",{"_index":285,"title":{},"name":{},"text":{"2":{},"34":{},"39":{},"42":{},"113":{},"121":{}},"component":{}}],["resolut",{"_index":959,"title":{},"name":{},"text":{"13":{}},"component":{}}],["resolv",{"_index":2198,"title":{},"name":{},"text":{"45":{},"48":{},"84":{},"93":{}},"component":{}}],["resolve_s3_bucket(bucket",{"_index":1985,"title":{},"name":{},"text":{"39":{}},"component":{}}],["resourc",{"_index":419,"title":{"10":{},"22":{},"10-5":{},"36-3":{},"113-18":{},"113-20":{},"121-18":{},"121-20":{},"243-1":{},"244-7":{},"252-1":{},"253-7":{},"263-1":{},"264-7":{},"275-7":{},"282-7":{},"290-7":{},"421-7":{},"430-7":{},"441-7":{}},"name":{},"text":{"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"16":{},"17":{},"22":{},"23":{},"30":{},"32":{},"33":{},"36":{},"45":{},"85":{},"86":{},"87":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"117":{},"118":{},"119":{},"121":{},"122":{},"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"146":{},"147":{},"149":{},"151":{},"152":{},"155":{},"156":{},"158":{},"160":{},"161":{},"164":{},"165":{},"167":{},"170":{},"171":{},"172":{},"174":{},"176":{},"180":{},"181":{},"183":{},"185":{},"189":{},"190":{},"192":{},"193":{},"196":{},"197":{},"198":{},"200":{},"201":{},"203":{},"204":{},"207":{},"208":{},"210":{},"211":{},"213":{},"214":{},"217":{},"218":{},"220":{},"223":{},"224":{},"225":{},"227":{},"229":{},"232":{},"233":{},"234":{},"236":{},"238":{},"241":{},"242":{},"243":{},"244":{},"247":{},"250":{},"251":{},"252":{},"253":{},"256":{},"258":{},"259":{},"262":{},"263":{},"264":{},"267":{},"269":{},"270":{},"273":{},"274":{},"275":{},"277":{},"279":{},"280":{},"281":{},"282":{},"285":{},"286":{},"289":{},"290":{},"293":{},"294":{},"297":{},"298":{},"300":{},"304":{},"307":{},"308":{},"310":{},"315":{},"316":{},"318":{},"322":{},"325":{},"326":{},"327":{},"330":{},"332":{},"333":{},"334":{},"335":{},"338":{},"340":{},"341":{},"342":{},"343":{},"346":{},"348":{},"349":{},"350":{},"351":{},"353":{},"355":{},"356":{},"359":{},"360":{},"361":{},"363":{},"365":{},"366":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"379":{},"380":{},"383":{},"384":{},"385":{},"387":{},"388":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"411":{},"412":{},"413":{},"415":{},"419":{},"420":{},"421":{},"423":{},"426":{},"427":{},"428":{},"429":{},"430":{},"432":{},"434":{},"435":{},"436":{},"439":{},"440":{},"441":{},"443":{},"445":{},"446":{},"447":{}},"component":{}}],["resources.requests.memory=1gi",{"_index":3656,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["respect",{"_index":534,"title":{},"name":{},"text":{"7":{},"11":{},"14":{},"15":{},"23":{},"68":{},"76":{},"85":{},"94":{},"170":{},"176":{},"185":{},"250":{},"258":{},"269":{},"436":{},"447":{}},"component":{}}],["respond",{"_index":954,"title":{},"name":{},"text":{"13":{}},"component":{}}],["respons",{"_index":2806,"title":{},"name":{},"text":{"68":{},"76":{},"87":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"193":{},"201":{},"211":{},"304":{},"322":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{}},"component":{}}],["response[\"metadata\"][\"namespac",{"_index":3175,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["response[\"statu",{"_index":3168,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["response[\"status\"][\"phas",{"_index":3196,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["rest",{"_index":477,"title":{},"name":{},"text":{"7":{},"14":{},"26":{},"29":{},"35":{},"61":{},"131":{},"138":{},"145":{},"151":{},"160":{},"177":{},"186":{},"286":{},"294":{},"358":{},"368":{}},"component":{}}],["restart",{"_index":1626,"title":{"68":{},"76":{}},"name":{"68":{},"76":{}},"text":{"32":{},"33":{},"38":{},"43":{},"68":{},"70":{},"76":{},"78":{},"79":{},"88":{}},"component":{}}],["restart=nev",{"_index":4121,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["restarter.stackable.tech/en",{"_index":2819,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["restarter.stackable.tech/expir",{"_index":2809,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["restartpolici",{"_index":3039,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["restor",{"_index":4107,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["restrict",{"_index":588,"title":{},"name":{},"text":{"8":{},"41":{},"427":{},"435":{},"446":{}},"component":{}}],["restserv",{"_index":3411,"title":{},"name":{},"text":{"170":{},"176":{},"177":{},"185":{},"186":{}},"component":{}}],["result",{"_index":1541,"title":{},"name":{},"text":{"30":{},"39":{},"41":{},"50":{},"60":{},"61":{},"127":{},"134":{},"141":{},"148":{},"152":{},"157":{},"161":{},"166":{},"173":{},"182":{},"191":{},"199":{},"209":{},"219":{},"226":{},"235":{},"246":{},"255":{},"266":{},"299":{},"309":{},"317":{},"356":{},"357":{},"366":{},"367":{},"380":{},"388":{}},"component":{}}],["result\":tru",{"_index":3817,"title":{},"name":{},"text":{"304":{},"322":{}},"component":{}}],["result/crds.yaml",{"_index":2839,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["result/load",{"_index":2837,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["retention/ttl",{"_index":2205,"title":{},"name":{},"text":{"45":{}},"component":{}}],["rethem",{"_index":2597,"title":{},"name":{},"text":{"61":{}},"component":{}}],["retri",{"_index":2342,"title":{},"name":{},"text":{"52":{},"54":{}},"component":{}}],["retriev",{"_index":180,"title":{},"name":{},"text":{"1":{},"11":{},"15":{},"16":{},"35":{},"38":{},"40":{},"53":{},"60":{},"61":{},"62":{},"280":{},"285":{},"286":{},"293":{},"294":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["return",{"_index":1080,"title":{},"name":{},"text":{"15":{},"39":{},"62":{},"113":{},"121":{},"177":{},"186":{},"204":{},"214":{},"286":{},"294":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["reus",{"_index":421,"title":{"30":{},"31":{},"30-8":{},"30-9":{},"31-8":{},"31-9":{}},"name":{},"text":{"5":{},"30":{},"31":{},"32":{},"43":{},"46":{},"47":{},"85":{},"94":{}},"component":{}}],["reusabl",{"_index":1665,"title":{},"name":{},"text":{"33":{},"43":{}},"component":{}}],["revers",{"_index":1581,"title":{},"name":{},"text":{"30":{}},"component":{}}],["review",{"_index":1185,"title":{"27":{},"27-8":{},"27-9":{}},"name":{},"text":{"16":{},"27":{},"46":{},"357":{},"367":{}},"component":{}}],["reviewdog",{"_index":1198,"title":{},"name":{},"text":{"16":{}},"component":{}}],["rfc",{"_index":2812,"title":{},"name":{},"text":{"68":{},"76":{}},"component":{}}],["rhein",{"_index":2638,"title":{},"name":{},"text":{"61":{}},"component":{}}],["ride",{"_index":2659,"title":{},"name":{},"text":{"62":{}},"component":{}}],["right",{"_index":44,"title":{},"name":{},"text":{"1":{},"10":{},"30":{},"32":{},"44":{},"60":{},"61":{},"62":{},"114":{},"122":{}},"component":{}}],["risk",{"_index":1393,"title":{},"name":{},"text":{"25":{},"29":{},"44":{},"62":{},"102":{},"108":{},"274":{},"275":{},"285":{},"293":{},"408":{},"416":{}},"component":{}}],["rm",{"_index":3529,"title":{},"name":{},"text":{"195":{},"259":{},"270":{},"408":{},"416":{}},"component":{}}],["road",{"_index":1551,"title":{},"name":{},"text":{"30":{},"44":{}},"component":{}}],["rob",{"_index":2141,"title":{},"name":{},"text":{"44":{}},"component":{}}],["robust",{"_index":55,"title":{},"name":{},"text":{"1":{},"23":{}},"component":{}}],["role",{"_index":422,"title":{"9":{},"9-4":{},"113-20":{},"121-20":{},"243-4":{},"244-10":{},"252-4":{},"253-10":{},"263-4":{},"264-10":{}},"name":{"9":{}},"text":{"5":{},"9":{},"32":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"209":{},"211":{},"213":{},"219":{},"223":{},"226":{},"229":{},"235":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"298":{},"300":{},"303":{},"308":{},"310":{},"314":{},"316":{},"318":{},"321":{},"331":{},"339":{},"347":{},"354":{},"364":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["role/clust",{"_index":3877,"title":{},"name":{},"text":{"331":{},"339":{},"347":{},"354":{},"364":{}},"component":{}}],["rolegroup",{"_index":690,"title":{"243-4":{},"244-10":{},"252-4":{},"253-10":{},"263-4":{},"264-10":{}},"name":{},"text":{"9":{},"35":{},"40":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"303":{},"304":{},"314":{},"321":{},"322":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"436":{},"440":{},"441":{},"445":{},"447":{}},"component":{}}],["rolegroup}.{namespace}.svc.cluster.local:9083",{"_index":3601,"title":{},"name":{},"text":{"219":{},"226":{},"235":{}},"component":{}}],["roleref",{"_index":3077,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["roll",{"_index":924,"title":{},"name":{},"text":{"12":{},"16":{},"23":{},"30":{},"34":{},"44":{},"68":{},"76":{},"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"380":{},"388":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["rollout",{"_index":2841,"title":{},"name":{},"text":{"79":{},"88":{},"177":{},"186":{},"204":{},"214":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["rollup",{"_index":3363,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["rook",{"_index":1955,"title":{"39-12":{}},"name":{},"text":{"39":{}},"component":{}}],["rook’",{"_index":1966,"title":{},"name":{},"text":{"39":{}},"component":{}}],["root",{"_index":1170,"title":{},"name":{},"text":{"16":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"79":{},"88":{},"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{},"232":{},"241":{},"422":{},"427":{},"431":{},"435":{},"436":{},"442":{},"446":{},"447":{}},"component":{}}],["rootindexsizekb",{"_index":3461,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["rootloglevel",{"_index":3718,"title":{},"name":{},"text":{"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{}},"component":{}}],["rootpassword",{"_index":3643,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["rootroot",{"_index":2379,"title":{},"name":{},"text":{"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"232":{},"241":{}},"component":{}}],["rootus",{"_index":3642,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["roughli",{"_index":2000,"title":{},"name":{},"text":{"39":{},"44":{},"427":{},"435":{},"446":{}},"component":{}}],["round",{"_index":3798,"title":{},"name":{},"text":{"301":{},"311":{},"319":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["rout",{"_index":3800,"title":{},"name":{},"text":{"301":{},"311":{},"319":{}},"component":{}}],["routabl",{"_index":2802,"title":{},"name":{},"text":{"67":{},"75":{}},"component":{}}],["router",{"_index":2455,"title":{},"name":{},"text":{"60":{},"61":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"426":{},"434":{},"445":{}},"component":{}}],["router.stackable.svc.cluster.local:8888",{"_index":3281,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["router.stackable.svc.cluster.local:8888/druid/v2/sql",{"_index":3279,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["router.stackable.svc.cluster.local:8888/druid/v2/sql/avatica",{"_index":3274,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["row",{"_index":2623,"title":{},"name":{},"text":{"61":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["rowlimit",{"_index":3965,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["rows/",{"_index":4035,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["rpc",{"_index":3510,"title":{},"name":{},"text":{"191":{},"199":{},"209":{}},"component":{}}],["rpm",{"_index":1685,"title":{},"name":{},"text":{"34":{}},"component":{}}],["rs",{"_index":889,"title":{},"name":{},"text":{"12":{},"14":{},"15":{}},"component":{}}],["rshare",{"_index":2849,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["rtc",{"_index":1433,"title":{"27":{}},"name":{},"text":{"46":{}},"component":{}}],["rule",{"_index":476,"title":{"14-6":{},"304-2":{},"322-2":{}},"name":{},"text":{"7":{},"14":{},"16":{},"17":{},"36":{},"41":{},"48":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"304":{},"305":{},"306":{},"322":{},"323":{},"324":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["rule.yaml",{"_index":3814,"title":{},"name":{},"text":{"304":{},"322":{}},"component":{}}],["run",{"_index":221,"title":{"57-1":{}},"name":{},"text":{"2":{},"3":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"23":{},"29":{},"30":{},"32":{},"34":{},"35":{},"36":{},"38":{},"41":{},"42":{},"45":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"67":{},"71":{},"74":{},"75":{},"79":{},"83":{},"84":{},"88":{},"92":{},"93":{},"97":{},"98":{},"99":{},"101":{},"102":{},"103":{},"104":{},"105":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"128":{},"130":{},"131":{},"132":{},"133":{},"135":{},"137":{},"138":{},"139":{},"140":{},"142":{},"144":{},"145":{},"146":{},"147":{},"149":{},"151":{},"154":{},"155":{},"156":{},"158":{},"160":{},"163":{},"164":{},"165":{},"167":{},"169":{},"170":{},"171":{},"172":{},"174":{},"176":{},"179":{},"180":{},"181":{},"183":{},"185":{},"188":{},"189":{},"190":{},"192":{},"193":{},"195":{},"196":{},"197":{},"198":{},"200":{},"201":{},"203":{},"206":{},"207":{},"208":{},"210":{},"211":{},"213":{},"216":{},"217":{},"218":{},"220":{},"222":{},"224":{},"225":{},"227":{},"232":{},"233":{},"234":{},"236":{},"241":{},"242":{},"244":{},"247":{},"249":{},"250":{},"251":{},"253":{},"256":{},"258":{},"261":{},"262":{},"264":{},"267":{},"269":{},"272":{},"273":{},"275":{},"277":{},"279":{},"280":{},"281":{},"282":{},"285":{},"286":{},"288":{},"289":{},"290":{},"293":{},"294":{},"296":{},"297":{},"298":{},"300":{},"301":{},"303":{},"306":{},"307":{},"308":{},"310":{},"311":{},"313":{},"314":{},"315":{},"316":{},"318":{},"319":{},"321":{},"324":{},"325":{},"326":{},"327":{},"329":{},"330":{},"331":{},"332":{},"333":{},"334":{},"335":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"343":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"353":{},"354":{},"356":{},"358":{},"359":{},"360":{},"361":{},"363":{},"364":{},"366":{},"368":{},"369":{},"370":{},"371":{},"373":{},"375":{},"376":{},"377":{},"382":{},"383":{},"384":{},"385":{},"390":{},"391":{},"392":{},"393":{},"395":{},"397":{},"398":{},"399":{},"401":{},"403":{},"404":{},"405":{},"407":{},"408":{},"410":{},"411":{},"412":{},"413":{},"415":{},"416":{},"418":{},"419":{},"421":{},"423":{},"425":{},"426":{},"428":{},"430":{},"432":{},"434":{},"436":{},"438":{},"439":{},"441":{},"443":{},"445":{},"447":{},"449":{}},"component":{}}],["run_id",{"_index":3018,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["run_thi",{"_index":3007,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["run_this_last",{"_index":3004,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["runasus",{"_index":3052,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["runtim",{"_index":1406,"title":{},"name":{},"text":{"26":{},"45":{},"274":{},"275":{},"285":{},"293":{}},"component":{}}],["runtime.properti",{"_index":3312,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["ruok",{"_index":4100,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["rust",{"_index":891,"title":{"28":{},"16-2":{},"28-10":{}},"name":{},"text":{"12":{},"13":{},"15":{},"28":{},"30":{},"46":{},"51":{},"79":{},"88":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"195":{},"222":{},"249":{},"279":{},"313":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["rust/oper",{"_index":1138,"title":{},"name":{},"text":{"16":{}},"component":{}}],["röijezon",{"_index":1731,"title":{},"name":{},"text":{"35":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{}},"component":{}}],["röjiezon",{"_index":2055,"title":{},"name":{},"text":{"41":{}},"component":{}}],["s",{"_index":3187,"title":{},"name":{},"text":{"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"304":{},"322":{}},"component":{}}],["s3",{"_index":416,"title":{"10":{},"22":{},"39":{},"39-6":{},"39-7":{},"39-9":{},"62-2":{},"131-6":{},"131-7":{},"131-8":{},"138-6":{},"138-7":{},"138-8":{},"145-6":{},"145-7":{},"145-8":{},"145-9":{},"151-6":{},"151-7":{},"151-8":{},"151-9":{},"160-6":{},"160-7":{},"160-8":{},"160-9":{},"223-2":{},"229-2":{},"238-2":{},"332-8":{},"340-8":{},"348-8":{},"355-7":{},"365-7":{},"396-3":{},"396-11":{},"396-12":{},"402-3":{},"402-11":{},"402-12":{},"407-3":{},"407-14":{},"407-15":{},"415-3":{},"415-14":{},"415-15":{}},"name":{"10":{},"22":{}},"text":{"5":{},"10":{},"22":{},"23":{},"39":{},"42":{},"45":{},"46":{},"52":{},"54":{},"58":{},"60":{},"61":{},"62":{},"69":{},"77":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["s3.example.com",{"_index":711,"title":{},"name":{},"text":{"10":{},"22":{}},"component":{}}],["s3.stackable.tech/v1alpha1",{"_index":710,"title":{},"name":{},"text":{"10":{},"22":{},"131":{},"138":{},"145":{},"151":{},"160":{},"230":{},"239":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["s3.west.provider.com",{"_index":1296,"title":{},"name":{},"text":{"22":{}},"component":{}}],["s3.yaml",{"_index":3633,"title":{},"name":{},"text":{"230":{},"239":{}},"component":{}}],["s3a",{"_index":2218,"title":{},"name":{},"text":{"45":{}},"component":{}}],["s3a://demo/ni",{"_index":2761,"title":{},"name":{},"text":{"62":{}},"component":{}}],["s3a://iri",{"_index":4018,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["s3a://iris/parq",{"_index":4025,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["s3a://mi",{"_index":3891,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["s3a://nyc",{"_index":3852,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["s3a://stack",{"_index":3847,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["s3bucket",{"_index":702,"title":{"10-1":{},"22-1":{},"39-6":{},"39-7":{}},"name":{},"text":{"10":{},"22":{},"39":{},"131":{},"138":{},"145":{},"151":{},"160":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["s3bucket(",{"_index":714,"title":{},"name":{},"text":{"10":{}},"component":{}}],["s3bucketdef",{"_index":2197,"title":{},"name":{},"text":{"45":{}},"component":{}}],["s3cmd",{"_index":2754,"title":{},"name":{},"text":{"62":{}},"component":{}}],["s3connect",{"_index":701,"title":{"10-1":{},"22-3":{},"39-6":{},"39-9":{},"39-11":{},"230-2":{},"239-2":{}},"name":{},"text":{"10":{},"22":{},"39":{},"45":{},"131":{},"138":{},"145":{},"151":{},"160":{},"230":{},"239":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["s3connection(",{"_index":715,"title":{},"name":{},"text":{"10":{}},"component":{}}],["s3connectiondef",{"_index":2127,"title":{},"name":{},"text":{"42":{}},"component":{}}],["s3connectionrefer",{"_index":1982,"title":{},"name":{},"text":{"39":{}},"component":{}}],["s3connectionreference::extern",{"_index":1991,"title":{},"name":{},"text":{"39":{}},"component":{}}],["s3connectionreference::inlin",{"_index":1990,"title":{},"name":{},"text":{"39":{}},"component":{}}],["s3credenti",{"_index":1984,"title":{},"name":{},"text":{"39":{}},"component":{}}],["safe",{"_index":2968,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"380":{},"388":{},"408":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["safeti",{"_index":1465,"title":{},"name":{},"text":{"28":{}},"component":{}}],["sake",{"_index":3453,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["sale",{"_index":2673,"title":{},"name":{},"text":{"62":{}},"component":{}}],["same",{"_index":335,"title":{"42-6":{}},"name":{},"text":{"3":{},"5":{},"8":{},"10":{},"11":{},"16":{},"22":{},"23":{},"26":{},"31":{},"33":{},"34":{},"36":{},"37":{},"39":{},"42":{},"43":{},"45":{},"49":{},"51":{},"52":{},"60":{},"61":{},"63":{},"68":{},"71":{},"76":{},"85":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"219":{},"223":{},"226":{},"229":{},"235":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"286":{},"294":{},"301":{},"311":{},"319":{},"330":{},"331":{},"332":{},"338":{},"339":{},"340":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"363":{},"364":{},"365":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"415":{},"426":{},"427":{},"434":{},"435":{},"436":{},"445":{},"446":{},"447":{}},"component":{}}],["sampl",{"_index":2551,"title":{"61-4":{}},"name":{},"text":{"102":{},"108":{},"131":{},"138":{},"145":{},"151":{},"160":{},"381":{},"389":{}},"component":{}}],["san",{"_index":2863,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["sander",{"_index":1621,"title":{},"name":{},"text":{"32":{},"40":{},"41":{},"42":{},"43":{}},"component":{}}],["satisfact",{"_index":2249,"title":{},"name":{},"text":{"48":{}},"component":{}}],["save",{"_index":1531,"title":{},"name":{},"text":{"30":{},"31":{},"60":{},"61":{}},"component":{}}],["sbernauer",{"_index":2163,"title":{},"name":{},"text":{"44":{}},"component":{}}],["sc",{"_index":2260,"title":{},"name":{},"text":{"48":{}},"component":{}}],["scala",{"_index":3880,"title":{"332-5":{},"332-6":{},"332-7":{},"340-5":{},"340-6":{},"340-7":{},"348-5":{},"348-6":{},"348-7":{},"355-4":{},"355-5":{},"355-6":{},"365-4":{},"365-5":{},"365-6":{}},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{}},"component":{}}],["scalabl",{"_index":276,"title":{},"name":{},"text":{"2":{}},"component":{}}],["scale",{"_index":219,"title":{},"name":{},"text":{"2":{},"32":{},"33":{},"196":{},"203":{},"213":{}},"component":{}}],["scenario",{"_index":786,"title":{"41-14":{}},"name":{},"text":{"11":{},"32":{},"38":{},"41":{}},"component":{}}],["schedul",{"_index":600,"title":{"9-3":{}},"name":{},"text":{"8":{},"9":{},"36":{},"43":{},"58":{},"67":{},"75":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"286":{},"294":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["schedule_interval='0",{"_index":2996,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["schema",{"_index":529,"title":{"396-13":{},"402-13":{},"407-16":{},"415-16":{}},"name":{},"text":{"7":{},"14":{},"16":{},"37":{},"39":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["scienc",{"_index":300,"title":{},"name":{},"text":{"2":{}},"component":{}}],["scope",{"_index":1644,"title":{"84":{},"93":{},"84-1":{},"93-1":{}},"name":{"84":{},"93":{}},"text":{"32":{},"37":{},"39":{},"44":{},"45":{},"63":{},"71":{},"84":{},"85":{},"87":{},"93":{},"94":{},"96":{}},"component":{}}],["scope_valu",{"_index":2880,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["scram",{"_index":3617,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["scrape",{"_index":1241,"title":{},"name":{},"text":{"19":{}},"component":{}}],["scratch",{"_index":1518,"title":{"30-10":{}},"name":{},"text":{"30":{},"33":{}},"component":{}}],["screen",{"_index":168,"title":{},"name":{},"text":{"1":{},"114":{},"122":{}},"component":{}}],["script",{"_index":319,"title":{},"name":{},"text":{"3":{},"13":{},"15":{},"16":{},"39":{},"44":{},"51":{},"62":{},"79":{},"88":{},"176":{},"185":{},"356":{},"366":{}},"component":{}}],["scripts/run_tests.sh",{"_index":1131,"title":{},"name":{},"text":{"16":{}},"component":{}}],["sdk",{"_index":3861,"title":{},"name":{},"text":{"330":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["seamless",{"_index":445,"title":{},"name":{},"text":{"5":{}},"component":{}}],["search",{"_index":1413,"title":{},"name":{},"text":{"26":{},"54":{},"58":{},"63":{},"71":{},"85":{},"94":{},"176":{},"185":{}},"component":{}}],["searchbas",{"_index":2777,"title":{},"name":{},"text":{"63":{},"71":{},"285":{},"293":{}},"component":{}}],["searchfilt",{"_index":2783,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["searchnamespac",{"_index":755,"title":{},"name":{},"text":{"10":{},"22":{},"63":{},"71":{},"85":{},"94":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"285":{},"293":{},"407":{},"415":{}},"component":{}}],["sebastian",{"_index":1883,"title":{},"name":{},"text":{"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["sec(",{"_index":3493,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["second",{"_index":1213,"title":{},"name":{},"text":{"17":{},"39":{},"48":{},"177":{},"186":{},"204":{},"214":{},"380":{},"388":{}},"component":{}}],["secondari",{"_index":2030,"title":{},"name":{},"text":{"40":{}},"component":{}}],["secret",{"_index":176,"title":{"38":{},"82":{},"91":{},"23-5":{},"35-6":{},"35-8":{},"102-2":{},"108-2":{},"114-2":{},"122-2":{},"374-2":{},"380-2":{},"388-2":{}},"name":{},"text":{"1":{},"5":{},"10":{},"12":{},"16":{},"18":{},"22":{},"23":{},"35":{},"37":{},"38":{},"40":{},"46":{},"52":{},"54":{},"55":{},"56":{},"58":{},"63":{},"68":{},"69":{},"71":{},"76":{},"77":{},"79":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"154":{},"160":{},"163":{},"179":{},"188":{},"206":{},"216":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"258":{},"261":{},"269":{},"272":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"286":{},"288":{},"290":{},"293":{},"294":{},"296":{},"332":{},"340":{},"348":{},"355":{},"358":{},"365":{},"368":{},"373":{},"374":{},"380":{},"382":{},"388":{},"390":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"410":{},"415":{},"416":{},"418":{},"426":{},"434":{},"438":{},"445":{},"449":{}},"component":{"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{}}}],["secret=0.5.0",{"_index":2407,"title":{},"name":{},"text":{"55":{}},"component":{}}],["secret=0.6.0",{"_index":3260,"title":{},"name":{},"text":{"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"288":{},"296":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{}}],["secret_access_key",{"_index":3303,"title":{},"name":{},"text":{"131":{},"138":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["secretclass",{"_index":746,"title":{"85":{},"94":{}},"name":{"85":{},"94":{}},"text":{"10":{},"22":{},"37":{},"39":{},"40":{},"45":{},"63":{},"69":{},"71":{},"77":{},"85":{},"86":{},"87":{},"94":{},"95":{},"96":{},"131":{},"138":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"258":{},"269":{},"285":{},"293":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["secretkey",{"_index":751,"title":{},"name":{},"text":{"10":{},"22":{},"45":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["secrets.stackable.tech",{"_index":2889,"title":{},"name":{},"text":{"86":{},"87":{},"95":{},"96":{}},"component":{}}],["secrets.stackable.tech/$scop",{"_index":2879,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["secrets.stackable.tech/class",{"_index":747,"title":{"87-2":{},"96-2":{}},"name":{},"text":{"10":{},"22":{},"63":{},"71":{},"86":{},"87":{},"95":{},"96":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"285":{},"293":{},"407":{},"415":{}},"component":{}}],["secrets.stackable.tech/pod",{"_index":2882,"title":{},"name":{},"text":{"85":{},"94":{}},"component":{}}],["secrets.stackable.tech/scop",{"_index":2892,"title":{"87-3":{},"96-3":{}},"name":{},"text":{"86":{},"87":{},"95":{},"96":{}},"component":{}}],["secrets.stackable.tech/v1alpha1",{"_index":753,"title":{},"name":{},"text":{"10":{},"22":{},"40":{},"63":{},"71":{},"85":{},"86":{},"94":{},"95":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"258":{},"269":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["section",{"_index":455,"title":{"40-8":{}},"name":{},"text":{"6":{},"7":{},"8":{},"11":{},"15":{},"18":{},"22":{},"23":{},"24":{},"37":{},"40":{},"45":{},"46":{},"59":{},"60":{},"61":{},"62":{},"69":{},"70":{},"77":{},"78":{},"84":{},"93":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"230":{},"238":{},"239":{},"259":{},"270":{},"274":{},"275":{},"285":{},"286":{},"293":{},"294":{},"303":{},"314":{},"321":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"387":{},"408":{},"416":{}},"component":{}}],["secur",{"_index":62,"title":{"396-10":{},"402-10":{},"407-10":{},"415-10":{}},"name":{},"text":{"1":{},"2":{},"14":{},"23":{},"28":{},"30":{},"31":{},"34":{},"36":{},"40":{},"51":{},"62":{},"102":{},"108":{},"114":{},"122":{},"196":{},"203":{},"213":{},"331":{},"339":{},"347":{},"354":{},"364":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["secureclientport",{"_index":4097,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["securitycontext",{"_index":3051,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["see",{"_index":166,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"11":{},"12":{},"13":{},"14":{},"16":{},"19":{},"22":{},"23":{},"26":{},"28":{},"30":{},"32":{},"36":{},"38":{},"45":{},"48":{},"51":{},"53":{},"55":{},"56":{},"60":{},"61":{},"62":{},"63":{},"71":{},"83":{},"92":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"185":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"286":{},"293":{},"294":{},"303":{},"304":{},"314":{},"321":{},"322":{},"329":{},"332":{},"337":{},"340":{},"345":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"440":{},"441":{},"445":{},"446":{},"447":{}},"component":{}}],["seem",{"_index":1194,"title":{},"name":{},"text":{"16":{},"34":{},"36":{}},"component":{}}],["seen",{"_index":1656,"title":{},"name":{},"text":{"33":{},"34":{}},"component":{}}],["segment",{"_index":2521,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["segmentgranular",{"_index":3361,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["select",{"_index":539,"title":{"8-2":{},"113-17":{},"121-17":{}},"name":{},"text":{"8":{},"16":{},"30":{},"32":{},"41":{},"60":{},"61":{},"62":{},"84":{},"85":{},"87":{},"93":{},"94":{},"96":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["selector",{"_index":631,"title":{"43-10":{}},"name":{},"text":{"8":{},"9":{},"19":{},"32":{},"43":{},"113":{},"121":{},"152":{},"161":{},"170":{},"176":{},"185":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"230":{},"238":{},"239":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"304":{},"314":{},"321":{},"322":{},"396":{},"402":{},"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["selector_support",{"_index":1619,"title":{},"name":{"32":{}},"text":{},"component":{}}],["self",{"_index":2666,"title":{},"name":{},"text":{"62":{},"113":{},"121":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["self._log_driver(application_st",{"_index":3200,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.api_group",{"_index":3137,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.api_vers",{"_index":3138,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.application_fil",{"_index":3134,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.application_nam",{"_index":3161,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.attach_log",{"_index":3162,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.failure_st",{"_index":3178,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.hook",{"_index":3163,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.hook.get_custom_object",{"_index":3193,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.hook.get_pod_logs(driver_pod_nam",{"_index":3180,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.kubernetes_conn_id",{"_index":3136,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.log.debug(f\"sparkappl",{"_index":3198,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.log.error",{"_index":3177,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.log.info",{"_index":3179,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.log.info(\"cr",{"_index":3143,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.log.info(\"pok",{"_index":3192,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.log.info(\"sparkappl",{"_index":3204,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.log.warn",{"_index":3186,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.namespac",{"_index":3135,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.plur",{"_index":3139,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.poke_interv",{"_index":3164,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["self.success_st",{"_index":3199,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["semant",{"_index":1145,"title":{},"name":{},"text":{"16":{}},"component":{}}],["semver",{"_index":2050,"title":{"41-12":{},"41-19":{},"41-20":{}},"name":{},"text":{"41":{}},"component":{}}],["send",{"_index":1307,"title":{},"name":{},"text":{"23":{},"60":{},"61":{},"204":{},"214":{},"407":{},"415":{}},"component":{}}],["sens",{"_index":682,"title":{},"name":{},"text":{"9":{},"10":{},"16":{},"34":{},"48":{},"49":{}},"component":{}}],["sensit",{"_index":1942,"title":{},"name":{},"text":{"38":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{}},"component":{}}],["sensitiveproperti",{"_index":3743,"title":{},"name":{},"text":{"280":{},"285":{},"286":{},"293":{},"294":{}},"component":{}}],["sensitivepropertykeysecret",{"_index":3717,"title":{},"name":{},"text":{"274":{},"275":{},"282":{},"285":{},"290":{},"293":{}},"component":{}}],["sensor",{"_index":3154,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["sent",{"_index":4074,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["sentenc",{"_index":1226,"title":{},"name":{},"text":{"17":{}},"component":{}}],["sepal_length",{"_index":4020,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["sepal_width",{"_index":4021,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["separ",{"_index":723,"title":{"40-8":{}},"name":{},"text":{"10":{},"26":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"48":{},"50":{},"87":{},"96":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"176":{},"185":{},"286":{},"294":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{},"422":{},"431":{},"442":{}},"component":{}}],["septemb",{"_index":1840,"title":{},"name":{},"text":{"36":{}},"component":{}}],["sequenc",{"_index":3104,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["sequence[str",{"_index":3122,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["sequentialexecutor",{"_index":2975,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["serde(rename_al",{"_index":1024,"title":{},"name":{},"text":{"14":{}},"component":{}}],["seri",{"_index":1334,"title":{},"name":{},"text":{"23":{},"24":{},"102":{},"108":{},"114":{},"122":{}},"component":{}}],["serial",{"_index":1023,"title":{},"name":{},"text":{"14":{},"85":{},"94":{},"301":{},"311":{},"319":{}},"component":{}}],["serv",{"_index":1320,"title":{},"name":{},"text":{"23":{},"41":{},"301":{},"311":{},"319":{}},"component":{}}],["server",{"_index":655,"title":{"45":{},"40-8":{},"45-3":{},"45-4":{},"69-3":{},"77-3":{}},"name":{"45":{}},"text":{"9":{},"10":{},"11":{},"28":{},"29":{},"30":{},"33":{},"34":{},"35":{},"39":{},"40":{},"45":{},"46":{},"48":{},"63":{},"69":{},"71":{},"77":{},"113":{},"121":{},"152":{},"161":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"259":{},"269":{},"270":{},"285":{},"286":{},"293":{},"294":{},"302":{},"303":{},"304":{},"312":{},"314":{},"320":{},"321":{},"322":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"436":{},"440":{},"441":{},"445":{},"447":{}},"component":{}}],["server.https.port",{"_index":4053,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["server.properti",{"_index":3676,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["servic",{"_index":13,"title":{"11":{},"15":{},"32":{},"57":{},"1-11":{},"11-3":{},"11-4":{},"11-5":{},"11-6":{},"14-5":{},"15-2":{},"15-3":{},"34-11":{},"35-8":{},"36-7":{},"54-5":{},"57-1":{},"58-5":{},"60-1":{},"61-1":{},"62-1":{},"84-4":{},"93-4":{},"131-11":{},"138-11":{},"145-12":{},"151-13":{},"160-13":{}},"name":{"57":{}},"text":{"1":{},"2":{},"5":{},"7":{},"11":{},"14":{},"15":{},"19":{},"23":{},"29":{},"32":{},"34":{},"35":{},"36":{},"37":{},"40":{},"42":{},"46":{},"50":{},"52":{},"53":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"69":{},"71":{},"77":{},"84":{},"85":{},"87":{},"93":{},"94":{},"96":{},"101":{},"107":{},"127":{},"130":{},"131":{},"134":{},"137":{},"138":{},"141":{},"144":{},"145":{},"148":{},"151":{},"154":{},"157":{},"160":{},"163":{},"169":{},"193":{},"195":{},"201":{},"211":{},"219":{},"222":{},"226":{},"232":{},"235":{},"241":{},"246":{},"249":{},"255":{},"261":{},"266":{},"272":{},"279":{},"286":{},"288":{},"294":{},"296":{},"301":{},"304":{},"306":{},"311":{},"313":{},"319":{},"322":{},"324":{},"329":{},"331":{},"337":{},"339":{},"345":{},"347":{},"354":{},"364":{},"373":{},"382":{},"390":{},"395":{},"401":{},"410":{},"418":{},"425":{}},"component":{}}],["service.mi",{"_index":2867,"title":{},"name":{},"text":{"84":{},"93":{}},"component":{}}],["service.type=nodeport,service.nodeport=nul",{"_index":3657,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["service/minio",{"_index":3613,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["service/simpl",{"_index":3970,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["service_discoveri",{"_index":757,"title":{},"name":{"11":{},"15":{}},"text":{},"component":{}}],["serviceconfig",{"_index":1703,"title":{},"name":{},"text":{"34":{}},"component":{}}],["servicelog",{"_index":1705,"title":{},"name":{},"text":{"34":{}},"component":{}}],["servicemonitor",{"_index":1239,"title":{},"name":{},"text":{"19":{}},"component":{}}],["servicenam",{"_index":3558,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["session",{"_index":2325,"title":{},"name":{},"text":{"51":{},"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["set",{"_index":518,"title":{"23":{},"23-14":{},"23-24":{},"23-26":{},"23-29":{}},"name":{},"text":{"7":{},"9":{},"15":{},"16":{},"23":{},"26":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"67":{},"68":{},"69":{},"75":{},"76":{},"77":{},"79":{},"85":{},"87":{},"88":{},"94":{},"96":{},"102":{},"108":{},"113":{},"114":{},"115":{},"116":{},"121":{},"122":{},"123":{},"124":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{},"170":{},"176":{},"177":{},"178":{},"179":{},"185":{},"186":{},"187":{},"188":{},"193":{},"196":{},"201":{},"203":{},"204":{},"205":{},"206":{},"211":{},"213":{},"214":{},"215":{},"216":{},"223":{},"229":{},"231":{},"232":{},"238":{},"240":{},"241":{},"250":{},"258":{},"260":{},"261":{},"269":{},"271":{},"272":{},"274":{},"275":{},"280":{},"282":{},"285":{},"287":{},"288":{},"290":{},"293":{},"295":{},"296":{},"304":{},"305":{},"322":{},"323":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"374":{},"379":{},"380":{},"381":{},"387":{},"388":{},"389":{},"396":{},"402":{},"407":{},"408":{},"409":{},"410":{},"415":{},"416":{},"417":{},"418":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"436":{},"437":{},"438":{},"440":{},"441":{},"445":{},"447":{},"448":{},"449":{}},"component":{}}],["setosa",{"_index":4027,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["settl",{"_index":2345,"title":{},"name":{},"text":{"52":{},"54":{}},"component":{}}],["setup",{"_index":310,"title":{"3-1":{},"114-1":{},"122-1":{},"131-1":{},"138-1":{},"145-1":{},"151-1":{},"152-1":{},"160-1":{},"161-1":{},"177-1":{},"186-1":{},"204-1":{},"214-1":{},"230-1":{},"239-1":{},"259-1":{},"270-1":{},"286-1":{},"294-1":{},"408-1":{},"416-1":{}},"name":{},"text":{"44":{},"49":{},"102":{},"108":{}},"component":{}}],["sever",{"_index":544,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"14":{},"60":{},"113":{},"121":{},"127":{},"134":{},"141":{},"148":{},"157":{},"177":{},"186":{},"230":{},"239":{},"356":{},"366":{}},"component":{}}],["sha",{"_index":3618,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["shade",{"_index":1536,"title":{},"name":{},"text":{"30":{}},"component":{}}],["shape",{"_index":931,"title":{},"name":{},"text":{"13":{}},"component":{}}],["share",{"_index":1324,"title":{"243-3":{},"244-9":{},"252-3":{},"253-9":{},"263-3":{},"264-9":{}},"name":{},"text":{"23":{},"37":{},"39":{},"41":{},"45":{},"49":{},"57":{},"131":{},"138":{},"145":{},"151":{},"160":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["shell",{"_index":1043,"title":{},"name":{},"text":{"15":{},"23":{},"38":{},"51":{}},"component":{}}],["ship",{"_index":2278,"title":{},"name":{},"text":{"50":{},"51":{},"223":{},"229":{},"238":{}},"component":{}}],["shop",{"_index":2614,"title":{},"name":{},"text":{"61":{}},"component":{}}],["short",{"_index":312,"title":{},"name":{},"text":{"3":{},"30":{},"35":{}},"component":{}}],["shortnam",{"_index":2580,"title":{},"name":{},"text":{"61":{}},"component":{}}],["shot",{"_index":1625,"title":{"33":{}},"name":{},"text":{"32":{},"46":{}},"component":{}}],["show",{"_index":722,"title":{"61-4":{}},"name":{},"text":{"10":{},"13":{},"14":{},"16":{},"23":{},"30":{},"36":{},"41":{},"44":{},"45":{},"49":{},"50":{},"52":{},"57":{},"60":{},"61":{},"62":{},"63":{},"71":{},"113":{},"114":{},"116":{},"121":{},"122":{},"124":{},"152":{},"154":{},"161":{},"163":{},"179":{},"188":{},"206":{},"216":{},"230":{},"232":{},"239":{},"241":{},"259":{},"261":{},"270":{},"272":{},"274":{},"275":{},"282":{},"285":{},"286":{},"288":{},"290":{},"293":{},"294":{},"296":{},"306":{},"324":{},"329":{},"337":{},"345":{},"358":{},"368":{},"382":{},"390":{},"408":{},"410":{},"416":{},"418":{},"438":{},"449":{}},"component":{}}],["shown",{"_index":640,"title":{},"name":{},"text":{"8":{},"41":{},"44":{},"45":{},"55":{},"57":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"232":{},"238":{},"241":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["side",{"_index":2017,"title":{"40-8":{}},"name":{},"text":{"40":{},"60":{},"61":{},"176":{},"185":{},"303":{},"314":{},"321":{}},"component":{}}],["sidecar",{"_index":3547,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["siegfri",{"_index":1959,"title":{},"name":{},"text":{"39":{},"41":{}},"component":{}}],["sign",{"_index":2667,"title":{},"name":{},"text":{"62":{},"85":{},"87":{},"94":{},"96":{},"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{},"396":{},"402":{}},"component":{}}],["signific",{"_index":1544,"title":{},"name":{},"text":{"30":{}},"component":{}}],["significantli",{"_index":4061,"title":{},"name":{},"text":{"407":{},"415":{}},"component":{}}],["similar",{"_index":582,"title":{},"name":{},"text":{"8":{},"15":{},"30":{},"32":{},"39":{},"42":{},"43":{},"47":{},"49":{},"102":{},"108":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"374":{},"379":{},"387":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["similarli",{"_index":719,"title":{},"name":{},"text":{"10":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["simpl",{"_index":81,"title":{},"name":{},"text":{"1":{},"7":{},"9":{},"10":{},"11":{},"14":{},"15":{},"23":{},"33":{},"37":{},"38":{},"39":{},"40":{},"42":{},"47":{},"63":{},"69":{},"71":{},"77":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"223":{},"229":{},"238":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"299":{},"303":{},"304":{},"309":{},"314":{},"317":{},"321":{},"322":{},"358":{},"368":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"436":{},"440":{},"441":{},"445":{},"447":{}},"component":{}}],["simpler",{"_index":1428,"title":{},"name":{},"text":{"26":{},"38":{},"61":{},"232":{},"241":{}},"component":{}}],["simplest",{"_index":2070,"title":{},"name":{},"text":{"41":{},"279":{},"408":{},"416":{}},"component":{}}],["simpli",{"_index":107,"title":{},"name":{},"text":{"1":{},"30":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"51":{},"52":{},"60":{},"61":{},"62":{},"102":{},"108":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"356":{},"366":{},"374":{},"380":{},"388":{},"426":{},"434":{},"445":{}},"component":{}}],["singl",{"_index":122,"title":{"26-8":{},"285-2":{},"285-5":{},"293-2":{},"293-5":{}},"name":{},"text":{"1":{},"2":{},"7":{},"8":{},"9":{},"10":{},"26":{},"28":{},"32":{},"33":{},"36":{},"37":{},"39":{},"43":{},"45":{},"49":{},"56":{},"61":{},"85":{},"94":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"177":{},"186":{},"223":{},"229":{},"238":{},"274":{},"275":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"301":{},"303":{},"311":{},"314":{},"319":{},"321":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["singleus",{"_index":3714,"title":{},"name":{},"text":{"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{}},"component":{}}],["site.xml",{"_index":784,"title":{},"name":{},"text":{"11":{},"42":{},"151":{},"160":{},"166":{},"170":{},"173":{},"176":{},"182":{},"185":{},"191":{},"193":{},"196":{},"199":{},"201":{},"203":{},"209":{},"211":{},"213":{},"223":{},"229":{},"238":{}},"component":{}}],["siwicki",{"_index":2142,"title":{},"name":{},"text":{"44":{}},"component":{}}],["size",{"_index":556,"title":{},"name":{},"text":{"8":{},"47":{},"61":{},"62":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["skew",{"_index":1792,"title":{},"name":{},"text":{"36":{}},"component":{}}],["skip",{"_index":945,"title":{},"name":{},"text":{"13":{},"16":{}},"component":{}}],["slack",{"_index":396,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sleep",{"_index":3014,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["slice",{"_index":3958,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["slowli",{"_index":1857,"title":{},"name":{},"text":{"36":{}},"component":{}}],["small",{"_index":921,"title":{},"name":{},"text":{"12":{},"25":{},"44":{},"48":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["smaller",{"_index":1403,"title":{},"name":{},"text":{"26":{}},"component":{}}],["sn",{"_index":2789,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["snapshot.jar",{"_index":3850,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["snippet",{"_index":1044,"title":{},"name":{},"text":{"15":{},"17":{},"44":{},"45":{},"274":{},"275":{},"285":{},"293":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["socket",{"_index":2855,"title":{},"name":{},"text":{"80":{},"81":{},"89":{},"90":{}},"component":{}}],["soft",{"_index":594,"title":{},"name":{},"text":{"8":{}},"component":{}}],["softwar",{"_index":263,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"9":{},"11":{},"12":{},"14":{},"27":{},"30":{},"32":{},"34":{},"36":{},"113":{},"121":{}},"component":{}}],["sole",{"_index":897,"title":{},"name":{},"text":{"12":{}},"component":{}}],["solomon",{"_index":2480,"title":{},"name":{},"text":{"60":{}},"component":{}}],["solut",{"_index":1488,"title":{},"name":{},"text":{"29":{},"30":{},"34":{},"39":{},"43":{},"44":{},"45":{},"48":{},"61":{}},"component":{}}],["solv",{"_index":936,"title":{},"name":{},"text":{"13":{},"30":{},"39":{},"42":{},"84":{},"93":{}},"component":{}}],["some(\"product",{"_index":1106,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some(configmap_name.to_str",{"_index":1076,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some(configmapkeyselector",{"_index":1075,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some(conn",{"_index":1986,"title":{},"name":{},"text":{"39":{}},"component":{}}],["some(envvarsourc",{"_index":1073,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some(tru",{"_index":1058,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some_str",{"_index":3763,"title":{},"name":{},"text":{"285":{},"293":{}},"component":{}}],["somehow",{"_index":1571,"title":{},"name":{},"text":{"30":{},"33":{},"38":{},"42":{},"43":{}},"component":{}}],["someon",{"_index":1438,"title":{},"name":{},"text":{"27":{},"39":{}},"component":{}}],["someth",{"_index":313,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"28":{},"32":{},"37":{},"40":{},"44":{},"62":{},"114":{},"122":{},"204":{},"214":{},"286":{},"294":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["sometim",{"_index":1627,"title":{},"name":{},"text":{"32":{},"436":{},"447":{}},"component":{}}],["someusernam",{"_index":3306,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["soon",{"_index":939,"title":{},"name":{},"text":{"13":{}},"component":{}}],["sort",{"_index":1604,"title":{},"name":{},"text":{"31":{},"33":{}},"component":{}}],["sourc",{"_index":234,"title":{"51-5":{},"60-5":{},"61-7":{},"66-2":{},"74-2":{},"83-2":{},"92-2":{},"101-3":{},"107-3":{},"130-3":{},"137-3":{},"144-3":{},"169-3":{},"195-2":{},"222-3":{},"249-3":{},"279-3":{},"303-1":{},"313-3":{},"314-1":{},"321-1":{},"329-2":{},"337-2":{},"345-2":{},"373-3":{},"395-3":{},"401-3":{},"425-3":{}},"name":{},"text":{"2":{},"7":{},"12":{},"13":{},"14":{},"16":{},"26":{},"42":{},"43":{},"48":{},"51":{},"60":{},"61":{},"62":{},"66":{},"74":{},"83":{},"92":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"195":{},"222":{},"249":{},"279":{},"313":{},"329":{},"337":{},"345":{},"373":{},"395":{},"401":{},"408":{},"416":{},"425":{}},"component":{}}],["span",{"_index":675,"title":{},"name":{},"text":{"9":{}},"component":{}}],["spark",{"_index":201,"title":{"45":{},"328":{},"336":{},"344":{},"352":{},"362":{},"2-11":{},"8-6":{},"20-9":{},"330-5":{},"332-1":{},"338-5":{},"340-1":{},"346-5":{},"348-1":{},"353-5":{},"356-1":{},"363-5":{},"366-1":{}},"name":{"45":{}},"text":{"2":{},"5":{},"8":{},"10":{},"12":{},"18":{},"31":{},"32":{},"33":{},"45":{},"46":{},"52":{},"54":{},"55":{},"56":{},"58":{},"113":{},"121":{},"274":{},"275":{},"285":{},"293":{},"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"331":{},"332":{},"333":{},"334":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"343":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{},"353":{},"354":{},"355":{},"356":{},"357":{},"358":{},"359":{},"360":{},"361":{},"362":{},"363":{},"364":{},"365":{},"366":{},"367":{},"368":{}},"component":{"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"331":{},"332":{},"333":{},"334":{},"335":{},"336":{},"337":{},"338":{},"339":{},"340":{},"341":{},"342":{},"343":{},"344":{},"345":{},"346":{},"347":{},"348":{},"349":{},"350":{},"351":{},"352":{},"353":{},"354":{},"355":{},"356":{},"357":{},"358":{},"359":{},"360":{},"361":{},"362":{},"363":{},"364":{},"365":{},"366":{},"367":{},"368":{}}}],["spark.driver.extraclasspath",{"_index":3858,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["spark.eventlog.dir",{"_index":2217,"title":{},"name":{},"text":{"45":{}},"component":{}}],["spark.eventlog.en",{"_index":2216,"title":{},"name":{},"text":{"45":{}},"component":{}}],["spark.executor.extraclasspath",{"_index":3863,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["spark.hadoop.fs.s3a.aws.credentials.provid",{"_index":3856,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["spark.hadoop.fs.s3a.path.style.access",{"_index":3894,"title":{},"name":{},"text":{"332":{}},"component":{}}],["spark.history.fs.cleaner.enabled=tru",{"_index":2209,"title":{},"name":{},"text":{"45":{}},"component":{}}],["spark.stackable.tech",{"_index":3074,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["spark.stackable.tech/v1alpha1",{"_index":2201,"title":{},"name":{},"text":{"45":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["spark_pi_monitor",{"_index":3215,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["sparkapp",{"_index":3846,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["sparkappl",{"_index":647,"title":{"113-20":{},"121-20":{}},"name":{},"text":{"8":{},"45":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"358":{},"363":{},"365":{},"366":{},"368":{}},"component":{}}],["sparkapplication`",{"_index":2192,"title":{},"name":{},"text":{"45":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["sparkconf",{"_index":2203,"title":{},"name":{},"text":{"45":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["sparkhistoryserv",{"_index":2202,"title":{},"name":{},"text":{"45":{}},"component":{}}],["sparkimag",{"_index":2211,"title":{},"name":{},"text":{"45":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{}},"component":{}}],["sparkkubernetesoper",{"_index":3093,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["sparkkubernetesoperator(baseoper",{"_index":3114,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["sparkkubernetessensor",{"_index":3094,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["sparkkubernetessensor(basesensoroper",{"_index":3150,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["speak",{"_index":1400,"title":{},"name":{},"text":{"25":{},"34":{}},"component":{}}],["spec",{"_index":532,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"19":{},"22":{},"33":{},"37":{},"38":{},"40":{},"42":{},"45":{},"63":{},"71":{},"85":{},"86":{},"87":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"191":{},"196":{},"199":{},"203":{},"204":{},"209":{},"213":{},"214":{},"219":{},"223":{},"226":{},"229":{},"230":{},"235":{},"238":{},"239":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"263":{},"264":{},"266":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"299":{},"303":{},"304":{},"309":{},"314":{},"317":{},"321":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"440":{},"441":{},"445":{},"446":{},"447":{}},"component":{}}],["spec.\\n",{"_index":3190,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["spec.arg",{"_index":3908,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.config.clientauthentication.authenticationclass",{"_index":4116,"title":{},"name":{},"text":{"434":{},"445":{}},"component":{}}],["spec.config.tls.secretclass",{"_index":4115,"title":{},"name":{},"text":{"434":{},"445":{}},"component":{}}],["spec.credentialssecret",{"_index":3225,"title":{},"name":{},"text":{"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["spec.deps.excludepackag",{"_index":3914,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.deps.packag",{"_index":3913,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.deps.repositori",{"_index":3915,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.deps.requir",{"_index":3912,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.driv",{"_index":3939,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["spec.driver.cor",{"_index":3919,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.driver.corelimit",{"_index":3920,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.driver.memori",{"_index":3921,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.driver.nodeselector",{"_index":3925,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.driver.volumemount",{"_index":3922,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.driver.volumemounts.mountpath",{"_index":3924,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.driver.volumemounts.nam",{"_index":3923,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.druid",{"_index":3974,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["spec.executor",{"_index":2973,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"356":{},"366":{}},"component":{}}],["spec.executor.cor",{"_index":3929,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.executor.inst",{"_index":3930,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{}},"component":{}}],["spec.executor.memori",{"_index":3931,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.executor.nodeselector",{"_index":3935,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.executor.volumemount",{"_index":3932,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.executor.volumemounts.mountpath",{"_index":3934,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.executor.volumemounts.nam",{"_index":3933,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.exposeconfig",{"_index":3223,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["spec.imag",{"_index":3901,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.loadexampl",{"_index":3222,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["spec.loadexamplesoninit",{"_index":3967,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["spec.mainapplicationfil",{"_index":3906,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{}},"component":{}}],["spec.mainclass",{"_index":3907,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.mod",{"_index":3900,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{}},"component":{}}],["spec.s3bucket",{"_index":3909,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.sparkconf",{"_index":3910,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.sparkimag",{"_index":3902,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{}},"component":{}}],["spec.sparkimagepullpolici",{"_index":3903,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.sparkimagepullsecret",{"_index":3905,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.statsdexportervers",{"_index":2971,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["spec.superset",{"_index":3973,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["spec.vers",{"_index":2970,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"177":{},"186":{},"204":{},"214":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"374":{},"380":{},"388":{}},"component":{}}],["spec.volum",{"_index":3916,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.volumes.nam",{"_index":3917,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec.volumes.persistentvolumeclaim.claimnam",{"_index":3918,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["spec/properties.yaml",{"_index":2905,"title":{},"name":{},"text":{"97":{},"98":{},"99":{},"103":{},"104":{},"105":{},"109":{},"110":{},"111":{},"117":{},"118":{},"119":{},"125":{},"126":{},"128":{},"132":{},"133":{},"135":{},"139":{},"140":{},"142":{},"146":{},"147":{},"149":{},"155":{},"156":{},"158":{},"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"180":{},"181":{},"183":{},"189":{},"190":{},"192":{},"197":{},"198":{},"200":{},"207":{},"208":{},"210":{},"217":{},"218":{},"220":{},"224":{},"225":{},"227":{},"233":{},"234":{},"236":{},"242":{},"244":{},"247":{},"251":{},"253":{},"256":{},"262":{},"264":{},"267":{},"273":{},"275":{},"277":{},"281":{},"282":{},"289":{},"290":{},"297":{},"298":{},"300":{},"307":{},"308":{},"310":{},"315":{},"316":{},"318":{},"369":{},"370":{},"371":{},"375":{},"376":{},"377":{},"383":{},"384":{},"385":{},"391":{},"392":{},"393":{},"397":{},"398":{},"399":{},"403":{},"404":{},"405":{},"411":{},"412":{},"413":{},"419":{},"421":{},"423":{},"428":{},"430":{},"432":{},"439":{},"441":{},"443":{}},"component":{}}],["special",{"_index":2015,"title":{"40-6":{}},"name":{},"text":{"40":{},"41":{},"55":{}},"component":{}}],["specif",{"_index":382,"title":{"332-8":{},"340-8":{},"348-8":{},"355-7":{},"365-7":{},"396-11":{},"402-11":{},"407-14":{},"415-14":{}},"name":{},"text":{"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"17":{},"31":{},"35":{},"36":{},"38":{},"41":{},"44":{},"45":{},"50":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"69":{},"77":{},"84":{},"93":{},"102":{},"108":{},"113":{},"116":{},"121":{},"124":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"303":{},"314":{},"321":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"440":{},"441":{},"445":{},"446":{},"447":{}},"component":{}}],["specifi",{"_index":471,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"14":{},"16":{},"17":{},"22":{},"32":{},"34":{},"36":{},"37":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"49":{},"53":{},"55":{},"60":{},"61":{},"84":{},"85":{},"87":{},"93":{},"94":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"193":{},"196":{},"201":{},"203":{},"204":{},"211":{},"213":{},"214":{},"223":{},"229":{},"238":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"263":{},"264":{},"269":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"297":{},"298":{},"303":{},"307":{},"308":{},"314":{},"315":{},"316":{},"321":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["specifiy",{"_index":3541,"title":{},"name":{},"text":{"196":{},"203":{},"213":{}},"component":{}}],["speed",{"_index":1583,"title":{},"name":{},"text":{"30":{},"36":{}},"component":{}}],["spike",{"_index":1919,"title":{},"name":{},"text":{"37":{},"39":{}},"component":{}}],["spin",{"_index":386,"title":{},"name":{},"text":{"5":{},"41":{},"49":{},"50":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"102":{},"108":{},"131":{},"138":{},"145":{},"151":{},"160":{},"374":{},"380":{},"388":{}},"component":{}}],["split",{"_index":1318,"title":{"40-8":{}},"name":{},"text":{"23":{},"25":{},"26":{},"40":{},"48":{},"61":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["spread",{"_index":603,"title":{},"name":{},"text":{"8":{}},"component":{}}],["sqalchemi",{"_index":3310,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["sql",{"_index":287,"title":{"47-9":{},"60-10":{},"60-14":{},"61-12":{},"61-16":{},"62-6":{},"62-9":{},"131-4":{},"138-4":{},"145-4":{},"151-4":{},"160-4":{}},"name":{},"text":{"2":{},"23":{},"30":{},"47":{},"60":{},"61":{},"62":{},"102":{},"108":{},"114":{},"122":{},"127":{},"134":{},"141":{},"148":{},"157":{},"176":{},"177":{},"185":{},"186":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["sqlalchemi",{"_index":3276,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["sqlite",{"_index":2236,"title":{},"name":{},"text":{"47":{},"374":{},"379":{},"387":{}},"component":{}}],["sqlline",{"_index":3431,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["sqlline.pi",{"_index":3430,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["squash",{"_index":1442,"title":{},"name":{},"text":{"27":{}},"component":{}}],["srvr",{"_index":4101,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["srvr,ruok,isro",{"_index":4082,"title":{},"name":{},"text":{"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["ssd",{"_index":673,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ssl",{"_index":2023,"title":{},"name":{},"text":{"40":{}},"component":{}}],["stabil",{"_index":1797,"title":{},"name":{},"text":{"36":{}},"component":{}}],["stabl",{"_index":1310,"title":{"53-4":{}},"name":{},"text":{"23":{},"36":{},"41":{},"53":{},"55":{},"56":{},"66":{},"74":{},"79":{},"83":{},"85":{},"88":{},"92":{},"94":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"222":{},"249":{},"279":{},"313":{},"329":{},"337":{},"345":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["stable/index.yaml",{"_index":2353,"title":{},"name":{},"text":{"53":{}},"component":{}}],["stable/kafka",{"_index":1327,"title":{},"name":{},"text":{"23":{}},"component":{}}],["stable/nifi",{"_index":1332,"title":{},"name":{},"text":{"23":{}},"component":{}}],["stable/secret",{"_index":1323,"title":{},"name":{},"text":{"23":{}},"component":{}}],["stable/zookeep",{"_index":1325,"title":{},"name":{},"text":{"23":{}},"component":{}}],["stack",{"_index":262,"title":{"44":{},"58":{},"44-9":{},"44-10":{},"49-4":{},"49-6":{},"50-2":{},"54-6":{},"58-1":{},"58-2":{},"58-6":{}},"name":{"58":{}},"text":{"2":{},"11":{},"19":{},"29":{},"30":{},"38":{},"44":{},"46":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"58":{},"62":{},"232":{},"241":{}},"component":{}}],["stack.yaml",{"_index":3637,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["stackabelctl",{"_index":2292,"title":{},"name":{},"text":{"51":{}},"component":{}}],["stackabl",{"_index":9,"title":{"2":{},"5":{},"30":{},"34":{},"44":{},"65":{},"73":{},"82":{},"91":{},"100":{},"106":{},"112":{},"120":{},"129":{},"136":{},"143":{},"150":{},"159":{},"168":{},"175":{},"184":{},"194":{},"202":{},"212":{},"221":{},"228":{},"237":{},"248":{},"257":{},"268":{},"278":{},"284":{},"292":{},"302":{},"312":{},"320":{},"328":{},"336":{},"344":{},"352":{},"362":{},"372":{},"378":{},"386":{},"394":{},"400":{},"406":{},"414":{},"424":{},"433":{},"444":{},"1-8":{},"1-10":{},"1-11":{},"11-4":{},"11-5":{},"11-6":{},"14-4":{},"23-13":{},"23-23":{},"34-8":{},"34-10":{},"36-4":{},"41-8":{},"41-9":{},"60-1":{},"61-1":{},"62-1":{},"116-2":{},"124-2":{},"154-1":{},"163-1":{},"179-1":{},"188-1":{},"206-1":{},"216-1":{},"232-6":{},"241-6":{},"261-1":{},"272-1":{},"288-1":{},"296-1":{},"306-1":{},"324-1":{},"358-2":{},"368-2":{},"382-1":{},"390-1":{},"410-1":{},"418-1":{},"438-1":{},"449-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"29":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"65":{},"66":{},"67":{},"68":{},"69":{},"73":{},"74":{},"75":{},"76":{},"77":{},"83":{},"84":{},"87":{},"92":{},"93":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"162":{},"163":{},"164":{},"165":{},"166":{},"167":{},"168":{},"169":{},"170":{},"171":{},"172":{},"173":{},"174":{},"175":{},"176":{},"177":{},"178":{},"179":{},"180":{},"181":{},"182":{},"183":{},"184":{},"185":{},"186":{},"187":{},"188":{},"189":{},"190":{},"191":{},"192":{},"194":{},"195":{},"196":{},"197":{},"198":{},"199":{},"200":{},"202":{},"203":{},"204":{},"205":{},"206":{},"207":{},"208":{},"209":{},"210":{},"212":{},"213":{},"214":{},"215":{},"216":{},"217":{},"218":{},"219":{},"220":{},"221":{},"222":{},"223":{},"224":{},"225":{},"226":{},"227":{},"228":{},"229":{},"230":{},"231":{},"232":{},"233":{},"234":{},"235":{},"236":{},"237":{},"238":{},"239":{},"240":{},"241":{},"242":{},"244":{},"246":{},"247":{},"248":{},"249":{},"251":{},"253":{},"255":{},"256":{},"257":{},"260":{},"261":{},"262":{},"264":{},"266":{},"267":{},"268":{},"271":{},"272":{},"273":{},"274":{},"275":{},"276":{},"277":{},"278":{},"279":{},"280":{},"281":{},"282":{},"283":{},"284":{},"285":{},"287":{},"288":{},"289":{},"290":{},"291":{},"292":{},"293":{},"295":{},"296":{},"297":{},"298":{},"299":{},"300":{},"302":{},"303":{},"305":{},"306":{},"307":{},"308":{},"309":{},"310":{},"312":{},"313":{},"314":{},"315":{},"316":{},"317":{},"318":{},"320":{},"321":{},"323":{},"324":{},"325":{},"326":{},"327":{},"328":{},"329":{},"330":{},"332":{},"333":{},"334":{},"335":{},"336":{},"337":{},"338":{},"340":{},"341":{},"342":{},"343":{},"344":{},"345":{},"346":{},"348":{},"349":{},"350":{},"351":{},"352":{},"353":{},"356":{},"357":{},"358":{},"359":{},"360":{},"361":{},"362":{},"363":{},"366":{},"367":{},"368":{},"369":{},"370":{},"371":{},"372":{},"373":{},"374":{},"375":{},"376":{},"377":{},"378":{},"379":{},"380":{},"381":{},"382":{},"383":{},"384":{},"385":{},"386":{},"387":{},"388":{},"389":{},"390":{},"394":{},"395":{},"396":{},"400":{},"401":{},"402":{},"406":{},"407":{},"408":{},"409":{},"410":{},"414":{},"415":{},"416":{},"417":{},"418":{},"420":{},"421":{},"422":{},"424":{},"425":{},"426":{},"427":{},"429":{},"430":{},"431":{},"433":{},"434":{},"435":{},"436":{},"437":{},"438":{},"440":{},"441":{},"442":{},"444":{},"445":{},"446":{},"447":{},"448":{},"449":{}},"component":{}}],["stackable$image_semver_major",{"_index":2059,"title":{},"name":{},"text":{"41":{}},"component":{}}],["stackable$image_vers",{"_index":2058,"title":{},"name":{},"text":{"41":{}},"component":{}}],["stackable/airflow",{"_index":2918,"title":{},"name":{},"text":{"101":{},"107":{}},"component":{}}],["stackable/common",{"_index":2793,"title":{},"name":{},"text":{"66":{},"74":{},"373":{}},"component":{}}],["stackable/druid",{"_index":3282,"title":{},"name":{},"text":{"130":{},"137":{},"144":{}},"component":{}}],["stackable/extern",{"_index":3046,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["stackable/h",{"_index":3604,"title":{},"name":{},"text":{"222":{}},"component":{}}],["stackable/hbas",{"_index":3407,"title":{},"name":{},"text":{"169":{}},"component":{}}],["stackable/hdf",{"_index":3524,"title":{},"name":{},"text":{"195":{}},"component":{}}],["stackable/kafka",{"_index":3669,"title":{},"name":{},"text":{"249":{}},"component":{}}],["stackable/nifi",{"_index":3736,"title":{},"name":{},"text":{"279":{}},"component":{}}],["stackable/opa",{"_index":3821,"title":{},"name":{},"text":{"313":{}},"component":{}}],["stackable/phoenix",{"_index":3486,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["stackable/phoenix/bin",{"_index":3423,"title":{},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["stackable/phoenix/bin/psql.pi",{"_index":3425,"title":{},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["stackable/phoenix/bin/sqlline.pi",{"_index":3432,"title":{},"name":{},"text":{"176":{},"185":{}},"component":{}}],["stackable/phoenix/examples/web_stat.csv",{"_index":3427,"title":{},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["stackable/phoenix/examples/web_stat.sql",{"_index":3426,"title":{},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["stackable/phoenix/examples/web_stat_queries.sql",{"_index":3428,"title":{},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["stackable/secret",{"_index":2856,"title":{},"name":{},"text":{"83":{},"92":{},"373":{},"395":{},"401":{}},"component":{}}],["stackable/simpl",{"_index":3269,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{},"246":{},"255":{},"266":{},"299":{},"309":{},"317":{}},"component":{}}],["stackable/spark",{"_index":3824,"title":{},"name":{},"text":{"329":{},"337":{},"345":{}},"component":{}}],["stackable/spark/depend",{"_index":3868,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["stackable/spark/examples/jars/spark",{"_index":3843,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["stackable/superset",{"_index":3953,"title":{},"name":{},"text":{"373":{}},"component":{}}],["stackable/trino",{"_index":3990,"title":{},"name":{},"text":{"395":{},"401":{}},"component":{}}],["stackable/zookeep",{"_index":3532,"title":{},"name":{},"text":{"196":{},"203":{},"213":{},"425":{}},"component":{}}],["stackable0",{"_index":3044,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["stackable0.1.0",{"_index":2074,"title":{},"name":{},"text":{"41":{},"45":{},"57":{},"113":{},"121":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"229":{},"230":{},"238":{},"239":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"303":{},"304":{},"314":{},"321":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["stackable0.1.1",{"_index":2082,"title":{},"name":{},"text":{"41":{}},"component":{}}],["stackable0.1.2",{"_index":2083,"title":{},"name":{},"text":{"41":{}},"component":{}}],["stackable0.2.0",{"_index":2081,"title":{},"name":{},"text":{"41":{},"57":{},"177":{},"186":{}},"component":{}}],["stackable0.2.1",{"_index":2084,"title":{},"name":{},"text":{"41":{}},"component":{}}],["stackable0.3.0",{"_index":2959,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["stackable0.4.0",{"_index":2434,"title":{},"name":{},"text":{"57":{},"223":{},"330":{},"332":{}},"component":{}}],["stackable0.5.0",{"_index":3323,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["stackable0.7.0",{"_index":3319,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"213":{},"426":{},"434":{},"445":{}},"component":{}}],["stackable0.7.1",{"_index":3439,"title":{},"name":{},"text":{"177":{},"186":{},"204":{},"214":{},"259":{},"270":{},"286":{},"294":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"436":{},"440":{},"441":{},"445":{},"447":{}},"component":{}}],["stackable:stack",{"_index":3049,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["stackable_oper",{"_index":1091,"title":{},"name":{},"text":{"15":{}},"component":{}}],["stackable_operator::builder::containerbuild",{"_index":1083,"title":{},"name":{},"text":{"15":{}},"component":{}}],["stackable_operator::builder::{configmapbuild",{"_index":1050,"title":{},"name":{},"text":{"15":{}},"component":{}}],["stackable_operator::k8s_openapi::api",{"_index":1063,"title":{},"name":{},"text":{"15":{}},"component":{}}],["stackablectl",{"_index":10,"title":{"50":{},"1-9":{},"5-3":{},"51-5":{},"52-2":{},"116-3":{},"124-3":{},"154-2":{},"163-2":{},"179-2":{},"188-2":{},"206-2":{},"216-2":{},"232-2":{},"232-7":{},"241-2":{},"241-7":{},"261-2":{},"272-2":{},"286-6":{},"288-2":{},"294-6":{},"296-2":{},"306-2":{},"324-2":{},"358-3":{},"368-3":{},"382-2":{},"390-2":{},"410-2":{},"418-2":{},"438-2":{},"449-2":{}},"name":{},"text":{"5":{},"23":{},"44":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"116":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"286":{},"288":{},"294":{},"296":{},"306":{},"324":{},"358":{},"368":{},"382":{},"390":{},"410":{},"418":{},"438":{},"449":{}},"component":{"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{}}}],["stackablectl.ex",{"_index":2335,"title":{},"name":{},"text":{"52":{}},"component":{}}],["stackablectl_stacks_inital_vers",{"_index":2140,"title":{},"name":{"44":{}},"text":{},"component":{}}],["stackablereleas",{"_index":2161,"title":{},"name":{},"text":{"44":{},"232":{},"241":{}},"component":{}}],["stackabletech/develop",{"_index":1189,"title":{},"name":{},"text":{"16":{}},"component":{}}],["stackablex.y.z",{"_index":3666,"title":{},"name":{},"text":{"243":{},"244":{},"252":{},"253":{},"263":{},"264":{}},"component":{}}],["stackable’",{"_index":83,"title":{},"name":{},"text":{"1":{},"36":{}},"component":{}}],["stackbit",{"_index":1410,"title":{},"name":{},"text":{"26":{}},"component":{}}],["stackbl",{"_index":3831,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["stacks.yaml",{"_index":2274,"title":{},"name":{},"text":{"49":{}},"component":{}}],["stacks/trino.yaml",{"_index":2170,"title":{},"name":{},"text":{"44":{}},"component":{}}],["stage",{"_index":1179,"title":{},"name":{},"text":{"16":{},"43":{}},"component":{}}],["stale",{"_index":1443,"title":{"68-4":{},"76-4":{}},"name":{},"text":{"27":{}},"component":{}}],["stand",{"_index":705,"title":{"10-5":{}},"name":{},"text":{"10":{},"44":{}},"component":{}}],["standalon",{"_index":717,"title":{},"name":{},"text":{"10":{},"87":{},"96":{},"102":{},"108":{},"113":{},"121":{},"232":{},"241":{}},"component":{}}],["standard",{"_index":428,"title":{},"name":{},"text":{"5":{},"29":{},"31":{},"34":{},"39":{},"44":{},"45":{},"102":{},"108":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["start",{"_index":20,"title":{"1":{},"115":{},"123":{},"153":{},"162":{},"178":{},"187":{},"205":{},"215":{},"231":{},"240":{},"260":{},"271":{},"287":{},"295":{},"305":{},"323":{},"357":{},"367":{},"381":{},"389":{},"409":{},"417":{},"437":{},"448":{},"30-10":{},"356-1":{},"366-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"16":{},"30":{},"33":{},"37":{},"38":{},"39":{},"42":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"102":{},"108":{},"113":{},"114":{},"115":{},"121":{},"122":{},"123":{},"153":{},"162":{},"176":{},"178":{},"185":{},"187":{},"193":{},"196":{},"201":{},"203":{},"205":{},"211":{},"213":{},"215":{},"231":{},"232":{},"240":{},"241":{},"250":{},"258":{},"260":{},"269":{},"271":{},"280":{},"285":{},"287":{},"293":{},"295":{},"305":{},"323":{},"329":{},"337":{},"345":{},"356":{},"357":{},"366":{},"367":{},"374":{},"380":{},"381":{},"388":{},"389":{},"407":{},"409":{},"415":{},"417":{},"426":{},"434":{},"436":{},"437":{},"445":{},"447":{},"448":{}},"component":{}}],["start_date=datetime(2021",{"_index":2997,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["startcod",{"_index":3476,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["startup",{"_index":1506,"title":{},"name":{},"text":{"29":{},"38":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["state",{"_index":598,"title":{},"name":{},"text":{"8":{},"16":{},"33":{},"34":{},"41":{},"47":{},"60":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"177":{},"186":{},"204":{},"214":{},"223":{},"229":{},"238":{},"274":{},"275":{},"276":{},"280":{},"282":{},"283":{},"285":{},"290":{},"291":{},"293":{},"356":{},"366":{}},"component":{}}],["state='act",{"_index":4072,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["state_repo",{"_index":3753,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["statefulset",{"_index":1748,"title":{"68-3":{},"76-3":{}},"name":{},"text":{"35":{},"68":{},"76":{},"84":{},"93":{},"114":{},"122":{},"152":{},"161":{},"193":{},"201":{},"204":{},"211":{},"214":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"408":{},"416":{}},"component":{}}],["statefulset.kubernetes.io/pod",{"_index":3765,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["statefulset/simpl",{"_index":3441,"title":{},"name":{},"text":{"177":{},"186":{},"204":{},"214":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["statefulset/webhdf",{"_index":3561,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["statement",{"_index":1359,"title":{"25-1":{},"26-1":{},"27-1":{},"28-1":{},"29-1":{},"30-1":{},"31-1":{},"32-1":{},"33-1":{},"34-1":{},"35-1":{},"36-1":{},"37-1":{},"38-1":{},"39-1":{},"40-1":{},"41-2":{},"42-1":{},"43-1":{},"44-1":{},"45-1":{},"47-1":{},"48-1":{},"60-10":{},"60-14":{},"61-12":{},"61-16":{},"62-6":{},"62-9":{}},"name":{},"text":{"60":{},"61":{},"62":{}},"component":{}}],["static",{"_index":1749,"title":{},"name":{},"text":{"35":{}},"component":{}}],["station",{"_index":2552,"title":{"61-11":{}},"name":{},"text":{"61":{}},"component":{}}],["station_uuid",{"_index":2603,"title":{},"name":{},"text":{"61":{}},"component":{}}],["stations.longnam",{"_index":2639,"title":{},"name":{},"text":{"61":{}},"component":{}}],["stations.uuid",{"_index":2641,"title":{},"name":{},"text":{"61":{}},"component":{}}],["stations.water_longnam",{"_index":2643,"title":{},"name":{},"text":{"61":{}},"component":{}}],["statist",{"_index":2513,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["stats_logg",{"_index":3975,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["statsd",{"_index":2972,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["statsdexportervers",{"_index":2960,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["statu",{"_index":1176,"title":{},"name":{},"text":{"16":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"55":{},"56":{},"113":{},"114":{},"121":{},"122":{},"177":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["status_info",{"_index":3167,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["status_info[\"driverinfo",{"_index":3171,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["stay",{"_index":1577,"title":{},"name":{},"text":{"30":{},"36":{},"39":{}},"component":{}}],["stdin",{"_index":2895,"title":{},"name":{},"text":{"86":{},"95":{},"204":{},"214":{},"436":{},"447":{}},"component":{}}],["stdout",{"_index":3681,"title":{},"name":{},"text":{"250":{},"258":{},"269":{},"286":{},"294":{}},"component":{}}],["steam",{"_index":2547,"title":{},"name":{},"text":{"60":{}},"component":{}}],["steep",{"_index":1468,"title":{},"name":{},"text":{"28":{}},"component":{}}],["stefulset",{"_index":4118,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["step",{"_index":630,"title":{"16":{},"114":{},"122":{},"152":{},"161":{},"177":{},"186":{},"204":{},"214":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"304":{},"322":{},"356":{},"366":{},"380":{},"388":{},"408":{},"416":{},"436":{},"447":{}},"name":{"16":{}},"text":{"8":{},"13":{},"16":{},"24":{},"30":{},"39":{},"51":{},"102":{},"108":{},"113":{},"114":{},"115":{},"116":{},"121":{},"122":{},"123":{},"124":{},"153":{},"154":{},"162":{},"163":{},"176":{},"177":{},"178":{},"179":{},"185":{},"186":{},"187":{},"188":{},"204":{},"205":{},"206":{},"214":{},"215":{},"216":{},"231":{},"232":{},"240":{},"241":{},"260":{},"261":{},"271":{},"272":{},"287":{},"288":{},"295":{},"296":{},"305":{},"306":{},"323":{},"324":{},"356":{},"357":{},"358":{},"366":{},"367":{},"368":{},"380":{},"381":{},"382":{},"388":{},"389":{},"390":{},"396":{},"402":{},"407":{},"408":{},"409":{},"410":{},"415":{},"416":{},"417":{},"418":{},"436":{},"437":{},"438":{},"447":{},"448":{},"449":{}},"component":{}}],["still",{"_index":799,"title":{},"name":{},"text":{"11":{},"27":{},"28":{},"29":{},"30":{},"33":{},"36":{},"40":{},"41":{},"69":{},"77":{},"113":{},"121":{},"408":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["stop",{"_index":249,"title":{},"name":{},"text":{"2":{},"33":{},"40":{},"47":{}},"component":{}}],["storag",{"_index":286,"title":{"47":{},"23-15":{},"23-16":{},"131-8":{},"138-8":{},"145-8":{},"151-8":{},"151-10":{},"160-8":{},"160-10":{},"196-5":{},"203-5":{},"213-5":{},"250-6":{},"258-8":{},"269-8":{},"280-5":{},"285-11":{},"293-11":{},"407-23":{},"415-23":{},"426-7":{},"434-7":{},"445-7":{}},"name":{},"text":{"2":{},"5":{},"8":{},"9":{},"10":{},"23":{},"30":{},"45":{},"47":{},"60":{},"61":{},"62":{},"79":{},"80":{},"81":{},"86":{},"87":{},"88":{},"89":{},"90":{},"95":{},"96":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"363":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["storageclass",{"_index":538,"title":{"8-1":{}},"name":{},"text":{"8":{},"52":{},"54":{},"55":{},"56":{},"58":{}},"component":{}}],["storageclassnam",{"_index":564,"title":{},"name":{},"text":{"8":{},"86":{},"87":{},"95":{},"96":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["storagedirectori",{"_index":3297,"title":{},"name":{},"text":{"131":{},"138":{},"145":{}},"component":{}}],["storagepolici",{"_index":3591,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["storagetyp",{"_index":3296,"title":{},"name":{},"text":{"131":{},"138":{},"145":{}},"component":{}}],["store",{"_index":175,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"10":{},"11":{},"22":{},"23":{},"35":{},"41":{},"45":{},"60":{},"61":{},"62":{},"85":{},"86":{},"94":{},"95":{},"102":{},"108":{},"114":{},"116":{},"122":{},"124":{},"151":{},"160":{},"177":{},"186":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"274":{},"275":{},"285":{},"286":{},"293":{},"294":{},"340":{},"348":{},"355":{},"365":{},"374":{},"380":{},"388":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["storefil",{"_index":3464,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["storefileindexsizekb",{"_index":3462,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["storefilesizemb",{"_index":3463,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["stori",{"_index":1736,"title":{},"name":{},"text":{"35":{},"36":{},"37":{},"38":{},"40":{},"47":{}},"component":{}}],["str",{"_index":1069,"title":{},"name":{},"text":{"15":{},"113":{},"121":{}},"component":{}}],["str(i",{"_index":3012,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["straight",{"_index":1451,"title":{},"name":{},"text":{"27":{},"101":{},"107":{},"130":{},"137":{},"144":{},"169":{},"222":{},"249":{},"279":{},"313":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["strategi",{"_index":585,"title":{},"name":{},"text":{"8":{},"26":{},"36":{}},"component":{}}],["stream",{"_index":290,"title":{},"name":{},"text":{"2":{},"52":{},"54":{},"60":{},"61":{}},"component":{}}],["strict",{"_index":1228,"title":{},"name":{},"text":{"17":{},"32":{}},"component":{}}],["strictli",{"_index":1193,"title":{},"name":{},"text":{"16":{},"25":{},"30":{},"34":{}},"component":{}}],["strimzi",{"_index":1609,"title":{},"name":{},"text":{"31":{}},"component":{}}],["string",{"_index":780,"title":{},"name":{},"text":{"11":{},"14":{},"15":{},"17":{},"22":{},"33":{},"42":{},"51":{},"79":{},"88":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"157":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"219":{},"223":{},"226":{},"229":{},"235":{},"238":{},"243":{},"244":{},"246":{},"250":{},"252":{},"253":{},"255":{},"258":{},"263":{},"264":{},"266":{},"269":{},"274":{},"275":{},"282":{},"290":{},"299":{},"309":{},"317":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"415":{},"422":{},"426":{},"431":{},"434":{},"436":{},"442":{},"445":{},"447":{}},"component":{}}],["stringdata",{"_index":748,"title":{},"name":{},"text":{"10":{},"22":{},"63":{},"71":{},"102":{},"108":{},"114":{},"122":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"280":{},"285":{},"286":{},"293":{},"294":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["struct",{"_index":1016,"title":{},"name":{},"text":{"14":{},"39":{},"40":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{}},"component":{}}],["structur",{"_index":433,"title":{"34":{},"10-2":{},"243-2":{},"244-8":{},"252-2":{},"253-8":{},"263-2":{},"264-8":{}},"name":{},"text":{"5":{},"7":{},"10":{},"12":{},"14":{},"26":{},"30":{},"31":{},"34":{},"40":{},"44":{},"46":{},"60":{},"61":{},"276":{},"283":{},"291":{}},"component":{}}],["style",{"_index":1156,"title":{"17":{}},"name":{},"text":{"16":{},"17":{},"32":{},"45":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["style_guid",{"_index":1204,"title":{},"name":{"17":{}},"text":{},"component":{}}],["subcommand",{"_index":2280,"title":{},"name":{},"text":{"50":{}},"component":{}}],["subdirectori",{"_index":1697,"title":{},"name":{},"text":{"34":{}},"component":{}}],["subdivid",{"_index":658,"title":{},"name":{},"text":{"9":{}},"component":{}}],["subject",{"_index":3079,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["subjectalternatenam",{"_index":2859,"title":{},"name":{},"text":{"84":{},"85":{},"93":{},"94":{}},"component":{}}],["submiss",{"_index":955,"title":{},"name":{},"text":{"13":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["submit",{"_index":950,"title":{},"name":{},"text":{"13":{},"102":{},"108":{},"114":{},"122":{},"152":{},"161":{},"329":{},"330":{},"331":{},"332":{},"337":{},"338":{},"339":{},"340":{},"345":{},"346":{},"347":{},"348":{},"353":{},"354":{},"355":{},"356":{},"363":{},"364":{},"365":{},"366":{}},"component":{}}],["submodul",{"_index":2823,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["subpath",{"_index":3031,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["subresourc",{"_index":1664,"title":{},"name":{},"text":{"33":{}},"component":{}}],["subscrib",{"_index":1528,"title":{},"name":{},"text":{"30":{}},"component":{}}],["subsequ",{"_index":2069,"title":{},"name":{},"text":{"41":{},"44":{},"113":{},"121":{},"152":{},"161":{}},"component":{}}],["subsequenti",{"_index":1181,"title":{},"name":{},"text":{"16":{}},"component":{}}],["subset",{"_index":2276,"title":{},"name":{},"text":{"49":{}},"component":{}}],["substanti",{"_index":1612,"title":{},"name":{},"text":{"31":{}},"component":{}}],["succeed",{"_index":3157,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["success",{"_index":348,"title":{},"name":{},"text":{"4":{},"51":{},"152":{},"161":{}},"component":{}}],["success_st",{"_index":3156,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["successfulli",{"_index":952,"title":{},"name":{},"text":{"13":{},"16":{},"60":{},"61":{},"113":{},"121":{},"259":{},"270":{},"286":{},"294":{},"331":{},"339":{},"347":{},"354":{},"364":{},"408":{},"416":{}},"component":{}}],["such",{"_index":64,"title":{},"name":{},"text":{"1":{},"5":{},"8":{},"10":{},"11":{},"12":{},"17":{},"18":{},"22":{},"23":{},"35":{},"41":{},"42":{},"45":{},"51":{},"67":{},"68":{},"75":{},"76":{},"79":{},"85":{},"88":{},"94":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"127":{},"131":{},"134":{},"138":{},"141":{},"145":{},"148":{},"151":{},"152":{},"157":{},"160":{},"161":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"329":{},"337":{},"345":{},"358":{},"368":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["sudo",{"_index":2295,"title":{},"name":{},"text":{"51":{},"249":{},"279":{},"313":{},"425":{}},"component":{}}],["suffici",{"_index":1233,"title":{},"name":{},"text":{"19":{},"30":{},"329":{},"337":{},"345":{},"407":{},"415":{}},"component":{}}],["suffix",{"_index":3942,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["suggest",{"_index":607,"title":{},"name":{},"text":{"8":{},"19":{},"85":{},"94":{}},"component":{}}],["suitabl",{"_index":1951,"title":{},"name":{},"text":{"38":{}},"component":{}}],["sum(total_amount",{"_index":2672,"title":{},"name":{},"text":{"62":{}},"component":{}}],["summari",{"_index":1641,"title":{"60-12":{},"61-14":{},"62-7":{}},"name":{},"text":{"32":{}},"component":{}}],["super",{"_index":311,"title":{},"name":{},"text":{"3":{}},"component":{}}],["super().__init__(**kwarg",{"_index":3133,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["superfici",{"_index":1208,"title":{},"name":{},"text":{"17":{}},"component":{}}],["supergroup",{"_index":3584,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["supersecretpassword",{"_index":3745,"title":{},"name":{},"text":{"280":{},"285":{},"293":{}},"component":{}}],["supersed",{"_index":2226,"title":{},"name":{},"text":{"47":{}},"component":{}}],["superset",{"_index":202,"title":{"372":{},"378":{},"386":{},"2-12":{},"20-10":{},"23-22":{},"23-23":{},"23-25":{},"23-26":{},"23-27":{},"60-6":{},"61-8":{},"62-4":{},"374-1":{},"374-2":{},"374-3":{},"374-4":{},"374-5":{},"380-1":{},"380-2":{},"380-3":{},"380-4":{},"380-5":{},"388-1":{},"388-2":{},"388-3":{},"388-4":{},"388-5":{}},"name":{},"text":{"2":{},"3":{},"5":{},"12":{},"18":{},"23":{},"40":{},"41":{},"44":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"131":{},"138":{},"145":{},"151":{},"160":{},"369":{},"370":{},"371":{},"372":{},"373":{},"374":{},"375":{},"376":{},"377":{},"378":{},"379":{},"380":{},"381":{},"382":{},"383":{},"384":{},"385":{},"386":{},"387":{},"388":{},"389":{},"390":{}},"component":{"369":{},"370":{},"371":{},"372":{},"373":{},"374":{},"375":{},"376":{},"377":{},"378":{},"379":{},"380":{},"381":{},"382":{},"383":{},"384":{},"385":{},"386":{},"387":{},"388":{},"389":{},"390":{}}}],["superset.stackable.tech/v1alpha1",{"_index":3962,"title":{},"name":{},"text":{"374":{},"379":{},"380":{},"387":{},"388":{}},"component":{}}],["superset.yaml",{"_index":3983,"title":{},"name":{},"text":{"380":{},"388":{}},"component":{}}],["superset=0.6.0",{"_index":3986,"title":{},"name":{},"text":{"382":{},"390":{}},"component":{}}],["superset_config.pi",{"_index":3976,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["supersetclust",{"_index":3963,"title":{},"name":{},"text":{"374":{},"379":{},"380":{},"387":{},"388":{}},"component":{}}],["supersetcluster.crd.yaml",{"_index":3954,"title":{},"name":{},"text":{"373":{}},"component":{}}],["supersetdb",{"_index":3968,"title":{},"name":{},"text":{"374":{},"380":{},"388":{}},"component":{}}],["supersetdb.crd.yaml",{"_index":3955,"title":{},"name":{},"text":{"373":{}},"component":{}}],["supersetdb/simpl",{"_index":3985,"title":{},"name":{},"text":{"380":{},"388":{}},"component":{}}],["supervisor",{"_index":2511,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["suppli",{"_index":467,"title":{},"name":{},"text":{"7":{},"14":{},"44":{},"113":{},"121":{},"151":{},"160":{},"176":{},"185":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["support",{"_index":222,"title":{"20":{},"36":{},"36-5":{},"40-7":{},"84-1":{},"93-1":{},"100-1":{},"106-1":{},"112-1":{},"120-1":{},"129-1":{},"136-1":{},"143-1":{},"150-1":{},"159-1":{},"168-1":{},"175-1":{},"184-1":{},"194-1":{},"202-1":{},"212-1":{},"221-1":{},"223-2":{},"228-1":{},"229-2":{},"237-1":{},"238-2":{},"248-1":{},"257-1":{},"268-1":{},"278-1":{},"284-1":{},"292-1":{},"302-1":{},"312-1":{},"320-1":{},"328-1":{},"336-1":{},"344-1":{},"352-1":{},"362-1":{},"372-1":{},"378-1":{},"386-1":{},"394-1":{},"400-1":{},"406-1":{},"414-1":{},"424-1":{},"433-1":{},"444-1":{}},"name":{},"text":{"2":{},"5":{},"7":{},"8":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"28":{},"32":{},"33":{},"35":{},"36":{},"37":{},"39":{},"40":{},"41":{},"42":{},"45":{},"46":{},"47":{},"51":{},"54":{},"58":{},"63":{},"69":{},"71":{},"77":{},"79":{},"87":{},"88":{},"96":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"114":{},"120":{},"121":{},"122":{},"129":{},"131":{},"136":{},"138":{},"143":{},"145":{},"150":{},"151":{},"159":{},"160":{},"168":{},"170":{},"175":{},"176":{},"184":{},"185":{},"194":{},"196":{},"202":{},"203":{},"212":{},"213":{},"221":{},"223":{},"228":{},"229":{},"237":{},"238":{},"248":{},"250":{},"257":{},"258":{},"268":{},"269":{},"274":{},"275":{},"278":{},"280":{},"282":{},"284":{},"285":{},"290":{},"292":{},"293":{},"302":{},"303":{},"312":{},"314":{},"320":{},"321":{},"328":{},"330":{},"332":{},"336":{},"338":{},"340":{},"344":{},"346":{},"348":{},"352":{},"353":{},"355":{},"356":{},"362":{},"363":{},"365":{},"366":{},"372":{},"374":{},"378":{},"379":{},"386":{},"387":{},"394":{},"396":{},"400":{},"402":{},"406":{},"407":{},"414":{},"415":{},"420":{},"421":{},"424":{},"426":{},"429":{},"430":{},"433":{},"434":{},"440":{},"441":{},"444":{},"445":{}},"component":{}}],["supported_kubernetes_vers",{"_index":1787,"title":{},"name":{"36":{}},"text":{},"component":{}}],["supported_vers",{"_index":1254,"title":{},"name":{"20":{}},"text":{},"component":{}}],["sure",{"_index":678,"title":{},"name":{},"text":{"9":{},"16":{},"23":{},"48":{},"52":{},"54":{},"55":{},"56":{},"58":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"330":{},"338":{},"346":{},"353":{},"363":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["surfac",{"_index":2157,"title":{},"name":{},"text":{"44":{}},"component":{}}],["surnam",{"_index":2788,"title":{},"name":{},"text":{"63":{},"71":{}},"component":{}}],["survey",{"_index":2550,"title":{},"name":{},"text":{"60":{}},"component":{}}],["suspect",{"_index":2245,"title":{},"name":{},"text":{"48":{}},"component":{}}],["svc",{"_index":153,"title":{},"name":{},"text":{"1":{},"204":{},"214":{},"286":{},"294":{}},"component":{}}],["svc/airflow",{"_index":3237,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["svc/prometheu",{"_index":1248,"title":{},"name":{},"text":{"19":{}},"component":{}}],["svc/simpl",{"_index":3350,"title":{},"name":{},"text":{"152":{},"161":{},"259":{},"270":{},"304":{},"322":{},"408":{},"416":{}},"component":{}}],["sw",{"_index":353,"title":{},"name":{},"text":{"4":{}},"component":{}}],["switch",{"_index":2112,"title":{},"name":{},"text":{"41":{},"85":{},"94":{}},"component":{}}],["symlink",{"_index":1484,"title":{"29-9":{}},"name":{},"text":{"29":{}},"component":{}}],["sync",{"_index":3603,"title":{},"name":{},"text":{"219":{},"226":{},"235":{},"408":{},"416":{}},"component":{}}],["synchron",{"_index":308,"title":{"41-11":{},"41-17":{},"41-18":{}},"name":{},"text":{"2":{},"37":{},"41":{},"48":{}},"component":{}}],["synclimit",{"_index":4086,"title":{},"name":{},"text":{"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["syntax",{"_index":1135,"title":{},"name":{},"text":{"16":{},"32":{},"176":{},"185":{}},"component":{}}],["sysadmin",{"_index":1490,"title":{},"name":{},"text":{"29":{}},"component":{}}],["system",{"_index":128,"title":{},"name":{},"text":{"1":{},"2":{},"29":{},"37":{},"39":{},"42":{},"48":{},"51":{},"52":{},"69":{},"70":{},"77":{},"78":{},"152":{},"161":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"408":{},"416":{},"427":{},"435":{},"436":{},"446":{},"447":{}},"component":{}}],["system.catalog",{"_index":3494,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system.child_link",{"_index":3495,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system.funct",{"_index":3496,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system.log",{"_index":3497,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system.mutex",{"_index":3498,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system.runtime.nod",{"_index":4070,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["system.sequ",{"_index":3499,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system.stat",{"_index":3500,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system.task",{"_index":3501,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["system:serviceaccount",{"_index":3080,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["systemd",{"_index":1462,"title":{"29":{}},"name":{},"text":{"28":{},"29":{},"34":{},"46":{}},"component":{}}],["systemd_unit_file_loc",{"_index":1486,"title":{},"name":{"29":{}},"text":{},"component":{}}],["systemd_unit_path",{"_index":1482,"title":{"29-8":{}},"name":{},"text":{"29":{}},"component":{}}],["sönke",{"_index":1378,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"48":{}},"component":{}}],["t",{"_index":2472,"title":{},"name":{},"text":{"60":{},"61":{},"79":{},"88":{},"195":{},"204":{},"214":{},"259":{},"270":{}},"component":{}}],["t1",{"_index":3206,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["t2",{"_index":913,"title":{},"name":{},"text":{"12":{},"113":{},"121":{}},"component":{}}],["t\\n",{"_index":2497,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["tab",{"_index":2512,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"114":{},"122":{}},"component":{}}],["tabl",{"_index":528,"title":{"396-14":{},"402-14":{},"407-17":{},"415-17":{}},"name":{},"text":{"7":{},"8":{},"14":{},"23":{},"41":{},"52":{},"54":{},"60":{},"61":{},"62":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"176":{},"177":{},"185":{},"186":{},"223":{},"229":{},"230":{},"238":{},"239":{},"274":{},"275":{},"282":{},"290":{},"330":{},"338":{},"346":{},"353":{},"363":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["tabuk",{"_index":2485,"title":{},"name":{},"text":{"60":{}},"component":{}}],["tabulate==0.8.9",{"_index":3876,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["tag",{"_index":365,"title":{"41-8":{},"41-9":{}},"name":{},"text":{"4":{},"16":{},"26":{},"30":{},"41":{},"68":{},"76":{},"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["tag=\"$(uuidgen",{"_index":2826,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["tags=['exampl",{"_index":3000,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["take",{"_index":502,"title":{},"name":{},"text":{"7":{},"8":{},"13":{},"24":{},"30":{},"33":{},"35":{},"39":{},"40":{},"41":{},"44":{},"57":{},"60":{},"61":{},"62":{},"68":{},"76":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"177":{},"186":{},"204":{},"214":{},"374":{},"380":{},"388":{},"434":{},"445":{}},"component":{}}],["taken",{"_index":1568,"title":{},"name":{},"text":{"30":{},"41":{},"45":{},"47":{},"48":{},"374":{},"379":{},"387":{},"407":{},"415":{}},"component":{}}],["talk",{"_index":1031,"title":{},"name":{},"text":{"14":{},"52":{}},"component":{}}],["target",{"_index":1127,"title":{"38-7":{}},"name":{},"text":{"16":{},"32":{},"34":{},"38":{},"42":{},"79":{},"88":{},"102":{},"108":{},"113":{},"121":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["target/debug/stack",{"_index":3526,"title":{},"name":{},"text":{"195":{}},"component":{}}],["target/release/stackablectl",{"_index":2315,"title":{},"name":{},"text":{"51":{}},"component":{}}],["task",{"_index":125,"title":{},"name":{},"text":{"1":{},"8":{},"9":{},"12":{},"16":{},"102":{},"108":{},"113":{},"121":{},"301":{},"311":{},"319":{}},"component":{}}],["task_id='also_run_thi",{"_index":3017,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["task_id='run_after_loop",{"_index":3008,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["task_id='run_this_last",{"_index":3005,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["task_id='runme_",{"_index":3011,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["task_id='spark_pi_monitor",{"_index":3212,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["task_id='spark_pi_submit",{"_index":3207,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["task_id='this_will_skip",{"_index":3022,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["task_instance.xcom_pull(task_ids='spark_pi_submit')['metadata']['nam",{"_index":3213,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["task_instance_key_str",{"_index":3013,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["taxi",{"_index":2331,"title":{"62":{}},"name":{"62":{}},"text":{"52":{},"54":{},"62":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["teach",{"_index":2104,"title":{},"name":{},"text":{"41":{}},"component":{}}],["team",{"_index":727,"title":{},"name":{},"text":{"10":{},"25":{},"28":{},"43":{},"49":{}},"component":{}}],["tech",{"_index":1862,"title":{},"name":{},"text":{"36":{}},"component":{}}],["tech.stackable.demo.spark.nytlcreport",{"_index":3897,"title":{},"name":{},"text":{"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["technic",{"_index":1735,"title":{},"name":{},"text":{"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"47":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["technolog",{"_index":1572,"title":{},"name":{},"text":{"30":{},"44":{},"45":{},"47":{}},"component":{}}],["tell",{"_index":2322,"title":{},"name":{},"text":{"51":{},"62":{},"87":{},"96":{}},"component":{}}],["templat",{"_index":915,"title":{"16-6":{},"39-11":{}},"name":{},"text":{"12":{},"13":{},"16":{},"23":{},"39":{},"41":{},"102":{},"108":{},"113":{},"121":{},"204":{},"214":{},"330":{},"338":{},"346":{},"353":{},"356":{},"363":{},"366":{}},"component":{}}],["template_ext",{"_index":3123,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["template_field",{"_index":3121,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["temporari",{"_index":1494,"title":{},"name":{},"text":{"29":{}},"component":{}}],["tempt",{"_index":1584,"title":{},"name":{},"text":{"30":{}},"component":{}}],["tend",{"_index":3839,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["teo",{"_index":1729,"title":{},"name":{},"text":{"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["term",{"_index":1216,"title":{},"name":{},"text":{"17":{},"35":{},"36":{},"41":{}},"component":{}}],["termin",{"_index":1160,"title":{},"name":{},"text":{"16":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"286":{},"293":{},"294":{},"330":{},"338":{},"346":{},"353":{},"363":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["test",{"_index":8,"title":{"1-7":{},"1-15":{},"8-3":{},"16-4":{},"396-9":{},"396-12":{},"402-9":{},"402-12":{},"407-9":{},"407-15":{},"415-9":{},"415-15":{}},"name":{},"text":{"1":{},"3":{},"4":{},"8":{},"10":{},"12":{},"16":{},"26":{},"29":{},"30":{},"39":{},"41":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"60":{},"61":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"114":{},"117":{},"118":{},"119":{},"122":{},"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"146":{},"147":{},"149":{},"151":{},"155":{},"156":{},"158":{},"160":{},"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"177":{},"180":{},"181":{},"183":{},"186":{},"189":{},"190":{},"192":{},"195":{},"197":{},"198":{},"200":{},"204":{},"207":{},"208":{},"210":{},"214":{},"217":{},"218":{},"220":{},"224":{},"225":{},"227":{},"230":{},"232":{},"233":{},"234":{},"236":{},"239":{},"241":{},"242":{},"244":{},"247":{},"251":{},"253":{},"256":{},"259":{},"260":{},"262":{},"264":{},"267":{},"270":{},"271":{},"273":{},"275":{},"276":{},"277":{},"281":{},"282":{},"283":{},"285":{},"289":{},"290":{},"291":{},"293":{},"297":{},"298":{},"299":{},"300":{},"304":{},"307":{},"308":{},"309":{},"310":{},"315":{},"316":{},"317":{},"318":{},"322":{},"325":{},"326":{},"327":{},"332":{},"333":{},"334":{},"335":{},"340":{},"341":{},"342":{},"343":{},"348":{},"349":{},"350":{},"351":{},"355":{},"359":{},"360":{},"361":{},"365":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"380":{},"383":{},"384":{},"385":{},"388":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"408":{},"409":{},"411":{},"412":{},"413":{},"415":{},"416":{},"417":{},"419":{},"421":{},"423":{},"428":{},"430":{},"432":{},"439":{},"441":{},"443":{}},"component":{}}],["test.rego",{"_index":3815,"title":{},"name":{},"text":{"304":{},"322":{}},"component":{}}],["test.sh",{"_index":1174,"title":{},"name":{},"text":{"16":{}},"component":{}}],["test/allow",{"_index":3797,"title":{},"name":{},"text":{"299":{},"309":{},"317":{}},"component":{}}],["test/dev",{"_index":2235,"title":{},"name":{},"text":{"47":{}},"component":{}}],["test/index.yaml",{"_index":2355,"title":{},"name":{},"text":{"53":{}},"component":{}}],["test21obc",{"_index":2005,"title":{},"name":{},"text":{"39":{}},"component":{}}],["test_airflow_dag.pi",{"_index":2989,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["testdata",{"_index":2654,"title":{},"name":{},"text":{"62":{}},"component":{}}],["testdata.txt",{"_index":3567,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["testing/debug",{"_index":1495,"title":{},"name":{},"text":{"29":{}},"component":{}}],["tests/main/create_test_cluster.pi",{"_index":328,"title":{},"name":{},"text":{"3":{}},"component":{}}],["text",{"_index":1209,"title":{},"name":{},"text":{"17":{},"204":{},"214":{}},"component":{}}],["text/xml",{"_index":3482,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["textbox",{"_index":2540,"title":{},"name":{},"text":{"60":{},"61":{},"62":{}},"component":{}}],["that’",{"_index":2683,"title":{},"name":{},"text":{"62":{}},"component":{}}],["themselv",{"_index":1669,"title":{},"name":{},"text":{"33":{},"40":{},"113":{},"121":{},"285":{},"293":{},"374":{},"379":{},"387":{}},"component":{}}],["theori",{"_index":1529,"title":{},"name":{},"text":{"30":{},"33":{},"41":{},"44":{}},"component":{}}],["therefor",{"_index":964,"title":{},"name":{},"text":{"13":{},"16":{},"36":{},"62":{},"356":{},"366":{}},"component":{}}],["thin",{"_index":2155,"title":{},"name":{},"text":{"44":{}},"component":{}}],["thing",{"_index":1205,"title":{},"name":{},"text":{"17":{},"26":{},"33":{},"35":{},"37":{},"39":{},"41":{},"44":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"259":{},"270":{},"274":{},"275":{},"285":{},"286":{},"293":{},"294":{},"301":{},"311":{},"319":{},"332":{},"340":{},"348":{},"355":{},"358":{},"365":{},"368":{}},"component":{}}],["think",{"_index":653,"title":{},"name":{},"text":{"9":{},"30":{},"34":{}},"component":{}}],["third",{"_index":1308,"title":{},"name":{},"text":{"23":{},"34":{},"50":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["this_will_skip",{"_index":3021,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["thisisasecret_1234",{"_index":2944,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["this’d",{"_index":1662,"title":{},"name":{},"text":{"33":{}},"component":{}}],["those",{"_index":1655,"title":{},"name":{},"text":{"33":{},"176":{},"185":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["though",{"_index":1709,"title":{},"name":{},"text":{"34":{},"41":{},"45":{},"113":{},"121":{}},"component":{}}],["thought",{"_index":2158,"title":{},"name":{},"text":{"44":{}},"component":{}}],["thousand",{"_index":291,"title":{},"name":{},"text":{"2":{}},"component":{}}],["thread",{"_index":662,"title":{},"name":{},"text":{"9":{}},"component":{}}],["three",{"_index":315,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"36":{},"50":{},"55":{},"101":{},"107":{},"114":{},"122":{},"152":{},"161":{},"169":{},"177":{},"186":{},"193":{},"201":{},"204":{},"211":{},"214":{},"222":{},"243":{},"244":{},"249":{},"252":{},"253":{},"263":{},"264":{},"279":{},"280":{},"285":{},"293":{},"313":{},"329":{},"337":{},"345":{},"356":{},"366":{},"373":{},"395":{},"401":{},"425":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["threshold",{"_index":3333,"title":{},"name":{},"text":{"152":{},"161":{},"196":{},"203":{},"204":{},"213":{},"214":{}},"component":{}}],["thrift",{"_index":3596,"title":{},"name":{},"text":{"219":{},"226":{},"235":{},"246":{},"255":{},"266":{}},"component":{}}],["thrift://{clusternam",{"_index":3599,"title":{},"name":{},"text":{"219":{},"226":{},"235":{}},"component":{}}],["through",{"_index":1357,"title":{},"name":{},"text":{"24":{},"36":{},"40":{},"114":{},"115":{},"122":{},"123":{},"152":{},"153":{},"161":{},"162":{},"178":{},"187":{},"205":{},"215":{},"230":{},"231":{},"239":{},"240":{},"259":{},"260":{},"270":{},"271":{},"286":{},"287":{},"294":{},"295":{},"304":{},"305":{},"322":{},"323":{},"357":{},"367":{},"380":{},"381":{},"388":{},"389":{},"408":{},"409":{},"416":{},"417":{},"437":{},"448":{}},"component":{}}],["throughout",{"_index":1312,"title":{},"name":{},"text":{"23":{},"26":{}},"component":{}}],["throughput",{"_index":278,"title":{},"name":{},"text":{"2":{}},"component":{}}],["throw",{"_index":1907,"title":{},"name":{},"text":{"37":{}},"component":{}}],["thrownaway",{"_index":2518,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["thu",{"_index":587,"title":{},"name":{},"text":{"8":{},"31":{},"48":{},"113":{},"121":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["ti",{"_index":2365,"title":{},"name":{},"text":{"54":{},"58":{}},"component":{}}],["tick",{"_index":3066,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["ticketserv",{"_index":1913,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ticktim",{"_index":4078,"title":{},"name":{},"text":{"420":{},"421":{},"429":{},"430":{},"440":{},"441":{}},"component":{}}],["tier",{"_index":1632,"title":{},"name":{},"text":{"32":{}},"component":{}}],["tight",{"_index":1539,"title":{},"name":{},"text":{"30":{}},"component":{}}],["tighter",{"_index":1421,"title":{},"name":{},"text":{"26":{}},"component":{}}],["tightli",{"_index":2153,"title":{},"name":{},"text":{"44":{}},"component":{}}],["tilt",{"_index":2845,"title":{},"name":{},"text":{"79":{},"88":{}},"component":{}}],["time",{"_index":36,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"9":{},"14":{},"23":{},"26":{},"27":{},"30":{},"36":{},"39":{},"41":{},"43":{},"44":{},"47":{},"51":{},"52":{},"54":{},"57":{},"60":{},"61":{},"62":{},"68":{},"76":{},"79":{},"88":{},"101":{},"102":{},"107":{},"108":{},"113":{},"121":{},"169":{},"176":{},"177":{},"185":{},"186":{},"195":{},"222":{},"249":{},"274":{},"275":{},"279":{},"282":{},"290":{},"313":{},"330":{},"338":{},"346":{},"353":{},"363":{},"373":{},"374":{},"380":{},"388":{},"395":{},"396":{},"401":{},"402":{},"407":{},"415":{},"425":{},"436":{},"447":{}},"component":{}}],["time\":\"1950",{"_index":2473,"title":{},"name":{},"text":{"60":{}},"component":{}}],["time_format(__tim",{"_index":2523,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["timedelta",{"_index":2990,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["timeline/vers",{"_index":1866,"title":{},"name":{},"text":{"36":{}},"component":{}}],["timeout",{"_index":3228,"title":{},"name":{},"text":{"114":{},"122":{},"356":{},"366":{},"380":{},"388":{}},"component":{}}],["timeout=1200",{"_index":3768,"title":{},"name":{},"text":{"286":{},"294":{}},"component":{}}],["timestamp",{"_index":2496,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"152":{},"161":{}},"component":{}}],["timestampspec",{"_index":3364,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["timetolivesecond",{"_index":3189,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["tip",{"_index":1336,"title":{},"name":{},"text":{"23":{},"62":{}},"component":{}}],["tip_amount",{"_index":2720,"title":{},"name":{},"text":{"62":{}},"component":{}}],["tip_percentag",{"_index":2741,"title":{},"name":{},"text":{"62":{}},"component":{}}],["titl",{"_index":1350,"title":{},"name":{},"text":{"23":{}},"component":{}}],["tl",{"_index":448,"title":{"40":{},"69":{},"77":{},"40-6":{},"40-7":{},"85-7":{},"94-7":{},"407-12":{},"407-13":{},"415-12":{},"415-13":{}},"name":{"69":{},"77":{}},"text":{"5":{},"10":{},"30":{},"35":{},"39":{},"40":{},"45":{},"46":{},"63":{},"69":{},"70":{},"71":{},"77":{},"78":{},"84":{},"85":{},"86":{},"87":{},"93":{},"94":{},"95":{},"96":{},"131":{},"138":{},"145":{},"151":{},"160":{},"258":{},"259":{},"269":{},"270":{},"285":{},"293":{},"374":{},"379":{},"387":{},"407":{},"408":{},"415":{},"416":{},"426":{},"434":{},"445":{}},"component":{}}],["tlc",{"_index":3849,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["tlc/trip",{"_index":3853,"title":{},"name":{},"text":{"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["tls.crt",{"_index":2037,"title":{},"name":{},"text":{"40":{},"69":{},"77":{},"85":{},"94":{},"407":{},"415":{}},"component":{}}],["tls.key",{"_index":2038,"title":{},"name":{},"text":{"40":{},"69":{},"77":{},"85":{},"94":{},"407":{},"415":{}},"component":{}}],["tls.secretclass",{"_index":3699,"title":{},"name":{},"text":{"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["tls_authent",{"_index":2019,"title":{},"name":{"40":{}},"text":{},"component":{}}],["tlsauthenticationconfig",{"_index":2034,"title":{},"name":{},"text":{"40":{}},"component":{}}],["tlsconfig",{"_index":2021,"title":{},"name":{},"text":{"40":{}},"component":{}}],["tlsconfigur",{"_index":2024,"title":{},"name":{},"text":{"40":{}},"component":{}}],["tmp",{"_index":3568,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["tmp/.helmcache/stack",{"_index":2348,"title":{"53-4":{}},"name":{},"text":{},"component":{}}],["tmp/.helmrepo",{"_index":2362,"title":{},"name":{},"text":{"53":{}},"component":{}}],["tmp/testdata.txt",{"_index":3570,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["today",{"_index":1645,"title":{},"name":{},"text":{"32":{}},"component":{}}],["togeth",{"_index":238,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"11":{},"38":{},"60":{},"61":{},"62":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"301":{},"311":{},"319":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["token",{"_index":1727,"title":{"35":{}},"name":{},"text":{"35":{},"46":{}},"component":{}}],["told",{"_index":1854,"title":{},"name":{},"text":{"36":{}},"component":{}}],["toml",{"_index":984,"title":{},"name":{},"text":{"13":{}},"component":{}}],["tone",{"_index":1211,"title":{},"name":{},"text":{"17":{}},"component":{}}],["took",{"_index":2186,"title":{},"name":{},"text":{"45":{}},"component":{}}],["tool",{"_index":46,"title":{"408-3":{},"416-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"8":{},"10":{},"12":{},"13":{},"23":{},"28":{},"30":{},"31":{},"38":{},"39":{},"44":{},"48":{},"50":{},"51":{},"79":{},"88":{},"116":{},"124":{},"127":{},"134":{},"141":{},"148":{},"154":{},"157":{},"163":{},"179":{},"188":{},"206":{},"216":{},"219":{},"226":{},"232":{},"235":{},"241":{},"246":{},"255":{},"261":{},"266":{},"272":{},"288":{},"296":{},"299":{},"306":{},"309":{},"317":{},"324":{},"358":{},"368":{},"382":{},"390":{},"408":{},"409":{},"410":{},"416":{},"417":{},"418":{},"436":{},"438":{},"447":{},"449":{}},"component":{}}],["toolchain",{"_index":3525,"title":{},"name":{},"text":{"195":{}},"component":{}}],["toolkit",{"_index":3277,"title":{},"name":{},"text":{"127":{},"134":{},"141":{},"148":{},"157":{}},"component":{}}],["tools:0.1.0",{"_index":3560,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["top",{"_index":1530,"title":{},"name":{},"text":{"30":{},"32":{},"42":{},"48":{},"60":{},"61":{},"62":{},"114":{},"122":{},"258":{},"269":{},"330":{},"338":{},"346":{},"353":{},"363":{},"426":{},"434":{},"445":{}},"component":{}}],["topic",{"_index":900,"title":{"61-3":{}},"name":{},"text":{"12":{},"23":{},"60":{},"61":{},"250":{},"258":{},"259":{},"260":{},"269":{},"270":{},"271":{}},"component":{}}],["total",{"_index":1831,"title":{},"name":{},"text":{"36":{},"60":{},"61":{},"62":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["total_active_visitor",{"_index":3488,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["total_amount",{"_index":2721,"title":{},"name":{},"text":{"62":{}},"component":{}}],["totalcompactingkv",{"_index":3465,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["totalstaticbloomsizekb",{"_index":3466,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["totalstaticindexsizekb",{"_index":3467,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["touch",{"_index":1478,"title":{},"name":{},"text":{"28":{}},"component":{}}],["tough",{"_index":1608,"title":{},"name":{},"text":{"31":{}},"component":{}}],["toward",{"_index":1338,"title":{},"name":{},"text":{"23":{},"30":{},"31":{}},"component":{}}],["tpep_dropoff_datetim",{"_index":2715,"title":{},"name":{},"text":{"62":{}},"component":{}}],["tpep_pickup_datetim",{"_index":2714,"title":{},"name":{},"text":{"62":{}},"component":{}}],["track",{"_index":898,"title":{},"name":{},"text":{"12":{},"26":{},"27":{},"33":{},"41":{},"113":{},"114":{},"121":{},"122":{},"177":{},"186":{},"193":{},"201":{},"204":{},"211":{},"214":{}},"component":{}}],["tracker",{"_index":940,"title":{},"name":{},"text":{"13":{}},"component":{}}],["tradit",{"_index":4105,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["traffic",{"_index":495,"title":{},"name":{},"text":{"7":{},"14":{},"40":{},"61":{},"301":{},"311":{},"319":{},"407":{},"415":{}},"component":{}}],["transfer",{"_index":473,"title":{},"name":{},"text":{"7":{},"14":{},"42":{}},"component":{}}],["transform",{"_index":2763,"title":{},"name":{},"text":{"62":{}},"component":{}}],["translat",{"_index":1600,"title":{},"name":{},"text":{"31":{},"60":{},"61":{},"85":{},"94":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["transmit",{"_index":2609,"title":{},"name":{},"text":{"61":{}},"component":{}}],["travers",{"_index":2797,"title":{},"name":{},"text":{"67":{},"75":{}},"component":{}}],["treat",{"_index":593,"title":{},"name":{},"text":{"8":{},"116":{},"124":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{}},"component":{}}],["tree",{"_index":2988,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"121":{}},"component":{}}],["tri",{"_index":27,"title":{},"name":{},"text":{"1":{},"16":{},"30":{},"33":{},"36":{},"37":{},"39":{},"41":{},"113":{},"121":{},"196":{},"203":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"301":{},"311":{},"319":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["trigger",{"_index":1427,"title":{},"name":{},"text":{"26":{},"38":{},"41":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["trino",{"_index":203,"title":{"42":{},"43":{},"62":{},"394":{},"400":{},"406":{},"414":{},"2-13":{},"20-12":{},"62-3":{},"62-12":{},"396-8":{},"396-12":{},"402-8":{},"402-12":{},"407-8":{},"407-15":{},"408-1":{},"408-3":{},"408-4":{},"415-8":{},"415-15":{},"416-1":{},"416-3":{},"416-4":{}},"name":{"62":{}},"text":{"5":{},"7":{},"11":{},"12":{},"14":{},"18":{},"39":{},"41":{},"42":{},"43":{},"44":{},"46":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"62":{},"230":{},"239":{},"392":{},"393":{},"394":{},"395":{},"396":{},"398":{},"399":{},"400":{},"401":{},"402":{},"404":{},"405":{},"406":{},"407":{},"408":{},"409":{},"410":{},"412":{},"413":{},"414":{},"415":{},"416":{},"417":{},"418":{}},"component":{"391":{},"392":{},"393":{},"394":{},"395":{},"396":{},"397":{},"398":{},"399":{},"400":{},"401":{},"402":{},"403":{},"404":{},"405":{},"406":{},"407":{},"408":{},"409":{},"410":{},"411":{},"412":{},"413":{},"414":{},"415":{},"416":{},"417":{},"418":{}}}],["trino.jar",{"_index":4065,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["trino.rego",{"_index":4006,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["trino.stackable.tech/v1alpha1",{"_index":4012,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["trino.yaml",{"_index":4063,"title":{},"name":{},"text":{"408":{},"416":{}},"component":{}}],["trino=0.5.0",{"_index":4075,"title":{},"name":{},"text":{"410":{},"418":{}},"component":{}}],["trino_catalog_definit",{"_index":2118,"title":{},"name":{"42":{}},"text":{},"component":{}}],["trino_catalog_usag",{"_index":2136,"title":{},"name":{"43":{}},"text":{},"component":{}}],["trinocatalog",{"_index":2115,"title":{"42-6":{},"42-7":{}},"name":{},"text":{"42":{},"43":{},"407":{},"415":{}},"component":{}}],["trinoclust",{"_index":794,"title":{},"name":{},"text":{"11":{},"43":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["trinocluster.crd.yaml",{"_index":3991,"title":{},"name":{},"text":{"395":{},"401":{}},"component":{}}],["trip",{"_index":2656,"title":{},"name":{},"text":{"62":{},"301":{},"311":{},"319":{}},"component":{}}],["trip_dist",{"_index":2717,"title":{},"name":{},"text":{"62":{}},"component":{}}],["trivial",{"_index":626,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["troubl",{"_index":1855,"title":{},"name":{},"text":{"36":{},"47":{}},"component":{}}],["troubleshoot",{"_index":2351,"title":{"53":{}},"name":{"53":{}},"text":{},"component":{}}],["true",{"_index":526,"title":{},"name":{},"text":{"7":{},"8":{},"14":{},"19":{},"37":{},"38":{},"40":{},"42":{},"45":{},"63":{},"67":{},"68":{},"71":{},"75":{},"76":{},"80":{},"81":{},"85":{},"86":{},"87":{},"89":{},"90":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"204":{},"214":{},"258":{},"269":{},"274":{},"275":{},"282":{},"286":{},"290":{},"294":{},"298":{},"300":{},"304":{},"308":{},"310":{},"316":{},"318":{},"322":{},"332":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["trust",{"_index":1743,"title":{},"name":{},"text":{"35":{},"62":{},"69":{},"77":{},"408":{},"416":{}},"component":{}}],["tti",{"_index":2896,"title":{},"name":{},"text":{"86":{},"95":{},"204":{},"214":{},"436":{},"447":{}},"component":{}}],["tune",{"_index":410,"title":{},"name":{},"text":{"5":{},"63":{},"71":{}},"component":{}}],["tuningconfig",{"_index":3382,"title":{},"name":{},"text":{"152":{},"161":{}},"component":{}}],["tupl",{"_index":2134,"title":{},"name":{},"text":{"42":{}},"component":{}}],["turn",{"_index":557,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"30":{},"36":{},"38":{},"40":{},"50":{},"52":{},"54":{},"60":{},"61":{},"274":{},"275":{},"282":{},"290":{},"356":{},"366":{}},"component":{}}],["tutori",{"_index":53,"title":{"24":{},"23-1":{}},"name":{},"text":{"1":{},"2":{},"23":{},"24":{},"60":{},"61":{}},"component":{}}],["twelv",{"_index":1828,"title":{},"name":{},"text":{"36":{}},"component":{}}],["two",{"_index":549,"title":{},"name":{},"text":{"8":{},"9":{},"14":{},"15":{},"27":{},"30":{},"31":{},"32":{},"41":{},"43":{},"45":{},"52":{},"55":{},"61":{},"66":{},"74":{},"79":{},"83":{},"88":{},"92":{},"102":{},"108":{},"113":{},"115":{},"121":{},"123":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"153":{},"160":{},"162":{},"170":{},"176":{},"178":{},"185":{},"187":{},"193":{},"195":{},"201":{},"204":{},"205":{},"211":{},"214":{},"215":{},"219":{},"226":{},"231":{},"232":{},"235":{},"240":{},"241":{},"259":{},"260":{},"270":{},"271":{},"274":{},"275":{},"282":{},"286":{},"288":{},"290":{},"294":{},"296":{},"305":{},"323":{},"357":{},"367":{},"381":{},"389":{},"408":{},"410":{},"416":{},"418":{},"436":{},"437":{},"447":{},"448":{}},"component":{}}],["ty",{"_index":1770,"title":{},"name":{},"text":{"35":{}},"component":{}}],["type",{"_index":154,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"32":{},"37":{},"39":{},"42":{},"45":{},"48":{},"50":{},"87":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"177":{},"186":{},"204":{},"214":{},"223":{},"229":{},"232":{},"238":{},"241":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["type:application/json",{"_index":3245,"title":{},"name":{},"text":{"114":{},"122":{},"152":{},"161":{}},"component":{}}],["type=bind,source=\"$home/.kube/config\",target=\"/home/stackable/.kube/config",{"_index":2913,"title":{},"name":{},"text":{"98":{},"99":{},"101":{},"104":{},"105":{},"107":{},"110":{},"111":{},"118":{},"119":{},"126":{},"128":{},"130":{},"133":{},"135":{},"137":{},"140":{},"142":{},"144":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"169":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"222":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"249":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"279":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"313":{},"316":{},"318":{},"326":{},"327":{},"334":{},"335":{},"342":{},"343":{},"350":{},"351":{},"360":{},"361":{},"369":{},"371":{},"373":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"395":{},"398":{},"399":{},"401":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"425":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["type_check",{"_index":3103,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["typic",{"_index":1738,"title":{},"name":{},"text":{"35":{},"36":{},"37":{},"41":{},"61":{},"84":{},"93":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["typo",{"_index":951,"title":{},"name":{},"text":{"13":{}},"component":{}}],["u",{"_index":369,"title":{},"name":{},"text":{"4":{}},"component":{}}],["u1ltvevnlknbvefmt0cslde2njexnja0ndm2njcuymywmza1ymm4zjfmogiwzwmwyjhmmgnjmwi5n2rmmmuu",{"_index":3458,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["ubuntu",{"_index":143,"title":{},"name":{},"text":{"1":{},"51":{},"86":{},"87":{},"95":{},"96":{}},"component":{}}],["udp",{"_index":1910,"title":{},"name":{},"text":{"37":{}},"component":{}}],["ui",{"_index":1252,"title":{},"name":{},"text":{"19":{},"23":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"176":{},"185":{},"223":{},"229":{},"238":{},"274":{},"275":{},"282":{},"290":{},"299":{},"309":{},"317":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["ui/cli",{"_index":4009,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["ui_color",{"_index":3125,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["uid",{"_index":1671,"title":{},"name":{},"text":{"33":{},"63":{},"71":{}},"component":{}}],["unauthent",{"_index":4099,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["unchang",{"_index":2076,"title":{},"name":{},"text":{"41":{}},"component":{}}],["unclear",{"_index":1766,"title":{},"name":{},"text":{"35":{}},"component":{}}],["uncommon",{"_index":798,"title":{},"name":{},"text":{"11":{}},"component":{}}],["und",{"_index":1579,"title":{},"name":{},"text":{"30":{}},"component":{}}],["under",{"_index":925,"title":{},"name":{},"text":{"12":{},"23":{},"32":{},"34":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"374":{},"379":{},"387":{}},"component":{}}],["underli",{"_index":1889,"title":{},"name":{},"text":{"37":{},"40":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"332":{},"340":{},"348":{},"355":{},"356":{},"365":{},"366":{},"374":{},"380":{},"388":{},"426":{},"434":{},"445":{}},"component":{}}],["understand",{"_index":458,"title":{},"name":{},"text":{"6":{},"40":{},"301":{},"311":{},"319":{}},"component":{}}],["understood",{"_index":1936,"title":{},"name":{},"text":{"38":{}},"component":{}}],["unencrypt",{"_index":4098,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["unfortun",{"_index":1663,"title":{},"name":{},"text":{"33":{},"223":{},"229":{},"238":{}},"component":{}}],["unifi",{"_index":1887,"title":{},"name":{},"text":{"37":{},"62":{}},"component":{}}],["uniform",{"_index":1678,"title":{},"name":{},"text":{"33":{},"49":{}},"component":{}}],["uninstal",{"_index":2364,"title":{"54-6":{},"55-4":{},"56-3":{},"58-6":{}},"name":{},"text":{"54":{},"55":{},"56":{},"57":{},"58":{}},"component":{}}],["uniqu",{"_index":1741,"title":{},"name":{},"text":{"35":{},"68":{},"76":{},"79":{},"88":{},"356":{},"366":{},"427":{},"435":{},"446":{}},"component":{}}],["unit",{"_index":1129,"title":{"29":{},"29-9":{},"29-10":{}},"name":{},"text":{"16":{},"29":{},"46":{},"60":{}},"component":{}}],["univers",{"_index":304,"title":{},"name":{},"text":{"2":{},"48":{},"62":{}},"component":{}}],["unix",{"_index":971,"title":{},"name":{},"text":{"13":{},"80":{},"81":{},"89":{},"90":{}},"component":{}}],["unknown",{"_index":1430,"title":{},"name":{},"text":{"26":{},"51":{},"62":{},"113":{},"121":{}},"component":{}}],["unless",{"_index":1937,"title":{},"name":{},"text":{"38":{},"113":{},"121":{},"193":{},"201":{},"211":{}},"component":{}}],["unnecessarili",{"_index":1422,"title":{},"name":{},"text":{"26":{},"39":{}},"component":{}}],["unneed",{"_index":2098,"title":{},"name":{},"text":{"41":{}},"component":{}}],["unpars",{"_index":2519,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["unpredict",{"_index":4114,"title":{},"name":{},"text":{"427":{},"435":{},"446":{}},"component":{}}],["unproven",{"_index":2154,"title":{},"name":{},"text":{"44":{}},"component":{}}],["unreview",{"_index":1440,"title":{},"name":{},"text":{"27":{}},"component":{}}],["unsupport",{"_index":2096,"title":{},"name":{},"text":{"41":{}},"component":{}}],["unterstood",{"_index":2232,"title":{},"name":{},"text":{"47":{}},"component":{}}],["until",{"_index":1183,"title":{},"name":{},"text":{"16":{},"52":{},"54":{},"60":{},"61":{},"62":{},"114":{},"122":{},"223":{},"229":{},"238":{}},"component":{}}],["unusu",{"_index":1509,"title":{},"name":{},"text":{"29":{}},"component":{}}],["unwrap",{"_index":1103,"title":{},"name":{},"text":{"15":{}},"component":{}}],["up",{"_index":112,"title":{"23":{},"23-14":{},"23-24":{},"23-26":{},"408-5":{},"416-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"12":{},"16":{},"23":{},"26":{},"27":{},"30":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"79":{},"88":{},"102":{},"108":{},"113":{},"114":{},"115":{},"116":{},"121":{},"122":{},"123":{},"124":{},"131":{},"138":{},"145":{},"151":{},"152":{},"153":{},"154":{},"160":{},"161":{},"162":{},"163":{},"170":{},"176":{},"178":{},"179":{},"185":{},"187":{},"188":{},"193":{},"196":{},"201":{},"203":{},"204":{},"205":{},"206":{},"211":{},"213":{},"214":{},"215":{},"216":{},"223":{},"229":{},"231":{},"232":{},"238":{},"240":{},"241":{},"259":{},"260":{},"261":{},"270":{},"271":{},"272":{},"285":{},"287":{},"288":{},"293":{},"295":{},"296":{},"304":{},"305":{},"322":{},"323":{},"332":{},"340":{},"348":{},"356":{},"366":{},"374":{},"379":{},"380":{},"381":{},"387":{},"388":{},"389":{},"396":{},"402":{},"407":{},"408":{},"409":{},"410":{},"415":{},"416":{},"417":{},"418":{},"436":{},"437":{},"438":{},"447":{},"448":{},"449":{}},"component":{}}],["updat",{"_index":360,"title":{},"name":{},"text":{"4":{},"16":{},"33":{},"41":{},"45":{},"55":{},"56":{},"79":{},"88":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"195":{},"332":{},"340":{},"348":{},"355":{},"365":{},"396":{},"402":{},"407":{},"415":{},"436":{},"447":{}},"component":{}}],["upgrad",{"_index":1140,"title":{},"name":{},"text":{"16":{},"19":{},"33":{},"36":{},"41":{},"79":{},"88":{}},"component":{}}],["upload",{"_index":1150,"title":{},"name":{},"text":{"16":{},"62":{},"223":{},"229":{},"238":{}},"component":{}}],["upon",{"_index":1628,"title":{},"name":{},"text":{"32":{}},"component":{}}],["upsid",{"_index":1545,"title":{},"name":{},"text":{"30":{}},"component":{}}],["upstream",{"_index":806,"title":{},"name":{},"text":{"12":{},"16":{},"34":{}},"component":{}}],["uri",{"_index":3067,"title":{},"name":{},"text":{"113":{},"121":{},"152":{},"161":{}},"component":{}}],["url",{"_index":998,"title":{},"name":{},"text":{"14":{},"49":{},"53":{},"176":{},"185":{},"204":{},"214":{},"232":{},"241":{},"286":{},"294":{},"299":{},"309":{},"317":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["us",{"_index":5,"title":{"25":{},"26":{},"27":{},"28":{},"34":{},"38":{},"47":{},"1-5":{},"1-6":{},"29-8":{},"39-12":{},"41-12":{},"41-19":{},"41-20":{},"44-10":{},"52-5":{},"52-6":{},"54-3":{},"54-4":{},"58-3":{},"58-4":{},"62-3":{},"62-4":{},"102-9":{},"108-9":{},"113-6":{},"121-6":{},"131-6":{},"131-9":{},"138-6":{},"138-9":{},"145-6":{},"145-10":{},"151-6":{},"151-11":{},"160-6":{},"160-11":{},"195-1":{},"374-5":{},"380-5":{},"388-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"22":{},"23":{},"25":{},"26":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"66":{},"67":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"78":{},"79":{},"84":{},"85":{},"87":{},"88":{},"93":{},"94":{},"96":{},"101":{},"102":{},"107":{},"108":{},"113":{},"114":{},"115":{},"116":{},"121":{},"122":{},"123":{},"124":{},"127":{},"130":{},"131":{},"134":{},"137":{},"138":{},"141":{},"144":{},"145":{},"148":{},"151":{},"152":{},"153":{},"154":{},"157":{},"160":{},"161":{},"162":{},"163":{},"169":{},"170":{},"176":{},"177":{},"178":{},"179":{},"185":{},"186":{},"187":{},"188":{},"193":{},"195":{},"196":{},"201":{},"203":{},"204":{},"205":{},"206":{},"211":{},"213":{},"214":{},"215":{},"216":{},"219":{},"222":{},"223":{},"226":{},"229":{},"230":{},"231":{},"232":{},"235":{},"238":{},"239":{},"240":{},"241":{},"243":{},"244":{},"246":{},"249":{},"250":{},"252":{},"253":{},"255":{},"258":{},"259":{},"260":{},"261":{},"263":{},"264":{},"266":{},"269":{},"270":{},"271":{},"272":{},"274":{},"275":{},"279":{},"280":{},"282":{},"285":{},"286":{},"287":{},"288":{},"290":{},"293":{},"294":{},"295":{},"296":{},"298":{},"299":{},"300":{},"301":{},"303":{},"305":{},"306":{},"308":{},"309":{},"310":{},"311":{},"313":{},"314":{},"316":{},"317":{},"318":{},"319":{},"321":{},"323":{},"324":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"356":{},"357":{},"358":{},"363":{},"365":{},"366":{},"367":{},"368":{},"373":{},"374":{},"379":{},"380":{},"381":{},"382":{},"387":{},"388":{},"389":{},"390":{},"395":{},"396":{},"401":{},"402":{},"407":{},"408":{},"409":{},"410":{},"415":{},"416":{},"417":{},"418":{},"422":{},"425":{},"426":{},"427":{},"431":{},"434":{},"435":{},"436":{},"437":{},"438":{},"442":{},"445":{},"446":{},"447":{},"448":{},"449":{}},"component":{}}],["us/azure/aks/support",{"_index":1824,"title":{},"name":{},"text":{"36":{}},"component":{}}],["usabl",{"_index":726,"title":{},"name":{},"text":{"10":{},"44":{}},"component":{}}],["usag",{"_index":541,"title":{"8":{},"43":{},"70":{},"78":{},"86":{},"95":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{},"8-4":{},"11-3":{},"45-4":{},"67-1":{},"75-1":{},"427-1":{},"435-1":{},"446-1":{}},"name":{"70":{},"78":{},"86":{},"95":{},"102":{},"108":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"185":{},"196":{},"203":{},"213":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"303":{},"314":{},"321":{},"332":{},"340":{},"348":{},"355":{},"365":{},"374":{},"379":{},"387":{},"396":{},"402":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"text":{"8":{},"9":{},"11":{},"16":{},"22":{},"40":{},"42":{},"43":{},"46":{},"47":{},"50":{},"52":{},"54":{},"61":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"152":{},"161":{},"177":{},"186":{},"195":{},"204":{},"214":{},"230":{},"239":{},"259":{},"270":{},"285":{},"286":{},"293":{},"294":{},"304":{},"322":{},"358":{},"368":{},"380":{},"388":{},"408":{},"416":{},"436":{},"447":{}},"component":{}}],["usd",{"_index":1355,"title":{},"name":{},"text":{"23":{}},"component":{}}],["useabl",{"_index":1404,"title":{},"name":{},"text":{"26":{}},"component":{}}],["useless",{"_index":1762,"title":{},"name":{},"text":{"35":{}},"component":{}}],["user",{"_index":171,"title":{"37":{},"285-2":{},"285-5":{},"293-2":{},"293-5":{}},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"8":{},"11":{},"14":{},"16":{},"29":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"49":{},"54":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"68":{},"71":{},"76":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"177":{},"186":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"223":{},"229":{},"230":{},"232":{},"238":{},"239":{},"241":{},"274":{},"275":{},"280":{},"282":{},"285":{},"290":{},"293":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"356":{},"363":{},"365":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{},"427":{},"435":{},"446":{}},"component":{}}],["user/job",{"_index":2925,"title":{},"name":{},"text":{"102":{},"108":{}},"component":{}}],["user=admin",{"_index":4014,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["user_authentication_for_product",{"_index":1880,"title":{},"name":{"37":{}},"text":{},"component":{}}],["usercredentialssecret",{"_index":3995,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["usernam",{"_index":2526,"title":{},"name":{},"text":{"60":{},"61":{},"62":{},"63":{},"71":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"396":{},"402":{},"408":{},"416":{}},"component":{}}],["userregistrationrol",{"_index":3060,"title":{},"name":{},"text":{"113":{},"121":{},"374":{},"379":{},"387":{}},"component":{}}],["users/job",{"_index":2922,"title":{"102-1":{},"108-1":{}},"name":{},"text":{},"component":{}}],["users[0].accesskey=hive,users[0].secretkey=hivehive,users[0].policy=readwrit",{"_index":3655,"title":{},"name":{},"text":{"232":{},"241":{}},"component":{}}],["user’",{"_index":3832,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["using_values_from_configmap",{"_index":1924,"title":{},"name":{"38":{}},"text":{},"component":{}}],["usr/bin/stackablectl",{"_index":2297,"title":{},"name":{},"text":{"51":{}},"component":{}}],["usual",{"_index":519,"title":{},"name":{},"text":{"7":{},"8":{},"14":{},"15":{},"16":{},"32":{},"45":{},"329":{},"337":{},"345":{}},"component":{}}],["utf",{"_index":3979,"title":{},"name":{},"text":{"374":{},"379":{},"387":{}},"component":{}}],["util",{"_index":1313,"title":{},"name":{},"text":{"23":{},"50":{},"60":{},"61":{},"62":{},"176":{},"177":{},"185":{},"186":{},"258":{},"269":{},"426":{},"434":{},"445":{}},"component":{}}],["uuid",{"_index":2573,"title":{},"name":{},"text":{"61":{}},"component":{}}],["v0.22.4",{"_index":2961,"title":{},"name":{},"text":{"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"374":{},"380":{},"388":{}},"component":{}}],["v0.41.0",{"_index":3804,"title":{},"name":{},"text":{"303":{},"314":{},"321":{}},"component":{}}],["v1",{"_index":508,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"14":{},"15":{},"22":{},"39":{},"63":{},"71":{},"86":{},"87":{},"95":{},"96":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"145":{},"151":{},"160":{},"223":{},"229":{},"230":{},"238":{},"239":{},"280":{},"285":{},"286":{},"293":{},"294":{},"304":{},"322":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"374":{},"380":{},"388":{},"396":{},"402":{},"407":{},"415":{},"427":{},"435":{},"446":{}},"component":{}}],["v1.19",{"_index":1844,"title":{},"name":{},"text":{"36":{}},"component":{}}],["v1.20",{"_index":1845,"title":{},"name":{},"text":{"36":{}},"component":{}}],["v1.21",{"_index":1846,"title":{},"name":{},"text":{"36":{}},"component":{}}],["v1.21.1",{"_index":141,"title":{},"name":{},"text":{"1":{}},"component":{}}],["v1.yaml",{"_index":2358,"title":{},"name":{},"text":{"53":{}},"component":{}}],["v1alpha1",{"_index":3131,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["v2.3.9",{"_index":3610,"title":{},"name":{},"text":{"223":{},"229":{},"238":{}},"component":{}}],["v3.2.0",{"_index":3673,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["v387",{"_index":4008,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["valid",{"_index":1740,"title":{},"name":{},"text":{"35":{},"38":{},"40":{},"45":{},"279":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["valu",{"_index":698,"title":{"38":{}},"name":{},"text":{"9":{},"14":{},"15":{},"17":{},"23":{},"31":{},"32":{},"34":{},"38":{},"46":{},"47":{},"61":{},"80":{},"81":{},"84":{},"87":{},"89":{},"90":{},"93":{},"96":{},"97":{},"98":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"111":{},"113":{},"117":{},"118":{},"119":{},"121":{},"125":{},"126":{},"128":{},"131":{},"132":{},"133":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"146":{},"147":{},"149":{},"151":{},"152":{},"155":{},"156":{},"158":{},"160":{},"161":{},"164":{},"165":{},"166":{},"167":{},"170":{},"171":{},"172":{},"173":{},"174":{},"176":{},"180":{},"181":{},"182":{},"183":{},"185":{},"189":{},"190":{},"191":{},"192":{},"196":{},"197":{},"198":{},"199":{},"200":{},"203":{},"204":{},"207":{},"208":{},"209":{},"210":{},"213":{},"214":{},"217":{},"218":{},"220":{},"223":{},"224":{},"225":{},"227":{},"229":{},"233":{},"234":{},"236":{},"238":{},"242":{},"244":{},"247":{},"250":{},"251":{},"253":{},"256":{},"258":{},"262":{},"264":{},"267":{},"269":{},"273":{},"274":{},"275":{},"277":{},"281":{},"282":{},"285":{},"289":{},"290":{},"293":{},"297":{},"298":{},"300":{},"307":{},"308":{},"310":{},"315":{},"316":{},"318":{},"325":{},"326":{},"327":{},"333":{},"334":{},"335":{},"341":{},"342":{},"343":{},"349":{},"350":{},"351":{},"356":{},"359":{},"360":{},"361":{},"366":{},"369":{},"370":{},"371":{},"374":{},"375":{},"376":{},"377":{},"379":{},"383":{},"384":{},"385":{},"387":{},"391":{},"392":{},"393":{},"396":{},"397":{},"398":{},"399":{},"402":{},"403":{},"404":{},"405":{},"407":{},"411":{},"412":{},"413":{},"415":{},"419":{},"420":{},"421":{},"423":{},"426":{},"428":{},"429":{},"430":{},"432":{},"434":{},"439":{},"440":{},"441":{},"443":{},"445":{}},"component":{}}],["value_from",{"_index":1072,"title":{},"name":{},"text":{"15":{}},"component":{}}],["vanilla",{"_index":1564,"title":{},"name":{},"text":{"30":{}},"component":{}}],["var",{"_index":1089,"title":{},"name":{},"text":{"15":{},"34":{}},"component":{}}],["var/lib/stack",{"_index":1720,"title":{},"name":{},"text":{"34":{}},"component":{}}],["var/log/hadoop",{"_index":1723,"title":{},"name":{},"text":{"34":{}},"component":{}}],["var/log/stackable/servicelog",{"_index":1722,"title":{},"name":{},"text":{"34":{}},"component":{}}],["var/opt",{"_index":1693,"title":{},"name":{},"text":{"34":{}},"component":{}}],["varchar",{"_index":4024,"title":{},"name":{},"text":{"396":{},"402":{},"407":{},"415":{}},"component":{}}],["vari",{"_index":618,"title":{},"name":{},"text":{"8":{},"15":{},"44":{},"48":{}},"component":{}}],["variabl",{"_index":1039,"title":{"98-4":{},"102-7":{},"104-4":{},"108-7":{},"110-4":{},"113-4":{},"118-4":{},"121-4":{},"126-4":{},"131-15":{},"133-4":{},"138-15":{},"140-4":{},"145-16":{},"147-4":{},"151-17":{},"156-4":{},"160-17":{},"165-4":{},"172-4":{},"181-4":{},"190-4":{},"196-4":{},"198-4":{},"203-4":{},"208-4":{},"213-4":{},"218-4":{},"223-6":{},"225-4":{},"229-6":{},"234-4":{},"238-6":{},"244-4":{},"250-5":{},"253-4":{},"258-7":{},"264-4":{},"269-7":{},"275-4":{},"280-4":{},"282-4":{},"285-10":{},"290-4":{},"293-10":{},"298-5":{},"303-5":{},"308-5":{},"314-5":{},"316-5":{},"321-5":{},"326-3":{},"334-3":{},"342-3":{},"350-3":{},"360-3":{},"369-4":{},"374-16":{},"376-4":{},"379-11":{},"384-4":{},"387-11":{},"392-4":{},"396-19":{},"398-4":{},"402-19":{},"404-4":{},"407-22":{},"412-4":{},"415-22":{},"421-4":{},"426-6":{},"430-4":{},"434-6":{},"441-4":{},"445-6":{}},"name":{},"text":{"15":{},"29":{},"34":{},"80":{},"81":{},"89":{},"90":{},"98":{},"102":{},"104":{},"108":{},"110":{},"113":{},"114":{},"118":{},"121":{},"122":{},"126":{},"131":{},"133":{},"138":{},"140":{},"145":{},"147":{},"151":{},"156":{},"160":{},"165":{},"170":{},"172":{},"176":{},"181":{},"185":{},"190":{},"196":{},"198":{},"203":{},"204":{},"208":{},"213":{},"214":{},"218":{},"223":{},"225":{},"229":{},"234":{},"238":{},"244":{},"250":{},"253":{},"258":{},"264":{},"269":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"297":{},"298":{},"303":{},"307":{},"308":{},"314":{},"315":{},"316":{},"321":{},"326":{},"334":{},"342":{},"350":{},"360":{},"369":{},"374":{},"376":{},"379":{},"384":{},"387":{},"392":{},"396":{},"398":{},"402":{},"404":{},"407":{},"412":{},"415":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["variant",{"_index":738,"title":{"36-3":{},"41-7":{},"41-8":{},"41-9":{},"41-17":{},"41-18":{},"41-19":{},"41-20":{}},"name":{},"text":{"10":{},"41":{},"45":{}},"component":{}}],["varieti",{"_index":646,"title":{},"name":{},"text":{"8":{},"42":{},"43":{},"48":{}},"component":{}}],["variou",{"_index":610,"title":{},"name":{},"text":{"8":{},"13":{},"33":{},"45":{},"280":{},"285":{},"293":{}},"component":{}}],["vault",{"_index":1725,"title":{"35-7":{}},"name":{},"text":{"35":{},"85":{},"94":{}},"component":{}}],["vendor",{"_index":1714,"title":{},"name":{},"text":{"34":{},"47":{},"51":{}},"component":{}}],["vendorid",{"_index":2713,"title":{},"name":{},"text":{"62":{}},"component":{}}],["verb",{"_index":3075,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["verden",{"_index":2585,"title":{},"name":{},"text":{"61":{}},"component":{}}],["veri",{"_index":100,"title":{},"name":{},"text":{"1":{},"5":{},"10":{},"28":{},"29":{},"30":{},"31":{},"32":{},"35":{},"38":{},"44":{},"48":{},"60":{},"61":{},"63":{},"71":{},"274":{},"275":{},"282":{},"285":{},"290":{},"293":{},"330":{},"338":{},"346":{},"353":{},"363":{},"374":{},"379":{},"387":{},"436":{},"447":{}},"component":{}}],["verif",{"_index":1974,"title":{"69-1":{},"69-2":{},"69-3":{},"69-4":{},"77-1":{},"77-2":{},"77-3":{},"77-4":{}},"name":{},"text":{"39":{},"40":{},"63":{},"69":{},"71":{},"77":{},"407":{},"415":{}},"component":{}}],["verifi",{"_index":1954,"title":{"114-5":{},"122-5":{},"152-5":{},"161-5":{},"177-5":{},"186-5":{},"204-4":{},"214-4":{},"230-3":{},"239-3":{},"259-4":{},"270-4":{},"286-4":{},"294-4":{},"356-2":{},"366-2":{},"408-2":{},"416-2":{}},"name":{},"text":{"38":{},"69":{},"77":{},"114":{},"116":{},"122":{},"124":{},"152":{},"161":{},"176":{},"177":{},"178":{},"179":{},"185":{},"186":{},"187":{},"188":{},"204":{},"205":{},"206":{},"214":{},"215":{},"216":{},"230":{},"239":{},"259":{},"270":{},"286":{},"294":{},"356":{},"358":{},"366":{},"368":{},"408":{},"416":{}},"component":{}}],["version",{"_index":226,"title":{"20":{},"36":{},"41":{},"44":{},"36-2":{},"41-8":{},"41-9":{},"41-11":{},"41-12":{},"41-17":{},"41-18":{},"41-19":{},"41-20":{},"100-1":{},"106-1":{},"112-1":{},"120-1":{},"129-1":{},"136-1":{},"143-1":{},"150-1":{},"159-1":{},"168-1":{},"175-1":{},"184-1":{},"194-1":{},"202-1":{},"212-1":{},"221-1":{},"228-1":{},"237-1":{},"248-1":{},"257-1":{},"268-1":{},"278-1":{},"284-1":{},"292-1":{},"302-1":{},"312-1":{},"320-1":{},"328-1":{},"336-1":{},"344-1":{},"352-1":{},"362-1":{},"372-1":{},"378-1":{},"386-1":{},"394-1":{},"400-1":{},"406-1":{},"414-1":{},"424-1":{},"433-1":{},"444-1":{}},"name":{},"text":{"2":{},"4":{},"5":{},"12":{},"16":{},"18":{},"19":{},"20":{},"29":{},"30":{},"33":{},"36":{},"39":{},"40":{},"41":{},"45":{},"46":{},"49":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"79":{},"88":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"114":{},"116":{},"120":{},"121":{},"122":{},"124":{},"129":{},"131":{},"136":{},"138":{},"143":{},"145":{},"150":{},"151":{},"152":{},"154":{},"159":{},"160":{},"161":{},"163":{},"168":{},"170":{},"175":{},"176":{},"177":{},"179":{},"184":{},"185":{},"186":{},"188":{},"194":{},"195":{},"196":{},"202":{},"203":{},"204":{},"206":{},"212":{},"213":{},"214":{},"216":{},"221":{},"223":{},"228":{},"229":{},"230":{},"232":{},"237":{},"238":{},"239":{},"241":{},"243":{},"244":{},"248":{},"250":{},"252":{},"253":{},"257":{},"258":{},"259":{},"261":{},"263":{},"264":{},"268":{},"269":{},"270":{},"272":{},"274":{},"275":{},"276":{},"278":{},"279":{},"280":{},"282":{},"283":{},"284":{},"285":{},"286":{},"288":{},"290":{},"291":{},"292":{},"293":{},"294":{},"296":{},"301":{},"302":{},"303":{},"304":{},"306":{},"311":{},"312":{},"314":{},"319":{},"320":{},"321":{},"322":{},"324":{},"328":{},"330":{},"332":{},"336":{},"338":{},"340":{},"344":{},"346":{},"348":{},"352":{},"353":{},"355":{},"356":{},"358":{},"362":{},"363":{},"365":{},"366":{},"368":{},"372":{},"374":{},"378":{},"379":{},"380":{},"382":{},"386":{},"387":{},"388":{},"390":{},"394":{},"396":{},"400":{},"402":{},"406":{},"407":{},"408":{},"410":{},"414":{},"415":{},"416":{},"418":{},"420":{},"421":{},"424":{},"426":{},"429":{},"430":{},"433":{},"434":{},"436":{},"438":{},"440":{},"441":{},"444":{},"445":{},"447":{},"449":{}},"component":{}}],["version\":\"2.4.12",{"_index":3449,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["version.pi",{"_index":359,"title":{},"name":{},"text":{"4":{}},"component":{}}],["version=10",{"_index":3623,"title":{},"name":{},"text":{"223":{},"229":{},"232":{},"238":{},"241":{}},"component":{}}],["version=11",{"_index":3285,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["version=self.api_vers",{"_index":3146,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["versions.adoc",{"_index":1148,"title":{},"name":{},"text":{"16":{}},"component":{}}],["versions.html",{"_index":1830,"title":{},"name":{},"text":{"36":{}},"component":{}}],["versions?tabs=azur",{"_index":1825,"title":{},"name":{},"text":{"36":{}},"component":{}}],["vi",{"_index":356,"title":{},"name":{},"text":{"4":{}},"component":{}}],["via",{"_index":399,"title":{"43-10":{},"62-12":{},"102-12":{},"102-13":{},"108-12":{},"108-13":{},"113-15":{},"113-16":{},"121-15":{},"121-16":{},"286-7":{},"294-7":{},"332-4":{},"332-7":{},"340-4":{},"340-7":{},"348-4":{},"348-7":{},"355-3":{},"355-6":{},"365-3":{},"365-6":{},"407-11":{},"407-12":{},"407-13":{},"408-3":{},"415-11":{},"415-12":{},"415-13":{},"416-3":{}},"name":{},"text":{"5":{},"7":{},"8":{},"14":{},"15":{},"19":{},"23":{},"38":{},"40":{},"43":{},"44":{},"48":{},"49":{},"51":{},"52":{},"53":{},"60":{},"61":{},"62":{},"98":{},"99":{},"102":{},"104":{},"105":{},"108":{},"110":{},"111":{},"113":{},"114":{},"118":{},"119":{},"121":{},"122":{},"126":{},"128":{},"133":{},"135":{},"140":{},"142":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"223":{},"225":{},"227":{},"229":{},"230":{},"232":{},"234":{},"236":{},"238":{},"239":{},"241":{},"243":{},"244":{},"247":{},"250":{},"252":{},"253":{},"256":{},"258":{},"259":{},"263":{},"264":{},"267":{},"269":{},"270":{},"274":{},"275":{},"277":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"298":{},"300":{},"301":{},"308":{},"310":{},"311":{},"316":{},"318":{},"319":{},"326":{},"327":{},"331":{},"332":{},"334":{},"335":{},"339":{},"340":{},"342":{},"343":{},"347":{},"348":{},"350":{},"351":{},"354":{},"355":{},"360":{},"361":{},"364":{},"365":{},"369":{},"371":{},"374":{},"376":{},"377":{},"379":{},"384":{},"385":{},"387":{},"392":{},"393":{},"396":{},"398":{},"399":{},"402":{},"404":{},"405":{},"407":{},"408":{},"412":{},"413":{},"415":{},"416":{},"420":{},"421":{},"423":{},"426":{},"429":{},"430":{},"432":{},"434":{},"440":{},"441":{},"443":{},"445":{}},"component":{}}],["viabl",{"_index":627,"title":{},"name":{},"text":{"8":{},"44":{}},"component":{}}],["view",{"_index":2429,"title":{"60-4":{},"60-7":{},"60-8":{},"60-9":{},"61-6":{},"61-9":{},"61-10":{},"61-11":{},"62-5":{}},"name":{},"text":{"57":{},"62":{},"113":{},"115":{},"121":{},"123":{},"176":{},"185":{},"374":{},"379":{},"387":{}},"component":{}}],["virtual",{"_index":1525,"title":{},"name":{},"text":{"30":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["virtualhost",{"_index":1299,"title":{},"name":{},"text":{"22":{}},"component":{}}],["visit",{"_index":119,"title":{},"name":{},"text":{"1":{},"408":{},"416":{}},"component":{}}],["visual",{"_index":243,"title":{},"name":{},"text":{"2":{},"23":{},"45":{},"50":{},"58":{},"60":{},"61":{},"62":{}},"component":{}}],["visualstudio",{"_index":980,"title":{},"name":{},"text":{"13":{}},"component":{}}],["voic",{"_index":1212,"title":{},"name":{},"text":{"17":{}},"component":{}}],["void",{"_index":2769,"title":{},"name":{},"text":{"62":{}},"component":{}}],["volum",{"_index":563,"title":{"87":{},"96":{},"196-5":{},"203-5":{},"213-5":{},"250-6":{},"258-8":{},"269-8":{},"280-5":{},"285-11":{},"293-11":{},"330-4":{},"338-4":{},"346-4":{},"353-4":{},"363-4":{},"407-23":{},"415-23":{},"426-7":{},"434-7":{},"445-7":{}},"name":{"87":{},"96":{}},"text":{"8":{},"47":{},"84":{},"85":{},"86":{},"87":{},"93":{},"94":{},"95":{},"96":{},"102":{},"108":{},"113":{},"121":{},"193":{},"196":{},"201":{},"203":{},"211":{},"213":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"329":{},"330":{},"332":{},"337":{},"338":{},"340":{},"345":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"407":{},"415":{},"426":{},"434":{},"445":{}},"component":{}}],["volumeclaimtempl",{"_index":2891,"title":{},"name":{},"text":{"86":{},"87":{},"95":{},"96":{}},"component":{}}],["volumemount",{"_index":2897,"title":{},"name":{},"text":{"86":{},"87":{},"95":{},"96":{},"102":{},"108":{},"113":{},"121":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{}},"component":{}}],["volumenam",{"_index":3867,"title":{},"name":{},"text":{"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["vs",{"_index":2100,"title":{},"name":{},"text":{"41":{}},"component":{}}],["vulner",{"_index":2097,"title":{},"name":{},"text":{"41":{}},"component":{}}],["waibel",{"_index":1371,"title":{},"name":{},"text":{"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"48":{}},"component":{}}],["wait",{"_index":2545,"title":{},"name":{},"text":{"60":{},"61":{},"114":{},"116":{},"122":{},"124":{},"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"232":{},"241":{},"261":{},"272":{},"286":{},"288":{},"294":{},"296":{},"306":{},"324":{},"356":{},"358":{},"366":{},"368":{},"380":{},"382":{},"388":{},"390":{},"408":{},"410":{},"416":{},"418":{},"438":{},"449":{}},"component":{}}],["walkthrough",{"_index":928,"title":{"13-2":{}},"name":{},"text":{},"component":{}}],["want",{"_index":50,"title":{},"name":{},"text":{"1":{},"9":{},"10":{},"11":{},"13":{},"30":{},"32":{},"35":{},"37":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"62":{},"102":{},"108":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"160":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"223":{},"229":{},"238":{},"250":{},"258":{},"269":{},"280":{},"285":{},"293":{},"301":{},"303":{},"311":{},"314":{},"319":{},"321":{},"356":{},"366":{},"374":{},"379":{},"380":{},"387":{},"388":{},"426":{},"434":{},"445":{}},"component":{}}],["warehous",{"_index":280,"title":{},"name":{},"text":{"2":{}},"component":{}}],["warn",{"_index":1125,"title":{},"name":{},"text":{"16":{},"37":{},"57":{},"60":{},"61":{},"62":{},"408":{},"416":{}},"component":{}}],["warranti",{"_index":3101,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["watch",{"_index":1666,"title":{"97-2":{},"98-3":{},"103-2":{},"104-3":{},"109-2":{},"110-3":{},"117-2":{},"118-3":{},"125-2":{},"126-3":{},"132-2":{},"133-3":{},"139-2":{},"140-3":{},"146-2":{},"147-3":{},"155-2":{},"156-3":{},"164-2":{},"165-3":{},"171-2":{},"172-3":{},"180-2":{},"181-3":{},"189-2":{},"190-3":{},"197-2":{},"198-3":{},"207-2":{},"208-3":{},"217-2":{},"218-3":{},"224-2":{},"225-3":{},"233-2":{},"234-3":{},"242-2":{},"244-3":{},"251-2":{},"253-3":{},"262-2":{},"264-3":{},"273-2":{},"275-3":{},"281-3":{},"282-3":{},"289-3":{},"290-3":{},"297-2":{},"298-3":{},"307-2":{},"308-3":{},"315-2":{},"316-3":{},"325-1":{},"326-2":{},"333-1":{},"334-2":{},"341-1":{},"342-2":{},"349-1":{},"350-2":{},"359-1":{},"360-2":{},"369-3":{},"370-2":{},"375-2":{},"376-3":{},"383-2":{},"384-3":{},"391-2":{},"392-3":{},"397-2":{},"398-3":{},"403-2":{},"404-3":{},"411-2":{},"412-3":{},"419-2":{},"421-3":{},"428-2":{},"430-3":{},"439-2":{},"441-3":{}},"name":{},"text":{"33":{},"38":{},"39":{},"42":{},"43":{},"47":{},"70":{},"78":{},"97":{},"98":{},"99":{},"103":{},"104":{},"105":{},"109":{},"110":{},"111":{},"117":{},"118":{},"119":{},"125":{},"126":{},"128":{},"132":{},"133":{},"135":{},"139":{},"140":{},"142":{},"146":{},"147":{},"149":{},"155":{},"156":{},"158":{},"164":{},"165":{},"167":{},"171":{},"172":{},"174":{},"177":{},"180":{},"181":{},"183":{},"186":{},"189":{},"190":{},"192":{},"197":{},"198":{},"200":{},"204":{},"207":{},"208":{},"210":{},"214":{},"217":{},"218":{},"220":{},"224":{},"225":{},"227":{},"233":{},"234":{},"236":{},"242":{},"244":{},"247":{},"251":{},"253":{},"256":{},"262":{},"264":{},"267":{},"273":{},"275":{},"277":{},"281":{},"282":{},"289":{},"290":{},"297":{},"298":{},"300":{},"301":{},"307":{},"308":{},"310":{},"311":{},"315":{},"316":{},"318":{},"319":{},"325":{},"326":{},"327":{},"333":{},"334":{},"335":{},"341":{},"342":{},"343":{},"349":{},"350":{},"351":{},"359":{},"360":{},"361":{},"369":{},"370":{},"371":{},"375":{},"376":{},"377":{},"383":{},"384":{},"385":{},"391":{},"392":{},"393":{},"397":{},"398":{},"399":{},"403":{},"404":{},"405":{},"408":{},"411":{},"412":{},"413":{},"416":{},"419":{},"421":{},"423":{},"428":{},"430":{},"432":{},"436":{},"439":{},"441":{},"443":{},"447":{}},"component":{}}],["watch_namespac",{"_index":2908,"title":{"98-6":{},"99-2":{},"104-6":{},"105-2":{},"110-6":{},"111-2":{},"118-6":{},"119-2":{},"126-6":{},"128-2":{},"133-6":{},"135-2":{},"140-6":{},"142-2":{},"147-6":{},"149-2":{},"156-6":{},"158-2":{},"165-6":{},"167-2":{},"172-6":{},"174-2":{},"181-6":{},"183-2":{},"190-6":{},"192-2":{},"198-6":{},"200-2":{},"208-6":{},"210-2":{},"218-6":{},"220-2":{},"225-6":{},"227-2":{},"234-6":{},"236-2":{},"244-6":{},"247-2":{},"253-6":{},"256-2":{},"264-6":{},"267-2":{},"275-6":{},"277-2":{},"282-6":{},"290-6":{},"298-7":{},"300-2":{},"308-7":{},"310-2":{},"316-7":{},"318-2":{},"326-4":{},"327-1":{},"334-4":{},"335-1":{},"342-4":{},"343-1":{},"350-4":{},"351-1":{},"360-4":{},"361-1":{},"369-6":{},"371-2":{},"376-6":{},"377-2":{},"384-6":{},"385-2":{},"392-6":{},"393-2":{},"398-6":{},"399-2":{},"404-6":{},"405-2":{},"412-6":{},"413-2":{},"421-6":{},"423-2":{},"430-6":{},"432-2":{},"441-6":{},"443-2":{}},"name":{},"text":{},"component":{}}],["watch_namespace=test",{"_index":2916,"title":{},"name":{},"text":{"98":{},"99":{},"104":{},"105":{},"110":{},"111":{},"118":{},"119":{},"126":{},"128":{},"133":{},"135":{},"140":{},"142":{},"147":{},"149":{},"156":{},"158":{},"165":{},"167":{},"172":{},"174":{},"181":{},"183":{},"190":{},"192":{},"198":{},"200":{},"208":{},"210":{},"218":{},"220":{},"225":{},"227":{},"234":{},"236":{},"244":{},"247":{},"253":{},"256":{},"264":{},"267":{},"275":{},"277":{},"282":{},"290":{},"298":{},"300":{},"308":{},"310":{},"316":{},"318":{},"326":{},"327":{},"334":{},"335":{},"342":{},"343":{},"350":{},"351":{},"360":{},"361":{},"369":{},"371":{},"376":{},"377":{},"384":{},"385":{},"392":{},"393":{},"398":{},"399":{},"404":{},"405":{},"412":{},"413":{},"421":{},"423":{},"430":{},"432":{},"441":{},"443":{}},"component":{}}],["watching/restart",{"_index":1952,"title":{},"name":{},"text":{"38":{}},"component":{}}],["water",{"_index":2553,"title":{"61":{}},"name":{"61":{}},"text":{"61":{}},"component":{}}],["way",{"_index":24,"title":{"33":{}},"name":{},"text":{"1":{},"2":{},"7":{},"8":{},"10":{},"14":{},"15":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"52":{},"55":{},"57":{},"60":{},"61":{},"62":{},"63":{},"66":{},"70":{},"71":{},"74":{},"78":{},"79":{},"83":{},"88":{},"92":{},"101":{},"102":{},"107":{},"108":{},"113":{},"116":{},"121":{},"124":{},"130":{},"137":{},"144":{},"145":{},"151":{},"154":{},"160":{},"163":{},"169":{},"177":{},"179":{},"186":{},"188":{},"195":{},"206":{},"216":{},"222":{},"223":{},"229":{},"232":{},"238":{},"241":{},"249":{},"261":{},"272":{},"274":{},"275":{},"279":{},"285":{},"288":{},"293":{},"296":{},"301":{},"306":{},"311":{},"313":{},"319":{},"324":{},"329":{},"330":{},"337":{},"338":{},"345":{},"346":{},"353":{},"358":{},"363":{},"368":{},"373":{},"382":{},"390":{},"395":{},"401":{},"410":{},"418":{},"425":{},"438":{},"449":{}},"component":{}}],["web",{"_index":1302,"title":{"23-20":{},"23-26":{},"286-5":{},"294-5":{},"408-4":{},"416-4":{}},"name":{},"text":{"33":{},"45":{},"60":{},"61":{},"62":{},"69":{},"77":{},"114":{},"122":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"223":{},"229":{},"238":{},"274":{},"275":{},"282":{},"286":{},"290":{},"294":{},"299":{},"309":{},"317":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["web_stat",{"_index":3429,"title":{},"name":{},"text":{"176":{},"177":{},"185":{},"186":{}},"component":{}}],["weber",{"_index":1960,"title":{},"name":{},"text":{"39":{},"41":{}},"component":{}}],["webhdf",{"_index":3557,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["webhdfs.yaml",{"_index":3555,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["webinterfac",{"_index":2463,"title":{"62-3":{},"62-4":{},"113-8":{},"113-11":{},"121-8":{},"121-11":{},"374-7":{},"374-10":{},"379-2":{},"379-5":{},"387-2":{},"387-5":{}},"name":{},"text":{"60":{},"61":{},"62":{},"285":{},"293":{},"374":{},"379":{},"387":{}},"component":{}}],["webpki",{"_index":2026,"title":{},"name":{},"text":{"40":{},"69":{},"77":{}},"component":{}}],["webserv",{"_index":642,"title":{},"name":{},"text":{"8":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{}},"component":{}}],["webservertimeout",{"_index":3984,"title":{},"name":{},"text":{"380":{},"388":{}},"component":{}}],["webservic",{"_index":2555,"title":{},"name":{},"text":{"61":{}},"component":{}}],["websit",{"_index":120,"title":{},"name":{},"text":{"1":{},"44":{},"60":{},"62":{}},"component":{}}],["week",{"_index":1873,"title":{},"name":{},"text":{"36":{}},"component":{}}],["weird",{"_index":2684,"title":{},"name":{},"text":{"62":{}},"component":{}}],["welcom",{"_index":206,"title":{},"name":{},"text":{"2":{},"13":{}},"component":{}}],["well",{"_index":207,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"9":{},"10":{},"14":{},"16":{},"17":{},"18":{},"28":{},"30":{},"34":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"55":{},"58":{},"60":{},"61":{},"62":{},"79":{},"87":{},"88":{},"96":{},"114":{},"116":{},"122":{},"124":{},"131":{},"138":{},"145":{},"151":{},"154":{},"160":{},"163":{},"170":{},"176":{},"179":{},"185":{},"188":{},"191":{},"196":{},"199":{},"203":{},"206":{},"209":{},"213":{},"216":{},"223":{},"229":{},"232":{},"238":{},"241":{},"250":{},"258":{},"261":{},"269":{},"272":{},"288":{},"296":{},"358":{},"368":{},"374":{},"379":{},"380":{},"382":{},"387":{},"388":{},"390":{},"396":{},"402":{},"407":{},"410":{},"415":{},"418":{},"426":{},"427":{},"434":{},"435":{},"436":{},"437":{},"445":{},"446":{},"447":{},"448":{}},"component":{}}],["went",{"_index":3812,"title":{},"name":{},"text":{"304":{},"322":{}},"component":{}}],["west",{"_index":3730,"title":{},"name":{},"text":{"274":{},"275":{},"285":{},"293":{}},"component":{}}],["wether",{"_index":2336,"title":{},"name":{},"text":{"52":{}},"component":{}}],["we’d",{"_index":1532,"title":{},"name":{},"text":{"30":{},"33":{},"44":{}},"component":{}}],["we’ll",{"_index":86,"title":{},"name":{},"text":{"1":{},"5":{},"13":{}},"component":{}}],["we’r",{"_index":131,"title":{},"name":{},"text":{"1":{},"2":{},"37":{}},"component":{}}],["whatev",{"_index":974,"title":{},"name":{},"text":{"13":{},"35":{},"102":{},"108":{},"114":{},"122":{}},"component":{}}],["what’",{"_index":707,"title":{"10-7":{},"114-6":{},"115-2":{},"116-5":{},"122-6":{},"123-2":{},"124-5":{},"152-8":{},"153-2":{},"154-4":{},"161-8":{},"162-2":{},"163-4":{},"177-6":{},"178-2":{},"179-4":{},"186-6":{},"187-2":{},"188-4":{},"204-5":{},"205-2":{},"206-4":{},"214-5":{},"215-2":{},"216-4":{},"230-4":{},"231-2":{},"232-9":{},"239-4":{},"240-2":{},"241-9":{},"259-5":{},"260-2":{},"261-4":{},"270-5":{},"271-2":{},"272-4":{},"286-8":{},"287-2":{},"288-4":{},"294-8":{},"295-2":{},"296-4":{},"304-4":{},"305-2":{},"306-4":{},"322-4":{},"323-2":{},"324-4":{},"357-2":{},"358-5":{},"367-2":{},"368-5":{},"380-6":{},"381-2":{},"382-4":{},"388-6":{},"389-2":{},"390-4":{},"408-6":{},"409-2":{},"410-4":{},"416-6":{},"417-2":{},"418-4":{},"436-4":{},"437-2":{},"438-4":{},"447-4":{},"448-2":{},"449-4":{}},"name":{},"text":{},"component":{}}],["wheel",{"_index":2179,"title":{},"name":{},"text":{"44":{}},"component":{}}],["whenev",{"_index":498,"title":{},"name":{},"text":{"7":{}},"component":{}}],["wherea",{"_index":2087,"title":{},"name":{},"text":{"41":{},"48":{}},"component":{}}],["wherebi",{"_index":2977,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["whether",{"_index":43,"title":{},"name":{},"text":{"1":{},"27":{},"38":{},"41":{},"48":{},"85":{},"94":{},"113":{},"121":{}},"component":{}}],["whichev",{"_index":1803,"title":{},"name":{},"text":{"36":{}},"component":{}}],["whole",{"_index":1742,"title":{},"name":{},"text":{"35":{},"37":{},"49":{},"60":{},"61":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{}},"component":{}}],["who’",{"_index":1647,"title":{},"name":{},"text":{"32":{}},"component":{}}],["wide",{"_index":905,"title":{},"name":{},"text":{"12":{},"48":{}},"component":{}}],["wikipedia",{"_index":2531,"title":{},"name":{},"text":{"60":{},"152":{},"161":{}},"component":{}}],["wil",{"_index":3443,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["wildfli",{"_index":2258,"title":{},"name":{},"text":{"48":{}},"component":{}}],["will",{"_index":1480,"title":{},"name":{},"text":{"28":{}},"component":{}}],["window",{"_index":1820,"title":{"51-3":{}},"name":{},"text":{"36":{},"51":{},"52":{}},"component":{}}],["winter",{"_index":2054,"title":{},"name":{},"text":{"41":{}},"component":{}}],["wireencrypt",{"_index":2129,"title":{},"name":{},"text":{"42":{}},"component":{}}],["wish",{"_index":3674,"title":{},"name":{},"text":{"250":{},"258":{},"269":{}},"component":{}}],["within",{"_index":127,"title":{"11-4":{}},"name":{},"text":{"1":{},"14":{},"36":{},"45":{},"49":{},"60":{},"61":{},"62":{},"113":{},"121":{},"176":{},"185":{},"204":{},"214":{},"219":{},"226":{},"235":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{}},"component":{}}],["without",{"_index":1124,"title":{},"name":{},"text":{"16":{},"28":{},"30":{},"36":{},"39":{},"41":{},"44":{},"57":{},"63":{},"71":{},"113":{},"121":{},"195":{},"274":{},"275":{},"282":{},"285":{},"290":{},"293":{},"330":{},"332":{},"338":{},"340":{},"346":{},"348":{},"353":{},"355":{},"363":{},"365":{},"396":{},"402":{},"407":{},"415":{}},"component":{}}],["wonder",{"_index":4125,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["word",{"_index":592,"title":{},"name":{},"text":{"8":{}},"component":{}}],["work",{"_index":261,"title":{"7-2":{},"9-5":{},"34-12":{},"114-5":{},"122-5":{},"152-5":{},"161-5":{},"177-5":{},"186-5":{},"204-4":{},"214-4":{},"230-3":{},"239-3":{},"259-4":{},"270-4":{},"286-4":{},"294-4":{},"356-2":{},"366-2":{},"408-2":{},"416-2":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"13":{},"15":{},"16":{},"25":{},"30":{},"31":{},"33":{},"34":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"61":{},"69":{},"77":{},"100":{},"102":{},"106":{},"108":{},"112":{},"113":{},"114":{},"116":{},"120":{},"121":{},"122":{},"124":{},"152":{},"161":{},"168":{},"175":{},"177":{},"178":{},"179":{},"184":{},"186":{},"187":{},"188":{},"194":{},"202":{},"204":{},"205":{},"206":{},"212":{},"214":{},"215":{},"216":{},"221":{},"223":{},"228":{},"229":{},"230":{},"232":{},"237":{},"238":{},"239":{},"241":{},"248":{},"257":{},"259":{},"261":{},"268":{},"270":{},"272":{},"276":{},"278":{},"283":{},"284":{},"286":{},"288":{},"291":{},"292":{},"294":{},"296":{},"302":{},"312":{},"320":{},"328":{},"336":{},"344":{},"352":{},"356":{},"358":{},"362":{},"366":{},"368":{},"372":{},"378":{},"386":{},"394":{},"396":{},"400":{},"402":{},"406":{},"407":{},"408":{},"410":{},"414":{},"415":{},"416":{},"418":{},"424":{},"433":{},"444":{}},"component":{}}],["workaround",{"_index":1657,"title":{},"name":{},"text":{"33":{}},"component":{}}],["worker",{"_index":643,"title":{},"name":{},"text":{"8":{},"34":{},"52":{},"54":{},"55":{},"56":{},"58":{},"102":{},"108":{},"113":{},"114":{},"121":{},"122":{},"286":{},"294":{},"396":{},"402":{},"407":{},"408":{},"415":{},"416":{}},"component":{}}],["worker(",{"_index":2954,"title":{},"name":{},"text":{"102":{},"108":{},"114":{},"122":{}},"component":{}}],["workflow",{"_index":267,"title":{"13-1":{}},"name":{},"text":{"2":{},"16":{},"102":{},"108":{},"115":{},"123":{}},"component":{}}],["workload",{"_index":247,"title":{},"name":{},"text":{"2":{},"8":{},"84":{},"93":{},"102":{},"108":{},"114":{},"122":{},"330":{},"338":{},"346":{},"353":{},"363":{}},"component":{}}],["workspac",{"_index":361,"title":{},"name":{},"text":{"4":{}},"component":{}}],["world",{"_index":1388,"title":{"60-9":{},"61-11":{}},"name":{},"text":{"25":{},"33":{},"44":{},"102":{},"108":{},"113":{},"121":{},"193":{},"201":{},"211":{},"304":{},"322":{}},"component":{}}],["worri",{"_index":2131,"title":{},"name":{},"text":{"42":{}},"component":{}}],["worth",{"_index":1588,"title":{},"name":{},"text":{"30":{}},"component":{}}],["wrap",{"_index":3091,"title":{},"name":{},"text":{"113":{},"121":{},"176":{},"185":{}},"component":{}}],["wrapper",{"_index":2310,"title":{},"name":{},"text":{"51":{},"113":{},"121":{}},"component":{}}],["write",{"_index":282,"title":{"23-11":{}},"name":{},"text":{"2":{},"14":{},"15":{},"17":{},"30":{},"33":{},"34":{},"35":{},"38":{},"52":{},"54":{},"55":{},"56":{},"58":{},"101":{},"107":{},"113":{},"121":{},"131":{},"138":{},"145":{},"151":{},"160":{},"169":{},"195":{},"222":{},"249":{},"259":{},"260":{},"270":{},"271":{},"279":{},"286":{},"294":{},"313":{},"373":{},"395":{},"396":{},"401":{},"402":{},"407":{},"415":{},"425":{}},"component":{}}],["writerequestscount",{"_index":3468,"title":{},"name":{},"text":{"177":{},"186":{}},"component":{}}],["written",{"_index":475,"title":{},"name":{},"text":{"7":{},"12":{},"13":{},"14":{},"16":{},"34":{},"38":{},"50":{},"61":{},"79":{},"88":{},"101":{},"107":{},"113":{},"121":{},"130":{},"131":{},"137":{},"138":{},"144":{},"145":{},"151":{},"160":{},"169":{},"222":{},"249":{},"279":{},"285":{},"293":{},"313":{},"373":{},"395":{},"401":{},"425":{}},"component":{}}],["wrong",{"_index":1511,"title":{},"name":{},"text":{"29":{}},"component":{}}],["wsw",{"_index":2478,"title":{},"name":{},"text":{"60":{}},"component":{}}],["x",{"_index":331,"title":{},"name":{},"text":{"3":{},"23":{},"48":{},"51":{},"102":{},"108":{},"113":{},"121":{},"152":{},"161":{},"356":{},"366":{},"408":{},"416":{}},"component":{}}],["x.y.z",{"_index":3665,"title":{},"name":{},"text":{"243":{},"244":{},"252":{},"253":{},"263":{},"264":{}},"component":{}}],["x86_64",{"_index":2290,"title":{},"name":{},"text":{"51":{}},"component":{}}],["xdelet",{"_index":3592,"title":{},"name":{},"text":{"204":{},"214":{}},"component":{}}],["xget",{"_index":3254,"title":{},"name":{},"text":{"114":{},"122":{},"177":{},"186":{},"204":{},"214":{}},"component":{}}],["xml",{"_index":3405,"title":{},"name":{},"text":{"166":{},"170":{},"173":{},"176":{},"182":{},"185":{},"191":{},"196":{},"199":{},"203":{},"209":{},"213":{},"223":{},"229":{},"238":{},"274":{},"275":{},"282":{},"290":{}},"component":{}}],["xpatch",{"_index":3246,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["xpost",{"_index":3250,"title":{},"name":{},"text":{"114":{},"122":{}},"component":{}}],["xput",{"_index":3481,"title":{},"name":{},"text":{"177":{},"186":{},"204":{},"214":{}},"component":{}}],["xxx",{"_index":2223,"title":{"47":{}},"name":{},"text":{"48":{}},"component":{}}],["xxxx",{"_index":3940,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["xxxxxxx",{"_index":3943,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["xxxxxxxxx",{"_index":3946,"title":{},"name":{},"text":{"356":{},"366":{}},"component":{}}],["y",{"_index":1354,"title":{},"name":{},"text":{"23":{}},"component":{}}],["yaml",{"_index":1136,"title":{},"name":{},"text":{"16":{},"33":{},"44":{},"113":{},"121":{},"232":{},"241":{},"243":{},"244":{},"252":{},"253":{},"263":{},"264":{},"274":{},"275":{},"282":{},"290":{},"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["year",{"_index":1790,"title":{},"name":{},"text":{"36":{},"52":{},"54":{},"60":{},"62":{}},"component":{}}],["year(tpep_pickup_datetim",{"_index":2678,"title":{},"name":{},"text":{"62":{}},"component":{}}],["yml",{"_index":3124,"title":{},"name":{},"text":{"113":{},"121":{}},"component":{}}],["york",{"_index":2333,"title":{},"name":{},"text":{"52":{},"54":{},"62":{},"332":{},"340":{},"348":{},"355":{},"365":{}},"component":{}}],["your_secret_acces_key_thatbelongs_to_the_key_id_her",{"_index":3317,"title":{},"name":{},"text":{"145":{},"151":{},"160":{}},"component":{}}],["your_secret_access_key_that_belongs_to_the_key_id_her",{"_index":752,"title":{},"name":{},"text":{"10":{},"22":{}},"component":{}}],["your_valid_access_key_id_her",{"_index":750,"title":{},"name":{},"text":{"10":{},"22":{},"145":{},"151":{},"160":{}},"component":{}}],["yourhost.com",{"_index":3301,"title":{},"name":{},"text":{"131":{},"138":{},"145":{},"151":{},"160":{}},"component":{}}],["yourself",{"_index":800,"title":{},"name":{},"text":{"11":{},"16":{},"407":{},"415":{}},"component":{}}],["you’ll",{"_index":1356,"title":{},"name":{},"text":{"24":{}},"component":{}}],["you’r",{"_index":71,"title":{},"name":{},"text":{"1":{},"49":{},"55":{},"83":{},"92":{},"195":{},"249":{},"279":{},"313":{},"425":{}},"component":{}}],["you’v",{"_index":3393,"title":{},"name":{},"text":{"152":{},"161":{},"304":{},"322":{}},"component":{}}],["yyyi",{"_index":2524,"title":{},"name":{},"text":{"60":{}},"component":{}}],["yyyy/mm",{"_index":2671,"title":{},"name":{},"text":{"62":{}},"component":{}}],["yyyy/mm/dd",{"_index":2631,"title":{},"name":{},"text":{"61":{}},"component":{}}],["zero",{"_index":3519,"title":{},"name":{},"text":{"193":{},"201":{},"211":{}},"component":{}}],["zk",{"_index":770,"title":{},"name":{},"text":{"11":{},"15":{},"40":{},"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"259":{},"269":{},"270":{},"280":{},"285":{},"286":{},"293":{},"294":{},"426":{},"434":{},"436":{},"445":{},"447":{}},"component":{}}],["zk.yaml",{"_index":3438,"title":{},"name":{},"text":{"177":{},"186":{},"204":{},"214":{}},"component":{}}],["zkcli",{"_index":4119,"title":{},"name":{},"text":{"436":{},"447":{}},"component":{}}],["znode",{"_index":450,"title":{"427":{},"435":{},"446":{},"436-2":{},"447-2":{}},"name":{"427":{},"435":{},"446":{}},"text":{"5":{},"23":{},"38":{},"42":{},"152":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"436":{},"437":{},"442":{},"445":{},"446":{},"447":{},"448":{}},"component":{}}],["znode.yaml",{"_index":3440,"title":{},"name":{},"text":{"177":{},"186":{},"204":{},"214":{},"259":{},"270":{},"286":{},"294":{},"436":{},"447":{}},"component":{}}],["zoo.cfg",{"_index":4080,"title":{},"name":{},"text":{"420":{},"421":{},"426":{},"429":{},"430":{},"434":{},"440":{},"441":{},"445":{}},"component":{}}],["zookeep",{"_index":15,"title":{"424":{},"433":{},"444":{},"1-12":{},"1-16":{},"2-14":{},"20-11":{},"23-6":{},"23-9":{},"23-17":{},"47-8":{},"131-2":{},"138-2":{},"145-2":{},"151-2":{},"152-2":{},"160-2":{},"161-2":{},"177-2":{},"186-2":{},"204-2":{},"214-2":{},"245-1":{},"254-1":{},"259-2":{},"265-1":{},"270-2":{},"274-5":{},"275-12":{},"276-1":{},"282-12":{},"283-1":{},"286-2":{},"290-12":{},"291-1":{},"294-2":{},"436-1":{},"447-1":{}},"name":{},"text":{"1":{},"2":{},"5":{},"11":{},"12":{},"15":{},"18":{},"23":{},"34":{},"38":{},"40":{},"47":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"131":{},"138":{},"145":{},"151":{},"152":{},"154":{},"160":{},"161":{},"163":{},"166":{},"170":{},"173":{},"176":{},"177":{},"179":{},"182":{},"185":{},"186":{},"188":{},"193":{},"196":{},"201":{},"203":{},"204":{},"206":{},"211":{},"213":{},"214":{},"216":{},"243":{},"244":{},"245":{},"250":{},"252":{},"253":{},"254":{},"258":{},"259":{},"261":{},"263":{},"264":{},"265":{},"269":{},"270":{},"272":{},"274":{},"275":{},"276":{},"279":{},"280":{},"282":{},"283":{},"285":{},"286":{},"288":{},"290":{},"291":{},"293":{},"294":{},"296":{},"421":{},"422":{},"423":{},"424":{},"425":{},"426":{},"427":{},"430":{},"431":{},"432":{},"433":{},"434":{},"435":{},"436":{},"437":{},"438":{},"441":{},"442":{},"443":{},"444":{},"445":{},"446":{},"447":{},"448":{},"449":{}},"component":{"419":{},"420":{},"421":{},"422":{},"423":{},"424":{},"425":{},"426":{},"427":{},"428":{},"429":{},"430":{},"431":{},"432":{},"433":{},"434":{},"435":{},"436":{},"437":{},"438":{},"439":{},"440":{},"441":{},"442":{},"443":{},"444":{},"445":{},"446":{},"447":{},"448":{},"449":{}}}],["zookeeper.stackable.tech/v1alpha1",{"_index":771,"title":{},"name":{},"text":{"11":{},"40":{},"152":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"259":{},"269":{},"270":{},"280":{},"285":{},"286":{},"293":{},"294":{},"420":{},"421":{},"426":{},"427":{},"429":{},"430":{},"434":{},"435":{},"436":{},"440":{},"441":{},"445":{},"446":{},"447":{}},"component":{}}],["zookeeper.yaml",{"_index":3318,"title":{},"name":{},"text":{"152":{},"161":{},"259":{},"270":{},"286":{},"294":{},"436":{},"447":{}},"component":{}}],["zookeeper=0.11.0",{"_index":3394,"title":{},"name":{},"text":{"154":{},"163":{},"179":{},"188":{},"206":{},"216":{},"261":{},"272":{},"288":{},"296":{},"438":{},"449":{}},"component":{}}],["zookeeper_chroot",{"_index":3721,"title":{},"name":{},"text":{"274":{},"275":{},"282":{},"290":{},"422":{},"431":{},"436":{},"442":{},"447":{}},"component":{}}],["zookeeper_home/bin/zkcli.sh",{"_index":4093,"title":{},"name":{},"text":{"426":{},"434":{},"445":{}},"component":{}}],["zookeeper_host",{"_index":3720,"title":{},"name":{},"text":{"274":{},"275":{},"282":{},"290":{},"422":{},"431":{},"436":{},"442":{},"447":{}},"component":{}}],["zookeeperclust",{"_index":769,"title":{},"name":{},"text":{"11":{},"40":{},"152":{},"161":{},"177":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"259":{},"270":{},"286":{},"294":{},"420":{},"421":{},"422":{},"426":{},"427":{},"429":{},"430":{},"431":{},"434":{},"435":{},"436":{},"440":{},"441":{},"442":{},"445":{},"446":{},"447":{}},"component":{}}],["zookeepercluster.crd.yaml",{"_index":4090,"title":{},"name":{},"text":{"425":{}},"component":{}}],["zookeeperconfigmapnam",{"_index":793,"title":{},"name":{},"text":{"11":{},"38":{},"131":{},"138":{},"145":{},"151":{},"152":{},"160":{},"161":{},"166":{},"170":{},"173":{},"176":{},"177":{},"182":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"243":{},"244":{},"250":{},"252":{},"253":{},"258":{},"259":{},"263":{},"264":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{}},"component":{}}],["zookeeperznod",{"_index":3320,"title":{},"name":{},"text":{"152":{},"161":{},"170":{},"176":{},"177":{},"185":{},"186":{},"196":{},"203":{},"204":{},"213":{},"214":{},"250":{},"258":{},"259":{},"269":{},"270":{},"274":{},"275":{},"280":{},"282":{},"285":{},"286":{},"290":{},"293":{},"294":{},"422":{},"426":{},"427":{},"431":{},"434":{},"435":{},"436":{},"442":{},"445":{},"446":{},"447":{}},"component":{}}],["zookeeperznode.crd.yaml",{"_index":4091,"title":{},"name":{},"text":{"425":{}},"component":{}}],["zookeeper’",{"_index":2130,"title":{},"name":{},"text":{"42":{}},"component":{}}],["zoom",{"_index":2533,"title":{},"name":{},"text":{"60":{},"61":{}},"component":{}}],["zsh",{"_index":2287,"title":{"51-10":{}},"name":{},"text":{"51":{}},"component":{}}],["zshrc",{"_index":2327,"title":{},"name":{},"text":{"51":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"One of the best ways of getting started with a new platform is to try it out. Any big data platform has a lot of moving parts and getting some hands on keyboard time with it helps reinforce learning. Firstly, let’s cover whether this Getting Started guide is right for you. This is intended as a learning tool to discover more about Stackable, its deployment and architecture. If you want to build a production cluster then this is not for you. This tutorial is to familiarise you with the Stackable architecture and is not a guide for building robust clusters. This is intended for use in a private network or lab; it doesn’t enable many security features such as authentication or encryption and should not be directly connected to the Internet. Be careful if you’re deploying in the cloud as your instances may default to using public IPs. Stackable is based on Kubernetes and uses this as the control plane to manage clusters. In this guide we will build a simple cluster with 3 services; Apache ZooKeeper, Apache Kafka and Apache NiFi. Stackable’s control plane is built around Kubernetes, and we’ll give some brief examples of how to install Kubernetes on your machine. Stackable operators and their services are managed by applying manifest files to the Kubernetes cluster. For this purpose, you need to have the kubectl tool installed. Follow the instructions here for your platform. Kind offers a very quick and easy way to bootstrap your Kubernetes infrastructure in Docker. The big advantage of this is that you can simply remove the Docker containers when you’re finished and clean up easily, making it great for testing and development. If you don’t already have Docker then visit Docker Website to find out how to install Docker. Kind is a single executable that performs the tasks of installing and configuring Kubernetes for you within Docker containers. The Kind Website has instructions for installing Kind on your system. Once you have both of these installed then you can build a Kubernetes cluster in Docker. We’re going to create a 2 node cluster to test out Stackable, one node hosting the Kubernetes control plane and the other hosting the Stackable services. kind create cluster --name quickstart --config - 45m v1.21.1 172.18.0.2 Ubuntu 21.04 5.15.0-25-generic containerd://1.5.2 With the following command we get the port (in this case 30247): kubectl get svc simple-nifi NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE simple-nifi NodePort 10.43.75.25 8443:30247/TCP 49m Browse to the address of your Kubernetes node on port 30247 e.g. https://172.18.0.2:30247/nifi and you should see the NiFi login screen. The Apache NiFi operator will automatically generate the admin user credentials with a random password and store it as a Kubernetes secret in order to provide some security out of the box. You can retrieve this password for the admin user with the following kubectl command. kubectl get secrets nifi-admin-credentials-simple \\ -o jsonpath=\"{.data.password}\" | base64 -d && echo Once you have these credentials you can log in and you should see a blank NiFi canvas.","title":"Getting Started","component":"home","version":"nightly","name":"getting_started","url":"/home/stable/getting_started.html","titles":[{"text":"About this guide","hash":"_about_this_guide","id":1},{"text":"Overview","hash":"_overview","id":2},{"text":"Installing Kubernetes","hash":"_installing_kubernetes","id":3},{"text":"Installing kubectl","hash":"_installing_kubectl","id":4},{"text":"Installing Kubernetes using Kind","hash":"_installing_kubernetes_using_kind","id":5},{"text":"Installing Kubernetes using K3s","hash":"_installing_kubernetes_using_k3s","id":6},{"text":"Testing your Kubernetes installation","hash":"_testing_your_kubernetes_installation","id":7},{"text":"Installing Stackable","hash":"_installing_stackable","id":8},{"text":"Install stackablectl","hash":"_install_stackablectl","id":9},{"text":"Installing Stackable Operators","hash":"_installing_stackable_operators","id":10},{"text":"Deploying Stackable Services","hash":"_deploying_stackable_services","id":11},{"text":"Apache ZooKeeper","hash":"_apache_zookeeper","id":12},{"text":"Apache Kafka","hash":"_apache_kafka","id":13},{"text":"Apache NiFi","hash":"_apache_nifi","id":14},{"text":"Testing your cluster","hash":"_testing_your_cluster","id":15},{"text":"Apache ZooKeeper","hash":"_apache_zookeeper_2","id":16},{"text":"Apache Kafka","hash":"_apache_kafka_2","id":17},{"text":"Apache NiFi","hash":"_apache_nifi_2","id":18}]},"2":{"id":2,"text":"Welcome to Stackable! This documentation gives you an overview of the Stackable Data Platform, how to install and manage it as well as some tutorials. Our first release - June 2022 We are proud to announce our first public release! Please read the release notes to read up on the details. The Stackable Data Platform allows you to deploy, scale and manage Data infrastructure in any environment running Kubernetes. You can find an overview of the supported components below, as well as a full list of all supported product versions here. If you have any feedback regarding the documentation please either open an issue, ask a question or look at the source for this documentation in its repository. We are building a distribution of existing Open Source tools that together comprise the components of a modern data platform. There are components to ingest data, to store data, to process and visualize and much more. While the platform got started in the Big Data ecosystem we are in no way limited to big data workloads. You can declaratively build these environments, and we don’t stop at the tool level as we also provide ways for the users to interact with the platform in the \"as Code\"-approach. We are leveraging the Open Policy Agent to provide Security-as-Code. We are building a distribution that includes the “best of breed” of existing Open Source tools, but bundles them in a way, so it is easy to deploy a fully working stack of software. Most of the existing tools are “single purpose” tools, which often do not play nicely together out-of-the-box. We are using Kubernetes as our deployment platform. And we’re building Operators for each of the products we support. The Stackable Data Platform supports the following products: Airflow is a workflow engine and your replacement should you be using Apache Oozie. Read more Apache Druid is a real-time database to power modern analytics applications. Read more HBase is a distributed, scalable, big data store. Read more HDFS is a distributed file system that provides high-throughput access to application data. Read more The Apache Hive data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. We support the Hive Metastore. Read more Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. Read more An easy to use, powerful, and reliable system to process and distribute data. Read more Apache Spark is a multi-language engine for executing data engineering, data science, and machine learning on single-node machines or clusters. Read more Apache Superset is a modern data exploration and visualization platform. Read more Fast distributed SQL query engine for big data analytics that helps you explore your data universe. Read more ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. Read more","title":"Stackable Documentation","component":"home","version":"nightly","name":"index","url":"/home/stable/index.html","titles":[{"text":"Introduction","id":1},{"text":"Goal of the project","id":2},{"text":"Components","hash":"_components","id":3},{"text":"Apache Airflow","id":4},{"text":"Apache Druid","id":5},{"text":"Apache HBase","id":6},{"text":"Apache Hadoop HDFS","id":7},{"text":"Apache Hive","id":8},{"text":"Apache Kafka","id":9},{"text":"Apache NiFi","id":10},{"text":"Apache Spark","id":11},{"text":"Apache Superset","id":12},{"text":"Trino","id":13},{"text":"Apache ZooKeeper","id":14}]},"3":{"id":3,"text":"This is the super-short getting started guide that should enable you to get something up and running in less than three minutes (excluding download times). Download the cluster script and install the dependencies. The script requires Python 3.7 or newer to run. curl -L https://raw.githubusercontent.com/stackabletech/integration-tests/main/create_test_cluster.py > create_test_cluster.py chmod +x create_test_cluster.py pip install requests Using the following command you will can install the Stackable Operators for Apache NiFi, Druid and Superset and deploy example definitions at the same time. ./create-test-cluster.py -o nifi druid superset --example After this has finished you will have working installations of the three mentioned tools.","title":"Quickstart","component":"home","version":"nightly","name":"quickstart","url":"/home/stable/quickstart.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Install Example Architecture","hash":"_install_example_architecture","id":2}]},"4":{"id":4,"text":"(this is work in progress that is why it’s not explicitely linked in nav.doc) Prerequisites: no branch refs in Cargo.toml (integration) tests are successful the changelog has useful entries Release: (from main) git sw -c release-0.6.0 vi CHANGELOG.md cargo-version.py --release cargo update --workspace make regenerate-charts git commit -am \"Release 0.6.0\" git tag -a 0.6.0 -m \"Release 0.6.0\" HEAD git push -u --all origin release-0.6.0 Bump dev version: (from main immediately after a release) git sw -c bump-version cargo-version.py --next minor cargo update --workspace make regenerate-charts git commit -am 'Bump next development version' git push -u origin bump-version","title":"","component":"home","version":"nightly","name":"release_guide","url":"/home/stable/release_guide.html","titles":[]},"5":{"id":5,"text":"The Stackable platform consists of multiple operators that work together. Periodically a platform release is made, including all components of the platform at a specific version. This is our first release of the Stackable Data Platform, bringing Kubernetes operators for 12 products as well as stackablectl, the commandline tool to easily install data products in Kubernetes. Operators spin up production ready product applications. Also, there are some common features across all operators, such as monitoring, service discovery and configuration overrides. Find the Platform features, stackablectl features and Operators below. Please report any issues you find in the specific operator repositories or in our dedicated github.com/stackabletech/issues/[issues] repository. You may also join us in our Slack community or contact us via our homepage. While we are very proud of this release it is our first one and we’ll add new features and fix bugs all the time and will have regular releases from now on. Easily install production ready data applications Using a familiar declarative approach, users can easily install data applications such as Apache Kafka or Trino across multiple cloud Kubernetes providers or on their own data centers. The installation process is fully automated while also providing the flexibility for the user to tune relevant aspects of each application. Monitoring All products have monitoring with prometheus enabled. Learn more Service discovery Products on the Stackable platform use service discovery to easily interconnect with each other. Learn more Configuration overrides All operators support configuration overrides, these are documented in the specific operator documentation pages. Common S3 configuration Many products support connecting to S3 to load and/or store data. There is a common resource for S3 connections and buckets across all operators that can be reused. Learn more Roles and role groups To support hybrid hardware clusters, the Stackable platform uses the concept of role groups. Services and applications can be configured to maximize hardware efficiency. Standardized Learn once reuse everywhere. We use the same conventions in all our operators. Configure your LDAP or S3 connections once and reuse them everywhere. All our operators reuse the same CRD structure as well. stackablectl is used to install and interact with the operators, either individually or with multiple at once. Learn more This is the list of all operators in this current release, with their versions for this release. Products Stackable Operator for Apache Airflow (0.4.0) Load DAGs from ConfigMaps or PersistentVolumeClaims Stackable Operator for Apache Druid (0.6.0) S3 and HDFS as deep storage options ingestion from S3 buckets authorization using OPA Stackable Operator for Apache HBase (0.3.0) Stackable Operator for Apache HDFS (0.4.0) Stackable Operator for Apache Hive (0.6.0) Hive Metastore can index S3 Stackable Operator for Apache Kafka (0.6.0) Seamless integration with NiFi and Druid Supports OPA authorization Stackable Operator for Apache NiFi (0.6.0) Stackable Operator for Apache Spark on Kubernetes (0.3.0) Stackable Operator for Apache Superset (0.5.0) connects to Druid as a backend Supports LDAP authentication Stackable Operator for Trino (0.4.0) Supports OPA and file-based authorization Connects to the Hive Metastore Query data from S3 TLS support Stackable Operator for Apache ZooKeeper (0.10.0) Supports creating ZNodes with CRDs Read up on the supported versions for each of these products. Supporting operators Stackable Operator for OPA (OpenPolicyAgent) (0.9.0) Create RegoRules in ConfigMaps Stackable Commons Operator (0.2.0) Stackable Secret Operator (0.5.0)","title":"Release notes for the Stackable Data Platform","component":"home","version":"nightly","name":"release_notes","url":"/home/stable/release_notes.html","titles":[{"text":"Release 22.06","hash":"_release_22_06","id":1},{"text":"Platform features","hash":"_platform_features","id":2},{"text":"stackablectl","hash":"stackablectl","id":3},{"text":"Operators","hash":"operators","id":4}]},"6":{"id":6,"text":"This section of the documentation is intended to be read to gain a deeper understanding of the bigger picture and architectural design of the platform.","title":"Concepts","component":"home","version":"nightly","name":"index","url":"/home/stable/concepts/index.html","titles":[]},"7":{"id":7,"text":"The Stackable Platform offers policy-based access control via the OpenPolicyAgent (OPA) operator. Authorization policies are defined in the Rego language, divided into packages and supplied via ConfigMaps. Every node is running an OPA instance for fast policy evaluation and products are connected to OPA with the service discovery mechanism. OPA is an open source, general purpose policy engine. It supports a high-level declarative language called Rego. Rego enables you to specify complex policies as code and transfer the decision-making processes from your software to OPA. Policies written in Rego are called Rego rules. Policy requests are made to a REST API, which allows easy requests from microservices, Kubernetes or CI/CD pipelines. In the request the requester can supply arbitrary structured input data as JSON to supply context information to the policy decision rules. For example the name of the user, resource and action for which an authorization is requested. In this way policy decision-making and policy enforcement are decoupled. OPA is run by the Stackable OPA operator. OPA is deployed with the OpaCluster resource, from which the operator creates a DaemonSet to run an OPA instance on every node of the cluster. Because of this, every Pod making policy requests will always make the request locally, minimizing latency and network traffic. OPA by itself does not enforce a specific structure of Rego rules and the packages they are in, but the Stackable platform makes some assumptions. Whenever a product is connected to OPA (see Connect a product), a single package needs to be given, and that package needs to contain specific rules depending on the product. For example for Druid, a single allow rule needs to be defined. The Rego rule policies are supplied as ConfigMaps. Multiple ConfigMaps can be used for multiple packages, for example one package for Druid authorization, one package for a Trino development instance and one package for a Trino production instance. ConfigMaps were chosen as an easy to use method of supplying configuration files in a Kubernetes environment. The operator takes care of assembling the ConfigMaps into a policy bundle, every policy ConfigMap must contain a opa.stackable.tech/bundle label in order to be processed by the OPA operator. Here’s an example of a Rego rule package in a ConfigMap: apiVersion: v1 kind: ConfigMap metadata: name: my-product-policies labels: opa.stackable.tech/bundle: \"my-product\" (1) data: my-product.rego: | package my-product (2) import future.keywords.in default allow = false (3) allow { is_admin } is_admin() { (4) input.context.identity.user == \"admin\" } 1 The opa.stackable.tech/bundle label is needed to add this ConfigMap to the OPA policy set. Only ConfigMaps with this label are included. 2 my-product is the name of the package. Usually you will have one package per product or per product instance. The name of the package needs to be configured in product instances (i.e. a Trino or Druid instance). The product will use the policies from the configured policy package. 3 The allow rule. It is the main entry point. For every policy decision, the allow rule is always requested. In this case, the rule defaults to false. It references the is_admin rule. 4 The is_admin rule. It demonstrates the use of context information. Every policy decision request can supply context, in this case the user identity is supplied as context. Only if the user identity is \"admin\", the is_admin rule evaluates to true. The combination of arbitrary input data and the Rego rules enables you to specify and enforce almost any kind of policies. You can define powerful policies for e.g. user access for database tables, schemas, columns etc. You can enforce local network traffic, access time periods and many more. See the OPA documentation for further examples. To connect a product to an OpaCluster, the name of the OpaCluster is needed as well as the name of the policy package to use with this product instance. An operator that supports OPA for its operated product will have a spec section like this: spec: ... opa: configMapName: simple-opa (1) package: my-product (2) ... 1 The reference to the OPA cluster 2 The name of the policy package to use for this product The automatic connection is facilitated by the service discovery mechanism and no further information about OPA is required. The products query their respective rules via the supplied package name. See Further reading for links to specific product authorization documentation. Read more about the Stackable Operator for OPA (OpenPolicyAgent). Read more about product integration with OPA for these products: Trino Kafka Druid You can also have a look at the implementation guidelines for OPA authorizers or learn more about the service discovery mechanism used across the platform.","title":"OPA authorization","component":"home","version":"nightly","name":"opa","url":"/home/stable/concepts/opa.html","titles":[{"text":"What is OPA?","hash":"_what_is_opa","id":1},{"text":"How it works","hash":"_how_it_works","id":2},{"text":"Define policies","hash":"_define_policies","id":3},{"text":"Connect a product","hash":"_connect_a_product","id":4},{"text":"Further reading","hash":"_further_reading","id":5}]},"8":{"id":8,"text":"Several of the tools on the Stackable platform can use external resources that the cluster administrator makes available via a PersistentVolume. Airflow users can access DAG jobs this way, and Spark users can do the same for data or other job dependencies, to name just two examples. A PersistentVolume will usually be provisioned by the Kubernetes Container Storage Interface (CSI) on behalf of the cluster administrator, who will take into account the type of storage that is required. This will include, for example, an appropriate sizing, and relevant access modes (which in turn are dependent on the StorageClass chosen to back the PersistentVolume). The relationship between a PersistentVolume and a PersistentVolumeClaim can be illustrated by these two examples: --- apiVersion: v1 kind: PersistentVolume metadata: name: task-pv-volume labels: type: local spec: storageClassName: manual (1) capacity: storage: 10Gi (2) accessModes: - ReadWriteOnce (3) hostPath: path: \"/mnt/data\" --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: task-pv-claim spec: storageClassName: manual (4) accessModes: - ReadWriteOnce resources: requests: storage: 3Gi (5) 1 The name of the storage class, which will be used by the PersistentVolumeClaim 2 The capacity of the PersistentVolume 3 a list of access modes 4 The storageClassName which is used to match a PersistentVolume to a claim 5 The specific quantity of the resource that is being claimed Not all storage classes support all access modes. The supported access modes also depend on the Kubernetes implementation, see for example the compatiblity table Supported access modes for PVs in the OpenShift documentation. Other managed Kubernetes implementations will be similar, albeit with different default storage class names. The important point is that the default StorageClass only supports ReadWriteOnce, which limits access to the PersistentVolumeClaim to a single node. A strategy governing PersistentVolumeClaim resources will thus address the following: what access mode is appropriate? Will the resources be accessed by multiple pods and/or modes? does the Kubernetes cluster have a default implementation for these access modes? if access modes are restricted (e.g. ReadWriteOnce), does the cluster prioritise available resources over implicit application dependencies (in other words, is the PersistentVolumeClaim treated as a soft- or hard-dependency)? If a PersistentVolumeClaim should be mounted on a single node for the application and its components that use it, this can be specified explicitly (see the next section). The Kubernetes documentation states the following with regard to assigning pods to specific nodes: the scheduler will automatically do a reasonable placement (for example, spreading your Pods across nodes so as not place Pods on a node with insufficient free resources). This suggests that resources are automatically considered when pods are assigned to nodes, but it is not clear if the same is true for implicit dependencies, such as PersistentVolumeClaim usage by multiple pods. The scheduler will take various factors into account, such as …​individual and collective resource requirements, hardware / software / policy constraints, affinity and anti-affinity specifications, data locality, inter-workload interference…​. but implementations may vary in the way soft dependencies (e.g. optimal resource usage) and hard dependencies (e.g. access modes, that may prevent the job from running) are handled and prioritised. For PersistentVolumeClaim-relevant tests in the Stackable operator repositories the backing PersistentVolume is omitted as this is an implementation decision to be made by the cluster administrator and mocking e.g. an NFS volume for tests is non-trivial. If the only viable access mode is ReadWriteOnce (see above) - meaning that all test steps dependent on a PersistentVolumeClaim should be run on the same node - this assignment should be made explicitly with a declaration of either a node selector or pod-affinity. Managed Kubernetes clusters will normally have a default storage implementation for access modes other than ReadWriteOnce so e.g. ReadWriteMany can be declared for tests running against such clusters in the knowledge that the appropriate storage will be used. The Airflow operator can use a PersistentVolumeClaim for externally-loaded airflow jobs, known as Direct Acyclic Graphs (DAGs), as shown in this example. Airflow expects that all components (webserver, scheduler and workers) have access to the DAG folder, so the PersistentVolumeClaim either has to be accessible with the ReadWriteMany access mode or node selection should be declared to ensure all components run on the same node. Users of the Spark-k8s operator have a variety of ways to manage SparkApplication dependencies, one of which is to mount resources on a PersistentVolumeClaim. An example is shown here. Persistent Volumes PV/PVC example Labels and selectors","title":"PersistentVolumeClaim usage","component":"home","version":"nightly","name":"pvc","url":"/home/stable/concepts/pvc.html","titles":[{"text":"Access modes and the StorageClass","hash":"_access_modes_and_the_storageclass","id":1},{"text":"Node selection","hash":"_node_selection","id":2},{"text":"Test considerations","hash":"_test_considerations","id":3},{"text":"Operator usage","hash":"_operator_usage","id":4},{"text":"Airflow","hash":"_airflow","id":5},{"text":"Spark-k8s","hash":"_spark_k8s","id":6},{"text":"Further reading","hash":"_further_reading","id":7}]},"9":{"id":9,"text":"Software - especially the distributed kind - often consists of multiple different processes that work together to achieve their goal. Think of a client communicating with a server. Stackable calls these roles. The roles or processes are often replicated multiple times. These replicas can further be subdivided into role groups. Roles and role groups are defined in the resource manifest. The use of roles and role groups is required to control how processes are configured and where they run. Different processes have different tasks that they need to fulfill, which in turn have different configuration settings that only apply to that task. For example coordination, storage, logging and processing tasks require different amounts of threads, memory and storage capacity. These different settings can be put in the per role configuration spec. While configuration is concerned with modifying how the process works on the inside, scheduling is concerned with the context where it should run inside the cluster. A processing task should be scheduled on a node with faster CPUs or nodes with GPUs attached. A caching process is best scheduled on a node with SSD storage, for example. This is done by using label selectors. Nodes can be labeled and then processes can be assigned to nodes based on these labels. Role groups are motivated by the need to subdivide the replicas of a process into groups as well, either to configure or to schedule multiple groups differently. For example in a cluster spanning multiple physical locations, you may want to make sure half of your processes run in one location and half in the other. A distributed software consists of one or more roles. Every role must be configured with at least one role group. Configuration can be specified at role level or at role group level, where the role group level overrides the role level. Label selectors for scheduling and the number of replicas are specified on the role group, not role. The role group is the lowest level, so it makes sense to have to specify this there. HDFS uses three distinct processes that work together to fulfill its duty: NameNodes, DataNodes and JournalNodes. With roles you can specify different configuration settings for each of these, as well as schedule them on specific machines. apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: journalNodes: roleGroups: default: replicas: 3 (1) nameNodes: roleGroups: default: replicas: 3 selector: matchLabels: kubernetes.io/os: linux (2) dataNodes: config: resources: storage: data: capacity: 1Gi (3) roleGroups: default: replicas: 2 hiCapacity: (4) config: resources: storage: data: 2Gi replicas: 1 ... 1 The JournalNode role with only a single default role group. For the role group 3 replicas are specified, specifying a replica count is optional, the default is 1. 2 For the NameNodes default role group, a label selector is given, the pods should only be specified on nodes where the kubernetes.io/os label has the value linux. 3 A common config setting for the DataNodes role. This configuration setting applies only to pods for this role. 4 The DataNode role has two role groups, the default group and the hiCapacity group. In it the config setting for the group is overridden with a higher value of 2Gi. This role group has only one replica. Every operator uses roles. Have a look at the usage page of an operator for an example of roles.","title":"Roles and role groups","component":"home","version":"nightly","name":"roles-and-role-groups","url":"/home/stable/concepts/roles-and-role-groups.html","titles":[{"text":"Motivation","hash":"_motivation","id":1},{"text":"Configuration","hash":"_configuration","id":2},{"text":"Scheduling","hash":"_scheduling","id":3},{"text":"Role groups","hash":"_role_groups","id":4},{"text":"How it works","hash":"_how_it_works","id":5},{"text":"Example","hash":"_example","id":6},{"text":"Further Reading","hash":"_further_reading","id":7}]},"10":{"id":10,"text":"Many of the tools on the Stackable platform integrate with S3 storage in some way. For example Druid can ingest data from S3 and also use S3 as a backend for deep storage, Spark can use an S3 bucket to store application files and data. Stackable uses S3Connection and S3Bucket objects to configure access to S3 storage. An S3Connection object contains information such as the host name of the S3 server, it’s port, TLS parameters and access credentials. An S3Bucket contains the name of the bucket and a reference to an S3Connection, the connection to the server where the bucket is located. An S3Connection can be referenced by multiple buckets. Here’s an example of a simple S3Connection object and an S3Bucket referencing that connection: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: my-connection-resource spec: host: s3.example.com port: 4242 --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-example-bucket connection: reference: my-connection-resource S3Bucket(s) reference S3Connection(s) objects. Both types of objects can be referenced by other resources. For example in a DruidCluster you can specify a bucket for deep storage and an S3Connection for data ingestion. S3Connection objects can be defined in a standalone fashion or they can be inlined into a bucket object. Similarly a bucket can be defined in a standalone object or inlined into an enclosing object. The diagram above shows three examples of how the objects can be structured. In option 1 all objects are separate from each other. This provides maximum re-usability because the same connection or bucket object can be referenced by multiple resources. It also allows for separation of concerns across team members. Cluster administrators can define S3 connection objects that developers reference in their applications. In option 2 the bucket is inlined in the cluster definition. This makes sense if you have a dedicated bucket for a specific purpose, if it is only used in this one cluster instance, in this single product. Option 3 shows all S3 objects inlined in a DruidCluster resource. This is a very convenient way to quickly test something since the entire configuration is encapsulated in a single but potentially large manifest. To clarify the concept, a few examples will be given, using a DruidCluster resource as an example. apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: my-druid-cluster spec: deepStorage: # to be defined ... # more spec here ... The inline definition is variant 3 in the figure above. This variant has the advantage that everything is defined in a single file, right where it is going to be used: apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: my-druid-cluster spec: deepStorage: s3: inline: (1) bucketName: my-bucket connection: inline: (2) host: test-minio port: 9000 # more spec here ... 1 The inline definition of the bucket. The bucket definition contains bucketName and connection. 2 The inline definition of the connection. It contains the host and port. Often multiple buckets are used across a data pipeline, as well as buckets being used by different applications, so stand-alone resource definitions that can be referenced from multiple objects make sense. The DruidCluster references the S3Bucket, which in turn references the S3Connection. First the definition of the S3Connection: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: my-connection-resource spec: host: s3.example.com port: 4242 Then the bucket, which references the connection: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-example-bucket connection: reference: my-connection-resource You can then use this bucket, for example in Druid, as a deep storage: apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: my-druid-cluster spec: deepStorage: s3: reference: my-bucket-resource # more spec here ... No matter if a connection is specified inline or as a separate object, the credentials are always specified in the same way. You will need a Secret containing the access key ID and secret access key, a SecretClass and then a reference to this SecretClass where you want to specify the credentials. The Secret: apiVersion: v1 kind: Secret metadata: name: s3-credentials labels: secrets.stackable.tech/class: s3-credentials-class (1) stringData: accessKey: YOUR_VALID_ACCESS_KEY_ID_HERE secretKey: YOUR_SECRET_ACCESS_KEY_THAT_BELONGS_TO_THE_KEY_ID_HERE 1 This label connects the Secret to the SecretClass. The SecretClass: apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: s3-credentials-class spec: backend: k8sSearch: searchNamespace: pod: {} Referencing it: ... credentials: secretClass: s3-credentials-class ... Find details about the options of the S3 resource in the S3 resources reference.","title":"S3 resources","component":"home","version":"nightly","name":"s3","url":"/home/stable/concepts/s3.html","titles":[{"text":"S3Connection and S3Bucket","hash":"_s3connection_and_s3bucket","id":1},{"text":"Object Reference Structure","hash":"_object_reference_structure","id":2},{"text":"Examples","hash":"_examples","id":3},{"text":"Inline definition","hash":"_inline_definition","id":4},{"text":"Stand-alone resources","hash":"_stand_alone_resources","id":5},{"text":"Credentials","hash":"_credentials","id":6},{"text":"What’s next","hash":"_whats_next","id":7}]},"11":{"id":11,"text":"Stackable operators provide a service discovery ConfigMap for each product instance that is deployed. This ConfigMap has the same name as the product instance and contains information about how to connect to the instance. The ConfigMap is used by other Operators to connect products together and can also be used by you, the user, to connect external software to Stackable-operated software. Products on the Stackable platform can, and in some cases must be connected with each other to run correctly. Some products are fundamental to the platform while others depend on them. For example, a NiFi cluster requires a ZooKeeper connection to run in distributed mode. Other products can optionally be connected with each other for better data flow. For example Trino does not store the query data itself, instead it interfaces with other applications to get access to it. To connect NiFi to ZooKeeper, NiFi needs to know at which host and port it can find the ZooKeeper instance. However the exact address is not known in advance. To enable a connection from NiFi to ZooKeeper purely based on the name of the ZooKeeper cluster, the discovery ConfigMap is used. With the ConfigMap, the name of the ZooKeeper cluster is enough to know how to connect to it, the ConfigMap has the same name as the cluster and contains all the information needed to connect to the ZooKeeper cluster. For a ZookeeperCluster named simple-zk: apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: ... The Zookeeper operator reads the resource and creates the necessary pods and services to get the instance running. It is aware of the interfaces and connections that may be consumed by other products and it also knows all the details of the actual running processes. It then creates the discovery ConfigMap: apiVersion: v1 kind: ConfigMap metadata: name: simple-zk data: ZOOKEEPER: simple-zk-server-default-0.simple-zk-server-default.default.svc.cluster.local:2181,simple-zk-server-default-1.simple-zk-server-default.default.svc.cluster.local:2181 The information needed to connect can be a string like above, for example a JDBC connect string: jdbc:postgresql://localhost:12345. But a ConfigMap can also contain multiple configuration files which can then be mounted into a client Pod. This is the case for HDFS, where the core-site.xml and hdfs-site.xml files are put into the discovery ConfigMap. The ConfigMap is used by Stackable operators to connect products together, but can also be used by the user to retrieve connection information to connect to product instances. The operators consume only the ConfigMap, so it is also possible to create a ConfigMap by hand for a product instance that is not operated by a Stackable operator. These different usage scenarios are explained below. Stackable operators use the discovery ConfigMap to automatically connect to service dependencies. Hbase requires HDFS to run. With an HdfsCluster named simple-hdfs defined as such: apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: ... The HDFS instance is referenced to by name in HBase cluster spec in the field hdfsConfigMapName: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: simple-hbase spec: hdfsConfigMapName: simple-hdfs ... This is a common pattern across the platform. For example the DruidCluster spec contains a field zookeeperConfigMapName and the TrinoCluster spec contains a field hiveConfigMapName to connect Druid to ZooKeeper and Trino to Hive respectively. You can connect your own products to Stackable-operated product instances. How exactly you do this depends heavily on the application you want to connect. In general, use the name of the product instance to retrieve the ConfigMap and use the information in there to connect your own service. You can find links to these documentation pages below in the Further reading section. It is not uncommon to already have some core software running in your stack, such as HDFS. If you want to use HBase with the Stackable operator, you can still connect your already existing HDFS instance. You will have to create the discovery ConfigMap for your already existing HDFS yourself. Looking at the discovery documentation for HDFS, you can see that the discovery ConfigMap for HDFS contains the core-site.xml and hdfs-site.xml files. The ConfigMap should look something like this: apiVersion: v1 kind: ConfigMap metadata: name: my-already-exisiting-hdfs data: core-site.xml: | hdfs-site.xml: | In your HBase cluster spec that you use with the Stackable HBase Operator, you can then reference my-already-existing-hdfs and the Stackable HBase Operator will use your manually created ConfigMap to configure HBase to use your HDFS instance: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: simple-hbase spec: hdfsConfigMapName: my-already-exisiting-hdfs ... Consult discovery ConfigMap documentation for specific products: Apache Druid Apache Hadoop HDFS Apache Hive Apache Kafka OPA Apache ZooKeeper","title":"Service discovery ConfigMap","component":"home","version":"nightly","name":"service_discovery","url":"/home/stable/concepts/service_discovery.html","titles":[{"text":"Motivation","hash":"_motivation","id":1},{"text":"Example","hash":"_example","id":2},{"text":"Usage of the service discovery ConfigMap","hash":"_usage_of_the_service_discovery_configmap","id":3},{"text":"Service discovery within Stackable","hash":"_service_discovery_within_stackable","id":4},{"text":"Service discovery from outside Stackable","hash":"_service_discovery_from_outside_stackable","id":5},{"text":"Discovering services outside Stackable","hash":"_discovering_services_outside_stackable","id":6},{"text":"Further reading","hash":"whats-next","id":7}]},"12":{"id":12,"text":"This page contains information about our products and relevant links you might need during development. Product Homepage Upstream Git Operator Git Our Dockerfile Jenkins Documentation Misc Apache Airflow https://airflow.apache.org/ https://github.com/apache/airflow https://github.com/stackabletech/airflow-operator https://github.com/stackabletech/docker-images/tree/main/airflow https://ci.stackable.tech/job/Airflow%20Operator%20Integration%20Tests/ https://docs.stackable.tech/airflow/index.html Apache Druid https://druid.apache.org/ https://github.com/apache/druid https://github.com/stackabletech/druid-operator https://github.com/stackabletech/docker-images/tree/main/druid https://ci.stackable.tech/job/Druid%20Operator%20Integration%20Tests/ https://docs.stackable.tech/druid/index.html Apache HBase https://hbase.apache.org/ https://github.com/apache/hbase https://github.com/stackabletech/hbase-operator https://github.com/stackabletech/docker-images/tree/main/hbase https://ci.stackable.tech/job/HBase%20Operator%20Integration%20Tests/ https://docs.stackable.tech/hbase/index.html Apache Hadoop (HDFS) https://hadoop.apache.org/ https://github.com/apache/hadoop https://github.com/stackabletech/hdfs-operator https://github.com/stackabletech/docker-images/tree/main/hadoop https://ci.stackable.tech/job/HDFS%20Operator%20Integration%20Tests/ https://docs.stackable.tech/hdfs/index.html Apache Hive (Metastore) https://hive.apache.org/ https://github.com/apache/hive https://github.com/stackabletech/hive-operator https://github.com/stackabletech/docker-images/tree/main/hive https://ci.stackable.tech/job/Hive%20Operator%20Integration%20Tests/ https://docs.stackable.tech/hive/index.html Apache Kafka https://kafka.apache.org/ https://github.com/apache/kafka https://github.com/stackabletech/kafka-operator https://github.com/stackabletech/docker-images/tree/main/kafka https://ci.stackable.tech/job/Kafka%20Operator%20Integration%20Tests/ https://docs.stackable.tech/kafka/index.html Apache NiFi https://nifi.apache.org/ https://github.com/apache/nifi https://github.com/stackabletech/nifi-operator https://github.com/stackabletech/docker-images/tree/main/nifi https://ci.stackable.tech/job/NiFi%20Operator%20Integration%20Tests/ https://docs.stackable.tech/nifi/index.html Apache Spark on Kubernetes https://spark.apache.org/ https://github.com/apache/spark https://github.com/stackabletech/spark-k8s-operator https://github.com/stackabletech/docker-images/tree/main/spark-k8s https://ci.stackable.tech/job/Spark%20On%20K8S%20Operator%20Integration%20Tests/ https://docs.stackable.tech/spark-k8s/index.html Apache Superset https://superset.apache.org/ https://github.com/apache/superset https://github.com/stackabletech/superset-operator https://github.com/stackabletech/docker-images/tree/main/superset https://ci.stackable.tech/job/Superset%20Operator%20Integration%20Tests/ https://docs.stackable.tech/superset/index.html Apache ZooKeeper https://zookeeper.apache.org/ https://github.com/apache/zookeeper https://github.com/stackabletech/zookeeper-operator https://github.com/stackabletech/docker-images/tree/main/zookeeper https://ci.stackable.tech/job/Zookeeper%20Operator%20Integration%20Tests/ https://docs.stackable.tech/zookeeper/index.html OpenPolicyAgent https://www.openpolicyagent.org/ https://github.com/open-policy-agent/opa https://github.com/stackabletech/opa-operator https://github.com/stackabletech/docker-images/tree/main/opa https://ci.stackable.tech/job/OPA%20Operator%20Integration%20Tests/ https://docs.stackable.tech/opa/index.html Trino https://trino.io/ https://github.com/trinodb/trino https://github.com/stackabletech/trino-operator https://github.com/stackabletech/docker-images/tree/main/trino https://ci.stackable.tech/job/Trino%20Operator%20Integration%20Tests/ https://docs.stackable.tech/trino/index.html There are a few other important repositories that come up frequently: Name GitHub repository Description operator-rs https://github.com/stackabletech/operator-rs A Rust library with common functionality for our operators Secret Operator https://github.com/stackabletech/secret-operator Manages/generates Kubernetes secrets, and mounts them into pods using CSI Issues https://github.com/stackabletech/issues This repository exists solely for the purpose of tracking issues related to the Stackable Platform in general. Large topics that impact many or even all of the platform components are discussed here. There is no code in this repository. Documentation https://github.com/stackabletech/documentation Platform wide documentation, such as this page, are hosted here. This repository has references to documentation that is hosted in individual operator repositories (see above). It is the main source from which the public Documentation page is generated. The documentation is written in AsciiDoc format and processed with Antora Docker Images https://github.com/stackabletech/docker-images The Stackable Platform can be used to install and run up several open-source products such as Apache Kafka or Trino. Container images of these products hosted on the Stackable Repository Manager and the sources hosted in this repository. NOTE: Operators host their Dockerfiles in their own repository. Integration Tests https://github.com/stackabletech/integration-tests The Stackable Operators are tested in many environments and across cloud providers. Integration tests are currently driven by Kuttl and are hosted here. T2 https://github.com/stackabletech/t2 Integration testing across different versions and cloud providers is being developed here. Operator Templating https://github.com/stackabletech/operator-templating/ Stackable develops and maintains a growing number of operators for open source software. The high level structure of the repository is consistent across all repositories, which in the past has led to repetitive maintenance tasks in many repositories even for small changes. This repository is intended to help with these changes by keeping common files as templates and offering tooling to roll these out to all repositories that are under management by this tool.","title":"Development Dashboard","component":"home","version":"nightly","name":"development_dashboard","url":"/home/stable/contributor/development_dashboard.html","titles":[]},"13":{"id":13,"text":"Welcome to Stackable! This document will show you the steps needed to contribute to the Stackable Platform. Contributions can come in many shapes and forms but in this document we’ll focus on code and documentation improvements. We’ll assume you already know what the Stackable Platform is and have a specific issue that you want solved. This document aims at getting your contribution posted as soon as possible. The development of the Stackable Platform takes place on GitHub. On GitHub, each repository has its own issue tracker and since Stackable is a platform, there are several repositories where issues and pull-requests can be created. If you already have a good idea where the issue or pull-request belongs, then you can skip reading to the contribution steps below. Otherwise, you might want to a have a look at the Development Dashboard for hints. Contribution steps: Lookup if an existing issue already covers your problem Submit a new issue. If it is only a trivial change like fixing a typo then an issue is not necessary and a pull-request can be created directly. Submit a pull-request if you want. The necessary steps to successfully create an approvable pull-request are detailed in Steps to contribute. Respond to questions or feedback Improve your submission if necessary Closing your contribution Before submitting a new issue or pull-request, it’s always a good idea to check if the issue has already been discussed in the past and if there is a resolution for it. If that is the case, consider contributing to the existing issue by either adding new feedback or code. When creating a new issue please provide as much information as you consider relevant. Issues can be bug reports, feature requests and so on. The Stackable repositories provide templates to make it easier to submit high-quality issues. When submitting a pull-request, you might be interested in knowing about the necessary Development Environment. Please see the Development Dashboard page to get an overview of the most important Git repositories used by us. At the core of the Stackable Platform are Kubernetes operators used to install and manage various data products. Each operator has its own repository, and therefore its own issue tracker and build pipeline. Every operator repository contains: The operator’s source code One or more Custom Resource Definitions owned by the operator Helm chart to easily install the operator Documentation Dockerfile and related artifacts to generate the operator image See the Development Dashboard for a detailed overview. In order to contribute source code, you need an environment that is capable of running the following tools: Docker Kind Helm Kuttl Rust Python The documentation is written in AsciiDoc format and processed with Antora Almost all build scripts assume a Unix based environment (preferably Linux). Of course you are free to use whatever works for you best. No editor is perfect but we have positive experience with: IntelliJ Idea with the Rust plug-in VisualStudio Code with the rust-analyzer extension For VisualStudio Code we also recommend the following extensions: Better Toml CodeLLDB (for debugging) Error Lens (inline error messages) AsciiDoc GitHub Pull requests and Issues GitLens Python Docker","title":"Contributor’s Guide","component":"home","version":"nightly","name":"index","url":"/home/stable/contributor/index.html","titles":[{"text":"Contribution Workflow","hash":"_contribution_workflow","id":1},{"text":"Repo Walkthrough","hash":"_repo_walkthrough","id":2},{"text":"Operator Repositories","hash":"_operator_repositories","id":3},{"text":"Development Environment","hash":"_development_environment","id":4},{"text":"IDEs and Editors","hash":"_ides_and_editors","id":5}]},"14":{"id":14,"text":"The Stackable Platform offers an OpenPolicyAgent (OPA) operator for policy-based access control. This document shows how to configure a Stackable operator and its managed product to query OPA to enforce policy-based access control. OPA is an open source, general purpose policy engine. It supports a high-level declarative language called Rego. Rego enables you to specify complex policies as code and transfer the decision-making processes from your software to OPA. We refer to policies written in Rego as Rego rules. The provided OPA REST API allows you to enforce policies within microservices, Kubernetes, CI/CD pipelines and more. OPA accepts arbitrary structured input data (e.g. JSON) when running queries against the API (and your Rego rules), to decouple policy decision-making from policy enforcement. The combination of arbitrary input data and the Rego rules enable you to specify and enforce almost any kind of policies. You can define powerful policies for e.g. user access for database tables, schemas, columns etc. You can enforce local network traffic, access time periods and many more. See the OPA documentation for further examples. The Stackable Operator for OPA deploys OPA as a DaemonSet in Kubernetes. This ensures that every registered Node runs exactly one OPA instance. In order to reduce traffic and latency, deployed products querying OPA must use the local OPA provided on their respective Node. Furthermore, the Stackable Operator for OPA deploys a service discovery ConfigMap (see Service discovery implementation guidelines) to expose its service URL to other Stackable operators. These operators then are configured to use the service discovery ConfigMap to extract the required URL and configure their products and authorizers. Authorizers are plugins for products that allow authorization and access control. The ConfigMap has one data entry that points to the OPA ClusterIP service: apiVersion: v1 kind: ConfigMap metadata: name: {clustername} data: OPA: http://{clustername}.{rolegroup}.svc.cluster.local:8081/ In order for OPA to make policy decisions, Rego rules must be bundled and supplied. The Stackable Operator for OPA has its own controller to bundle policies and provide them to OPA. Polices can be provided via ConfigMaps: apiVersion: v1 kind: ConfigMap metadata: name: simple-product-rego labels: opa.stackable.tech/bundle: \"product\" data: product.rego: | package product allow { true } The OPA bundle controller creates a bundle.tar.gz file locally, bundling the content of every ConfigMap labeled with opa.stackable.tech/bundle (the label value can be arbitrary). This bundle is read and activated by OPA. You can query the allow rule provided in the example above via: http://{clustername}.{rolegroup}.svc.cluster.local:8081/data/v1/product/allow In order to configure another operator and its product to query OPA, the service discovery ConfigMap must be consumed. There are two ways that qualify as best practice, depending on the product you are configuring: Mounting the discovery ConfigMap Reading the discovery ConfigMap The operator-rs framework has a module called opa.rs that offers a predefined struct OpaConfig and several helper methods to extract the OPA URL from the service discovery ConfigMap. #[derive(Clone, Debug, Default, Deserialize, JsonSchema, PartialEq, Serialize)] #[serde(rename_all = \"camelCase\")] pub struct OpaConfig { pub config_map_name: String, pub package: Option, } You can use that struct in the CRD of your operator to configure the OPA service discovery ConfigMap as well as the desired package name. The method full_document_url_from_config_map reads the service discovery ConfigMap provided by the Stackable operator for OPA and constructs the URL to configure the product or its authorizers (the plugins that talk to OPA). Usually OPA authorizers are configured with the URL to the OPA REST API, authentication / security and other properties like caching. This differs from authorizer to authorizer. The Stackable platform uses internal (written by us) and external authorizers to configure the products. Here are some examples that may help you if you need to write an authorizer on your own: Trino Druid Apache Kafka","title":"OPA connection implementation guidelines","component":"home","version":"nightly","name":"opa_configuration","url":"/home/stable/contributor/opa_configuration.html","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"What is OPA?","hash":"_what_is_opa","id":2},{"text":"Examples for OPA policies","hash":"_examples_for_opa_policies","id":3},{"text":"Stackable Operator for OPA","hash":"_stackable_operator_for_opa","id":4},{"text":"Service Discovery","hash":"_service_discovery","id":5},{"text":"Provide Rego rules","hash":"_provide_rego_rules","id":6},{"text":"Consume the discovery ConfigMap","hash":"_consume_the_discovery_configmap","id":7},{"text":"Configure OPA access in the operator","hash":"_configure_opa_access_in_the_operator","id":8},{"text":"Authorizers","hash":"_authorizers","id":9},{"text":"Internal","hash":"_internal","id":10},{"text":"External","hash":"_external","id":11}]},"15":{"id":15,"text":"For a conceptual overview of service discovery, consult the service discovery concept page. The question about which interfaces to expose varies from product to product and must be decided on an individual basis. However, as far as possible the exposed services should be reachable via Kubernetes services like ClusterIP or NodePort. The operator that discovers a service has two options for retrieving the information and providing it into the pods: Mount the discovery ConfigMap into the Pod directly as an environment variable. This can be used for products supporting setting values via CLI or can work with environment variables in their respective configuration files. Read the discovery ConfigMap and provide its content via the usual product configuration ConfigMap. This is in general a cleaner way if the product does not support setting values via CLI or environment variables in the configuration files because it avoids writing shell scripts to override the values manually. The following section offers some Rust code snippets to get an idea on how to create or retrieve the information in the discovery ConfigMap. As a convention, the name of that discovery ConfigMap is the name of the cluster. A deployed Stackable ZooKeeper cluster named simple-zk in namespace production will deploy a discovery ConfigMap production/simple-zk. Remember, per convention the discovery ConfigMap name of a cluster must be equal to the cluster name. The following code demonstrates how to create a discovery ConfigMap using the ConfigMapBuilder of the operator-rs framework: use stackable_operator::builder::{ConfigMapBuilder, ObjectMetaBuilder}; let cm = ConfigMapBuilder::new() .metadata( ObjectMetaBuilder::new() .name_and_namespace(my_cluster) .ownerreference_from_resource(my_cluster, None, Some(true))? .build()?, ) .add_data(\"CONNECT_STRING\", \"http://localhost:12345\") .build(); Given a discovery ConfigMap: apiVersion: v1 kind: ConfigMap metadata: name: my-config-map-name namespace: production data: CONNECT_STRING: \"http://localhost:12345\" This is a method to retrieve an EnvVar from a ConfigMap: use stackable_operator::k8s_openapi::api::{ core::v1::{ ConfigMapKeySelector, EnvVar, EnvVarSource, }, }; fn env_var_from_cm(name: &str, configmap_name: &str) -> EnvVar { EnvVar { name: name.to_string(), value_from: Some(EnvVarSource { config_map_key_ref: Some(ConfigMapKeySelector { name: Some(configmap_name.to_string()), key: name.to_string(), ..ConfigMapKeySelector::default() }), ..EnvVarSource::default() }), ..EnvVar::default() } } The returned EnvVar then can be added to a Pod container and used in the command or args field using the operator-rs framework container builder: use stackable_operator::builder::ContainerBuilder; let container = ContainerBuilder::new(\"my-container\") .command(vec![\"/bin/bash\".to_string(), \"-c\".to_string()]) .args(vec![\"./do_magic\", \"--with-env-var\", \"${CONNECT_STRING}\"]) .add_env_var(env_var_from_cm(\"CONNECT_STRING\", \"my-config-map-name\")) .build(); This is a method to read one entry of a discovery ConfigMap from an operator: use stackable_operator::{ client::Client, error::OperatorResult, k8s_openapi::api::core::v1::ConfigMap, }; async fn entry_from_cm( client: &Client, name: &str, namespace: Option, entry: &str, ) -> OperatorResult { Ok(client .get::(name, namespace) .await? .data .and_then(|mut data| data.remove(entry)) .unwrap()) } let connection_string = entry_from_cm(client, \"my-config-map-name\", Some(\"production\"), \"CONNECT_STRING\").await?; The retrieved connection string can be used to configure the product to connect to the discovered service. Currently, there is not much support from the operator-rs framework to assist with service discovery. The related code is mostly contained in each operator and similar to the examples above. The following list should indicate support for certain products or helper methods: ConfigMapBuilder in combination with ObjectMetaBuilder assists with building the discovery ConfigMap OPA: The operator-rs framework has a module called opa.rs that supports the creation of the data API connection string","title":"Service discovery implementation guidelines","component":"home","version":"nightly","name":"service_discovery","url":"/home/stable/contributor/service_discovery.html","titles":[{"text":"Best practices","hash":"_best_practices","id":1},{"text":"Exposing config maps for service discovery","hash":"_exposing_config_maps_for_service_discovery","id":2},{"text":"Consuming config maps for service discovery","hash":"_consuming_config_maps_for_service_discovery","id":3},{"text":"Implementation details","hash":"_implementation_details","id":4},{"text":"Create a discovery ConfigMap","hash":"_create_a_discovery_configmap","id":5},{"text":"Consume a discovery ConfigMap","hash":"_consume_a_discovery_configmap","id":6},{"text":"Mounting the discovery ConfigMap","hash":"_mounting_the_discovery_configmap","id":7},{"text":"Reading the discovery ConfigMap","hash":"_reading_the_discovery_configmap","id":8},{"text":"Existing libraries","hash":"_existing_libraries","id":9}]},"16":{"id":16,"text":"This guide covers the steps for internal and external contributors. Differences will be outlined. Depending on the project, not all steps make sense. For instance, if the documentation was changed then the integration tests need not to be adapted. Please skip the steps which are not applicable. As an external contributor, please fork the according repository on GitHub. Clone the repository to the local machine or if it is already cloned then make sure to pull the latest changes. Backports to previous releases are not covered in this guide. Create a feature branch. As for now, there is no naming convention. Make your desired changes in the according repository and test them manually. Ensure that the code compiles without warnings (cargo clippy --all-targets) and that the code is formatted with cargo fmt. If code was added or adapted then please create or adapt the unit tests in the same file as well as the integration tests in the tests directory. Ensure that all unit tests run successfully (cargo test) and all integration tests run successfully (./scripts/run_tests.sh). See also Changes in the integration tests. Comment your code and check with cargo doc --document-private-items that there are no syntax errors. The YAML schemas of the custom resource definitions (CRDs) are rebuilt when the project is compiled (see rust/operator-binary/build.rs if changing an operator). These CRDs as well as the product configuration are also required in the Helm chart and the Kubernetes manifest. To ensure that everything is in a consistent state, please execute make regenerate-charts. If it is useful for the users of the project to know about the change then it must be added to the changelog. For instance, if only the dependencies in an operator are upgraded but nothing changes for the user then the upgrade should not be added to the changelog. Conversely, if the dependencies in the operator framework are upgraded then changes are probably required in the operators (which are the clients of the framework) and therefore the upgrade must be mentioned in the changelog. The changelog must be formatted according to keep a changelog. The code for building the product images can be found in the docker-images repository. Please follow the steps in Preparation. Make the desired changes. Add an entry to the product image changelog and use the pattern -stackable to reference the next image version. The follows semantic versioning and is independent of the upstream version. If a new version of a product was added then the following tasks must be performed: Add the new version to the supported ones in the documentation of the operators (see docs/modules/ROOT/partials/supported-versions.adoc in the operator repositories). Update the operator to support the new version if necessary. Update the examples in the operator to use the new version. Update the integration tests. The tests should cover the latest patch version of each supported versions. Run the integration tests with the new product image. The image can be built and uploaded to the kind cluster with the following commands: ./build_product_images.py --product --image_version kind load docker-image --name=integration-tests See the output of build_product_images.py to retrieve the image tag for . Most code changes should also be tested with integration tests. The tests for every operator can be found in the operator repository in the tests directory. Follow the steps in Preparation for the integration tests as well. Create or adapt the tests. Try to mimic the style of the other tests. They are written with KUTTL and using a jinja2 templating mechanism to test multiple product versions at once. Start a test cluster with the create_test_cluster.py script. Its usage is described in the README.md file. If changes in an operator are tested then the according version of the operator must be started. If already another version was started by the test cluster script then it must be terminated. The operator can be started outside the cluster with cargo run — crd | kubectl apply -f - && cargo run — run. This approach allows a fast test develop cycle but has the downside that the RBAC rules are not tested. So a proper Helm installation should be tested before creating a pull request. First a Docker image of the operator must be built locally and uploaded to the kind cluster and then the Helm chart must be installed. This can be achieved in the operator directory with the following commands: docker build --file docker/Dockerfile --tag docker.stackable.tech/stackable/:-nightly . kind load docker-image docker.stackable.tech/stackable/:-nightly --name=integration-tests helm install deploy/helm// Run the tests from the repository root with ./scripts/run_tests.sh. The Stackable Platform documentation can be found at https://docs.stackable.tech/. The documentation is built with Antora from the sources in the documentation repository and the docs directories in the operator repositories. Follow the steps in Preparation to be able to change the documentation. Make your changes. Build the documentation locally to ensure that the formatting is fine and all links are specified correctly. See the README.adoc file for further details and the Documentation style guide for style and formatting guidelines. Files which are common in all operators are handled and rolled out by the operator-templating. Follow the steps in Preparation to check out the repository. Make your changes. Test the changes locally. Create the directory work, clone all operators into this directory, and run the test.sh script. The changes can be examined with git status. When the pull request is later merged into the main branch then pull requests with these changes will be created automatically. Depending on the change, it makes sense to run the integration tests for all changed operators. If the tests are not run in this stage and if there is even just one integration test failing in the subsequentially generated pull requests then the operator-templating must be adapted which creates again pull requests for all operators. Changes in the GitHub workflow actions cannot be tested until finally merged. Finally, pull requests must be created for all adapted repositories. Have a look at the review checklist and ensure that all applicable points are fulfilled. Create a comprehensive description of the changes. Link the according issue to the pull request by using a keyword like \"Closes\". Add references to other pull requests, like the pull request in the integration-tests repository which contains test cases for the change in the operator pull request. Select a reviewer. Usually \"stackabletech/developers\" is a good choice. If you are an internal contributor then assign yourself to the issue. All pull requests must pass a quality gate before they can be merged. This gate consists of required and not strictly required checks which are performed by automated GitHub checks, as well as the mentioned checklist which is checked manually in the review. The number of checks seems to be overwhelming but in practice they can be quite easily fulfilled if following this guide. A properly set-up development environment (see Development Environment) makes it even easier because the most critical steps are performed automatically like showing Clippy warnings while developing and formatting the code. Have a look at the status of the checks after they are processed and fix them. The reviewdog checks are not mandatory and can be ignored if the according change was intentionally. For instance, if a Kubernetes secret was added to the examples of an operator then the detect-secrets steps could fail which is okay in this case. After the pull request is approved, it can be merged. Internal contributors merge them on their own. Pull request from external contributors are merged by the approver.","title":"Steps to contribute","component":"home","version":"nightly","name":"steps","url":"/home/stable/contributor/steps.html","titles":[{"text":"Preparation","hash":"_preparation","id":1},{"text":"Changes in Rust projects","hash":"_changes_in_rust_projects","id":2},{"text":"Changes in the product images","hash":"_changes_in_the_product_images","id":3},{"text":"Changes in the integration tests","hash":"_changes_in_the_integration_tests","id":4},{"text":"Changes in the documentation","hash":"_changes_in_the_documentation","id":5},{"text":"Changes in the operator-templating","hash":"_changes_in_the_operator_templating","id":6},{"text":"Create pull requests","hash":"_create_pull_requests","id":7}]},"17":{"id":17,"text":"This page provides guidelines on how to write documentation for the Stackable platform. Style guidelines specify things such as capitalization rules, which format to use for emphasis or how API objects and other components should be styled in the documentation - formatting and \"superficial\" aspects of text. Grammar, tone and voice guidelines make the documentation consistent across the pages and as clear as possible. These guidelines include using a conversational tone, using second person and active voice. For formatting text and code, follow the Kubernetes documentation style guide. The Stackable platform is built on Kubernetes and the documentation often refers to Kubernetes API objects, custom resources and snippets of resource specifications, as well as command line snippets to interact with Kubernetes clusters. The Kubernetes documentation style guide specifies how these terms and snippets should be formatted. Some examples: Use PascalCase for API objects such as ConfigMap or KafkaCluster Use italics to define or introduce new terms Use code style for filenames, directories and paths Use code style for object field names and namespaces Use normal style for string and integer field values For writing style, language, grammar and tone guidelines we refer to the Google developer documentation style guide. Some highlights: Be conversational and friendly Use second person: \"You\" rather than \"we\" Use active voice Use sentence case for headings The Google guide also includes it’s own list of highlights. Lastly, these are guidelines and not strict rules to follow. Use your own judgement to clearly communicate and explain - after all this is what documentation is about.","title":"Documentation style guide","component":"home","version":"nightly","name":"style_guide","url":"/home/stable/contributor/style_guide.html","titles":[]},"18":{"id":18,"text":"This section of the Stackable documentation contains information about the individual Operators, as well as related information such as an overview over the supported product versions and how to enable monitoring in all Operators. Find a list of all Operators below: Apache Airflow Apache Druid Apache HBase Apache Hadoop HDFS Apache Hive Apache Kafka Apache NiFi Apache Spark on K8S Apache Superset Trino Apache ZooKeeper OpenPolicyAgent Commons Secret","title":"Operators","component":"home","version":"nightly","name":"index","url":"/home/stable/operators/index.html","titles":[]},"19":{"id":19,"text":"Services managed by Stackable support monitoring via Prometheus. Stackable does not currently provide Prometheus, instead we suggest using Prometheus Operator. Prometheus Operator can be installed via the Helm chart kube-prometheus-stack, which includes both the Operator, and a basic Prometheus configuration that should be sufficient for basic use. helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm upgrade prometheus prometheus-community/kube-prometheus-stack --install --version 31.0.0 When using the kube-prometheus-stack Helm chart (as above), an additional ServiceMonitor must be applied to the Kubernetes cluster, which discovers services registered to the Kubernetes cluster: apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: scrape-label labels: release: prometheus spec: endpoints: - port: metrics jobLabel: app.kubernetes.io/instance selector: matchLabels: prometheus.io/scrape: \"true\" Prometheus should now be accessible inside of the Kubernetes cluster, and can be access can be forwarded using kubectl: kubectl port-forward svc/prometheus-kube-prometheus-prometheus 9090 Afterwards, we can go to http://localhost:9090/ to access the query UI. An existing Prometheus installation can also be used to monitor Stackable services. In this case, it should be configured to scrape Kubernetes Service objects with the label prometheus.io/scrape: \"true\". For more details, see their official documentation for .","title":"Monitoring","component":"home","version":"nightly","name":"monitoring","url":"/home/stable/operators/monitoring.html","titles":[{"text":"Prometheus Operator","hash":"_prometheus_operator","id":1},{"text":"Installing Prometheus","hash":"_installing_prometheus","id":2},{"text":"Querying Prometheus","hash":"_querying_prometheus","id":3},{"text":"Existing Prometheus","hash":"_existing_prometheus","id":4}]},"20":{"id":20,"text":"The latest versions of each of the Stackable Operators support the following product versions: 2.2.3 2.2.4 2.2.5 0.22.1 0.23.0 2.4.6 2.4.8 2.4.9 2.4.11 2.4.12 3.2.2 3.3.1 3.3.3 2.3.9 3.1.3 2.7.1 2.8.1 3.1.0 3.2.0 1.15.0 1.16.3 0.27.1 0.28.0 0.37.2 0.41.0 3.2.1-hadoop3.2 3.2.1-hadoop3.2-python39 3.3.0-hadoop3 1.3.2 1.4.1 1.5.1 3.5.8 3.6.3 3.7.0 3.8.0 377 387","title":"Supported Product Versions","component":"home","version":"nightly","name":"supported_versions","url":"/home/stable/operators/supported_versions.html","titles":[{"text":"Apache Airflow","hash":"_apache_airflow","id":1},{"text":"Apache Druid","hash":"_apache_druid","id":2},{"text":"Apache HBase","hash":"_apache_hbase","id":3},{"text":"Apache HDFS","hash":"_apache_hdfs","id":4},{"text":"Apache Hive","hash":"_apache_hive","id":5},{"text":"Apache Kafka","hash":"_apache_kafka","id":6},{"text":"Apache NiFi","hash":"_apache_nifi","id":7},{"text":"Open Policy Agent (OPA)","hash":"_open_policy_agent_opa","id":8},{"text":"Apache Spark on Kubernetes","hash":"_apache_spark_on_kubernetes","id":9},{"text":"Apache Superset","hash":"_apache_superset","id":10},{"text":"Apache ZooKeeper","hash":"_apache_zookeeper","id":11},{"text":"Trino","hash":"_trino","id":12}]},"21":{"id":21,"text":"Reference for common objects across the platform.","title":"Reference","component":"home","version":"nightly","name":"index","url":"/home/stable/reference/index.html","titles":[]},"22":{"id":22,"text":"This page contains the reference information for the S3Bucket and S3Connection resources. For guidance on usage, see S3 resources concept. A bucket consists of a bucket name and the connection to the object store where the bucket is located. name: String, the name of the Bucket. connection: can either be inline or reference. inline: See the properties below for S3Connection. reference: String, the name of the referenced S3Connection resource, which must be in the same namespace as the S3Bucket resource. Using an inline connection: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-example-bucket connection: inline: host: s3.example.com Using a connection reference (referencing the example connection from the next section below): --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-example-bucket connection: reference: my-connection-resource An S3Connection object specifies how to connect to an S3 provider. host: String, the domain name of the host of the object store, such as s3.west.provider.com. port: Integer, a port such as 80 or 4242. accessStyle: Optional. Can be either \"VirtualHosted\" (default) or \"Path\". credentials: contains a secretClass. secretClass: a reference to a SecretClass resource. For more information on specifying credentials, see Credentials in the S3 concept pages. --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: my-connection-resource spec: host: s3.example.com port: 4242 accessStyle: Path credentials: secretClass: s3-credentials-class For completeness, the referenced SecretClass and Secret are given below: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: s3-credentials-class spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: s3-credentials labels: secrets.stackable.tech/class: s3-credentials-class stringData: accessKey: YOUR_VALID_ACCESS_KEY_ID_HERE secretKey: YOUR_SECRET_ACCESS_KEY_THAT_BELONGS_TO_THE_KEY_ID_HERE","title":"S3 resources","component":"home","version":"nightly","name":"s3","url":"/home/stable/reference/s3.html","titles":[{"text":"S3Bucket","hash":"_s3bucket","id":1},{"text":"Full Example","hash":"_full_example","id":2},{"text":"S3Connection","hash":"_s3connection","id":3},{"text":"Example","hash":"_example","id":4}]},"23":{"id":23,"text":"In this tutorial you will set up a data pipeline, from raw data to visualization. You read data from S3 using NiFi, send it to Kafka, from there it is ingested into Druid, and lastly you visualize the data using Superset. The purpose of this tutorial is a deeper exploration of the Stackable platform and its features. It is not a guide to building a robust data pipeline. This tutorial is intended to run in a private network or lab; it does not enable many security features such as authentication or encryption and should not be directly connected to the Internet. Be careful if you are deploying in the cloud as your instances may default to using public IPs. You should make sure that you have everything you need: A running Kubernetes cluster kubectl to interact with the cluster Helm to deploy third-party dependencies stackablectl to install and interact with Stackable operators While we recommend to use stackablectl, you can also install operators from the Helm Chart repository: helm repo add stackable-stable https://repo.stackable.tech/repository/helm-stable/ Instructions for installing via Helm are also provided throughout the tutorial. Shell utilities like cat and curl This section shows how to instantiate the first part of the entire processing chain, which will ingest CSV files from an S3 bucket, split the files into individual records and send these records to a Kafka topic. The resource definitions rolled out in this section need their respective Operators to be installed in the K8s cluster. I.e. to run a Kafka instance, the Kafka Operator needs to be installed. The Secret Operator is needed by the Stackable Operator for Apache NiFi, as NiFi requires the UI to be served via HTTPS. The necessary certificates and keys for this are provided by the Secret Operator to the NiFi Pods. stackablectl operator install secret Using Helm instead helm install secret-operator stackable-stable/secret-operator Apache NiFi and Apache Kafka both use Apache ZooKeeper as backing config storage, so the Stackable Operator for Apache ZooKeeper has to be installed in order to make sure that a ZooKeeper cluster can be rolled out. There is no need to install multiple ZooKeeper clusters, as NiFi, Kafka and Druid can share the same cluster via provisioning a ZNode per backed service. stackablectl operator install zookeeper Using Helm instead helm install zookeeper-operator stackable-stable/zookeeper-operator NiFi publishes the individual records from the S3 data to Kafka. stackablectl operator install kafka Using Helm instead helm install kafka-operator stackable-stable/kafka-operator NiFi is an ETL tool which will be used to model the dataflow of downloading and splitting files from S3. It will also be used to convert the file content from CSV to JSON. stackablectl operator install nifi Using Helm instead helm install nifi-operator stackable-stable/nifi-operator Since both Kafka and NiFi depend on Apache ZooKeeper, we will create a ZooKeeper cluster first. kubectl apply -f - Databases you should see the Druid cluster: If you do not see your Druid instance, check the status on the DruidConnection you deployed (superset-druid-connection), it should be Ready. To read the data stored in your Druid database, create a dataset in Superset referencing the table. This is done under “Data” > “Datasets”: The data can be queried in SQL Lab → SQL Editor: After defining the dataset, use it to create a chart for a dashboard: Create a simple time-series line chart. Applying these settings, you can see from the chart (and the average tip amount) that passengers are more generous towards the end of the month: the range has been set so that it matches the filter originally applied in the Nifi template. Chart Setting Value Time column __time Time range 2020-05-01 ≤ col < 2020-06-01 Metrics AVG(tip_amount) X axis title May 2020 X axis title bottom margin 30 Y axis title USD Y axis title margin 30 X axis time format %a Finally, create a dashboard with this chart:","title":"Setting up an end-to-end data pipeline","component":"home","version":"nightly","name":"end-to-end_data_pipeline_example","url":"/home/stable/tutorials/end-to-end_data_pipeline_example.html","titles":[{"text":"About this tutorial","hash":"_about_this_tutorial","id":1},{"text":"Before you begin","hash":"_before_you_begin","id":2},{"text":"Nifi and Kafka","hash":"_nifi_and_kafka","id":3},{"text":"Deploy the Operators","hash":"_deploy_the_operators","id":4},{"text":"Secret Operator","hash":"_secret_operator","id":5},{"text":"ZooKeeper Operator","hash":"_zookeeper_operator","id":6},{"text":"Kafka Operator","hash":"_kafka_operator","id":7},{"text":"NiFi Operator","hash":"_nifi_operator","id":8},{"text":"Deploying ZooKeeper","hash":"_deploying_zookeeper","id":9},{"text":"Deploying Kafka and NiFi","hash":"_deploying_kafka_and_nifi","id":10},{"text":"Process the data and write to Kafka","hash":"_process_the_data_and_write_to_kafka","id":11},{"text":"Druid","hash":"_druid","id":12},{"text":"Deploy the Stackable Druid Operator","hash":"_deploy_the_stackable_druid_operator","id":13},{"text":"Set up dependencies","hash":"_set_up_dependencies","id":14},{"text":"Metadata storage","hash":"_metadata_storage","id":15},{"text":"Deep storage","hash":"_deep_storage","id":16},{"text":"ZooKeeper","hash":"_zookeeper","id":17},{"text":"Deploy the Druid cluster","hash":"_deploy_the_druid_cluster","id":18},{"text":"Data ingestion","hash":"_data_ingestion","id":19},{"text":"Ingestion with the Druid web interface","hash":"_ingestion_with_the_druid_web_interface","id":20},{"text":"Ingestion with curl","hash":"_ingestion_with_curl","id":21},{"text":"Superset","hash":"_superset","id":22},{"text":"Deploy the Stackable Superset Operator","hash":"_deploy_the_stackable_superset_operator","id":23},{"text":"Set up dependencies","hash":"_set_up_dependencies_2","id":24},{"text":"Deploy the Superset cluster","hash":"_deploy_the_superset_cluster","id":25},{"text":"Set up port forwarding for the Superset web interface","hash":"_set_up_port_forwarding_for_the_superset_web_interface","id":26},{"text":"Query Druid from Superset","hash":"_query_druid_from_superset","id":27},{"text":"Data analysis and dashboards","hash":"_data_analysis_and_dashboards","id":28},{"text":"Settings","hash":"_settings","id":29}]},"24":{"id":24,"text":"In this section you’ll find tutorials that take you through a series of steps to complete a concrete project.","title":"Tutorials","component":"home","version":"nightly","name":"index","url":"/home/stable/tutorials/index.html","titles":[]},"25":{"id":25,"text":"Status: accepted Deciders: Florian Waibel Lars Francke Lukas Menzel Oliver Hessel Sönke Liebau Date: 19.08.2020 For all documentation, presentations, inline comments etc. we need to agree on which language to use. As currently all participants are German, the first choice would be German, however as this is intended to grow an active, international community the choice of German would exclude many people or lead to fragmentation of the community. Familiarity of existing team members Potential to grow an open community German English Chosen option: \"English\", because the desire to create an active community with participants from all over the world is much more important than the minor barrier that this decision might create initally. The barrier for particiption for international members is much lower in later community work The risk of the community fragmenting into a german community and an international community is much lower Higher pool of candidates to help out during the initial project phase Initially the team would need to document in a language that is not a first language for anybody Good, because first language for most current team members Bad, because excludes a lot of people from the later community or would create a split in the community Good, because it allows growing an international community Bad, would initially add a small language barrier that is not strictly speaking necessary","title":"ADR001: Use English as Documentation Language","component":"home","version":"nightly","name":"ADR001-choose_project_language","url":"/home/stable/contributor/adr/ADR001-choose_project_language.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"German","hash":"_german","id":8},{"text":"English","hash":"_english","id":9}]},"26":{"id":26,"text":"Status: accepted Deciders: Florian Waibel Lars Francke Lukas Menzel Oliver Hessel Sönke Liebau Date: 19.08.2020 Should we use one large repository for all components of the project or structure this into multiple smaller repositories? Useability of repository structure Impact on related infrastructure like CI / Testing / …​ Impact on release strategy Single Repository Multiple Repositories Chosen option: \"Multiple Repositories\", because it comes out best (see below)]. How to split the components into repositories will be decided throughout the runtime of the project. Initially the following repositories were identified: Orchestrator Agent ADR / Documentation Operators (most probably one repository per operator) Stackbit Sources (most probably one repository per product) The ability to separate changes to different modules Better organization of individual modules Better separation of releases between modules No single place to search for things, a little familiarity with the repository structure might be needed Potentially more effort when setting up CI and testing infrastructure Good, because it makes implementing dependencies between modules easier Good, because it provides a single place to search for things Bad, because it can become large and difficult to manage Bad, because it keeps things that should be loosely coupled in the same place which might promote tighter coupling Bad, because tagging a release of a component will unnecessarily include the rest of the repository Bad, because changes to a component may accidentally impact other components Bad, because the commit history is mixed for all components Bad, because a single commit may change multiple components making tracking these changes harder Bad, because the CI pipeline would need to identify the changed components to avoid triggering tests for all other components Bad, because clone times might be much higher Good, because it keeps the individual repositories simpler Good, because it allows proper separation of modules Good, because it allows proper tagging of releases Bad, because implementing dependent changes in separate components becomes harder Bad, because it makes finding individual pieces of code potentially harder if the repository is unknown Mono- or Multi-repo?","title":"ADR002: Use Multiple Repositories instead of one Large Repository","component":"home","version":"nightly","name":"ADR002-choose_repository_structure","url":"/home/stable/contributor/adr/ADR002-choose_repository_structure.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"Single Repository","hash":"_single_repository","id":8},{"text":"Multiple Repositories","hash":"_multiple_repositories","id":9},{"text":"Links","hash":"_links","id":10}]},"27":{"id":27,"text":"Status: accepted Deciders: Florian Waibel Lars Francke Lukas Menzel Oliver Hessel Sönke Liebau Date: 19.08.2020 We need a review process in place to ensure that any change that is committed into any of this projects repositories is properly reviewed. In order to do this there are two main principles that have been coined by the Apache Software Foundation: Commit the change and then ensure that someone reviews it and commits necessary changes Create a pull request that is reviewed and changed before it gets merged into the main branch Keep the commit history clean Ensure only reviewed code ever gets released Review then commit Commit then review Chosen option: \"Review then commit\", because it meets both decision drivers. It is easy to ensure that no unreviewed code gets into a release No need to track which code still needs to be reviewed The commit history can be kept much cleaner as all commits can be squashed when merging a pull request Quick fixes may become harder, as reviewers need to be found before a fix can be merged Pull requests may go stale and cause a little effort to rebase before they can be merged This option requires a full review and approval of all changes before they are commited to the development branch. Who and how many people need to approve a change will need to be defined in the contribution guidelines at a later time. Good, because there is no need to keep track of unreviewed commits Good, because it is much easier to keep the commit history clean Good, because discussions during review are kept in the PR which keeps the repository clean Bad, because quick fixes can become harder Bad, because pull requests may go stale Bad, because a large number of old and inactive pull requests may accumulate With this process any committer is allowed to commit changes straight to the Good, because committing a change quickly is much easier Bad, because unreviewed commits could make it into a release or would need to be excluded Bad, because we need to keep track of whether or not a commit has been reviewed yet Bad, because changes during review would create additional commits that clutter up the commit history","title":"ADR003: Use RTC as Review Mechanism for Changes","component":"home","version":"nightly","name":"ADR003-choose_review_mechanism","url":"/home/stable/contributor/adr/ADR003-choose_review_mechanism.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"Review then commit","hash":"_review_then_commit","id":8},{"text":"Commit then Review","hash":"_commit_then_review","id":9}]},"28":{"id":28,"text":"Status: accepted Deciders: Florian Waibel Lars Francke Lukas Menzel Bernd Fondermann Oliver Hessel Sönke Liebau Date: 02.10.2020 Which programming language should be used in the implementation of the agent that will manage tool installations on servers? The ability to deploy the agent as one binary with no external dependencies Availability of well supported libraries for necessary operations File IO Network IO systemd IDE support Debugging options Java Go Rust Chosen option: \"Rust\", because it came out best (see below)]. Rust is a Programming language * focused on safety and * provides memory safety without a garbage collector. Rust is a Programming language * with a steep learning curve. Good, because easy to find developers Good, because team is very familiar with it Bad, because it needs a jvm as dependency and is not deployable as single binary GraalVM has many drawbacks and licensing doubts as it is an Oracle product Good, because it compiles to a single binary on many platforms Good, because Kubernetes also uses it Good, because there is proper IDE support with debugging Bad, because a new language to learn for many team members Bad, because missing generics may be an issue and create less than readable code Bad, because it is still a garbage collected language Good, because it compiles to a single binary on many platforms Good, because no garbage collection Good, because it enforces a high level of security Bad, because a new language to learn for many team members Bad, because potentially very touch to find developers - arguably not a real drawback as people will need to be willing to learn something new anyway","title":"ADR004: Use Rust as programming language for the agent","component":"home","version":"nightly","name":"ADR004-choose_agent_programming_language","url":"/home/stable/contributor/adr/ADR004-choose_agent_programming_language.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"Java","hash":"_java","id":8},{"text":"Go","hash":"_go","id":9},{"text":"Rust","hash":"_rust","id":10}]},"29":{"id":29,"text":"Status: accepted Deciders: Lars Francke Sönke Liebau Oliver Hessel Date: 07.01.2021 The agent will need to create systemd unit files for every service that it wants to be run. Systemd has a couple of directories where these files can be placed and offers ways of adding non-standard directories to that list. We need to decide where to put these files. Familiarity of admins with solution Added complexity Implementation effort Making cleanup of a server as easy as possible if Stackable stack is removed Use $SYSTEMD_UNIT_PATH to globally add a new directory Symlink unit files to default location Create unit files in default location Chosen option: \"Create unit files in default location\" We loose no functionality over any of the other options, but it is far easier to implement and has less added complexity for the sysadmins. We will put unit files in /lib/systemd/system which is the proper directory for unit files provided by installed packages. /etc/systemd/system is a directory with higher priority for user created units, not using this directory gives admins the option of creating a temporary override unit file here for testing/debugging/…​ purposes. Admins will find the unit files where they are used to finding them Implementation effort is low Least invasive and no risk of outdated files still being linked as current No versioning of unit files, as the current one will always be overwritten (this can be mitigated by keeping a copy of all unit files in our config dir) Good, because this would completely isolate our unit files from the rest of the system Bad, because this appears to be functionality used only for testing Bad, because setting this environment variable would need to be done very early during system startup, necessitating potentially dangerous changes to the server Bad, because this would create an unusual place to look for unit files that sysadmins are not aware of Good, because it would allow us to keep unit files in a central location Bad, because it adds a level of indirection that sysadmins are probably not used to Bad, because it creates the possibility of symlinks pointing at wrong unit files (if we version unit files) Good, because it is known and expected behavior Good, because it is the quickest solution to implement Bad, because it is a little bit more invasive than alternatives","title":"ADR005: Decide on handling and location of systemd unit files","component":"home","version":"nightly","name":"ADR005-systemd_unit_file_location","url":"/home/stable/contributor/adr/ADR005-systemd_unit_file_location.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"Use $SYSTEMD_UNIT_PATH to globally add a new directory","hash":"_use_systemd_unit_path_to_globally_add_a_new_directory","id":8},{"text":"Symlink unit files to default location","hash":"_symlink_unit_files_to_default_location","id":9},{"text":"Create unit files in default location","hash":"_create_unit_files_in_default_location","id":10}]},"30":{"id":30,"text":"Status: draft Deciders: Florian Waibel Lars Francke Lukas Menzel Oliver Hessel Sönke Liebau Date: 27.08.2020 The Stackable project will need at least two components in order to orchestrate the software that gets deployed. These components are the orchestrator and the agents that manage bare-metal (or virtual) servers. During previous design discussions it became quite clear that a lot of the issues that we need to for these components are very similar to issues that Kubernetes faced in the past - and solved already. Some examples of this are: Agents need to register with the orchestrator in a secure way The orchestrator needs a mechanism for operators to subscribe to data In theory, Kubernetes components are extensible enough that it should allow us to implement our components in a way that we can deploy them on top of an existing Kubernetes. This would save us some work, as we’d for example not have to reimplement the registration process for agents. The image shows the two main options that we have identified during deliberations so far: shaded in red is the option of reusing Kubernetes components (please refer to Reuse kube-apiserver and kubelet for more details) shaded in green is the option of writing our own components (please refer to Start from Scratch for more details) Avoiding too tight coupling with Kubernetes development & community Deployment effort for potential customers Development effort Reuse kube-apiserver & kubelet Reuse kube-apiserver Start from Scratch Chosen option: \"Reuse only kube-apiserver\", because the amount of work to get a sufficient version of our orchestrator up and running is currently holding us back from achieving results that provide actual benefits to potential customers. While this increases our dependency on the Kubernetes project and potentially increases the deployment effort for customers a bit it has significant upsides as well. The main benefit is the fact that this will give as a battle-tested orchestrator right now, which we can use for our development. The Kubernetes api is very complex and reimplementing the pieces of the api-server that we need turned out to be more effort than expected. In the interest of reaching a MVP as early as possible we decided to push the final decision down the road a bit. This option is no decision for Kubernetes for good, but rather a decision for the first iteration of the product. By taking this step we are forcing ourselves to remain compatible with Kubernetes and keep the option open of implementing a limited version of the api-server later. Much less effort implementing the orchestrator at this time No need to deploy a full Kubernetes stack, we can easily just package an api-server as part of our deployment Relatively tight coupling with the kubernetes project Stackable needs to deploy a server-client architecture where the decentralized agent receives commands from the central server to execute these. In order to create an infrastructure like this, there are some functions that need to be in place. Some examples for these functions are: Deploy TLS keys and certificates to agents Register agents with orchestrator Monitor agents for liveness Communication between components Tagging and selection of executing nodes …​ Most of these functions would be considered boiler-plate and are not exclusive to our intended use-case. Kubernetes has implemented a lot of this functionality already and we could try to reuse this by deploying our components on top of an existing Kubernetes infrastructure. The general idea would not be to fork Kubernetes and just reuse the code for our purposes, but rather to deploy the orchestrator as for example an operator in a vanilla Kubernetes cluster and deploying CRDs for our necessary data structures. This way the operator could subscribe to our resources and publish the necessary downstream structures that Stackable operators would then listen to. Thinking the concept a bit further we might even get away without an orchestrator as most functionality is taken over by the Kube apiserver already. Good, because we do not need to reimplement existing functionality Bad, because we have to strictly adhere to Kubernetes structures for everything we do Bad, because we would need to marry our release cycles to the very short cycles of Kubernetes Bad, because for customers without an existing Kubernetes we would need to somehow provision a Kubernetes cluster Bad, because for some customers Kubernetes is not a technology that they want to invest in Bad, because we have to keep a very close eye on Kubernetes development to ensure we remain compatible with everything they do Since we aim to be api compatible with Kubernetes, we could use the api-server from Kubernetes as our central communications hub instead of a custom built orchestrator. As all components we plan to develop need to interface with this central server anyway this is an easy way of ensuring that we stay api-compatible every step of the way. Additionally this does not need a final decision, depending on how many Kubernetes features we end up using, it might still be an option at a later point in time to create our own apiserver in Rust und roll that out to customers who are not using Kubernetes. Good, because ops and dev-persons could keep using their existing Kubernetes tools and know-how Good, because we save the initial effort of implementing a api-compatible apiserver Good, because it is a reversible decision that allows us to gather speed at this time Bad, because it may tempt us to end up using more and more kube-apiserver functionality which would make it harder and harder to write our own implementation later Bad, because this forces us to use etcd as storage backend, we were originally planning to rather go with a sql database We implement the orchestrator and the agent from scratch, instead of reusing any Kubernetes code. By doing this we gain the flexibility of designing our data structures and APIs as we see fit as well as decoupling us from Kubernetes release cycles. For this option, it is worth noting, that we will not simply ignore Kubernetes in everything we do, but still pay close attention not to break compatibility with Kubernetes. This is to ensure that a later move towards Kubernetes does not become overly complex. Good, because this does not complicate deployments for customers without existing Kubernetes Good, because we don’t force customers to use Kubernetes Good, because we don’t need to adhere to the short Kubernetes release cycles Good, because we can design our solution independent of Kubernetes APIs and data structures Good, because we do not need to pay too close attention to the Kubernetes community with regards to breaking changes (for us, not for them) Bad, because we duplicate some effort that has already been done by the Kubernetes community Bad, because we potentially need to implement converters, if our structures differ from Kubernetes","title":"ADR007: Decide if Kubernetes Components Are to be Reused for Stackable","component":"home","version":"nightly","name":"ADR007-defined_reuse_of_k8s","url":"/home/stable/contributor/adr/ADR007-defined_reuse_of_k8s.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"Reuse kube-apiserver and kubelet","hash":"reuse-k8s","id":8},{"text":"Reuse only kube-apiserver","hash":"_reuse_only_kube_apiserver","id":9},{"text":"Start from Scratch","hash":"from-scratch","id":10}]},"31":{"id":31,"text":"Status: approved Deciders: Florian Waibel Lars Francke Oliver Hessel Sönke Liebau Date: 15.01.2021 For some of the tools we plan to integrate there are existing operators that deploy these tools on Kubernetes. Most notably these tools are: Spark Kafka Some implementation effort may be avoided by reusing these operators instead of recreating the tool-specific functionality that is already implemented. Since these operators are designed to work with Kubernetes and thus exclusively focused on containers some translation of data structures and processes would be necessary. Keeping the implementation effort as low as realistically possible Keeping compatibility with Kubernetes as far as possible to ease a later move towards Kubernetes deployments Avoid hard dependencies on external projects that may force us to fork in case they break compatibility with us Allow reuse of Kubernetes operators (would need to be decided individually for every tool) Don’t reuse operators Chosen option: \"Don’t reuse operators\", because the core value proposition of Stackable is that customers can get all tools from one place. This sort of implies that everything looks, feels and behaves the same, which would be very tough to ensure when depending on external projects that all behave differently. Even just looking at the two potential Kafka operators: Strimzi and Banzai, they choose substantially different approaches and adapting either one to our needs would have created substantial effort. All components deployed by us will adhere to a common standard, behavior and config set We can reuse core components for all operators Operator framework Config management framework A lot of effort and functionality has been implemented in existing operators, which we will effectively need to duplicate Good, because it saves implementation effort Good, because this forces us to consider Kubernetes compatibility repeatedly Bad, because we create a dependency on another project that may at some point break compatibility Bad, because we need to adapt to interfaces that have been designed specifically with containers in mind Good, because it allows us to build our operators the way that works best for us Good, because we do not depend on the quality of external projects that may have implemented partial functionality (i.e. security) Bad, because we repeat work that has already been done Operator pattern description","title":"ADR008: Allow Reuse of Existing Kubernetes Operators","component":"home","version":"nightly","name":"ADR008-decide_reuse_of_operators","url":"/home/stable/contributor/adr/ADR008-decide_reuse_of_operators.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"Allow reuse of Kubernetes operators","hash":"_allow_reuse_of_kubernetes_operators","id":8},{"text":"Don’t reuse operators","hash":"_dont_reuse_operators","id":9},{"text":"Links","hash":"_links","id":10}]},"32":{"id":32,"text":"Status: accepted Deciders: Lars Francke Sönke Liebau Malte Sander Date: 1.3.2021 We need to decide on a syntax and feature set on how to assign services to nodes. For every process a user wants to run in the cluster we need to find a node to run it on. Usually users have an opinion which nodes make good candidates and we need to support a syntax that is flexible enough that users can select the nodes they want to target. Our competition currently requires users to manually select all machines that software should be deployed to. Our goal is to be at least as good if not better. Problems We want to support multiple instances of a service (or role) on a single node. We have to be able to target single instances with one-shot commands (e.g. restart this process) We need to be able to place instances in a very flexible way but also in a very strict way Sometimes there is an agreed upon fixed placement of services to nodes that must be adhered to Have users specify a list of nodeNames in their resources This would be the scenario customers of current Big Data distributions are used to Reuse the \"Label and Selector\" syntax from Kubernetes See also Assigning Pods to Nodes We decided to go with the Kubernetes way of using label selectors. Example: leader: selectors: default: selector: matchLabels: component: spark matchExpressions: - { key: tier, operator: In, values: [ cache ] } - { key: environment, operator: NotIn, values: [ dev ] } config: cores: 1 memory: \"1g\" instances: 3 instancesPerNode: 1 20core: selector: matchLabels: component: spark cores: 20 matchExpressions: - { key: tier, operator: In, values: [ cache ] } - { key: environment, operator: NotIn, values: [ dev ] } config: cores: 10 memory: \"1g\" instances: 3 instancesPerNode: 2 config: Here we see that for a node type called leader we have an object with two top-level properties, one of them being selectors. selectors is again a map of names to objects. The names are chosen by the user and should describe the role group, often this will be just default or something similar but it allows overriding configuration per role group while inheriting parent-level config. In summary, we decided that all our CRDs should follow a consistent pattern: At the top level there is one property per role Under each role there can be one or more role groups (in a selectors property) Each role group has a single selector which is a Kubernetes LabelSelector Each role group can have optional instances and instancesPerNode fields This method also allows for (optional) auto-scaling should new nodes be added that match the selector. The details of how this can be implemented are not in scope for this ADR. We have a consistent behavior across all Operators It is better than what customers have today People already familiar with Kubernetes should feel right at home It is more effort to implement than the alternatives It is harder to use for everyone who’s not used to the Kubernetes style of selecting nodes The old way of listing hosts can be relatively easily emulated (but should be explained in the docs) \"Label and Selector\" syntax Assigning Pods to Nodes","title":"ADR009: Assigning Services to Nodes","component":"home","version":"nightly","name":"ADR009-selector_support","url":"/home/stable/contributor/adr/ADR009-selector_support.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Considered Options","hash":"_considered_options","id":2},{"text":"Decision","hash":"_decision","id":3},{"text":"Positive Consequences","hash":"_positive_consequences","id":4},{"text":"Negative Consequences","hash":"_negative_consequences","id":5},{"text":"Links","hash":"_links","id":6}]},"33":{"id":33,"text":"Status: accepted Deciders: Lars Francke Date: 1.3.2021 Kubernetes follows a declarative model where a user describes the desired state of the world. There are some things that cannot be easily or naturally modeled in a declarative way. Some examples being: restart, start, stop, repair, finalize upgrade, etc. We still need to support those actions. This ADR is about finding a way to do so. As can be seen in the linked issue others are facing the same issue and various workarounds are in-use. Kubernetes offers no native way to achieve our goal. Have the Operators start a Web server that accepts requests for these actions Add CRDs for these kinds of actions Have a single CRD: FooCommand which takes a string with the command (e.g. \"restart\") Have a CRD per command (e.g. FooRestart, FooStart) We decided to go with a single CRD per command. We decided against a web server (for now) because it’d mean we’d need to reimplement authentication and authorization from scratch and this’d need to be consistent with the way Kubernetes works. Unfortunately, Kubernetes doesn’t support arbitrary subresources for CRDs yet (only scale and status are supported) Our implementation idea is as follows: Create a CRD It needs to have a reference to the parent resource (i.e. a name and a namespace) Write an operator (command operator) which should be made generic and reusable This operator watches this new custom resource For each command object it tries to find the referenced resource and sets the ownerReference of the command-CR to the one of the parent In theory users could do this themselves but it’s harder to use (i.e. having to find the uid) The parent controller will be notified and during its reconcile it can get a list of all commands sorted by creationTimestamp It can then work on the command - tracking progress in the status - and also potentially update the command-CR Open questions: Should the command CR be deleted immediately after it has been completed? Should the command CR be used to track progress in addition to or instead of the parent resource? We do not change the spec of the main objects so we can keep imperative actions out of it This allows users to keep the spec in version control Implementation effort because each CRD needs a new controller Can be mitigated somehow because the controllers should be pretty uniform Can be harder to use Instead of being able to issue a simple command like spark restart users first have to construct a proper YAML file and then use kubectl to apply it Can be mitigated with custom CLIs https://github.com/kubernetes/kubernetes/issues/72637","title":"ADR010: Expressing one-shot commands in a Kubernetes-native way","component":"home","version":"nightly","name":"ADR010-command_pattern","url":"/home/stable/contributor/adr/ADR010-command_pattern.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Considered Options","hash":"_considered_options","id":2},{"text":"Decision","hash":"_decision","id":3},{"text":"Positive Consequences","hash":"_positive_consequences","id":4},{"text":"Negative Consequences","hash":"_negative_consequences","id":5},{"text":"Links","hash":"_links","id":6}]},"34":{"id":34,"text":"Status: accepted Deciders: Sönke Liebau Lars Francke Date: 17.03.2021 To run the Stackable platforms some components will need to be installed on the managed servers. We will offer OS packages for a specified set of distributions, currently deb and RPM packages are available. To make the components behave the same regardless of the target platform, we would like to agree on some default directories and what content we will put there. This ADR is less to document alternative solutions, but rather to document the directory structure we agreed on, hence there are no alternative options discussed. Instead, I have added excerpts from the Filesystem Hierarchy Standard to illustrate why I think the chosen paths are the correct ones. Follow the Filesystem Hierarchy Standard and keep files under /etc/opt and /var/opt Deviate from the Standard and remove the extra opt subdirectory Predictability for users Adherence to standards & best-practices We decided to deviate from what the Filesystem Hierarchy Standard specifies, in order to make the file location more familiar to our users. Please refer to the listing below for final locations. While the standard calls for variable data and config files to be located in opt subdirectories under /var and /etc we have never seen this actually being done in practice and would expect our users to be confused if they had to look for the files here. Config files should be easily located for the largest part of our users Strictly speaking we break the official requirements of where our config files should be - but we seem to be in good company, as no one really follows this recommendation anyway / ├── etc │ └── stackable │ ├── agent │ │ └── secure │ ├── serviceconfig │ └── zookeeper-operator ├── opt │ └── stackable │ ├── agent │ ├── packages │ └── zookeeper-operator └── var ├── lib │ └── stackable │ └── agent └── log └── stackable └── servicelogs ├── namespace-product-name └── namespace-product-name In accordance with Filesystem Hierarchy Standard # 3.13.1 we will install the binaries for our components under `/opt/stackable//binaryfile. In the example above there are subdirectories for the agent and the ZooKeeper operator which contain the executable files for these components. For worker servers which are under management by our agent, we will need to install packages that contain the upstream software that is being rolled out by the agent. As this is also third party software but being used by Stackable we will install these under /opt/stackable/' as well, but put them under a subdirectory `packages to keep them separate from the Stackable software. This only refers to the default setting the agent is configured with though, this path can be freely chosen by the user. According to Filesystem Hierarchy Standard # 3.7.4, if our binaries are kept under /opt we should keep the associated config files in /etc/opt and replicate the same folder structure here that can be found in /opt. This default location seems like it is different from the industry standard, as we could not find any software that actually uses this path. Instead it is accepted best-practice to put configuration either directly under /etc or create a vendor subdirectory under /etc and keep configs there. According to the standard, config files that are written for the actual services that are managed by Stackable (Apache Kafka, Apache Hadoop, …​) should also reside in /etc/opt/stackable. Following the logic stated above, we will divert from the standard and remove the opt from this path as well. It doesn’t make sense to call the containing directory packages, like the parent directory for the binaries, so instead we have renamed it to serviceconfig to better express what it actually contains. For components that need working directories for variable / changing data on disk, the standard specifies that these should reside under /var/opt/ and then again replicate the folder structure that exists under /opt/. Like for config files we will deviate from the standard here and follow common practice instead. Any component that needs a working directory should keep this in a subdirectory under /var/lib/stackable/. Stackable components that have been installed from OS packages write their logs directly to the systemd journal. These need not have a log directory on disk by default. For the services that are managed by Stackable, log directories will be kept in per-service subdirectories under /var/log/stackable/servicelogs. This can be configured in the agent and is just the default value. The actual log directory for services that are rolled out on nodes managed by Stackable can be controlled by the user. If users prefer to keep their logs in /var/log/hadoop for example then this can easily be overridden when creating the cluster.","title":"ADR011: Directory Structure Used by Stackable Components on Managed Hosts","component":"home","version":"nightly","name":"ADR011-directory_structure","url":"/home/stable/contributor/adr/ADR011-directory_structure.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Considered Options","hash":"_considered_options","id":2},{"text":"Decision Drivers","hash":"_decision_drivers","id":3},{"text":"Decision","hash":"_decision","id":4},{"text":"Benefits:","hash":"_benefits","id":5},{"text":"Drawbacks:","hash":"_drawbacks","id":6},{"text":"Discussion of Options","hash":"_discussion_of_options","id":7},{"text":"Binaries for Stackable Components","hash":"_binaries_for_stackable_components","id":8},{"text":"Packages","hash":"_packages","id":9},{"text":"Configuration Files for Stackable Components","hash":"_configuration_files_for_stackable_components","id":10},{"text":"Service Configuration","hash":"_service_configuration","id":11},{"text":"Working Directories","hash":"_working_directories","id":12},{"text":"Log File","hash":"_log_file","id":13}]},"35":{"id":35,"text":"Status: accepted Deciders: Teo Klestrup Röijezon Lars Francke Sönke Liebau Date: 2021-11-23 Technical Story: https://github.com/stackabletech/issues/issues/4 Services need a way to authenticate each other when communicating. This is typically done by issuing each service some form of secret token that the counterparty can validate. Depending on the service in question, this may be a token unique to the counterparty (such as a password or API key) or a token accepted by a whole trust domain (such as a Kerberos keytab or a TLS certificate). This ADR primarily concerns itself with the latter case. Depending on the specifics of the service being communicated with, this token may need to identify the replica (Pod in Kubernetes terms), the set of replicas (RoleGroup, StatefulSet, or Pod), or the server that the replica is running on (Node). Depending on the specific service being communicated with, the token may need to identify the the replica (Pod in Kubernetes terms), the set of replicas (RoleGroup, StatefulSet, or Pod), or the server that the replica is running on (Node) Some customers have an existing trust domain where they provision us static tokens that we must use Many customers do not have an existing trust domain, nor do they want to take on the operational burden of managing it manually Ideally, automatically provisioned tokens should be as short-lived as is practical Kubernetes secrets (+ Cert Manager etc) Hashicorp Vault Custom secret service Option 3: Custom Secret Service Secrets are managed in Kubernetes Secret objects, which are mounted into the Pods. Depending on the customer’s configuration, these secrets may be provisioned by operators such as Cert-Manager, or managed manually by an administrator. Good, because it exists already Good, because people are already used to them Bad, because secret mounting is static for the whole StatefulSet or Deployment (and so cannot depend on the replica or node identity) Bad, because secrets must be provisioned in advance and stored in K8s Bad, because Kubernetes Secrets are typically not encrypted at rest Bad, because cluster and app administrators often have overly broad access to Secrets Bad, because Cert-Manager does not perform any policy check on certificates being issued Bad, because there is no Krb-Keytab-Manager (yet) Secrets are stored or provisioned on demand by Hashicorp Vault, and injected into the pods using Vault-CSI. Good, because it exists already Good, because it can issue TLS certificates on demand Good, because secrets are encrypted at rest Bad, because it cannot issue Kerberos keytabs Bad, because the APIs for issuing dynamic secrets and retrieving existing secrets are incompatible Bad, because policy controls are limited enough to be nearly useless for managing identities Bad, because it is a heavy operational burden for customers that do not already use it Bad, because Vault Enterprise pricing is unclear (but has a reputation for being very expensive) Secrets are stored or provisioned by a custom service (which may delegate to Vault, Kubernetes, etc as needed). Secrets are injected into pods using a custom CSI provider or init container. Good, because it can enforce policy for generated identities (for example: tying TLS certificate to Pod or Node identity) Good, because it can pick pregenerated tokens based on Pod/Node identity Good, because it can have a cluster-global policy for picking between backends Good, because it can accomodate to whatever authn methods we end up supporting Bad, because it’s another bespoke thing to maintain and develop Bad, because none of us are experienced with writing CSI providers","title":"ADR012: Authentication token management","component":"home","version":"nightly","name":"ADR012-authn_token_management","url":"/home/stable/contributor/adr/ADR012-authn_token_management.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":5},{"text":"Kubernetes secrets","hash":"_kubernetes_secrets","id":6},{"text":"Hashicorp Vault","hash":"_hashicorp_vault","id":7},{"text":"Custom secret service","hash":"_custom_secret_service","id":8}]},"36":{"id":36,"text":"Status: draft Deciders: Lars Francke Date: 2022-02-04 Technical Story: Document supported Kubernetes versions Multiple new versions of Kubernetes are released every year (currently 3). Security fixes might come in between. Different Kubernetes components (including kubectl) will only support a limited number of versions, as mandated by kubernetes' Version Skew Policy. Therefore, we need to define the supported Kubernetes versions. The API overview provides an overview of the Kubernetes Deprecation Policy. In there, we find rules that can guide our decisions. \"Rule #4a: minimum API lifetime is determined by the API stability level\" \"Alpha API versions may be removed in any release without prior deprecation notice\" \"Beta API versions must be supported for 9 months or 3 releases (whichever is longer) after deprecation\" \"GA API versions may be marked as deprecated, but must not be removed within a major version of Kubernetes\" \"Rule #7: Deprecated behaviors must function for no less than 1 year after their announced deprecation.\" This means that a codebase relying on alpha features can only reliably be developed against a single kubernetes version. For beta features, 3 kubernetes versions can be covered with the same codebase. The linked document also shows the overlapping of versions. When a feature matures from beta into stable, the beta version can still be used for 3 releases. After that, the stable version has to be used. For actually deprecated features (not just moved from beta to stable), the grace period is also more than three releases; as specified a deprecated feature has to be supported for at least a year. The stackable operators depend on a specific kubernetes version through the operator framework. At the moment we do not have an explicit version compatibility, and the software will work with different versions of the objects we use are the same in different kubernetes versions (i.e. an operator uses 1.21 but all resource definitions we rely on are identical in 1.20 so the operator works in 1.20 too). Kubernetes maintains release branches for the most recent three minor releases. Any minor version for 1.19 onwards receives one year of patch support. Most providers of managed kubernetes refer to this schedule when defining their own support windows. See https://kubernetes.io/releases/ and https://kubernetes.io/releases/version-skew-policy/ AKS supports three kubernetes versions, where they seem to try to make these the three latest versions. See https://docs.microsoft.com/en-us/azure/aks/supported-kubernetes-versions?tabs=azure-cli#kubernetes-version-support-policy Each minor version is supported for approximately twelve months after it’s first released. See https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html Google provides a total of 14 months of support for each GKE minor version once the version has been made available in the Regular channel. […​] After 12 months, a supported version will enter a 2-month maintenance period before reaching end of life. See https://cloud.google.com/kubernetes-engine/versioning IONOS seems to support the latest three versions; as of January 2022 the supported versions are 1.20, 1.21 and 1.22. As of September 2021, the supported OpenShift Container Platforms are 4.6, 4.7, and 4.8 which in turn use Kubernetes v1.19, v1.20, and v1.21. see https://docs.openshift.com/container-platform/4.6/release_notes/ocp-4-6-release-notes.html#ocp-4-6-about-this-release see https://docs.openshift.com/container-platform/4.7/release_notes/ocp-4-7-release-notes.html#ocp-4-7-about-this-release see https://docs.openshift.com/container-platform/4.8/release_notes/ocp-4-8-release-notes.html#ocp-4-8-about-this-release Some customers told us they have troubles keeping the pace at which Kubernetes moves. They are only slowly adopting new Kubernetes releases, or even refrain completely from using Kubernetes. Customers might even be lagging behind in their Kubernetes clusters. This means that too fast a pace is not good for customers. Tech is fast moving: major Kubernetes improvements are released multiple times a year. This means that we need to stay up to date, supporting versions that are not supported by the kubernetes project is potentially difficult. Managed Kubernetes offerings (GKE & Co.) typically only support fairly recent k8s releases. We should be able to run on all large managed kubernetes services. How can we upgrade the Kubernetes we run without customer intervention? follow Kubernetes support timeline/version skew policy needs an outline of migration strategy, announcements, communications and paths support any Kubernetes Version for n months needs an outline of migration strategy identify Stackable’s own long-term-support version of Kubernetes outline additional effort, like handling of security patches, and how to deal with missing new mainstream features It was decided that we will support the latest three kubernetes versions. Kubernetes release cycle is approximately 15 weeks, which means we support each version for 45 weeks or a little over 10 months. According to the deprecation policy this means that we will have a single API version for every object across all 3 versions available, so we will be able to compile a single binary that works with all 3 versions of kubernetes. In general, having to support less means we can focus more on building new features instead of maintaining compatibility over a large range of kubernetes versions. This speed might be too fast for some users. Kubernetes Version Skew Policy Kubernetes Release Cadence Kubernetes Deprecation Policy","title":"ADR013: Supported Kubernetes versions","component":"home","version":"nightly","name":"ADR013-supported_kubernetes_versions","url":"/home/stable/contributor/adr/ADR013-supported_kubernetes_versions.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Kubernetes Version Policy","hash":"_kubernetes_version_policy","id":2},{"text":"Deprecation and Removal of older resource variants","hash":"_deprecation_and_removal_of_older_resource_variants","id":3},{"text":"Stackables behavior","hash":"_stackables_behavior","id":4},{"text":"Support Policies of Kubernetes and Managed Cluster Providers","hash":"_support_policies_of_kubernetes_and_managed_cluster_providers","id":5},{"text":"Kubernetes","hash":"_kubernetes","id":6},{"text":"Azure Kubernetes Service (AKS)","hash":"_azure_kubernetes_service_aks","id":7},{"text":"Amazon EKS","hash":"_amazon_eks","id":8},{"text":"Google GKE","hash":"_google_gke","id":9},{"text":"IONOS","hash":"_ionos","id":10},{"text":"OpenShift","hash":"_openshift","id":11},{"text":"Decision Drivers","hash":"_decision_drivers","id":12},{"text":"Considered Options","hash":"_considered_options","id":13},{"text":"Decision Outcome","hash":"_decision_outcome","id":14},{"text":"Positive Consequences","hash":"_positive_consequences","id":15},{"text":"Negative Consequences","hash":"_negative_consequences","id":16},{"text":"Links","hash":"_links","id":17}]},"37":{"id":37,"text":"Status: accepted Deciders: Teo Klestrup Röijezon Sönke Liebau Jim Halfpenny Sebastian Bernauer Date: 2022-03-03 Technical Story: https://github.com/stackabletech/issues/issues/170 Customers will generally want to configure all user-facing products to authenticate the user against a common user directory. We’re aiming for a unified user experience when authenticating users in different products. Multiple authentication systems and protocols exist, and not all products support all protocols The cluster administrator will typically want to use the same underlying authentication system for all services Manage authentication configuration inline in the ProductCluster CRD Introduce a new ProductAuthentication CRD per product that the ProductCluster CRD refers to Introduce a new AuthenticationClass CRD that the product CRDs reference Option 3: Introduce a new AuthenticationClass CRD that the product CRDs reference We embed a the authentication settings directly into the product’s primary CRD. This would look something like: apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: nifi spec: authenticationConfig: methods: - ldap: hostname: ldap.server port: 389 domain: domain.local bindCredentialsSecret: nifi-ldap-bind-credentials Good, because we can expose exactly the options that each product supports Good, because it is (relatively) simple to implement and requires no new components Bad, because it will be difficult to keep the option schema consistent between Stackable operators Bad, because it will be difficult for customers to keep their configuration synchronized across their Stackable Data Platform installation Bad, because it forces application administrators to know about authentication directory details Every product defines its own CRD that contains exactly the authentication options that that product supports. For example: apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: nifi spec: authenticationConfig: methods: - nifi-ldap-authn --- apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiAuthenticationMethod metadata: name: nifi-ldap-authn spec: ldap: hostname: ldap.server port: 389 domain: domain.local bindCredentials: secretClass: nifi-ldap-bind-credentials scope: Service Good, because we can expose exactly the options that each product supports Good, because it allows separation of ownership between products and authentication system Bad, because it will be difficult to keep the option schema consistent between Stackable operators Bad, because it will be difficult for customers to keep their configuration synchronized across their Stackable Data Platform products Bad, because it forces authentication administrators to know about each product We define a common AuthenticationClass CRD that we try to share between all operators. It’s cluster-scoped so that a LDAP bind can be shared between multiple namespaces. For example: apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: nifi spec: authenticationConfig: methods: - authenticationClass: ldap-1 - authenticationClass: ldap-2 ldapOverwrite: # optional ignoreCase: true - authenticationClass: kerberos # We check for the correct AuthenticationClass type => Otherwise we throw a warning kerberosOverwrite: # optional. we have to check for the correct overwrite type => Warning otherwise. Is we try ldapOverwrite to kerberos AuthenticationClass they will be ignored udp: true --- apiVersion: auth.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: ldap-1 spec: ldap: # Enum(ldap, kerberos, etc.) hostname: ldap.server port: 389 domain: domain.local bindCredentials: secretClass: ldap-bind-credentials scope: Service --- apiVersion: auth.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: kerberos spec: kerberos: ticketServer: my.kerberos.server realm: myrealm Here, bindCredentials is specified as a reference to a SecretClass, which allows secret-operator to bind in separate credentials for each cluster (or even Pod, depending on how things are set up) that uses the AuthenticationClass, while letting a cluster administrator centralize the management of the AuthenticationClass. Good, because it allows complete separation between product and authentication ownership Good, because it allows a single interface for authentication owners to integrate with Good, because it enforces a consistent interface between Stackable operators Bad, because it requires us to set up a new commons operator with the AuthenticationClass CRD Bad, because it requires introducing a new dependency on the commons operator for all Stackable operators Bad, because not all options (either whole authentication providers or individual config fields) are supported by all products. Additional options can be specified in the ProductCluster authenticationConfig section. Initially we will start to implement the AuthenticationClass in a concrete operator as a spike. Before releasing the new CRD it will be moved into a new separate operator that contains common CRDs that are shared between all operators (there will be some other shared CRDs in the future)","title":"ADR014: User Authentication for Products","component":"home","version":"nightly","name":"ADR014-user_authentication_for_products","url":"/home/stable/contributor/adr/ADR014-user_authentication_for_products.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":5},{"text":"Authentication in ProductCluster","hash":"_authentication_in_productcluster","id":6},{"text":"ProductAuthentication CRD per product","hash":"_productauthentication_crd_per_product","id":7},{"text":"Global AuthenticationClass","hash":"_global_authenticationclass","id":8}]},"38":{"id":38,"text":"Status: accepted Deciders: Felix Hennig Razvan Mihai Sebastian Bernauer Sönke Liebau Teo Klestrup Röijezon Date: 2022-04-28 Technical Story: #208 One of the main focus areas of Stackable is making components of the stack work together well. This requires a high degree of composability where one component refers to another compenent in its definition. While this is a simple concept in principle it requires that operators obtain information about the object that is referred to and inject this information into the configuration of the object that refers to it. An example for this is a NiFi cluster definition referring to a ZooKeeper cluster definition via a znode name: apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: zookeeperConfigMapName: simple-nifi-znode For this example the NiFi operator needs to somehow insert the content of this config map into specific NiFi config files. This ADR is about the preferred way of implementing dependencies like described above. Option 1: Inserting ConfigMap/Secret content into target config in the operator Option 2: Mounting ConfigMap/Secret into the pods Chosen option: \"Option 2\", because it makes better use of Kubernetes features to model dependencies between definitions which in turn will make restart implementations and general debugging easier and more predictable. This decision will not hold true for all possible scenarios, but should be understood more as a implementation guideline: If a pod needs to access the content of a ConfigMap or Secret it should do this by mounting the ConfigMap/Secret unless there is a good reason to access the ConfigMap directly in the operator instead. Dependencies will be clearly modelled in Kubernetes by mounts, which makes behavior of the entire architecture more predictable Operators need to implement a much simpler logic around watches, as triggering reconciliations is handled via k8s dependencies (mounts) Complexity is moved from the operator code into init containers that need to perform insertion of the ConfigMap/Secret content into actual config files Debugging a running configuration becomes harder in cases where users have no access to a shell in the pods, as this would be the only way to actually see the running configuration (#210 has been created to investigate mitigating this) The operator can retrieve the content from ConfigMaps/Secrets during reconciliation and insert the values directly into the target config. The target config would then be written either to a ConfigMap or a Secret, depending on whether sensitive input data is contained in it. Good, because it isolates most of the complexity in the operator Good, because it would allow referencing ConfigMaps and Secrets in different namespaces which would potentially allow for less duplication Good, because it gives an almost complete manifestation of a running config in k8s objects that can be used for debugging Bad, because it would allow referencing ConfigMaps and Secrets in different namespaces, which would dilute namespace separation Bad, because it makes debugging startup issues of products much harder, as pods will simply not appear if required ConfigMaps are missing, effectively bypassing well established k8s patterns (like a pod missing a mount not starting and writing events about why it is not starting) Bad, because the dependencies between pods and configmaps / secrets become very complex and hard to debug as they are not modelled in any way as k8s dependencies (mounts) Bad, because setting up the correct watches in the operator becomes very complex, with a likelyhood of inadvertently forgetting to add a new watch that becomes necessary as CRDs evolve Bad, because it potentially propagates sensitive values to multiple places by copying secret content to additional places Bad, because the Operator is seeing the Secrets. This is not a problem now, but if we could avoid it that would be better Instead of accessing the content of ConfigMaps/Secrets in the operator, the operator would simply mount these object into the generated pods. Accessing the content of these mounted objects would then need to be done in an init container, currently this is done with shell commands, but this would be replaced with a more suitable tool in a follow-up ADR. Good, because mounting the ConfigMap/Secret directly into the pod allows the restart controller to automatically restart a Pod if a mounted object changes. Otherwise, changes would not be propagated or the Operator would have to watch the ConfigMap/Secret for changes itself. The watching/restarting is done once by Kubernetes + the restart controller and makes our Operators simpler Bad, because the mounted properties cannot be validated by the Operator. Although Kubernetes at least verifies that all the properties that should be mounted exist Bad, because it is more difficult to see which config is actually used to run the product, as the actual config is only finally assembled inside of the container","title":"ADR015: How Should Operators Use Values from ConfigMaps & Secrets","component":"home","version":"nightly","name":"ADR015-using_values_from_configmaps","url":"/home/stable/contributor/adr/ADR015-using_values_from_configmaps.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Considered Options","hash":"_considered_options","id":2},{"text":"Decision Outcome","hash":"_decision_outcome","id":3},{"text":"Positive Consequences","hash":"_positive_consequences","id":4},{"text":"Negative Consequences","hash":"_negative_consequences","id":5},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":6},{"text":"Option 1 - Inserting ConfigMap/Secret content into target config in the operator","hash":"option1","id":7},{"text":"Option 2 - Mounting ConfigMap/Secret into the pods","hash":"option2","id":8}]},"39":{"id":39,"text":"Status: accepted Deciders: Felix Hennig Sebastian Bernauer Siegfried Weber Sönke Liebau Teo Klestrup Röijezon Date: 29.04.2022 Currently we do not have a common schema of how we refer to S3 buckets that are used by the managed product. For example Trino, Druid and Hive all require/support specifying one or more S3 buckets to access, for some of the tools these buckets can reside on separate S3 endpoints (AWS, MinIO, Ceph, …​). We want to define a shared set of CRDs which can be used to specify these connections in an easy and composable fashion and works the same for all products across the Stackable Data Platform. Must allow using multiple S3 endpoints in the same environment Must support buckets with generated names that are not known up front (like with Rook’s object bucket claim pattern) Must allow specifying just an S3 backend without a bucket (for example Trino and Druid need this) Should be easy to use for the end-user and not require scripting or similar things to take care of repetitively specifying the same S3 endpoint for multiple buckets (or comparable issues) Should favor native K8s mechanisms like ownership and reconciliation notifications over custom logic Must not put extra effort on the user in order to be easier to implement Option 1: Isolating S3 endpoint details in an S3Connection object and credentials in the S3Bucket Option 2: Inlining S3 endpoint details in the S3Bucket object Option 3: Inlining bucket name and credentials in the product configuration Option 4: Isolating S3 endpoint details and credentials in an S3Connection object Option 5: Merge of options 1, 3 & 4 Option 6: Generate inlined S3Connection objects from templates with a dedicated controller Option 7: Use the ConfigMap format that has been defined by Rook for use with its object bucket claim method Chosen option: \"Option 5\" with caveats, because it allows us to start with a simple implementation that works for now, but can be gradually expanded to include more complex cases over time. We will in step 1 implement only the inlined version of the S3Bucket object like this: --- apiVersion: v1 kind: S3Bucket metadata: name: my-bucket data: bucketName: my-bucket-123 secretClass: minio-credentials s3Connection: inline: host: test-minio port: 9000 tls: verification: server: caCert: secretClass: my-s3-ca Implementing this gives us a working solution and buys time to evaluate options for implementing more complex functionality. A required decision that was more or less orthogonal to the main decision documented in this ADR was to make all objects discussed in this ADR namespaced instead of cluster scoped, as this is in line with the overall approach of allowing namespace isolation for Stackable infrastructures. We will spike the second half of option 5> as well as , port: Option, //... credentials: Option, } struct S3Bucket { connection: Option, bucket_name: Option, } enum S3ConnectionReference { inline { host: Option, port: Option, }, external { referencename: Option, // refers to the name of an S3Connection object } } struct S3Credentials { //... } pub fn resolve_s3_bucket(bucket: &S3Bucket) -> Result { if let Some(conn) = bucket.connection { Ok(match conn { S3ConnectionReference::inline { conn } => conn , S3ConnectionReference::external { conn } => { // Create s3 bucket with inlined connection and return conn.inline_connection() } }) } Ok(()) } Good, because it gives a lot of flexibility in defining S3 buckets, it pretty much has all the benefits of options 1, 3 & 4 Good, because we can start implementing only the inline configuration so that the operators only have to watch a single object (similar to option 2). Later on the reference mechanism can be added without a breaking change (as an addition to the complex enum). Bad, because setting up all necessary watches in the operator to ensure objects are reconciled as needed will become extremely complex This option solves the issue of unnecessarily repeating S3 endpoint details in every S3Bucket object by adding a controller that generates S3Buckets from templates that allow defining S3Connection templates in bulk. By offering a default way of generating multiple S3Buckets from a single object we try to preempt users from creating tooling of their own for generating these types of objects. Good, because it makes watches easy-ish to set up in the operators (identical to option 2) Bad, because it requires creating a template object per set of credentials that are to be used for accessing the S3 endpoint There is an existing format for specifying object buckets in ConfigMaps that has been defined by RedHat (or maybe just documented and defined by someone else). Adhering to this format would have the benefit of automatically being compatible with any external system that uses this standard. This option can be considered roughly equivalent to Option2, as the content of the ConfigMap matches what is specified in the S3Connection object for that option. Good, because it is an established standard that would make our operators compatible with this standard Bad, because it does not give us the flexibility of adding content that we need and while staying fully compatible apiVersion: v1 kind: ConfigMap metadata: name: my-bucket data: BUCKET_HOST: 10.0.171.35 BUCKET_NAME: test21obc-933348a6-e267-4f82-82f1-e59bf4fe3bb4 BUCKET_PORT: \"31242\" BUCKET_REGION: \"\" BUCKET_SUBREGION: \"\"","title":"ADR016: Representation of S3 Buckets in CRDs","component":"home","version":"nightly","name":"ADR016-definition_of_s3_objects","url":"/home/stable/contributor/adr/ADR016-definition_of_s3_objects.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":5},{"text":"Option 1: Isolating S3 endpoint details in an S3Connection object and credentials in the S3Bucket","hash":"option1","id":6},{"text":"Option 2: Inlining S3 endpoint details in the S3Bucket object","hash":"option2","id":7},{"text":"Option 3: Inlining bucket name and credentials in the product configuration","hash":"option3","id":8},{"text":"Option 4: Isolating S3 endpoint details and credentials in an S3Connection object","hash":"option4","id":9},{"text":"Option 5: Merge of options 1, 3 & 4","hash":"option5","id":10},{"text":"Option 6: Generate inlined S3Connection objects from templates with a dedicated controller","hash":"option6","id":11},{"text":"Option 7: Use the ConfigMap format that has been defined by Rook for use with its object bucket claim method","hash":"option7","id":12}]},"40":{"id":40,"text":"Status: accepted Deciders: Malte Sander Sebastian Bernauer Sönke Liebau Teo Klestrup Röijezon Date: 2022-05-04 Technical Story: https://github.com/stackabletech/zookeeper-operator/issues/466 Our products use TLS to encrypt network traffic and/or to authenticate themselves and their clients. We want to define a common way - across all the products - to configure these mechanisms. Must support using no TLS usage, TLS only for encryption and TLS for encryption and authentication Should fit into out existing authentication concept from ADR014: User Authentication for Products Should be easy to understand and use for the user Handle TLS as special case Extend AuthenticationClass to support TLS Split server-side and client-side authentication into separate config sections Chosen option: \"Split server-side and client-side authentication into separate config sections\", because separating them allowed us to model the underlying structs the best way. We don’t support TLS inside AuthenticationClass. We need a new tlsConfig attribute on every product CRD. An implementation could look something like this: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: ssl-zk spec: config: tlsConfiguration: # optional quorum: # Communication between between different Zookeeper nodes tls: # commons tls config verification: none: {} # OR server: caCert: webPki: {} # OR secretClass: tls # Reference to SecretClass below # OR mutual: certSecretClass: tls # Reference to SecretClass below clients: # Communication between Zookeeper clients and Zookeeper nodes tls: # commons tls config verification: none: {} # OR server: caCert: webPki: {} # OR secretClass: tls # Reference to SecretClass below # OR mutual: certSecretClass: tls # Reference to SecretClass below servers: roleGroups: primary: replicas: 2 config: myidOffset: 10 secondary: replicas: 1 config: myidOffset: 20 version: 3.8.0 stopped: false --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true Good, because simple (no indirection through AuthenticationClass object) Bad, because TLS is a special case and does not fit in our AuthenticationClass mechanism. We already have a common AuthenticationClass structure discussed in ADR014: User Authentication for Products This option extends the AuthenticationClass so that it also support TLS authentication. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: ssl-zk spec: config: tlsAuthenticationConfig: quorum: authenticationClass: zookeeper-tls-mutual clients: authenticationClass: zookeeper-tls servers: roleGroups: primary: replicas: 2 config: myidOffset: 10 secondary: replicas: 1 config: myidOffset: 20 version: 3.8.0 stopped: false --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: zookeeper-tls-mutual spec: provider: tls: verification: none: {} # OR server: caCert: webPki: {} # OR secretClass: tls # Reference to SecretClass below # OR mutual: certSecretClass: tls # Reference to SecretClass below --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: zookeeper-tls spec: provider: tls: verification: none: {} # OR server: caCert: webPki: {} # OR secretClass: tls # Reference to SecretClass below # OR mutual: certSecretClass: tls # Reference to SecretClass below verification: mutual: caCert: secretClass: tls # Reference to SecretClass below --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true Good, because TLS is handled via the generic AuthenticationClass mechanism. Bad, because an AuthenticationClass can express: Don’t do any authentication at all --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: ssl-zk spec: config: # Only affects client connections # This setting controls # - If TLS encryption is used at all # - Which cert the servers should use to authenticate themselves against the client tls: # optional, defaults to \"secretClass: tls\" secretClass: tls # provides tls.crt, tls.key and ca.crt # Only affects client connections # This setting controls # - If clients need to authenticate themselves against the server via TLS # - Which ca.crt to use when validating the provided client certs clientAuthentication: # optional. Can only be provided if config.tls is provided authenticationClass: zookeeper-tls # provides ca.crt # Only affects quorum communication # Use mutual verification between Zookeeper Nodes (mandatory) # This setting controls # - Which cert the servers should use to authenticate themselves against other servers # - Which ca.crt to use when validating the other server quorumTlsSecretClass: tls # provides tls.crt, tls.key and ca.crt servers: roleGroups: primary: replicas: 2 config: myidOffset: 10 secondary: replicas: 1 config: myidOffset: 20 version: 3.8.0 stopped: false --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: zookeeper-tls spec: provider: # Expresses: Authenticate clients! # For this to work you must have an TLS-enabled endpoint which in turn requires a ca.crt (at least at Stackable ;)) # So you already have a ca.crt, use that to validate the client certs! tls: {} # OR... tls: # Expresses: Authenticate clients using the following ca.crt! # This setting controls # - Which ca.crt to use when validating the provided client certs clientCertSecretClass: tls-client # provides ca.crt # OR... # All the other authentication mechanisms out there still exist ldap: ldapStuff{...} --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true As a recap: This is how our products connect to TLS-secured services outside of the Stackable Cluster (e.g. Superset to LDAP). Mutual verification is not supported this way, as client-side authentication is handled via AuthenticationClass. --- [ProductCRD...] tls: verification: none: {} # OR server: caCert: webPki: {} # OR secretClass: tls # Reference to a SecretClass providing the ca.crt Good, because TLS is handled via the generic AuthenticationClass mechanism. Good, because clients don’t need to know/understand AuthenticationClass objects. They only read the Discovery ConfigMap and the contained SecretClasses. Bad, because it’s more complicated because of the indirection via AuthenticationClass. Bad, because the client operator needs to read the Discovery ConfigMap rather than simply mounting it into the client product. Bad, because doing so external clients (outside of Stackable) must need to take more effort to connect to Stackable services e.g. retrieve ca cert from SecretClass.","title":"ADR017: TLS authentication","component":"home","version":"nightly","name":"ADR017-tls_authentication","url":"/home/stable/contributor/adr/ADR017-tls_authentication.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":5},{"text":"Handle TLS as special case","hash":"_handle_tls_as_special_case","id":6},{"text":"Extend AuthenticationClass to support TLS","hash":"_extend_authenticationclass_to_support_tls","id":7},{"text":"Split server-side and client-side authentication into separate config sections","hash":"_split_server_side_and_client_side_authentication_into_separate_config_sections","id":8}]},"41":{"id":41,"text":"Status: approved Deciders: Lars Francke Malte Sander Nikolaus Winter Razvan Mihai Siegfried Weber Sönke Liebau Teo Klestrup-Röjiezon Date: 04.05.2022 Term Definition Product Version The version of the product contained in the docker image (like for example Apache Kafka or Trino) - the thing we operate Operator Version The version of the Stackable Operator Stackable Image Version The version of the docker image which contains the product Currently, we publish all products as Docker images following the template docker.stackable.tech/stackable/$PRODUCT:$PRODUCT_VERSION-stackable$IMAGE_VERSION, as well as docker.stackable.tech/stackable/$PRODUCT:$PRODUCT_VERSION-stackable$IMAGE_SEMVER_MAJOR. In theory, a given Operator version depends on some SemVer range of image_version (for example ^1.3.0, which expands to >=1.3.0 =N.0.0 <N+1.0.0), depending on the -stackable$IMAGE_SEMVER_MAJOR tag. This works OK for spinning up new clusters, but means that existing clusters may keep running old image versions even after upgrading to new (incompatible) Operator versions. The cluster may also end up in a mixed environment if a replica gets deployed to a new node after a new image version has been released. One case where this matters is when adding new features (such as preinstalling new libraries) to a product image that the operator then depends on. This isn’t a breaking change for the product image, since it still works for old operator versions, which can simply ignore the new feature. There is an argument that It could be considered a breaking change for the operator (though internal dependency upgrades are typically not considered breaking), but this would not help selecting the correct product image anyway. Based on the above, there are actually two decisions to take around this problem: How are stackable image versions created? How does the operator decide which image to use? While these two questions are related to each other they can be decided fairly independently of each other. The decision process for 2. will be influenced by the decision that is taken on 1., so we will get this done first. This ADR will be limited to the question of how stackable image versions are created, with the question of how the operator derives the correct image to use deferred to a subsequent ADR. Old versions of operators must keep working and deploying images that they are compatible with We should try to limit the number of maintained image version \"tracks\" for each product It should not be necessary to update the used operator version in order to be able to deploy a new product version The chosen option should make life as easy as possible for the end-user, it doesn’t need to be the simplest one to implement There are two main options that were considered, both of which can be implemented in two variants: For these variants it is assumed that tags which mark a release in the docker images repository (regardless of whether this is a shared repo or a dedicated repo) will contain only the stackable image version. This means that the definitions of packaged product versions are included in this tag. For example, if a stackable image version 0.1.0 is released at a time when the latest product version is 3.1.0 then there will never be an image version 0.1.0 for product version 3.1.1. The tag 0.1.0 will point at a specific commit in the repository and this commit will also include all Dockerfiles used to build the product images, so up to product version 3.1.0. If a Dockerfile for product version 3.1.1 is later created it would not be included in this tag, and could only be released by creating a tag 0.1.1. The tags for this variant would look like this: 0.1.0 0.1.1 0.2.0 For these variants the release tag will also contain the product version in addition to the image version, so for the combination mentioned above (stackable image version 0.1.0 and product version 3.1.0) the following tag would be created: 3.1.0-stackable0.1.0 This would allow us to release later versions of the product without having to change to stackable image version - i.e. without needlessly releasing practically unchanged images. The main options that are to be considered in this ADR are: Each operator version hard-codes exactly one image version that it supports, and we release new product images for each operator images. The operator version will be kept separate from the stackable image version, for the image version we use semver. With these two dimensions described, we end up with the following list of options to be considered for this ADR: Synchronize image versions in lockstep with operator versions - Variant 1 Synchronize image versions in lockstep with operator versions - Variant 2 Use SemVer for docker images, independently of operator version - Variant 1 Use SemVer for docker images, independently of operator version - Variant 2 The following table shows the image versions resulting for all four options based on the following scenario: Product Versions Available Operator Versions Available 2.8.0 2.9.0 0.1.0 0.1.1 0.2.0 Please note, that this refers to the operator versions that were needed based on semver rules. Some of the options in the table below may contain operator versions not listed here, because it was necessary to release the operator itself in a new version in order to make a new product version available. For this scenario, no change to the image itself was assumed to be needed. Option Image Version 1 - Synchronize image versions in lockstep with operator versions - Variant 1 2.8.0-stackable0.1.0 2.8.0-stackable0.2.0 2.8.0-stackable0.1.1 2.8.0-stackable0.1.2 2.9.0-stackable0.1.2 2.8.0-stackable0.2.1 2.9.0-stackable0.2.1 2 - Synchronize image versions in lockstep with operator versions - Variant 2 2.8.0-stackable0.1.0 2.8.0-stackable0.2.0 2.8.0-stackable0.1.1 2.9.0-stackable0.1.0 2.9.0-stackable0.2.0 2.9.0-stackable0.1.1 3 - Use SemVer for docker images, independently of operator version - Variant 1 2.8.0-stackable0.1.0 2.8.0-stackable0.1.1 2.9.0-stackable0.1.1 4 - Use SemVer for docker images, independently of operator version - Variant 2 2.8.0-stackable0.1.0 2.9.0-stackable0.1.0 We chose option 4 (Use SemVer for docker images, independently of operator version - Variant 2), so the resulting tags will look like shown in the table below. The difference is due to the fact that docker images already contain the product name and we do not need to repeat this in the tag, whereas the docker images repository contains multiple products. Git Tag Docker Registry Tag kafka2.8.0_stackable0.1.0 2.8.0_stackable0.1.0 kafka2.9.0_stackable0.1.0 2.9.0_stackable0.1.0 kafka2.9.0_stackable0.1.1 2.9.0_stackable0.1.1 A subsequent ADR will contain follow up decisions on how much of the selection process for the correct image we want to automate in the operators. Initially no automation will be implemented, users need to select a working product version and image version combination and refer to the fully qualified version from the CRD (i.e. docker registry tag from the table above). There must be a compatibility matrix for the operator and product versions. This matrix should probably contain at least the following states: \"compatible\" (which means tested and supported by Stackable), \"unsupported\" (which means there is no known technical restriction which prevents you from using it but it is either not tested or contains vulnerabilities), and \"incompatible\" (which means there were breaking changes and this combination will not work). This compatibility matrix should not be hard-coded into the operators because then a new release of an operator is required every time a new product version should be supported by this operator. Instead it should be read from a config map. The main reasons for picking this option were: it allows us to decouple operator version and image version to a high degree there is no need to build unneeded images just to accommodate changes in other components (operator change vs image change) it keeps the option to provide automation around selecting the correct image version later on without the need for breaking changes Image versions are only comparable when combined with the product version. Image version 0.1.0 in kafka2.8.0_stackable0.1.0 and kafka2.9.0_stackable0.1.0 are two completely different versions 0.1.0 This decision triggers a few needed changes to our CI processes: Trigger will be changed to react to tags being pushed instead of manually like at the moment Only the exact version specified in the tag will be built, not all product versions (at the moment building Kafka builds all supported Kafka versions, in the future pushing kafka2.8.0_stackable0.1.0 will build only kafka 2.8.0) Special Case: Multiple Dockerfiles For example Superset changed the Dockerfile between Superset version and we need to reflect these changes in our Dockerfile, which means that we effectively have to have different Dockerfiles for different Superset versions. For these scenarios we will have multiple Dockerfiles and specify the one to use in conf.py Good, because it centralizes the information about which versions are supported into each operator’s repository Good, because upgrades are predictable for the user, \"upgrading the operator upgrades the cluster\" is easy to explain and teach Good, because image tags are stable and immutable once released Bad, because we end up storing a lot of duplicate Docker images We could share the Docker layers to lessen this impact dramatically, but that would require rearchitecting our CI Bad, because it increases the overhead of doing operator or image releases Bad, because old operator versions will keep deploying older image versions than they may technically be compatible with Good, because it centralizes the information about which versions are supported into each operator’s repository Good, because upgrades are predictable for the user, \"upgrading the operator upgrades the cluster\" is easy to explain and teach Good, because image tags are stable and immutable once released Bad, because we end up storing a lot of duplicate Docker images We could share the Docker layers to lessen this impact dramatically, but that would require rearchitecting our CI Bad, because it increases the overhead of doing operator or image releases Bad, because old operator versions will keep deploying older image versions than they may technically be compatible with Good, because we preserve SemVer for image versions Good, because existing operators will upgrade as far as they are compatible Bad, because existing operators may switch which (minor-level) image version they deploy without user action (this can be mitigated in the follow up ADR on version selection though) Bad, because we don’t have a good trigger for when new image versions are released Bad, because on-prem registry mirrors may be outdated and serve incompatible versions Good, because we preserve SemVer for image versions Good, because existing operators will upgrade as far as they are compatible Bad, because existing operators may switch which (minor-level) image version they deploy without user action (this can be mitigated in the follow up ADR on version selection though) Bad, because we don’t have a good trigger for when new image versions are released Bad, because on-prem registry mirrors may be outdated and serve incompatible versions","title":"ADR018: Product Image Versioning","component":"home","version":"nightly","name":"ADR018-product_image_versioning","url":"/home/stable/contributor/adr/ADR018-product_image_versioning.html","titles":[{"text":"Glossary","hash":"_glossary","id":1},{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":2},{"text":"Context","hash":"_context","id":3},{"text":"Decisions","hash":"_decisions","id":4},{"text":"Decision Drivers","hash":"_decision_drivers","id":5},{"text":"Considered Options","hash":"_considered_options","id":6},{"text":"Option Variants","hash":"_option_variants","id":7},{"text":"Variant 1 - Git tags contain only the Stackable image version","hash":"_variant_1_git_tags_contain_only_the_stackable_image_version","id":8},{"text":"Variant 2 - Git tags contain product version and stackable image version","hash":"_variant_2_git_tags_contain_product_version_and_stackable_image_version","id":9},{"text":"Options","hash":"_options","id":10},{"text":"Synchronize image versions in lockstep with operator versions","hash":"_synchronize_image_versions_in_lockstep_with_operator_versions","id":11},{"text":"Use SemVer for docker images, independently of operator version","hash":"_use_semver_for_docker_images_independently_of_operator_version","id":12},{"text":"Final List of Options to be Considered","hash":"_final_list_of_options_to_be_considered","id":13},{"text":"Scenarios","hash":"_scenarios","id":14},{"text":"Decision Outcome","hash":"_decision_outcome","id":15},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":16},{"text":"Synchronize image versions in lockstep with operator versions - Variant 1","hash":"_synchronize_image_versions_in_lockstep_with_operator_versions_variant_1","id":17},{"text":"Synchronize image versions in lockstep with operator versions - Variant 2","hash":"_synchronize_image_versions_in_lockstep_with_operator_versions_variant_2","id":18},{"text":"Use SemVer for docker images, independently of operator version - Variant 1","hash":"_use_semver_for_docker_images_independently_of_operator_version_variant_1","id":19},{"text":"Use SemVer for docker images, independently of operator version - Variant 2","hash":"_use_semver_for_docker_images_independently_of_operator_version_variant_2","id":20}]},"42":{"id":42,"text":"Status: accepted Deciders: Felix Hennig Malte Sander Sebastian Bernauer Sönke Liebau Teo Klestrup Röijezon Date: 17.05.2022 Trino allows user to specify multiple catalogs to connect to a variety of different data-sources. We need to agree on a mechanism to Specifying Trino catalog definitions (this ADR) Connect a catalog definition to an Trino cluster (ADR020: Trino catalog usage) Multiple different types of connectors must be supported, e.g. Hive, Iceberg, Oracle and PostgreSQL. In case of catalogs that use distributed file-systems such as HDFS or S3 the access needs to be configured. TrinoCatalog CRD with discovery ConfigMaps from same namespace TrinoCatalog CRD with discovery ConfigMaps from potentially other namespaces Chosen option: \"TrinoCatalog CRD with discovery ConfigMaps from same namespace\". This option lines up with the way we want to handle discovery ConfigMaps: The operator of the service connecting to (e.g. hdfs) watches for HdfsDirectory objects and provides us with a discovery ConfigMap in the target namespace. We will start only implementing the Hive connector and support more connectors in the future. A TrinoCatalog has a top-level complex enum to distinguish between the different connector types. This way every connector can define it’s own set of attributes that it supports. Here all references to discovery ConfigMaps such as HDFS or Hive only are a string that contains the name of the ConfigMap. The ConfigMap must reside in the same namespace as the TrinoCatalog object --- # Pseudo code! TrinoCatalog metadata: name: trino-catalog namespace: default spec: hive: metastore: # mandatory configMap: my-hive-metastore s3: # S3ConnectionDef, optional inline: host: minio # OR reference: my-minio-connection hdfs: # optional configMap: my-hdfs # will provide hdfs-site.xml impersonation: true # optional, defaults to false # there is no kerberos or wireEncryption attribute, as the information about kerberos comes from the discovery configmap # OR iceberg: {} # Attributes need to be defined later on when we support iceberg # OR postgresql: {} # Attributes need to be defined later on when we support postgresql # OR [...] Looking at the example of hdfs the hdfs discovery ConfigMap will be created by the hdfs-operator. That can be the case because we are running in the same namespace as hdfs or we place a HdfsDirectory object into the Trino namespace. The hdfs-operator then detects the HdfsDirectory object and places a discovery ConfigMap into the Trino namespace. (This is similar to the way ZooKeeper’s ZNodes currently work) Good, because it’s simple and we don’t have to worry about cross-namespace access Bad, because it prohibits the usage of an HDFS in a different namespace than the TrinoCatalog namespace. This can be solved by letting the hdfs-operator put the same discovery configmap into multiple namespaces (including the one with the TrinoCatalog) Here all references to discovery ConfigMaps such as HDFS or Hive are a tuple of the name and the namespace of the ConfigMap. The namespace is optional, if not provided the same namespace from the TrinoCatalog will be used. The ConfigMap can reside in a different namespace as the TrinoCatalog object --- # Pseudo code! TrinoCatalog metadata: name: trino-catalog namespace: default spec: hive: metastore: # mandatory configMap: name: my-hive-metastore namespace: default # optional s3: # S3ConnectionDef, optional inline: host: minio # OR reference: name: my-minio-connection namespace: default # optional hdfs: # optional configMap: # will provide hdfs-site.xml name: my-hdfs namespace: default # optional impersonation: true # optional, defaults to false # there is no kerberos or wireEncryption attribute, as the information about kerberos comes from the discovery configmap # OR iceberg: {} # Attributes need to be defined later on when we support iceberg # OR postgresql: {} # Attributes need to be defined later on when we support postgresql # OR [...] Good, because it allows easy cross-namespace access Bad, because it’s more complicated Bad, because we can’t simply mount the ConfigMap (e.g. with hdfs-site.xml) but instead somehow need to \"transfer\" it between different namespaces and watch the original ConfigMap.","title":"ADR019: Trino catalog definitions","component":"home","version":"nightly","name":"ADR019-trino_catalog_definitions","url":"/home/stable/contributor/adr/ADR019-trino_catalog_definitions.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":5},{"text":"TrinoCatalog CRD with discovery ConfigMaps from same namespace","hash":"_trinocatalog_crd_with_discovery_configmaps_from_same_namespace","id":6},{"text":"TrinoCatalog CRD with discovery ConfigMaps from potentially other namespaces","hash":"_trinocatalog_crd_with_discovery_configmaps_from_potentially_other_namespaces","id":7}]},"43":{"id":43,"text":"Status: accepted Deciders: Felix Hennig Malte Sander Sebastian Bernauer Sönke Liebau Teo Klestrup Röijezon Date: 17.05.2022 Trino allows user to specify multiple catalogs to connect to a variety of different data-sources. We need to agree on a mechanism to Specifying Trino catalog definitions (ADR019: Trino catalog definitions) Connect a catalog definition to an Trino cluster (this ADR) Catalogs must somehow be added to Trino clusters Catalogs should be reusable between multiple Trino clusters - e.g. users have two identical Trino clusters - one for adhoc queries, on for scheduled jobs. Catalog references Clusters Cluster references Catalogs Mapping object between Catalog and Cluster Catalog references Cluster Mapping via labels and label selectors Chosen option: \"Mapping via labels and label selectors\", because it’s the most flexible solution and delegates implementation details to kubernetes. Good, because if Trino instances in different stages have different catalogs, a Trino Object can be reused over the different stages Bad, because if a Trino Cluster has multiple catalogs and you want a similar Trino Cluster you need to modify all catalogs (and maybe restart your first Trino multiple times), not just simply create a new Trino Cluster copy Good, because it’s the normal flow that our Product CRDs point to other objects, not the other direction Bad, because people adding new catalogs need to be able to modify the TrinoCluster object. There may be companies out there where different people operate Trino and manage the catalogs Bad, because if Trino instances in different stages have different catalogs a Trino Object can not be reused over the different stages Bad, because more complicated for the users Bad, because more complicated watches needed This is the same as Catalog references Clusters but instead of a list of Clusters the Catalog only contains a single Cluster. Good, because if Trino instances in different stages have different catalogs a Trino Object can be reused over the different stages Good compared to Catalog references Clusters, because an TrinoCatalog is associated with an TrinoCluster and the cluster can add additional information to it like the current deployment status Bad, because catalogs can not be reused between multiple Trino clusters This is option Mapping object between Catalog and Cluster the \"kubernetes way\". Every TrinoCatalog object provides a set of labels. The TrinoCluster objects provide a LabelSelector which defines which catalogs should be included in the Trino instance. Good, because flexible (Trino cluster administrators can add new catalogs and teams can add their needed catalogs to an managed Trino instance) Good, because the usage of well-known kubernetes patterns Good, because delegates implementation details to kubernetes (e.g. easier watches)","title":"ADR020: Trino catalog usage","component":"home","version":"nightly","name":"ADR020-trino_catalog_usage","url":"/home/stable/contributor/adr/ADR020-trino_catalog_usage.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":5},{"text":"Catalog references Clusters","hash":"_catalog_references_clusters","id":6},{"text":"Cluster references Catalogs","hash":"_cluster_references_catalogs","id":7},{"text":"Mapping object between Catalog and Cluster","hash":"_mapping_object_between_catalog_and_cluster","id":8},{"text":"Catalog references Cluster","hash":"_catalog_references_cluster","id":9},{"text":"Mapping via labels and label selectors","hash":"_mapping_via_labels_and_label_selectors","id":10}]},"44":{"id":44,"text":"Status: accepted Deciders: Rob Siwicki Sebastian Bernauer Sönke Liebau Teo Klestrup-Röijezon Date: 2022-06-07 During the preparations for the first real release we noticed that the create_test_cluster.py script is not really polished at all. We would very much like to include stackablectl as the CLI tool in the first release as well as demo it on the website in the configurator. In principle stackablectl is usable, but one main functionality is missing, which is the ability to apply the examples and stand up products. While just applying the examples is not a huge problem, some of our tool have external dependencies that we need to supply via helm charts at the moment (for example Trino needs a Postgres database). We need to have a way to install helm charts as part of the stacks functionality in stackablectl to make it viable for rolling out example setups. The scope of this ADR is to define a minimal solution that allows defining stacks and specifying Helm charts with properties as prerequisites before applying yaml files. This should be defined in a way that allows us as much flexibility as possible when further defining how stackablectl stacks should behave and how stacks are defined down the road, as this is an ongoing discussion. All subsequent decisions will be documented in a separate ADR. Implementation effort should be small so this can be included in release 1 Chosen solution should give flexibility to extend it without breaking changes in the future Do nothing Implement basic definition of stacks Go all in on Porter / CNAB and use it to fully define our stacks Chosen option: \"Implement basic definition of stacks\", because it is a lightweight solution that can be implemented with limited effort and matches the expected overall direction of stackablectl well. There was agreement between all deciders that we do not want to marry our solution too tightly to the as yet unproven CNAB standard or Porter as a concrete implementation. By defining our own, thin, abstraction layer we can isolate our users from the chosen implementation technologies in the backend (Porter, CNAB, Helm, …​). We can use stackablectl as CLI tool in the first official release This allows adding CNAB bundles as the preferred implementation in a non-breaking fashion later on Depending on the future direction we take with stackablectl we have a risk of needing to break the api surface that we create with this implementation We could do nothing right now and instead use the create_test_cluster.py script as our entry point for the initial release. Good, this gives us time to design a fully thought out solution before implementing something Bad, create_test_cluster.py doesn’t feel very polished and we do want to introducet stackablectl to the world as our tool of choice In order to generate a minimally invasive way to enable deploying Helm charts as prerequisites for our stacks we will introduce the initial definition of a stack roughly as shown below. The implementation details may vary, this snippet is provided more to show the overall structure, most specifically the manifests attribute. Initial implementations here will be provided for applying a bunch of yaml files and installing Helm charts. trino: description: Simply stack only containing Trino stackableRelease: 22.05-sbernauer labels: - trino manifests: - helmChart: repository: https://charts.bitnami.com/bitnami name: postgresql properties: - auth.username: superset - auth.password: superset - auth.database: superset - plainYaml: stacks/trino.yaml helm install --repo https://charts.bitnami.com/bitnami --set auth.username=superset --set auth.password=superset --set auth.database=superset superset-postgresql postgresql Good, because it allows us to use stackablectl in release 1 and the marketing campaign Good, because it provides isolation between stackablectl and bundle technologies Bad, because it may require breaking changes down the line to the interface users get now CNAB in theory provides everything we’d need to install a stack, instead of allowing to define yaml files, helm charts and other things, we could simply bundle an entire stack as a CNAB bundle using Porter and have stackablectl install this. CNAB bundles can be pushed to OCI compliant registries, so we would not need to provide our own method of listing stacks for stackablectl either. Good, because instead of reinventing the wheel we would use an existing technology Bad, because we tightly couple stackablectl to this technology, the adoption of which is yet to be proven","title":"ADR021: Initial Version of Stackable Stacks Functionality","component":"home","version":"nightly","name":"ADR021-stackablectl_stacks_inital_version","url":"/home/stable/contributor/adr/ADR021-stackablectl_stacks_inital_version.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences <!-- optional -→","hash":"_positive_consequences_optional","id":5},{"text":"Negative Consequences <!-- optional -→","hash":"_negative_consequences_optional","id":6},{"text":"Pros and Cons of the Options <!-- optional -→","hash":"_pros_and_cons_of_the_options_optional","id":7},{"text":"Do nothing","hash":"_do_nothing","id":8},{"text":"Implement basic definition of stacks","hash":"_implement_basic_definition_of_stacks","id":9},{"text":"Go all in on Porter/CNAB and use it to fully define our stacks","hash":"_go_all_in_on_portercnab_and_use_it_to_fully_define_our_stacks","id":10}]},"45":{"id":45,"text":"Status: accepted Deciders: Andrew Kenworthy Sebastian Bernauer Razvan Mihai Date: 2022-08-23 Monitoring Spark applications usually involves two types of components: a history server and a metrics collection server. In this document we will concern ourselves with the history server. Using metrics for application monitoring requires a completely different set of protocols and technologies and is outside the scope of this document. The Spark history server is part of the Apache Spark distribution and it provides a web interface where application developers can visualize events that took place during the lifetime of a job as well as the outcome of various job phases. In this document, we propose a way to add the Spark history server to the Kubernetes resources that are managed by the Spark-on-Kubernetes operator. We also describe how Spark application definitions can leverage the history server and how the resource definitions make use of standard Stackable descriptors for S3 storage. Even though using a history server is optional when running Spark applications on the Stackable platform, it is highly recommended to make use of it in production environments. Ease of use / intuitive / checked Support multiple history servers per operator installation Integrate with the Stackable platform resource handling for S3 storage A history server is a separate entity, completely decoupled from any `SparkApplication`s. The Spark-on-k8s operator makes use of it only if available and if the Spark application developer has requested it. See the chapter below, on how `SparkApplication`s can request logging events to an existing history server. The most important part of the history server definition is the location of the event files. This is specified in the logFileDirectory entry of the resource specification as shown below. ... logFileDirectory: s3: prefix: eventlogs/ bucket: # S3BucketDef bucketName: spark-eventlogs connection: reference: eventlogs-s3-connection ... Here the event files are stored in the S3 bucket spark-eventlogs with the eventlogs/ prefix. The complete definition of the specified S3 connection is resolved by the operator from the eventlogs-s3-connection resource (not shown here). All Spark history properties can be defined in the properties section. The operator will make them available to the server at runtime. The operator makes no effort to validate these properties so extreme care must be taken making use of this section. In particular, properties concerning the event file storage can conflict with the definition provided in the logFileDirectory section and it’s not recommended to set them here at all. Here is a complete example of a history server definition: # Namespaced apiVersion: spark.stackable.tech/v1alpha1 kind: SparkHistoryServer metadata: name: history namespace: default spec: version: 3.3.0-stackable0.1.0 sparkConf: - # compaction - # retention/ttl - # update interval - ... cleaner: true # option of bool; default=false: sets spark.history.fs.cleaner.enabled=true # complex enum with variant s3 (hdfs later on) logFileDirectory: s3: prefix: eventlogs/ bucket: # S3BucketDef inline: bucketName: spark-eventlogs connection: inline: host: minio port: 9000 accessStyle: Path credentials: secretClass: history-server-s3-credentials Spark applications don’t have to use a history server but it’s highly recommended to do so in production environments. The section eventLogs of a SparkApplication instructs the operator to configure the application such that it can be monitored using the provided (and existing) history server. The example below shows the relevant configuration snippet of an application definition: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 logFileDirectory: s3: prefix: eventlogs/ bucket: # S3BucketDef inline: bucketName: spark-eventlogs connection: inline: host: minio port: 9000 accessStyle: Path credentials: secretClass: eventlogs-s3-credentials s3Connection: # Optional. Used for normal data operations. inline: host: minio port: 9000 accessStyle: Path credentials: secretClass: application-s3-credentials ... In the example above, the application will log its events to the bucket specifed in logFileDirectory. In addition, the application processes data from a S3 bucket configured within the s3connection section of the specification. The operator will read the s3Connection and set up the fs.s3a.aws.credentials.provider and co (endpoint, accesskey, secretkey, tls, path-style access - basically all attributes of S3Connection) settings. Afterwards if logFileDirectory attribute is set: Set fs.s3a.bucket..aws.credentials.provider and co to overwrite endpoint and credentials for the logging bucket. Set spark.eventLog.enabled property to true and will construct the spark.eventLog.dir from s3a:///. the credentials used by the HistoryServer do not have to be shared with `SparkApplication`s. Fully flexible solution, which allows the logDir to be on a different S3 ednpoint than the data. If they are on the same endpojnt, a single S3BucketDef can be shared between HistoryServer and SparkApplication for ease of use. HDFS and/or other distributed filesystems can be added non-breaking later on","title":"ADR022: Spark history server","component":"home","version":"nightly","name":"ADR022-spark-history-server","url":"/home/stable/contributor/adr/ADR022-spark-history-server.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"History Server Definition","hash":"_history_server_definition","id":3},{"text":"History Server Usage","hash":"_history_server_usage","id":4},{"text":"Advantages","hash":"_advantages","id":5}]},"46":{"id":46,"text":"This section contains a decision log on architectural decisions in the form of architectural decision records (ADRs). Find the list of below: ADR001: Use English as Documentation Language ADR002: Use Multiple Repositories instead of one Large Repository ADR003: Use RTC as Review Mechanism for Changes ADR004: Use Rust as programming language for the agent ADR005: Decide on handling and location of systemd unit files ADR007: Decide if Kubernetes Components Are to be Reused for Stackable ADR008: Allow Reuse of Existing Kubernetes Operators ADR009: Assigning Services to Nodes ADR010: Expressing one-shot commands in a Kubernetes-native way ADR011: Directory Structure Used by Stackable Components on Managed Hosts ADR012: Authentication token management ADR013: Supported Kubernetes versions ADR014: User Authentication for Products ADR015: How Should Operators Use Values from ConfigMaps & Secrets ADR016: Representation of S3 Buckets in CRDs ADR017: TLS authentication ADR018: Product Image Versioning ADR019: Trino catalog definitions ADR020: Trino catalog usage ADR021: Initial Version of Stackable Stacks Functionality ADR022: Spark history server","title":"Architectural Decision Records","component":"home","version":"nightly","name":"index","url":"/home/stable/contributor/adr/index.html","titles":[]},"47":{"id":47,"text":"Status: superseded by ADR7 Deciders: Date: Technical Story: == Deprecation Notice This ADR has been superseded by ADR7, which decided to stop development on the orchestrator for now and use the kube-apiserver instead. As the kube-apiserver exclusively supports etcd as backend provider there is no decision to document at this time. This ADR reflects the current state of dicussion at the time of approving ADR7 and should not be considered complete! The orchestrator will need some form of persistent storage backend, for which a decision on the technology to be used has to be taken. Our usage of this storage will most probably be extremely simple, even if a SQL database is chosen, the expectation is that it will be used fairly similar to a key value storage. Availability of libraries for chosen programming language for the orchestrator How established is the backend at potential customers, will we need to deploy it? etcd ZooKeeper SQL Database * * == Pros and Cons of the Options https://etcd.io/ Good, because etcd is used by Kubernetes Likelyhood that it is already deployed Expertise with etcd by Kubernetes admins can be reused Good, because it offers watch functionality Good, because it offers consensus mechanisms Bad, because it has a hard size limit Bad, because it does not work well with large numbers of requests https://zookeeper.apache.org/ Good, because it is well established and unterstood Good, because it offers watch functionality Good, because it offers consensus mechanisms Bad, because it offers no real benefit over etcd Bad, because it is known to have trouble with high volume of changes Good, because expertise and processes for some form of database will be present at pretty much any customer Backup HA Good, because deploying in integrated test/dev environment is easy with sqlite Bad, because we would need to potentially support multiple database vendors Postgres MS Sql Oracle …​","title":"Use xxx as storage backend for the orchestrator","component":"home","version":"nightly","name":"ADR006-choose_orchestrator_storage_backend","url":"/home/stable/contributor/adr/deprecated/ADR006-choose_orchestrator_storage_backend.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers","hash":"_decision_drivers","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"etcd","hash":"_etcd","id":7},{"text":"ZooKeeper","hash":"_zookeeper","id":8},{"text":"SQL Database","hash":"_sql_database","id":9},{"text":"Links","hash":"_links","id":10}]},"48":{"id":48,"text":"Status: draft Deciders: Florian Waibel Lars Francke Lukas Menzel Bernd Fondermann Oliver Hessel Sönke Liebau Date: xxx We need some form of authorization engine both for the products that are deployed via our stack as well as for our internal apis. This engine should have the ability to express universal access controls, as it will need to be adapted to many different end products: Stackable Hadoop Kafka Airflow Elasticsearch …​ Depending on which option is chosen, there is a second, implicit, decision that is taken as part of this record: whether or not to include an identity provider. Keycloak and Ranger both offer user management on top of authoriztion, whereas Open Policy Agent is purely an authorization engine. I’m not sure if we need to split this decision out into a separate ADR, but I suspect that it may make sense. If Open Policy Agent is chosen as part of this ADR, at some point we need to decide whether we also need an identity provider and if so, which one we should pick. Availability of plugins for initial components or expected effort for implementation Flexibility of rule engine Ranger Open Policy Agent Keycloak Chosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)]. [e.g., improvement of quality attribute satisfaction, follow-up decisions required, …] … [e.g., compromising quality attribute, follow-up decisions required, …] … Ranger is the de facto default authorization tool in the big data ecosystem. It offers existing integrations with a variety of tools and is used by the Cloudera offer as central access management component. Good, because most necessary integrations already exist Good, existing know how applies Good, because it offers id provider functionality Bad, because adding new tools is complex Bad, because objects to authorize on need to be defined in code (see Open Policy Agent for comparison) Bad, because user synchronization mechanisms are fairly limited Open Policy Agent is a universal authorization engine that has become popular in the Kubernetes (but not exclusively) environment lately. OPA defines ACLs in an abstract language called Rego which allows keeping authorization logic in the ACL definition, instead of source code. This gives a much higher degree of abstraction and thus flexibility than having to hard-code the logic for every application. Good, because relatively small effort to implement new tools Good, because very flexible system to define ACLs Bad, because no real HA concept Bad, because only one authorizer (Kafka) already implemented Bad, because would require additional identity provider Keycloak is based on a Wildfly application server and probably the most fully featured alternative of the ones discussed. It allows integration with LDAP and AD, offers authorization, a clustered mode for high availability and much more. Good, because gives a high degree of flexibility in adapting customers id solutions Good, because well established and widely used (GAIA-X, SCS) Bad, because no existing authorization plugins Bad, because objects to authorize on need to be defined in code (see Open Policy Agent for comparison) [Link type] [Link to ADR] <!-- example: Refined by [ADR-0005](0005-example.md) -→ … <!-- numbers of links can vary -→","title":"Choose Authorization Engine","component":"home","version":"nightly","name":"ADRx-choose_authorization_engine","url":"/home/stable/contributor/adr/drafts/ADRx-choose_authorization_engine.html","titles":[{"text":"Context and Problem Statement","hash":"_context_and_problem_statement","id":1},{"text":"Decision Drivers <!-- optional -→","hash":"_decision_drivers_optional","id":2},{"text":"Considered Options","hash":"_considered_options","id":3},{"text":"Decision Outcome","hash":"_decision_outcome","id":4},{"text":"Positive Consequences","hash":"_positive_consequences","id":5},{"text":"Negative Consequences","hash":"_negative_consequences","id":6},{"text":"Pros and Cons of the Options","hash":"_pros_and_cons_of_the_options","id":7},{"text":"Ranger","hash":"_ranger","id":8},{"text":"Open Policy Agent","hash":"_open_policy_agent","id":9},{"text":"Keycloak","hash":"_keycloak","id":10},{"text":"Links","hash":"_links","id":11}]},"49":{"id":49,"text":"If you’re working for a large company, chances are that there are multiple teams using the Stackable Data Platform. A single team can also operate multiple Stackable Data Platforms. stackablectl is build in a way customers or developers can define their own releases, stacks and demos! This way it is possible to cover the following use-cases. Any additional demos/stacks/releases you specify, will be added to the already existing ones provided by Stackable. When you have developed a new data pipeline or data product you often want to show it in action to other colleagues or potential clients. To easily achieve this you can create your own demo so that it can easily be reproduced and/or shared with other people. First you must create a mycorp-demos.yaml containing demos according to the format defined by the Stackable provided demos. After creating the mycorp-demos.yaml file it can be added to the available demos in stackablectl via the CLI argument --additional-demos-file mycorp-demos.yaml. The argument to --additional-demos-file can be either a path to a file on the local filesystem or an URL. By using an URL the demos file can be put into a central Git repository and referenced by all teams or clients. Multiple --additional-demos-file flags can be specified to include multiple demo files. Every additional demo will we added to the already existing demos in stackablectl, so all the available demo files will be merged. If your company or clients have multiple similar setups or reference architectures, it could make sense to make them easily available to all employees or clients. In the custom defined stack all product versions are pinned as well, so you can easily spin up a stack containing the exact same versions as your production setup. You can use your defined stack to give it to colleagues or potential customers to show the overall architecture of the Data Platform you’re going to build. For the overall procedure have a look at Adding a new demo on how to add a new stack. For a custom stack you need to create a mycorp-stacks.yaml containing stacks according to the format defined by the Stackable provided stacks. You can then add it to stackablectl with the flag --additional-stacks-file. If advanced users of the Stackable Platform want to define their own internal release within their company, they can easily add their own release. This has the following benefits: Same operator versions across the whole company. This produces more uniform environments and makes debugging and helping other teams easier. If the company is only interested in a subset of the available operators you can only add your relevant operators into your release and not install all the other operators. For the overall procedure have a look at Adding a new demo on how to add a new release. For a custom release you need to create a mycorp-releases.yaml containing releases according to the format defined by the Stackable provided releases. You can then add it to stackablectl with the flag --additional-releases-file.","title":"Customization","component":"stackablectl","version":"nightly","name":"customization","url":"/stackablectl/stable/customization.html","titles":[{"text":"Add a new demo","hash":"_add_a_new_demo","id":1},{"text":"Benefits","hash":"_benefits","id":2},{"text":"Adding a new demo","hash":"_adding_a_new_demo","id":3},{"text":"Add a new stack","hash":"_add_a_new_stack","id":4},{"text":"Benefits","hash":"_benefits_2","id":5},{"text":"Adding a new stack","hash":"_adding_a_new_stack","id":6},{"text":"Add a new release","hash":"_add_a_new_release","id":7},{"text":"Benefits","hash":"_benefits_3","id":8},{"text":"Adding a new release","hash":"_adding_a_new_release","id":9}]},"50":{"id":50,"text":"The stackablectl command line tool is used to interact with the Stackable data platform. It can install individual operators as well as platform releases. It also ships with a set of pre-built Demo that utilize different data products of the Platform to get e.g. an end-to-end data pipeline. The installation of stackablectl is described in Installation. To just get a Quickstart please follow Quickstart. In general, use stackablectl --help to find out more about how to use the tool or how to use specific options. This also works with subcommands, i.e. stackablectl release install --help will show the help for installing a release. Often you can also use an abbreviation instead of typing out all of the commands. E.g. stackablectl operator list can also be written as stackablectl op ls A Kubernetes cluster is required in order to use the Stackable Data Platform as all products and operators run on Kubernetes. If you don’t have a Kubernetes cluster, stackablectl can spin up a kind Kubernetes Cluster for you. The deployed services are separated into three different layers as illustrated below: This layer consists of Stackable operators managing the individual data products. They can either be installed one by one with the Operator command or from a release with the Release command which is recommended way. A release is a well-playing bundle of operators that has been extensively tested by Stackable. A stack is a collection of ready-to-use Stackable data products as well as needed third-party services like Postgresql or MinIO. Stacks are installed with the Stack command. A stack needs a release (of Stackable operators) to run on. To achieve this a stacks has a dependency on a release which gets automatically installed when a stack is installed. A demo is an end-to-end demonstration of the usage of the Stackable data platform. It contains Installing a Stackable release Spinning up a stack Performing the actual demo Prepare some test data Process test data Visualize results (optional) Demos are installed with the Demo command. A demo needs a stack to run on. To achieve this a demo has a dependency on a stack which gets automatically installed when a demo is installed. The stack in turn will install the needed Stackable release.","title":"stackablectl","component":"stackablectl","version":"nightly","name":"index","url":"/stackablectl/stable/index.html","titles":[{"text":"Operators","hash":"_operators","id":1},{"text":"Stacks","hash":"_stacks","id":2},{"text":"Demos","hash":"_demos","id":3}]},"51":{"id":51,"text":"Stackable ships pre-compiled binaries of stackablectl which should work on most environments such as Windows, macOS, and Linux distros like Ubuntu and Arch. Below are the installation instructions for Linux, macOS and Windows. If the binary does not work for you, you can always Build stackablectl from source Download the stackablectl-x86_64-unknown-linux-gnu binary file from the latest release, then rename the file to stackabelctl. You can also use the following command: $ curl -L -o stackablectl https://github.com/stackabletech/stackablectl/releases/latest/download/stackablectl-x86_64-unknown-linux-gnu and mark it as executable: $ chmod +x stackablectl You can now invoke it with: $ ./stackablectl If you want to be able to call it from everywhere (not only the directory you downloaded it to) you can add it to your system with the following command: $ sudo mv stackablectl /usr/bin/stackablectl Download stackablectl-x86_64-pc-windows-gnu.exe from the latest release. You can simply execute it. If you want to execute it from anywhere in your system, you need to add it to the system PATH. Download the stackablectl-x86_64-apple-darwin binary file for Intel based Macs or stackablectl-aarch64-apple-darwin binary file for ARM based Macs from the latest release. Then rename the file to stackablectl: $ mv stackablectl-x86_64-apple-darwin stackablectl # or $ mv stackablectl-aarch64-apple-darwin stackablectl and mark it as executable: $ chmod +x stackablectl You can now invoke it with: $ ./stackablectl If macOS denies the execution of stackablectl go to Settings → Security & Privacy → General. Here you will see a pop up asking if you want to allow access for stackablectl. You must allow access. To build stackablectl from source you need to have the following tools installed: Rust compiler Needed for compiling source code of stackablectl itself Go compiler Needed for compiling a wrapper around the Go lib go-helm-client C compiler As we use the vendored feature of the openssl crate a C compiler is needed to compile openssl from source Perl As we use the vendored feature of the openssl crate perl is needed to compile openssl from source Make As we use the vendored feature of the openssl crate Make is needed to compile openssl from source If you have the required tools available, you need to clone the stackablectl repo https://github.com/stackabletech/stackablectl and invoke the build with $ cargo build --release After a successful build the binary will be placed in target/release/stackablectl. Copy it to your systems path to access it from anywhere if you like. $ sudo cp target/release/stackablectl /usr/bin/stackablectl stackablectl provides completion scripts for the major shells out there. It uses the same mechanism as kubectl does, so if you have any problems following this steps, looking at their installation documentation may help you out. All of the supported shells of clap_complete are supported. As of 07/2022 this includes the following shells: Bash Elvish Fish PowerShell Zsh The stackablectl completion script for Bash can be generated with the command stackablectl completion bash. Sourcing the completion script in your shell enables stackablectl autocompletion. Install the package bash-completion e.g. via apt install bash-completion. After that run the following command to source the completion script and tell bash to source it every time you start a new shell. $ source > ~/.bashrc The stackablectl completion script for Fish can be generated with the command stackablectl completion fish. Sourcing the completion script in your shell enables stackablectl autocompletion. $ stackablectl completion fish | source $ echo 'stackablectl completion fish | source' >> ~/.config/fish/config.fish The stackablectl completion script for PowerShell can be generated with the command stackablectl completion powershell. To do so in all your shell sessions, add the following line to your $PROFILE file: kubectl completion powershell | Out-String | Invoke-Expression This command will regenerate the auto-completion script on every PowerShell start up. The stackablectl completion script for Zsh can be generated with the command stackablectl completion zsh. Sourcing the completion script in your shell enables stackablectl autocompletion. $ source > ~/.zshrc","title":"Installation","component":"stackablectl","version":"nightly","name":"installation","url":"/stackablectl/stable/installation.html","titles":[{"text":"Pre-compiled binary","hash":"_pre_compiled_binary","id":1},{"text":"Linux","hash":"_linux","id":2},{"text":"Windows","hash":"_windows","id":3},{"text":"macOS","hash":"_macos","id":4},{"text":"Build stackablectl from source","hash":"_build_stackablectl_from_source","id":5},{"text":"Configure auto-completion","hash":"_configure_auto_completion","id":6},{"text":"Bash","hash":"_bash","id":7},{"text":"Fish","hash":"_fish","id":8},{"text":"PowerShell","hash":"_powershell","id":9},{"text":"Zsh","hash":"_zsh","id":10}]},"52":{"id":52,"text":"In this Quickstart guide you will install a Demo, which is an end-to-end demonstration of the usage of the Stackable data platform. Please follow the Installation documentation to install stackablectl. Stackable provides a set of ready-to-use demos. As of writing (2022/08/15) only two demos are available, but further demos will be added in the future. They will automatically show up, as stackablectl fetches the available list of demos via the internet. To list the available demos run the following command: $ stackablectl demo list DEMO STACKABLE STACK DESCRIPTION trino-taxi-data trino-superset-s3 Demo loading 2.5 years of New York taxi data into S3 bucket, creating a Trino table and a Superset dashboard kafka-druid-earthquake-data kafka-druid-superset-s3 Demo ingesting earthquake data into Kafka, streaming it into Druid and creating a Superset dashboard When you are on a Windows system you have to replace the stackablectl command with stackablectl.exe, e.g. stackablectl.exe demo list. This applies to all commands below. For this guide we will use the trino-taxi-data demo. The installation of other available demos should work the same way. You simply need to use the name of the chosen demo instead of trino-taxi-data in the following commands. The installation depends on wether you already have an Kubernetes available to run the Stackable data platform on. If you want to access a Kubernetes cluster, make sure your kubectl Kubernetes client is configured to interact with the Kubernetes cluster. After that run the following command. $ stackablectl demo install trino-taxi-data [INFO ] Installing demo trino-taxi-data [INFO ] Installing stack trino-superset-s3 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 [INFO ] Installing components of stack trino-superset-s3 [INFO ] Installed stack trino-superset-s3 [INFO ] Installing components of demo trino-taxi-data [INFO ] Installed demo trino-taxi-data. Use \"stackablectl services list\" to list the installed services If you don’t have a Kubernetes cluster available, stackablectl can spin up a kind Kubernetes cluster for you. Make sure you have kind installed and run the following command: $ stackablectl demo install trino-taxi-data --kind-cluster [INFO ] Creating kind cluster stackable-data-platform Creating cluster \"stackable-data-platform\" ... ✓ Ensuring node image (kindest/node:v1.21.1) 🖼 ✓ Preparing nodes 📦 📦 📦 📦 ✓ Writing configuration 📜 ✓ Starting control-plane 🕹️ ✓ Installing CNI 🔌 ✓ Installing StorageClass 💾 ✓ Joining worker nodes 🚜 Set kubectl context to \"kind-stackable-data-platform\" You can now use your cluster with: kubectl cluster-info --context kind-stackable-data-platform Have a nice day! 👋 [INFO ] Installing demo trino-taxi-data [INFO ] Installing stack trino-superset-s3 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 [INFO ] Installing components of stack trino-superset-s3 [INFO ] Installed stack trino-superset-s3 [INFO ] Installing components of demo trino-taxi-data [INFO ] Installed demo trino-taxi-data. Use \"stackablectl services list\" to list the installed services The demos create Kubernetes jobs, that will populate test data and talk to the installed products to process the data. Until the products are ready, it is completely normal that the pods of these jobs will fail with an error. They will get retried with an exponentially growing backoff time. After the products are ready they should turn green and everything should settle down. Please read the documentation on the demo trino-taxi-data on how to proceed with the demo","title":"Quickstart","component":"stackablectl","version":"nightly","name":"quickstart","url":"/stackablectl/stable/quickstart.html","titles":[{"text":"Goal","hash":"_goal","id":1},{"text":"Install stackablectl","hash":"_install_stackablectl","id":2},{"text":"Browse available demos","hash":"_browse_available_demos","id":3},{"text":"Install demo","hash":"_install_demo","id":4},{"text":"Using existing Kubernetes cluster","hash":"_using_existing_kubernetes_cluster","id":5},{"text":"Using local kind cluster","hash":"_using_local_kind_cluster","id":6},{"text":"Proceed with the demo","hash":"_proceed_with_the_demo","id":7}]},"53":{"id":53,"text":"stackablectl uses an internet connection to always know of all the available versions, releases, stacks and demos. To achieve this the following online services will be contacted: URL Purpose https://repo.stackable.tech/repository/helm-stable/index.yaml Retrieve the list of current operator stable versions https://repo.stackable.tech/repository/helm-dev/index.yaml Retrieve the list of current operator development versions https://repo.stackable.tech/repository/helm-test/index.yaml Retrieve the list of current operator test versions https://raw.githubusercontent.com/stackabletech/release/main/releases.yaml List of releases provided by Stackable https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/stacks-v1.yaml List of stacks provided by Stackable https://raw.githubusercontent.com/stackabletech/stackablectl/main/demos/demos-v1.yaml List of demos provided by Stackable To allow stackablectl to retrieve the current list of operators you must mirror the https://repo.stackable.tech/repository/helm-.*/index.yaml files to some local URL. If the file is mirrored e.g. to https://my.corp/stackable/repository/helm-stable/index.yaml, you need to specify the following arguments to stackablectl: $ stackablectl --helm-repo-stackable-stable https://my.corp/stackable/repository/helm-stable operator list You need to mirror the URL to either a URL or a file on disk. You can then specify the mirrored file to be included via --additional-releases-file, --additional-stacks-file, or --additional-demos-file, e.g. $ stackablectl --additional-releases-file=/home/sbernauer/Downloads/releases.yaml release list or panic: open /tmp/.helmrepo: permission denied. See https://github.com/stackabletech/stackablectl/issues/39","title":"Troubleshooting","component":"stackablectl","version":"nightly","name":"troubleshooting","url":"/stackablectl/stable/troubleshooting.html","titles":[{"text":"No internet connectivity","hash":"_no_internet_connectivity","id":1},{"text":"Mirror helm-charts","hash":"_mirror_helm_charts","id":2},{"text":"Mirror releases/stacks/demos files","hash":"_mirror_releasesstacksdemos_files","id":3},{"text":"panic: open /tmp/.helmcache/stackable-stable-index.yaml: permission denied","hash":"_panic_open_tmp_helmcachestackable_stable_index_yaml_permission_denied","id":4}]},"54":{"id":54,"text":"A demo is an end-to-end demonstration of the usage of the Stackable data platform. It is tied to a specific stack of the Stackable data platform, which will provide the required products for the demo. To list the available demos, run the following command: $ stackablectl demo list DEMO STACKABLE STACK DESCRIPTION trino-taxi-data trino-superset-s3 Demo loading 2.5 years of New York taxi data into S3 bucket, creating a Trino table and a Superset dashboard kafka-druid-earthquake-data kafka-druid-superset-s3 Demo ingesting earthquake data into Kafka, streaming it into Druid and creating a Superset dashboard Detailed information of a demo can be queried with the describe command: $ stackablectl demo describe trino-taxi-data Demo: trino-taxi-data Description: Demo loading 2.5 years of New York taxi data into S3 bucket, creating a Trino table and a Superset dashboard Documentation: https://docs.stackable.tech/stackablectl/stable/demos/trino-taxi-data.html Stackable stack: trino-superset-s3 Labels: trino, superset, minio, s3, ny-taxi-data Future versions of stackablectl will also allow to search for demos based on the labels. If you want to access a Kubernetes cluster, make sure your kubectl Kubernetes client is configured to interact with the Kubernetes cluster. After that run the following command $ stackablectl demo install trino-taxi-data [INFO ] Installing demo trino-taxi-data [INFO ] Installing stack trino-superset-s3 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 [INFO ] Installing components of stack trino-superset-s3 [INFO ] Installed stack trino-superset-s3 [INFO ] Installing components of demo trino-taxi-data [INFO ] Installed demo trino-taxi-data. Use \"stackablectl services list\" to list the installed services If you don’t have a Kubernetes cluster available, stackablectl can spin up a kind Kubernetes cluster for you. Make sure you have kind installed and run the following command: $ stackablectl demo install trino-taxi-data --kind-cluster [INFO ] Creating kind cluster stackable-data-platform Creating cluster \"stackable-data-platform\" ... ✓ Ensuring node image (kindest/node:v1.21.1) 🖼 ✓ Preparing nodes 📦 📦 📦 📦 ✓ Writing configuration 📜 ✓ Starting control-plane 🕹️ ✓ Installing CNI 🔌 ✓ Installing StorageClass 💾 ✓ Joining worker nodes 🚜 Set kubectl context to \"kind-stackable-data-platform\" You can now use your cluster with: kubectl cluster-info --context kind-stackable-data-platform Have a nice day! 👋 [INFO ] Installing demo trino-taxi-data [INFO ] Installing stack trino-superset-s3 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 [INFO ] Installing components of stack trino-superset-s3 [INFO ] Installed stack trino-superset-s3 [INFO ] Installing components of demo trino-taxi-data [INFO ] Installed demo trino-taxi-data. Use \"stackablectl services list\" to list the installed services The demos create Kubernetes jobs, that will populate test data and interact with the installed products to process the data. Until the products are ready, it is completely normal that the pods of these Jobs will fail with an error. They will get retried with an exponentially growing backoff time. After the products are ready they should turn green and everything should settle down. After installing your demo you can use the Services command to list the installed services as follows: $ stackablectl services list --all-namespaces PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS hive hive default hive 172.18.0.4:32658 metrics 172.18.0.4:30745 opa opa default http http://172.18.0.2:31324 superset superset default external-superset http://172.18.0.2:32716 Admin user: admin, password: admin trino trino default coordinator-http http://172.18.0.5:32128 coordinator-metrics 172.18.0.5:31199 coordinator-https https://172.18.0.5:32721 minio minio-trino default http http://172.18.0.4:31026 Third party service console-http http://172.18.0.4:30354 Admin user: root, password: rootroot Currently there is no support for uninstalling a demo again.","title":"Demo","component":"stackablectl","version":"nightly","name":"demo","url":"/stackablectl/stable/commands/demo.html","titles":[{"text":"Browse available demos","hash":"_browse_available_demos","id":1},{"text":"Install demo","hash":"_install_demo","id":2},{"text":"Using existing Kubernetes cluster","hash":"_using_existing_kubernetes_cluster","id":3},{"text":"Using local kind cluster","hash":"_using_local_kind_cluster","id":4},{"text":"List deployed services","hash":"_list_deployed_services","id":5},{"text":"Uninstall stack","hash":"_uninstall_stack","id":6}]},"55":{"id":55,"text":"The stackable operator command allows to list, install and uninstall Stackable operators. Operators manage the individual data products of the Stackable Data Platform. This command manages individual operators. It is mainly intended for people already having experience or working on the Stackable Data Platform. If you just want an easy way to get started or don’t know which products and/or which version to install it is recommended to use the Release command. This command will install a bundle of operators from an official Stackable release. To list the operators that are part of the Stackable Data Platform as well as their stable versions run the following command: $ stackablectl operator list OPERATOR STABLE VERSIONS airflow 0.4.0, 0.3.0, 0.2.0, 0.1.0 commons 0.2.0, 0.1.0 druid 0.6.0, 0.5.0, 0.4.0, 0.3.0, 0.2.0, 0.1.0 hbase 0.3.0, 0.2.0 hdfs 0.4.0, 0.3.0 hive 0.6.0, 0.5.0, 0.3.0 kafka 0.6.0, 0.5.0, 0.4.0 nifi 0.6.0, 0.5.0, 0.4.0 opa 0.9.0, 0.8.0, 0.7.0, 0.6.0 secret 0.5.0, 0.4.0, 0.3.0, 0.2.0, 0.1.0 spark 0.5.0, 0.4.0 spark-k8s 0.3.0, 0.2.0, 0.1.0 superset 0.5.0, 0.4.0, 0.3.0, 0.2.0, 0.1.0 trino 0.4.0, 0.3.1, 0.3.0, 0.2.0 zookeeper 0.9.0, 0.8.0, 0.7.0, 0.6.0, 0.10.0 This command only includes the stable versions of every operator for clarity. If you’re interested in a special version of an operator you can use the describe command to get more details for a specific operator as follows: $ stackablectl operator describe airflow Operator: airflow Stable versions: 0.4.0, 0.3.0, 0.2.0, 0.1.0 Test versions: 0.5.0-pr135, 0.5.0-pr134, 0.5.0-pr133, 0.5.0-pr132, 0.5.0-pr131, 0.5.0-pr130, 0.5.0-pr129, 0.5.0-pr128, 0.5.0-pr127, 0.5.0-pr126, 0.5.0-pr125, 0.5.0-pr122, 0.4.0-pr123, 0.4.0-pr122, 0.4.0-pr121, 0.4.0-pr120, 0.4.0-pr119, 0.4.0-pr118, 0.4.0-pr117 Dev versions: 0.5.0-nightly, 0.4.0-nightly, 0.3.0-nightly, 0.2.0-nightly, 0.1.0-nightly If you want to access a Kubernetes cluster, make sure your kubectl Kubernetes client is configured to interact with the Kubernetes cluster. After that run the following command, which will install the operators in their latest nightly version - built from the main branch of the operators. $ stackablectl operator install airflow commons secret [INFO ] Installing airflow operator [INFO ] Installing commons operator [INFO ] Installing secret operator If you don’t have a Kubernetes cluster available, stackablectl can spin up a kind Kubernetes cluster for you. Make sure you have kind installed and run the following command: $ stackablectl operator install airflow commons secret --kind-cluster [INFO ] Creating kind cluster stackable-data-platform Creating cluster \"stackable-data-platform\" ... ✓ Ensuring node image (kindest/node:v1.21.1) 🖼 ✓ Preparing nodes 📦 📦 📦 📦 ✓ Writing configuration 📜 ✓ Starting control-plane 🕹️ ✓ Installing CNI 🔌 ✓ Installing StorageClass 💾 ✓ Joining worker nodes 🚜 Set kubectl context to \"kind-stackable-data-platform\" You can now use your cluster with: kubectl cluster-info --context kind-stackable-data-platform Not sure what to do next? 😅 Check out https://kind.sigs.k8s.io/docs/user/quick-start/ [INFO ] Installing airflow operator [INFO ] Installing commons operator [INFO ] Installing secret operator With this command we installed the operator for Apache Airflow as well as two operators needed internally by the Stackable Data Platform (commons and secret). As we didn’t specify a specific version to install, the operators were installed in the latest nightly version - built from the main branch of the operators. If you want to install a specific version, you can add the version to each operator to install as follows: $ stackablectl operator install airflow=0.4.0 commons=0.2.0 secret=0.5.0 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing secret operator in version 0.5.0 As you can see, the three operators where installed in the requested version. Remember: If you want to install a recommended and tested set of operator versions, have a look at the Release command. After installing some operators, you can list which operators are installed in your Kubernetes cluster. $ stackablectl operator installed OPERATOR VERSION NAMESPACE STATUS LAST UPDATED airflow 0.5.0-nightly default deployed 2022-07-15 09:44:00.86514992 +0200 CEST commons 0.3.0-nightly default deployed 2022-07-15 09:44:03.215214235 +0200 CEST secret 0.6.0-nightly default deployed 2022-07-15 09:44:13.526843785 +0200 CEST In case you have installed the operators in a specific version, the specific versions will be shown instead of the *-nightly versions. To uninstall the operators again you can use the uninstall command $ stackablectl operator uninstall airflow commons secret [INFO ] Uninstalling airflow operator [INFO ] Uninstalling commons operator [INFO ] Uninstalling secret operator","title":"Operator","component":"stackablectl","version":"nightly","name":"operator","url":"/stackablectl/stable/commands/operator.html","titles":[{"text":"Browse available operators","hash":"_browse_available_operators","id":1},{"text":"Install operator","hash":"_install_operator","id":2},{"text":"List installed operators","hash":"_list_installed_operators","id":3},{"text":"Uninstall operator","hash":"_uninstall_operator","id":4}]},"56":{"id":56,"text":"A release is a bundle of operators of a specific stable version. The stable versions of the operators are tested and proven to work hand in hand. If you want to install a single individual operator, have a look at the Operator command. To list the available Stackable releases run the following command: $ stackablectl release list RELEASE RELEASE DATE DESCRIPTION 22.06 2022-06-30 First official release of the Stackable Data Platform Detailed information of a release can be queried with the describe command: $ stackablectl release describe 22.06 Release: 22.06 Release date: 2022-06-30 Description: First official release of the Stackable Data Platform Included products: PRODUCT OPERATOR VERSION airflow 0.4.0 commons 0.2.0 druid 0.6.0 hbase 0.3.0 hdfs 0.4.0 hive 0.6.0 kafka 0.6.0 nifi 0.6.0 opa 0.9.0 secret 0.5.0 spark-k8s 0.3.0 superset 0.5.0 trino 0.4.0 zookeeper 0.10.0 In the output you can see which product operators are included in the specific release. If you want to access a Kubernetes cluster, make sure your kubectl Kubernetes client is configured to interact with the Kubernetes cluster. After that run the following command: $ stackablectl release install 22.06 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 If you don’t have a Kubernetes cluster available, stackablectl can spin up a kind Kubernetes cluster for you. Make sure you have kind installed and run the following command: $ stackablectl release install 22.06 --kind-cluster [INFO ] Creating kind cluster stackable-data-platform Creating cluster \"stackable-data-platform\" ... ✓ Ensuring node image (kindest/node:v1.21.1) 🖼 ✓ Preparing nodes 📦 📦 📦 📦 ✓ Writing configuration 📜 ✓ Starting control-plane 🕹️ ✓ Installing CNI 🔌 ✓ Installing StorageClass 💾 ✓ Joining worker nodes 🚜 Set kubectl context to \"kind-stackable-data-platform\" You can now use your cluster with: kubectl cluster-info --context kind-stackable-data-platform Have a nice day! 👋 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 After installing the release we can list the running operators with the Operator command. $ stackablectl operator installed OPERATOR VERSION NAMESPACE STATUS LAST UPDATED airflow 0.4.0 default deployed 2022-07-15 10:00:25.499615024 +0200 CEST commons 0.2.0 default deployed 2022-07-15 10:00:27.868162264 +0200 CEST druid 0.6.0 default deployed 2022-07-15 10:00:38.219966654 +0200 CEST hbase 0.3.0 default deployed 2022-07-15 10:00:46.581528077 +0200 CEST hdfs 0.4.0 default deployed 2022-07-15 10:00:56.949394849 +0200 CEST hive 0.6.0 default deployed 2022-07-15 10:01:07.314849464 +0200 CEST kafka 0.6.0 default deployed 2022-07-15 10:01:09.702246063 +0200 CEST nifi 0.6.0 default deployed 2022-07-15 10:01:12.059869868 +0200 CEST opa 0.9.0 default deployed 2022-07-15 10:01:14.413966761 +0200 CEST secret 0.5.0 default deployed 2022-07-15 10:01:16.759818535 +0200 CEST spark-k8s 0.3.0 default deployed 2022-07-15 10:01:17.149187107 +0200 CEST superset 0.5.0 default deployed 2022-07-15 10:01:19.529351352 +0200 CEST trino 0.4.0 default deployed 2022-07-15 10:01:29.867283641 +0200 CEST zookeeper 0.10.0 default deployed 2022-07-15 10:01:40.24662955 +0200 CEST To uninstall all operators contained in a release regardless of their actual installed versions, you can use the uninstall command: $ stackablectl release uninstall 22.06 [INFO ] Uninstalling release 22.06 [INFO ] Uninstalling airflow operator [INFO ] Uninstalling commons operator [INFO ] Uninstalling druid operator [INFO ] Uninstalling hbase operator [INFO ] Uninstalling hdfs operator [INFO ] Uninstalling hive operator [INFO ] Uninstalling kafka operator [INFO ] Uninstalling nifi operator [INFO ] Uninstalling opa operator [INFO ] Uninstalling secret operator [INFO ] Uninstalling spark-k8s operator [INFO ] Uninstalling superset operator [INFO ] Uninstalling trino operator [INFO ] Uninstalling zookeeper operator","title":"Release","component":"stackablectl","version":"nightly","name":"release","url":"/stackablectl/stable/commands/release.html","titles":[{"text":"Browse available releases","hash":"_browse_available_releases","id":1},{"text":"Install release","hash":"_install_release","id":2},{"text":"Uninstall release","hash":"_uninstall_release","id":3}]},"57":{"id":57,"text":"In this context a (Stackable) service is a running instance of a data product. This is different from the meaning of a Kubernetes service which is an abstract way to expose an application running on a set of pods as a network service. The stackablectl services command allows to inspect the running services of the Stackable data platform. Currently you can only get a read-only view of the running services, future versions may allow to e.g. uninstall running services. An example invocation looks as follows: $ stackablectl services list --all-namespaces PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS hive hive default hive 172.18.0.4:32658 metrics 172.18.0.4:30745 opa opa default http http://172.18.0.2:31324 superset superset default external-superset http://172.18.0.2:32716 Admin user: admin, password: admin trino trino default coordinator-http http://172.18.0.5:32128 coordinator-metrics 172.18.0.5:31199 coordinator-https https://172.18.0.5:32721 minio minio-trino default http http://172.18.0.4:31026 Third party service console-http http://172.18.0.4:30354 Admin user: root, password: rootroot When a product instance has not finished starting yet, the service will have no endpoint. Starting all of the product instances might take an considerable amount of time depending on your internet connectivity. In case the product is not ready yet a warning might be shown. You can also Show services in all namespaces Redact the passwords from the output in case you want to share the list of services without giving out the admin credentials Print the installed product versions To achieve this you can use the following command: $ stackablectl services list --all-namespaces --redact-credentials --show-versions PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS hive hive default hive 172.18.0.5:30298 version 2.3.9-stackable0.4.0 metrics 172.18.0.5:31633 opa opa default http http://172.18.0.5:30316 version 0.41.0-stackable0.1.0 superset superset default external-superset http://172.18.0.4:32295 Admin user: admin, password: version 1.5.1-stackable0.2.0 trino trino default coordinator-http http://172.18.0.3:30167 version 387-stackable0.1.0 coordinator-metrics 172.18.0.3:31818 coordinator-https https://172.18.0.3:30141 minio minio-trino default http http://172.18.0.3:31062 Third party service console-http http://172.18.0.3:30503 Admin user: root, password:","title":"Services","component":"stackablectl","version":"nightly","name":"services","url":"/stackablectl/stable/commands/services.html","titles":[{"text":"List running services","hash":"_list_running_services","id":1}]},"58":{"id":58,"text":"A stack is a collection of ready-to-use Stackable data products as well as required third-party services like Postgresql or MinIO. It is tied to a specific release of the Stackable data platform, which will provide the required operators for the stack. To list the available stacks, run the following command: $ stackablectl stack list STACK STACKABLE RELEASE DESCRIPTION druid-superset-s3 22.06 Stack containing MinIO, Druid and Superset for data visualization airflow 22.06 Stack containing Airflow scheduling platform Detailed information of a stack can be queried with the describe command: $ stackablectl stack describe druid-superset-s3 Stack: druid-superset-s3 Description: Stack containing MinIO, Druid and Superset for data visualization Stackable release: 22.06 Labels: druid, superset, minio, s3 Future versions of stackablectl will also allow to search for stacks based on the labels. If you want to access a Kubernetes cluster, make sure your kubectl Kubernetes client is configured to interact with the Kubernetes cluster. After that run the following command $ stackablectl stack install druid-superset-s3 [INFO ] Installing stack druid-superset-s3 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 [INFO ] Installing components of stack druid-superset-s3 [INFO ] Installed stack druid-superset-s3 If you don’t have a Kubernetes cluster available, stackablectl can spin up a kind Kubernetes cluster for you. Make sure you have kind installed and run the following command: $ stackablectl stack install druid-superset-s3 --kind-cluster [INFO ] Creating kind cluster stackable-data-platform Creating cluster \"stackable-data-platform\" ... ✓ Ensuring node image (kindest/node:v1.21.1) 🖼 ✓ Preparing nodes 📦 📦 📦 📦 ✓ Writing configuration 📜 ✓ Starting control-plane 🕹️ ✓ Installing CNI 🔌 ✓ Installing StorageClass 💾 ✓ Joining worker nodes 🚜 Set kubectl context to \"kind-stackable-data-platform\" You can now use your cluster with: kubectl cluster-info --context kind-stackable-data-platform Have a nice day! 👋 [INFO ] Installing stack druid-superset-s3 [INFO ] Installing release 22.06 [INFO ] Installing airflow operator in version 0.4.0 [INFO ] Installing commons operator in version 0.2.0 [INFO ] Installing druid operator in version 0.6.0 [INFO ] Installing hbase operator in version 0.3.0 [INFO ] Installing hdfs operator in version 0.4.0 [INFO ] Installing hive operator in version 0.6.0 [INFO ] Installing kafka operator in version 0.6.0 [INFO ] Installing nifi operator in version 0.6.0 [INFO ] Installing opa operator in version 0.9.0 [INFO ] Installing secret operator in version 0.5.0 [INFO ] Installing spark-k8s operator in version 0.3.0 [INFO ] Installing superset operator in version 0.5.0 [INFO ] Installing trino operator in version 0.4.0 [INFO ] Installing zookeeper operator in version 0.10.0 [INFO ] Installing components of stack druid-superset-s3 [INFO ] Installed stack druid-superset-s3 After installing your stack you can use the Services command to list the installed services as follows $ stackablectl services list --all-namespaces PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS hive hive default hive 172.18.0.4:32658 metrics 172.18.0.4:30745 opa opa default http http://172.18.0.2:31324 superset superset default external-superset http://172.18.0.2:32716 Admin user: admin, password: admin trino trino default coordinator-http http://172.18.0.5:32128 coordinator-metrics 172.18.0.5:31199 coordinator-https https://172.18.0.5:32721 minio minio-trino default http http://172.18.0.4:31026 Third party service console-http http://172.18.0.4:30354 Admin user: root, password: rootroot Currently there is no support for uninstalling a stack again.","title":"Stack","component":"stackablectl","version":"nightly","name":"stack","url":"/stackablectl/stable/commands/stack.html","titles":[{"text":"Browse available stacks","hash":"_browse_available_stacks","id":1},{"text":"Install stack","hash":"_install_stack","id":2},{"text":"Using existing Kubernetes cluster","hash":"_using_existing_kubernetes_cluster","id":3},{"text":"Using local kind cluster","hash":"_using_local_kind_cluster","id":4},{"text":"List deployed services","hash":"_list_deployed_services","id":5},{"text":"Uninstall stack","hash":"_uninstall_stack","id":6}]},"59":{"id":59,"text":"The pages below this section guide you on how to use the demos provided by Stackable. To install a demo please follow the quickstart guide or have a look at the demo command.","title":"Demos","component":"stackablectl","version":"nightly","name":"index","url":"/stackablectl/stable/demos/index.html","titles":[]},"60":{"id":60,"text":"This guide assumes you already have the demo kafka-druid-earthquake-data installed. If you don’t have it installed please follow the documentation on how to install a demo. To put it simply you have to run stackablectl demo install kafka-druid-earthquake-data. This demo will Install the required Stackable operators Spin up the follow data products Superset: A modern data exploration and visualization platform. This demo utilizes Superset to retrieve data from Druid via SQL queries and build dashboards on top of that data Kafka: A distributed event streaming platform for high-performance data pipelines, streaming analytics and data integration. This demos uses it as a event streaming platform to stream the data in near real-time Druid: A real-time database to power modern analytics applications. This demo uses it to ingest the near real-time data from Kafka, store it and enable to access the data via SQL MinIO: A S3 compatible object store. This demo uses it as persistent storage for Druid to store all the data used Continuously emit approximately 1000 records/s of earthquake data into Kafka Start a Druid ingestion job that ingests the data into the Druid instance Create Superset dashboards for visualization of the data. The whole data pipeline will have a very low latency from putting a record into Kafka to it showing up in the dashboard charts. You can see the deployed products as well as their relationship in the following diagram: To list the installed installed Stackable services run the following command: $ stackablectl services list --all-namespaces PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS druid druid default broker-http http://172.18.0.3:32670 coordinator-http http://172.18.0.3:30392 historical-http http://172.18.0.2:30831 middlemanager-http http://172.18.0.4:30356 router-http http://172.18.0.4:30109 kafka kafka default kafka 172.18.0.4:30968 superset superset default external-superset http://172.18.0.3:32108 Admin user: admin, password: admin zookeeper zookeeper default zk 172.18.0.2:32309 minio minio-druid default http http://172.18.0.4:32306 Third party service console-http http://172.18.0.4:31664 Admin user: root, password: rootroot When a product instance has not finished starting yet, the service will have no endpoint. Starting all of the product instances might take a considerable amount of time depending on your internet connectivity. In case the product is not ready yet a warning might be shown. Kafka is used as an event streaming platform to stream the data in near real-time. All the messages put in and read from Kafka are structured in dedicated queues called topics. The test data will be put in a topic called earthquakes. The records get produced (put in) by the test data generator and are consumed (read) by Druid afterwards in the same order they where produced. As Kafka itself has no webinterface you have to use a Kafka client like kafkacat. In order to connect to Kafka, use the kafka endpoint from the kafka service in your stackablectl services list command output (172.18.0.4:30968 in this case). If you have kafkacat installed, you can see the available brokers and topics with the following command. You need to replace the -b parameter to match your Kafka endpoint. $ kafkacat -b 172.18.0.4:30968 -L Metadata for all topics (from broker -1: 172.18.0.4:30968/bootstrap): 1 brokers: broker 1001 at 172.18.0.4:30755 (controller) 1 topics: topic \"earthquakes\" with 1 partitions: partition 0, leader 1001, replicas: 1001, isrs: 1001 You can see that Kafka consists of one broker and the topic earthquakes has been created. To see some records that have been send to Kafka run the following command. You can change the number of records to print via the -c parameter. $ kafkacat -b 172.18.0.4:30968 -C -t earthquakes -c 3 {\"time\":\"1950-01-02T15:14:37.960Z\",\"latitude\":-11.242,\"longitude\":165.006,\"depth\":15.0,\"mag\":6.12,\"magType\":\"mw\",\"nst\":null,\"gap\":null,\"dmin\":null,\"rms\":null,\"net\":\"iscgem\",\"id\":\"iscgem895104\",\"updated\":\"2022-04-26T18:23:01.545Z\",\"place\":\"103 km WSW of Lata, Solomon Islands\",\"type\":\"earthquake\",\"horizontalError\":null,\"depthError\":8.6,\"magError\":0.41,\"magNst\":null,\"status\":\"reviewed\",\"locationSource\":\"iscgem\",\"magSource\":\"iscgem\"} {\"time\":\"1950-01-03T02:51:55.410Z\",\"latitude\":17.533,\"longitude\":121.447,\"depth\":30.0,\"mag\":6.5,\"magType\":\"mw\",\"nst\":null,\"gap\":null,\"dmin\":null,\"rms\":null,\"net\":\"iscgem\",\"id\":\"iscgem895106\",\"updated\":\"2022-04-26T18:23:07.394Z\",\"place\":\"6 km NNW of Tabuk, Philippines\",\"type\":\"earthquake\",\"horizontalError\":null,\"depthError\":3.8,\"magError\":0.34,\"magNst\":null,\"status\":\"reviewed\",\"locationSource\":\"iscgem\",\"magSource\":\"iscgem\"} {\"time\":\"1950-01-03T11:06:28.640Z\",\"latitude\":-45.798,\"longitude\":-77.077,\"depth\":15.0,\"mag\":6.27,\"magType\":\"mw\",\"nst\":null,\"gap\":null,\"dmin\":null,\"rms\":null,\"net\":\"iscgem\",\"id\":\"iscgem895109\",\"updated\":\"2022-04-26T18:23:08.483Z\",\"place\":\"Off the coast of Aisen, Chile\",\"type\":\"earthquake\",\"horizontalError\":null,\"depthError\":25.0,\"magError\":0.2,\"magNst\":null,\"status\":\"reviewed\",\"locationSource\":\"iscgem\",\"magSource\":\"iscgem\"} If you are interested on how many records have been produced to the Kafka topic so far, use the following command. It will print the last record produced to the topic, which will be formatted with the pattern specified in the -f parameter. The given pattern will print some metadata of the record. $ kafkacat -b 172.18.0.4:30968 -C -t earthquakes -o -1 -c 1 \\ -f 'Topic %t / Partition %p / Offset: %o / Timestamp: %T\\n' Topic earthquakes / Partition 0 / Offset: 2670281 / Timestamp: 1660571644060 From the output you can see, that the last record was produced at the timestamp 1660571644060 which translates to Mo 15. Aug 15:54:04 CEST 2022 (using the command date -d @1660571644). You can also see that it was the record number 2670281 send to this topic, so ~2.6 million records have been produced so far. Druid is used to ingest the near real-time data from Kafka, store it and enable SQL access to it. The demo has started an ingestion job reading earthquake records from the Kafka topic earthquakes and saving it into Druids deep storage. The Druid deep storage is based on the S3 store provided by MinIO. You can have a look at the ingestion job running in Druid by opening the given druid endpoint router-http from your stackablectl services list command output. You have to use the endpoint from your command output, in this case it is http://172.18.0.4:30109. Open it with your favorite browser. By clicking on Ingestion at the top you can see the running ingestion jobs. After clicking on the magnification glass to the right side of the RUNNING supervisor you can see additional information. On the tab Statistics on the left you can see the number of processed records as well as the number of errors. The statistics show that Druid is currently ingesting 1251 records/s and has ingested 2.1 million records so far. All records have been ingested successfully, which is indicated by having no processWithError, thrownAway or unparseable records. The started ingestion job has automatically created the Druid data source earthquakes. You can see the available data sources by clicking on Datasources at the top. By clicking on the earthquakes data source you can see the segments the data source consists of. In this case the earthquakes data source is partitioned by the year of the earthquake, resulting in 73 segments. Druid offers a web-based way of querying the data sources via SQL. To achieve this you first have to click on Query at the top. You can now enter any arbitrary SQL statement, to e.g. list 10 earthquakes run select * from earthquakes limit 10 To count the number of earthquakes per year run select time_format(__time, 'YYYY') as \"year\", count(*) as earthquakes from earthquakes group by 1 order by 1 desc Superset provides the ability to execute SQL queries and build dashboards. Open the superset endpoint external-superset in your browser (http://172.18.0.3:32108 in this case). Log in with the username admin and password admin. The demo has created a Dashboard to visualize the earthquake data. To open it click on the tab Dashboards at the top. Click on the dashboard called Earthquakes. It might take some time until the dashboards renders all the included charts. The dashboard Earthquakes consists of multiple charts. To list the charts click on the tab Charts at the top. Click on the Chart Number of earthquakes my magnitude. On the left side you can modify the chart and click on Run to see the effect. To look at the geographical distribution of the earthquakes you have to click on the tab Charts at the top again. Afterwards click on the chart Earthquake distribution. The distribution of the earthquakes matches the continental plate margins. This is the expected distribution from the Wikipedia article on Earthquakes. You can move and zoom the map with your mouse to interactively explore the map. You can e.g. have a detailed look at the detected earthquakes in Germany. You can also click on the magnitudes in the legend on the top right side to enable/disable printing the earthquakes of that magnitude. By only enabling magnitudes greater or equal to 8 you can plot only the most severe earthquakes. Within Superset you can not only create dashboards but also run arbitrary SQL statements. On the top click on the tab SQL Lab → SQL Editor. On the left select the database druid, the schema druid and set See table schema to earthquakes. On the right textbox enter the desired SQL statement. If you do not want to make one up, you can use the following: select time_format(__time, 'YYYY') as \"year\", count(*) as earthquakes from earthquakes group by 1 order by 1 desc The S3 provided by MinIO is used as a persistent deep storage for Druid to store all the data used. Open the minio endpoint console-http in your browser (http://172.18.0.4:31664 in this case). Log in with the username root and password rootroot. Click on the blue button Browse on the bucket druid and open the folders data → earthquakes. As you can see druid saved 199MB of data within 73 prefixes (folders). One prefix corresponds to on segment which in turn contains all the data of a year. If you don’t see any folders or files, the reason is that Druid has not saved its data from memory to the deep storage yet. After waiting a few minutes, the data should have been flushed to S3 and show up. If you open up a prefix for a specific year you can see that Druid has placed a file containing the data of that year there. The demo streamed 1000 earthquake records/s for a total of ~3 million earthquakes into a Kafka steaming pipeline. Druid ingested the data near real-time into its data source and enabled SQL access to it. Superset was used as a web-based frontend to execute SQL statements and build dashboards. There are multiple paths to go from here. The following sections can give you some ideas on what to explore next. You can find the description of the earthquake data on the United States Geological Survey website. Within Superset (or the Druid webinterface) you can execute arbitrary SQL statements to explore the earthquake data. You also have the possibility to create additional charts and bundle them together in a Dashboard. Have a look at the Superset documentation on how to do that. You can use a Kafka client like kafkacat to create new topics and ingest data. Using the Druid web interface, you can start an ingestion job that consumes the data and stores it in an internal data source. There is a great tutorial from Druid on how to do this. Afterwards the data source is available to be analyzed within Druid and Superset the same way the earthquake data is.","title":"kafka-druid-earthquake-data","component":"stackablectl","version":"nightly","name":"kafka-druid-earthquake-data","url":"/stackablectl/stable/demos/kafka-druid-earthquake-data.html","titles":[{"text":"List deployed Stackable services","hash":"_list_deployed_stackable_services","id":1},{"text":"Inspect data in Kafka","hash":"_inspect_data_in_kafka","id":2},{"text":"Druid","hash":"_druid","id":3},{"text":"View ingestion job","hash":"_view_ingestion_job","id":4},{"text":"Query the data source","hash":"_query_the_data_source","id":5},{"text":"Superset","hash":"_superset","id":6},{"text":"View dashboard","hash":"_view_dashboard","id":7},{"text":"View charts","hash":"_view_charts","id":8},{"text":"View the earthquake distribution on the world map","hash":"_view_the_earthquake_distribution_on_the_world_map","id":9},{"text":"Execute arbitrary SQL statements","hash":"_execute_arbitrary_sql_statements","id":10},{"text":"MinIO","hash":"_minio","id":11},{"text":"Summary","hash":"_summary","id":12},{"text":"Where to go from here","hash":"_where_to_go_from_here","id":13},{"text":"Execute arbitrary SQL statements","hash":"_execute_arbitrary_sql_statements_2","id":14},{"text":"Create additional dashboards","hash":"_create_additional_dashboards","id":15},{"text":"Load additional data","hash":"_load_additional_data","id":16}]},"61":{"id":61,"text":"This guide assumes you already have the demo kafka-druid-water-level-data installed. If you don’t have it installed please follow the documentation on how to install a demo. To put it simply you have to run stackablectl demo install kafka-druid-water-level-data. This demo will Install the required Stackable operators Spin up the following data products Superset: A modern data exploration and visualization platform. This demo utilizes Superset to retrieve data from Druid via SQL queries and build dashboards on top of that data Kafka: A distributed event streaming platform for high-performance data pipelines, streaming analytics and data integration. This demos uses it as a event streaming platform to stream the data in near real-time Druid: A real-time database to power modern analytics applications. This demo uses it to ingest the near real-time data from Kafka, store it and enable to access the data via SQL MinIO: A S3 compatible object store. This demo uses it as persistent storage for Druid to store all the data used Ingest water level data from the PEGELONLINE webservice into Kafka. The data contains measured water levels of different measuring stations all around Germany. If the webservice is not available this demo will not work, as it needs the webservice to ingest the data. First of, historical data of the last 31 days will be fetched and ingested Afterwards the demo will fetch the current measurement of every station approximately every two minutes and ingest it near-realtime into Kafka Start a Druid ingestion job that ingests the data into the Druid instance Create Superset dashboards for visualization of the data The whole data pipeline will have a very low latency from putting a record into Kafka to it showing up in the dashboard charts. You can see the deployed products as well as their relationship in the following diagram: To list the installed installed Stackable services run the following command: $ stackablectl services list --all-namespaces PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS druid druid default broker-http http://172.18.0.5:30837 coordinator-http http://172.18.0.5:30476 historical-http http://172.18.0.5:30592 middlemanager-http http://172.18.0.4:32246 router-http http://172.18.0.4:30899 kafka kafka default kafka 172.18.0.3:32536 superset superset default external-superset http://172.18.0.4:32251 Admin user: admin, password: admin zookeeper zookeeper default zk 172.18.0.3:31615 minio minio-druid default http http://172.18.0.5:30016 Third party service console-http http://172.18.0.5:32595 Admin user: root, password: rootroot When a product instance has not finished starting yet, the service will have no endpoint. Starting all of the product instances might take a considerable amount of time depending on your internet connectivity. In case the product is not ready yet a warning might be shown. Kafka is used as an event streaming platform to stream the data in near real-time. All the messages put in and read from Kafka are structured in dedicated queues called topics. The test data is split across two topic called stations and measurements. The topic stations contains a record for every station that can measure the water level. The topic measurements contains a record for every measurement that has happened. The records are produced (written) by the data ingestion job and are consumed (read) by Druid afterwards in the same order they where produced. As Kafka itself has no webinterface you have to use a Kafka client like kafkacat. In order to connect to Kafka, use the kafka endpoint from the kafka service in your stackablectl services list command output (172.18.0.3:32536 in this case). If you have kafkacat installed, you can see the available brokers and topics with the following command. You need to replace the -b parameter to match your Kafka endpoint. $ kafkacat -b 172.18.0.3:32536 -L Metadata for all topics (from broker -1: 172.18.0.3:32536/bootstrap): 1 brokers: broker 1001 at 172.18.0.3:31631 (controller) 2 topics: topic \"stations\" with 1 partitions: partition 0, leader 1001, replicas: 1001, isrs: 1001 topic \"measurements\" with 1 partitions: partition 0, leader 1001, replicas: 1001, isrs: 1001 You can see that Kafka consists of one broker and the topics stations and measurements have been created. To see some records that have been send to Kafka run the following commands. You can change the number of records to print via the -c parameter. The | jq part can be emitted if you don’t have jq installed (it’s used to pretty-print the json here). kafkacat -b 172.18.0.3:32536 -C -t stations -c 2 | jq { \"uuid\": \"47174d8f-1b8e-4599-8a59-b580dd55bc87\", \"number\": 48900237, \"shortname\": \"EITZE\", \"longname\": \"EITZE\", \"km\": 9.56, \"agency\": \"VERDEN\", \"longitude\": 9.2767694354, \"latitude\": 52.9040654474, \"water\": { \"shortname\": \"ALLER\", \"longname\": \"ALLER\" } } { \"uuid\": \"5aaed954-de4e-4528-8f65-f3f530bc8325\", \"number\": 48900204, \"shortname\": \"RETHEM\", \"longname\": \"RETHEM\", \"km\": 34.22, \"agency\": \"VERDEN\", \"longitude\": 9.3828408101, \"latitude\": 52.7890975921, \"water\": { \"shortname\": \"ALLER\", \"longname\": \"ALLER\" } } kafkacat -b 172.18.0.3:32536 -C -t measurements -c 3 | jq { \"timestamp\": 1658151900000, \"value\": 221, \"station_uuid\": \"47174d8f-1b8e-4599-8a59-b580dd55bc87\" } { \"timestamp\": 1658152800000, \"value\": 220, \"station_uuid\": \"47174d8f-1b8e-4599-8a59-b580dd55bc87\" } { \"timestamp\": 1658153700000, \"value\": 220, \"station_uuid\": \"47174d8f-1b8e-4599-8a59-b580dd55bc87\" } The records of the two topics only contain the needed data. The measurement records contain a station_uuid to refer to the measuring station. The relationship is illustrated below. The reason for splitting the data up into two different topics is the improved performance. One simpler solution would be to use a single topic and produce records that look like the following: { \"uuid\": \"47174d8f-1b8e-4599-8a59-b580dd55bc87\", \"number\": 48900237, \"shortname\": \"EITZE\", \"longname\": \"EITZE\", \"km\": 9.56, \"agency\": \"VERDEN\", \"longitude\": 9.2767694354, \"latitude\": 52.9040654474, \"water\": { \"shortname\": \"ALLER\", \"longname\": \"ALLER\" }, \"timestamp\": 1658151900000, \"value\": 221 } ---- Notice the two last attributes that differ from the previously shown stations records. The obvious downside of this is, that every measurement (there are multiple millions of it) has to contain all the data known about the station that it was measured at. This leads to transmitting and storing duplicated information of e.g. the longitude of a station many times, resulting in increased network traffic and storage usage. The solution is to only transmit the known/needed data of either a station or a measurement. This process is called data normalization. The downside here is, that when analyzing the data you need to combine the records from multiple tables in Druid (stations and measurements). If you are interested on how many records have been produced to the Kafka topic so far, use the following command. It will print the last record produced to the topic, which will be formatted with the pattern specified in the -f parameter. The given pattern will print some metadata of the record. $ kafkacat -b 172.18.0.3:32536 -C -t stations -o -1 -c 1 \\ -f 'Topic %t / Partition %p / Offset: %o / Timestamp: %T\\n' Topic stations / Partition 0 / Offset: 688 / Timestamp: 1660829626969 688 stations have been fetched and put into Kafka. This demo does not live-stream new stations into the topic, instead it is a one-time bulk ingestion job. New stations should be pretty rare. Druid ingests the topic near-realtime regardless. So if you would produce new stations records they will shop up in Druid and are available for your analysis. $ kafkacat -b 172.18.0.3:32536 -C -t measurements -o -1 -c 1 \\ -f 'Topic %t / Partition %p / Offset: %o / Timestamp: %T\\n' Topic measurements / Partition 0 / Offset: 7586541 / Timestamp: 1660831499070 The output shows that the last measurement record was produced at the timestamp 1660831499070 which translates to Do 18. Aug 16:04:59 CEST 2022 (using the command date -d @1660831499). You can also see that it was the record number 7586541 send to this topic, so ~7.6 million records have been produced so far. Druid is used to ingest the near real-time data from Kafka, store it and enable SQL access to it. The demo has started two ingestion jobs - one reading from the topic stations and the other from measurements - and saving it into Druids deep storage. The Druid deep storage is based on the S3 store provided by MinIO. You can have a look at the ingestion jobs running in Druid by opening the given druid endpoint router-http from your stackablectl services list command output. You have to use the endpoint from your command output, in this case it is http://172.18.0.4:30899. Open it with your favorite browser. By clicking on Ingestion at the top you can see the running ingestion jobs. After clicking on the magnification glass to the right side of the RUNNING supervisor you can see additional information (here the supervisor measurements was chosen). On the tab Statistics on the left you can see the number of processed records as well as the number of errors. The statistics show that Druid is currently ingesting 3597 records/s and has ingested ~10 million records so far. All records have been ingested successfully, which is indicated by having no processWithError, thrownAway or unparseable records. The started ingestion jobs have automatically created the Druid data sources stations and measurements. You can see the available data sources by clicking on Datasources at the top. The Avg. row size (bytes) shows, that a typical measurement record has 4 bytes, while a station record has 213 bytes, which is more than 50 times the size. So with choosing two dedicated topics over a single topic, this demo was able to save 50x of storage and computation costs. By clicking on the measurements data source you can see the segments of which the data source consists of. In this case the measurements data source is partitioned by the day of the measurement, resulting in 33 segments. Druid offers a web-based way of querying the data sources via SQL. To achieve this you first have to click on Query at the top. You can now enter any arbitrary SQL statement, to e.g. list 10 stations run select * from stations limit 10 To count the measurements per day run select time_format(__time, 'YYYY/MM/dd') as \"day\", count(*) as measurements from measurements group by 1 order by 1 desc Superset provides the ability to execute SQL queries and build dashboards. Open the superset endpoint external-superset in your browser (http://172.18.0.4:32251 in this case). Log in with the username admin and password admin. The demo has created a Dashboard to visualize the water level data. To open it click on the tab Dashboards at the top. Click on the dashboard called Water level data. It might take some time until the dashboards renders all the included charts. The dashboard Water level data consists of multiple charts. To list the charts click on the tab Charts at the top. Click on the Chart Measurements / hour. On the left side you can modify the chart and click on Run to see the effect. You can see that starting from 2022/08/12 some stations didn’t measure or transmit their data. They started sending measurements again at 2022/08/14. To look at the geographical distribution of the stations you have to click on the tab Charts at the top again. Afterwards click on the chart Stations distribution. The stations are of course placed alongside of waters. They are colored by the waters they measure, so all stations alongside a body of water have the same color. You can move and zoom the map with your mouse to interactively explore the map. You can e.g. have a detailed look at the water Rhein. Within Superset you can not only create dashboards but also run arbitrary SQL statements. On the top click on the tab SQL Lab → SQL Editor. On the left select the database druid, the schema druid and set See table schema to stations or measurements. On the right textbox enter the desired SQL statement. We need to join the two tables to get interesting results. To find out the number of measurements the stations made run the following query: select stations.longname as station, count(*) as measurements from measurements inner join stations on stations.uuid = measurements.station_uuid group by 1 order by 2 desc You can also find out the number of measurements for every body of water: select stations.water_longname as water, count(*) as measurements from measurements inner join stations on stations.uuid = measurements.station_uuid group by 1 order by 2 desc What might also be interesting is the average and current measurement of the stations: select stations.longname as station, avg(\"value\") as avg_measurement, latest(\"value\") as current_measurement, latest(\"value\") - avg(\"value\") as diff from measurements inner join stations on stations.uuid = measurements.station_uuid group by 1 order by 2 desc The S3 provided by MinIO is used as a persistent deep storage for Druid to store all the data used. Open the minio endpoint console-http retrieved by stackablectl services list in your browser (http://172.18.0.5:32595 in this case). Log in with the username root and password rootroot. Click on the blue button Browse on the bucket druid and open the folders data. You can see the druid has created a folder for both data sources. Go ahead and open the folder measurements. As you can see druid saved 35MB of data within 33 prefixes (folders). One prefix corresponds to one segment which in turn contains all the measurements of a day. If you don’t see any folders or files, the reason is that Druid has not saved its data from memory to the deep storage yet. After waiting for a few minutes the data should have been flushed to S3 and show up. If you open up a prefix for a specific day you can see that Druid has placed a file containing the data of that day there. The demo put station records into the Kafka stream pipeline topic station. It also streamed ~3500 measurements/s for a total of ~11 million measurements into the topic measurements. Druid ingested the data near real-time into its data source and enabled SQL access to it. Superset was used as a web-based frontend to execute SQL statements and build dashboards. There are multiple paths to go from here. The following sections can give you some ideas on what to explore next. You can find the description of the water level data on the on the PEGELONLINE rest api documentation (German only). Within Superset (or the Druid webinterface) you can execute arbitrary SQL statements to explore the water level data. You also have the possibility to create additional charts and bundle them together in a Dashboard. Have a look at the Superset documentation on how to do that. You can use a Kafka client like kafkacat to create new topics and ingest data. Using the Druid web interface, you can start an ingestion job that consumes the data and stores it in an internal data source. There is a great tutorial from Druid on how to do this. Afterwards the data source is available to be analyzed within Druid and Superset the same way the water level data is.","title":"kafka-druid-water-level-data","component":"stackablectl","version":"nightly","name":"kafka-druid-water-level-data","url":"/stackablectl/stable/demos/kafka-druid-water-level-data.html","titles":[{"text":"List deployed Stackable services","hash":"_list_deployed_stackable_services","id":1},{"text":"Inspect data in Kafka","hash":"_inspect_data_in_kafka","id":2},{"text":"List available topics","hash":"_list_available_topics","id":3},{"text":"Show sample records","hash":"_show_sample_records","id":4},{"text":"Druid","hash":"_druid","id":5},{"text":"View ingestion job","hash":"_view_ingestion_job","id":6},{"text":"Query the data source","hash":"_query_the_data_source","id":7},{"text":"Superset","hash":"_superset","id":8},{"text":"View dashboard","hash":"_view_dashboard","id":9},{"text":"View charts","hash":"_view_charts","id":10},{"text":"View the station distribution on the world map","hash":"_view_the_station_distribution_on_the_world_map","id":11},{"text":"Execute arbitrary SQL statements","hash":"_execute_arbitrary_sql_statements","id":12},{"text":"MinIO","hash":"_minio","id":13},{"text":"Summary","hash":"_summary","id":14},{"text":"Where to go from here","hash":"_where_to_go_from_here","id":15},{"text":"Execute arbitrary SQL statements","hash":"_execute_arbitrary_sql_statements_2","id":16},{"text":"Create additional dashboards","hash":"_create_additional_dashboards","id":17},{"text":"Load additional data","hash":"_load_additional_data","id":18}]},"62":{"id":62,"text":"This guide assumes you already have the demo trino-taxi-data installed. If you don’t have it installed please follow the documentation on how to install a demo. To put it simply you have to run stackablectl demo install trino-taxi-data. This demo will Install the required Stackable operators Spin up the follow data products Superset: A modern data exploration and visualization platform. This demo utilizes Superset to retrieve data from Trino via SQL queries and build dashboards on top of that data Trino: A fast distributed SQL query engine for big data analytics that helps you explore your data universe. This demo uses it to enable SQL access to the data MinIO: A S3 compatible object store. This demo uses it as persistent storage to store all the data used Hive metastore: A service that stores metadata related to Apache Hive and other services. This demo uses it as metadata storage for Trino Open policy agent (OPA): A open source, general-purpose policy engine that unifies policy enforcement across the stack. This demo uses it as the authorizer for Trino, which decides which user is able to query which data. Load testdata into S3. It contains 2.5 years of New York City taxi trips Make data accessible via SQL in Trino Create Superset dashboards for visualization of the data You can see the deployed products as well as their relationship in the following diagram: To list the installed installed Stackable services run the following command: $ stackablectl services list --all-namespaces PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS hive hive default hive 172.18.0.5:30298 metrics 172.18.0.5:31633 opa opa default http http://172.18.0.5:30316 superset superset default external-superset http://172.18.0.4:32295 Admin user: admin, password: admin trino trino default coordinator-http http://172.18.0.3:30167 coordinator-metrics 172.18.0.3:31818 coordinator-https https://172.18.0.3:30141 minio minio-trino default http http://172.18.0.3:31062 Third party service console-http http://172.18.0.3:30503 Admin user: root, password: rootroot When a product instance has not finished starting yet, the service will have no endpoint. Starting all of the product instances might take an considerable amount of time depending on your internet connectivity. In case the product is not ready yet a warning might be shown. The S3 provided by MinIO is used as a persistent storage to store all the data used. You can have a look at the testdata within the MinIO web interface by opening the given minio endpoint console-http from your stackablectl services list command output. You have to use the endpoint from your command output, in this case it is http://172.18.0.3:30503. Open it with your favorite browser. Log in with the username root and password rootroot. Click on the blue button Browse on the bucket demo and open the folders ny-taxi-data → raw. As you can see the demo uploaded 1GB of parquet files, one file per month. The data contain taxi rides in New York City. You can see the file size (and therefore the number of rides) decrease drastically because of the Covid-19 pandemic starting from 2020-03. Parquet is an open source, column-oriented data file format designed for efficient data storage and retrieval. Trino offers SQL access to the data within S3. Open the trino endpoint coordinator-https in your browser (https://172.18.0.3:30141 in this case). If you get a warning regarding the self signed certificate (e.g. Warning: Potential Security Risk Ahead) you have to tell your browser to trust the website and continue. Log in with the username admin and password admin. When you start executing SQL queries you will see the queries getting processed here. Superset gives the ability to execute SQL queries and build dashboards. Open the superset endpoint external-superset in your browser (http://172.18.0.4:32295 in this case). Log in with the username admin and password admin. On the top click on the tab Dashboards. Click on the dashboard called Taxi data. It might take some time until the dashboards renders all the included charts. You can clearly see the impact of Covid-19 on the taxi business. Within Superset you can not only create dashboards but also run arbitrary SQL statements. On the top click on the tab SQL Lab → SQL Editor. On the left select the database Trino, the schema demo and set See table schema to ny_taxi_data. On the right textbox enter the desired SQL statement. If you do not want to make on up you can use the following: select format_datetime(tpep_pickup_datetime, 'YYYY/MM') as month, count(*) as trips, sum(total_amount) as sales, avg(duration_min) as avg_duration_min from ny_taxi_data group by 1 order by 1 The demo loaded 2.5 years of taxi trip data from New York City with 68 million records and a total size of 1GB in parquet files. The data was put into the S3 storage. Trino enables you to query the data via SQL. Superset was used as a web-based frontend to execute SQL statements and build dashboards. There are multiple paths to go from here. The following sections can give you some ideas on what to explore next. You can find the description of the taxi data on the New York City website. Within Superset you can execute arbitrary SQL statements to explore the taxi data. Can you answer the following questions by executing SQL statements? The Trino documentation on their SQL language might help you. How many taxi trips there where in the year 2021? See the answer select count(*) as trips from ny_taxi_data where year(tpep_pickup_datetime) = 2021 returns 30.903.982 trips. What was the maximum amount of passengers? See the answer select max(passenger_count) as max_passenger_count from ny_taxi_data; returns 112 passengers. Well that’s weird. Lets examine the passengers distribution. select passenger_count, count(*) as frequency from ny_taxi_data group by 1 order by 1 desc limit 100 returns passenger_count | frequency -----------------+----------- 112.0 | 1 96.0 | 1 9.0 | 98 8.0 | 156 7.0 | 229 6.0 | 1089568 5.0 | 1715439 4.0 | 1052834 3.0 | 2504112 2.0 | 9575299 1.0 | 48133494 0.0 | 1454268 NULL | 2698591 We can see that one trip had 112 and another one 96 passengers. All the other trips start with a more \"realistic\" number of 9 passengers. As a bonus question: What exactly did the large number of passenger do? select * from ny_taxi_data where passenger_count > 50 returns vendorid | tpep_pickup_datetime | tpep_dropoff_datetime | duration_min | passenger_count | trip_distance | payment_type | fare_amount | tip_amount | total_amount ----------+-------------------------+-------------------------+--------------+-----------------+---------------+--------------+-------------+------------+-------------- 2 | 2021-08-01 19:47:43.000 | 2021-08-01 19:57:54.000 | 10 | 112.0 | 1.8 | Credit card | 9.0 | 2.46 | 14.76 2 | 2021-08-03 11:51:58.000 | 2021-08-03 12:09:29.000 | 17 | 96.0 | 1.56 | Credit card | 11.5 | 2.22 | 17.02 Pretty cheap for that amount of people! This probably are invalid records. What was the highest tip (measured in percentage of the original fee) ever given? See the answer select total_amount as fee, tip_amount as tip, tip_amount / total_amount * 100 as tip_percentage from ny_taxi_data where total_amount > 0 order by 3 desc limit 5 returns fee | tip | tip_percentage ------+------+-------------------- 4.2 | 10.0 | 238.0952380952381 18.2 | 25.0 | 137.36263736263737 8.24 | 9.24 | 112.13592233009709 0.66 | 0.66 | 100.0 0.01 | 0.01 | 100.0 You also have the possibility to create additional charts and bundle them together in a Dashboard. Have a look at the Superset documentation on how to do that. You can use the MinIO webinterface to upload additional data. As an alternative you can use the S3 API with an S3 client like s3cmd. It is recommended to put the data into a folder (prefix) in the demo bucket. Have a look at the defined tables inside the hive.demo schema on how to inform Trino about the newly available data. Table definitions show create table hive.demo.ny_taxi_data_raw produces something like CREATE TABLE IF NOT EXISTS hive.demo.ny_taxi_data_raw ( VendorID BIGINT, tpep_pickup_datetime TIMESTAMP, tpep_dropoff_datetime TIMESTAMP, passenger_count DOUBLE, trip_distance DOUBLE, payment_type BIGINT, Fare_amount DOUBLE, Tip_amount DOUBLE, Total_amount DOUBLE ) WITH ( external_location = 's3a://demo/ny-taxi-data/raw/', format = 'parquet' ) If you want to transform or filter your data in any way before using it e.g. in Superset you can create a view as follows: show create view hive.demo.ny_taxi_data produces something like create or replace view hive.demo.ny_taxi_data as select vendorid, tpep_pickup_datetime, tpep_dropoff_datetime, date_diff('minute', tpep_pickup_datetime, tpep_dropoff_datetime) as duration_min, passenger_count, trip_distance, case payment_type when 1 then 'Credit card' when 2 then 'Cash' when 3 then 'No charge' when 4 then 'Dispute' when 6 then 'Voided trino' else 'Unknown' end as payment_type, fare_amount, tip_amount, total_amount from hive.demo.ny_taxi_data_raw where tpep_pickup_datetime >= from_iso8601_timestamp('2019-12-01T00:00:00') and tpep_pickup_datetime <= from_iso8601_timestamp('2022-05-31T00:00:00') If you prefer running your SQL statements via command-line, a Python script or a graphical Database manager like DBeaver please have a look at the the Trino documentation on how to do that.","title":"trino-taxi-data","component":"stackablectl","version":"nightly","name":"trino-taxi-data","url":"/stackablectl/stable/demos/trino-taxi-data.html","titles":[{"text":"List deployed Stackable services","hash":"_list_deployed_stackable_services","id":1},{"text":"Inspect data in S3","hash":"_inspect_data_in_s3","id":2},{"text":"Use Trino webinterface","hash":"_use_trino_webinterface","id":3},{"text":"Use Superset webinterface","hash":"_use_superset_webinterface","id":4},{"text":"View the dashboard","hash":"_view_the_dashboard","id":5},{"text":"Execute arbitrary SQL statements","hash":"_execute_arbitrary_sql_statements","id":6},{"text":"Summary","hash":"_summary","id":7},{"text":"Where to go from here","hash":"_where_to_go_from_here","id":8},{"text":"Execute arbitrary SQL statements","hash":"_execute_arbitrary_sql_statements_2","id":9},{"text":"Create additional dashboards","hash":"_create_additional_dashboards","id":10},{"text":"Load additional data","hash":"_load_additional_data","id":11},{"text":"Connect to Trino via CLI, Python or DBeaver","hash":"_connect_to_trino_via_cli_python_or_dbeaver","id":12}]},"63":{"id":63,"text":"AuthenticationClass is a CRD describing a generic authentication method like LDAP or Kerberos. Multiple operators use this CRD as a way to express the authentication of the product. At the moment the following Authentication providers are supported: LDAP A very simple AuthenticationClass with LDAP Authentication looks like this: --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: ldap-simple spec: provider: ldap: hostname: my.ldap.server (1) port: 389 (2) searchBase: ou=users,dc=example,dc=org (3) 1 The hostname of the LDAP server without any protocol or port 2 The port of the LDAP server. If TLS is used it defaults to 636 otherwise to 389 3 An optional searchBase where the users should be searched Here is an example that is tuned for an OpenLDAP LDAP server and is configured to read bind user credentials from a secret: --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: openldap-simple spec: provider: ldap: hostname: my.openldap.server port: 1389 searchBase: ou=users,dc=example,dc=org bindCredentials: secretClass: openldap-simple-bind (1) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: openldap-simple-bind (2) spec: backend: k8sSearch: searchNamespace: pod: {} (3) --- apiVersion: v1 kind: Secret metadata: name: openldap-simple-bind (4) labels: secrets.stackable.tech/class: openldap-simple-bind (5) stringData: user: cn=admin,dc=example,dc=org password: admin 1 The name of the SecretClass providing the bind credentials (username and password). Must match the name of the SecretClass in this example in ② 2 The name of the SecretClass we are creating that is referred to by ➀. See SecretClass 3 This determines the namespace in which the referenced Secret will be looked for. In this case it searches for a Secret in the same namespace as the product runs in. See the documentation of SecretClass 4 The Secret containing the actual bind credentials. Please keep in mind that the Secret needs to be in the same namespace as the product 5 The name of the SecretClass that wants to refer to this Secret. Must match the name of the SecretClass in this example in ② The following diagram describes the relationship between the created CRDs The following example shows all possible attributes: --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: ldap-full spec: provider: ldap: hostname: my.ldap.server (1) port: 389 (2) searchBase: ou=users,dc=example,dc=org (3) searchFilter: (memberOf=cn=myTeam,ou=teams,dc=example,dc=org) (4) ldapFieldNames: (5) uid: uid group: memberof givenName: givenName surname: sn email: mail bindCredentials: secretClass: ldap-full-bind (6) scope: (7) pod: true node: false services: - ldap-full tls: (8) verification: server: caCert: secretClass: ldap-full-ca-cert 1 The hostname of the LDAP server without any protocol or port 2 The port of the LDAP server. If TLS is used defaults to 636 otherwise to 389 3 The searchBase where the users should be searched 4 Additional filter that filters the allowed users 5 The name of the corresponding field names in the LDAP objects 6 The name of the SecretClass providing the bind credentials (username and password) 7 The Scope of the SecretClass 8 TLS connection to the LDAP server","title":"AuthenticationClass","component":"commons-operator","version":"0.2","name":"authenticationclass","url":"/commons-operator/stable/authenticationclass.html","titles":[{"text":"LDAP","hash":"_ldap","id":1},{"text":"OpenLDAP","hash":"_openldap","id":2},{"text":"All possible attributes","hash":"_all_possible_attributes","id":3}]},"64":{"id":64,"text":"At the moment this operator accepts no command line parameters","title":"Configuration","component":"commons-operator","version":"0.2","name":"configuration","url":"/commons-operator/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1}]},"65":{"id":65,"text":"This is an operator for Kubernetes that provides and manages common Object of the Stackable Data Platform.","title":"Stackable Commons Operator","component":"commons-operator","version":"0.2","name":"index","url":"/commons-operator/stable/index.html","titles":[]},"66":{"id":66,"text":"There are two ways to run the Stackable Commons Operator: Helm managed Docker container deployment on Kubernetes Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Commons Operator $ helm install commons-operator stackable/commons-operator Helm will deploy the operator in Kubernetes and apply the CRDs. After cloning the commons-operator repo you can use the following command to apply the CRDs: $ cargo run -- crd | kubectl apply -f - Use the following command to run the operator: $ cargo run -- run","title":"Installation","component":"commons-operator","version":"0.2","name":"installation","url":"/commons-operator/stable/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":2}]},"67":{"id":67,"text":"The Stackable Commons Operator automatically adds commonly used information to Pod objects, which would otherwise have to be inferred by traversing the Kubernetes object graph. The pod enricher is only enabled for Pod objects that set the label enrichment.stackable.tech/enabled to true. Annotation enrichment.stackable.tech/node-address The hostname or IP address of the Node that the Pod is scheduled to run on. Compared to Pod.status.nodeIP, this can also (but doesn’t have to) be a hostname, and prefers externally routable addresses. This is intended to be used for components that need to register an accessible address (such as Kafka brokers, or HDFS DataNodes).","title":"Pod Enricher","component":"commons-operator","version":"0.2","name":"pod-enrichment","url":"/commons-operator/stable/pod-enrichment.html","titles":[{"text":"Usage","hash":"_usage","id":1},{"text":"Node Address","hash":"_node_address","id":2}]},"68":{"id":68,"text":"The Stackable Commons Operator can automatically restart Pod objects based on certain criteria. This can be applied to either the Pod or certain controller objects (such as StatefulSet). Pods are evicted when any of their restart criteria (listed below) expire, with the expectation that their owning controller is then responsible for restarting them. Because they are evicted rather than deleted, this process should respect PodDisruptionBudget constraints, allowing users to ensure that clusters are restarted gracefully. Annotation restarter.stackable.tech/expires-at.{tag} Pods can be configured to expire at a certain point in time. In this case, the Pod should have the annotation restarter.stackable.tech/expires-at.{tag} set to a datetime formatted according to RFC 3339 (such as \"2022-04-21T13:24:15.225774724+00:00\"). {tag} should be a deterministic but unique ID identifying the reason for the expiry. Multiple expires-at annotations can be set on the same Pod, in which case the earliest expiration datetime takes precedence. StatefulSets are rolling-restarted when any of their restart criteria (listed below) expire. Label restarter.stackable.tech/enabled StatefulSets can be configured to restart when any referenced configuration object (ConfigMap or Secret) changes. To enable this, set the restarter.stackable.tech/enabled label on the StatefulSet to true.","title":"Restarter","component":"commons-operator","version":"0.2","name":"restarter","url":"/commons-operator/stable/restarter.html","titles":[{"text":"Pod","hash":"_pod","id":1},{"text":"Expiration date","hash":"_expiration_date","id":2},{"text":"StatefulSet","hash":"_statefulset","id":3},{"text":"Stale configuration","hash":"_stale_configuration","id":4}]},"69":{"id":69,"text":"A TLS section is part of Stackable CRDs and describes how to connect to a TLS enabled system like LDAP or S3. If the tls attribute is set to null (or is not specifed) no TLS will be used for the connection. A simple TLS section looks like this: --- # [...] tls: verification: none: {} The parties participating at an TLS connection can be verified using certificates. At the moment the following verification methods are supported No verification Server verification Mutual verification This example will use TLS but not perform any checks on the certificate presented by the server or present a client certificate if asked for one by the server. --- tls: verification: none: {} This example will use TLS and verify the server using the ca certificates that are trusted by common web browsers. This can be useful when you e.g. use public AWS S3 or other public available services. --- tls: verification: server: caCert: webPki: {} This example will use TLS and verify the server using the provided ca certificate. For this to work you need to create a SecretClass that - at least - contains the ca certificate. Note that a SecretClass does not need to have a key but can also work with just a ca cert. So if you got provided with a ca cert but don’t have access to the key you can still use this method. --- tls: verification: server: caCert: secretClass: openldap-tls-ca This example will use TLS and verify both - the server and the client using certificates. For this to work you need to create a SecretClass containing the ca certificate and a key to create new client-certificates. The Stackable Secret Operator will automatically provide the product with a ca.crt, tls.crt and tls.key so that the product can authenticate the server and it can authenticate itself at the server. --- tls: verification: mutual: certSecretClass: openldap-tls","title":"TLS","component":"commons-operator","version":"0.2","name":"tls","url":"/commons-operator/stable/tls.html","titles":[{"text":"Verification","hash":"_verification","id":1},{"text":"No verification","hash":"_no_verification","id":2},{"text":"Server verification","hash":"_server_verification","id":3},{"text":"Mutual verification","hash":"_mutual_verification","id":4}]},"70":{"id":70,"text":"The commons-operator is used for multiple purposes: Concept Purpose AuthenticationClass CRD describing a generic authentication method like LDAP or Kerberos. Multiple operators use this CRD as a way to express the authentication of the product TLS Section of a CRD describing how to connect to a TLS enabled system Restarter A controller that watches Pod objects and their controllers and restarts them when required Pod Enricher A controller that adds commonly used information to Pod objects The following diagram describes the relationship between the CRDs","title":"Usage","component":"commons-operator","version":"0.2","name":"usage","url":"/commons-operator/stable/usage.html","titles":[]},"71":{"id":71,"text":"AuthenticationClass is a CRD describing a generic authentication method like LDAP or Kerberos. Multiple operators use this CRD as a way to express the authentication of the product. At the moment the following Authentication providers are supported: LDAP A very simple AuthenticationClass with LDAP Authentication looks like this: --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: ldap-simple spec: provider: ldap: hostname: my.ldap.server (1) port: 389 (2) searchBase: ou=users,dc=example,dc=org (3) 1 The hostname of the LDAP server without any protocol or port 2 The port of the LDAP server. If TLS is used it defaults to 636 otherwise to 389 3 An optional searchBase where the users should be searched Here is an example that is tuned for an OpenLDAP LDAP server and is configured to read bind user credentials from a secret: --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: openldap-simple spec: provider: ldap: hostname: my.openldap.server port: 1389 searchBase: ou=users,dc=example,dc=org bindCredentials: secretClass: openldap-simple-bind (1) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: openldap-simple-bind (2) spec: backend: k8sSearch: searchNamespace: pod: {} (3) --- apiVersion: v1 kind: Secret metadata: name: openldap-simple-bind (4) labels: secrets.stackable.tech/class: openldap-simple-bind (5) stringData: user: cn=admin,dc=example,dc=org password: admin 1 The name of the SecretClass providing the bind credentials (username and password). Must match the name of the SecretClass in this example in ② 2 The name of the SecretClass we are creating that is referred to by ➀. See SecretClass 3 This determines the namespace in which the referenced Secret will be looked for. In this case it searches for a Secret in the same namespace as the product runs in. See the documentation of SecretClass 4 The Secret containing the actual bind credentials. Please keep in mind that the Secret needs to be in the same namespace as the product 5 The name of the SecretClass that wants to refer to this Secret. Must match the name of the SecretClass in this example in ② The following diagram describes the relationship between the created CRDs The following example shows all possible attributes: --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: ldap-full spec: provider: ldap: hostname: my.ldap.server (1) port: 389 (2) searchBase: ou=users,dc=example,dc=org (3) searchFilter: (memberOf=cn=myTeam,ou=teams,dc=example,dc=org) (4) ldapFieldNames: (5) uid: uid group: memberof givenName: givenName surname: sn email: mail bindCredentials: secretClass: ldap-full-bind (6) scope: (7) pod: true node: false services: - ldap-full tls: (8) verification: server: caCert: secretClass: ldap-full-ca-cert 1 The hostname of the LDAP server without any protocol or port 2 The port of the LDAP server. If TLS is used defaults to 636 otherwise to 389 3 The searchBase where the users should be searched 4 Additional filter that filters the allowed users 5 The name of the corresponding field names in the LDAP objects 6 The name of the SecretClass providing the bind credentials (username and password) 7 The Scope of the SecretClass 8 TLS connection to the LDAP server","title":"AuthenticationClass","component":"commons-operator","version":"nightly","name":"authenticationclass","url":"/commons-operator/nightly/authenticationclass.html","titles":[{"text":"LDAP","hash":"_ldap","id":1},{"text":"OpenLDAP","hash":"_openldap","id":2},{"text":"All possible attributes","hash":"_all_possible_attributes","id":3}]},"72":{"id":72,"text":"At the moment this operator accepts no command line parameters","title":"Configuration","component":"commons-operator","version":"nightly","name":"configuration","url":"/commons-operator/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1}]},"73":{"id":73,"text":"This is an operator for Kubernetes that provides and manages common Object of the Stackable Data Platform.","title":"Stackable Commons Operator","component":"commons-operator","version":"nightly","name":"index","url":"/commons-operator/nightly/index.html","titles":[]},"74":{"id":74,"text":"There are two ways to run the Stackable Commons Operator: Helm managed Docker container deployment on Kubernetes Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Commons Operator $ helm install commons-operator stackable/commons-operator Helm will deploy the operator in Kubernetes and apply the CRDs. After cloning the commons-operator repo you can use the following command to apply the CRDs: $ cargo run -- crd | kubectl apply -f - Use the following command to run the operator: $ cargo run -- run","title":"Installation","component":"commons-operator","version":"nightly","name":"installation","url":"/commons-operator/nightly/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":2}]},"75":{"id":75,"text":"The Stackable Commons Operator automatically adds commonly used information to Pod objects, which would otherwise have to be inferred by traversing the Kubernetes object graph. The pod enricher is only enabled for Pod objects that set the label enrichment.stackable.tech/enabled to true. Annotation enrichment.stackable.tech/node-address The hostname or IP address of the Node that the Pod is scheduled to run on. Compared to Pod.status.nodeIP, this can also (but doesn’t have to) be a hostname, and prefers externally routable addresses. This is intended to be used for components that need to register an accessible address (such as Kafka brokers, or HDFS DataNodes).","title":"Pod Enricher","component":"commons-operator","version":"nightly","name":"pod-enrichment","url":"/commons-operator/nightly/pod-enrichment.html","titles":[{"text":"Usage","hash":"_usage","id":1},{"text":"Node Address","hash":"_node_address","id":2}]},"76":{"id":76,"text":"The Stackable Commons Operator can automatically restart Pod objects based on certain criteria. This can be applied to either the Pod or certain controller objects (such as StatefulSet). Pods are evicted when any of their restart criteria (listed below) expire, with the expectation that their owning controller is then responsible for restarting them. Because they are evicted rather than deleted, this process should respect PodDisruptionBudget constraints, allowing users to ensure that clusters are restarted gracefully. Annotation restarter.stackable.tech/expires-at.{tag} Pods can be configured to expire at a certain point in time. In this case, the Pod should have the annotation restarter.stackable.tech/expires-at.{tag} set to a datetime formatted according to RFC 3339 (such as \"2022-04-21T13:24:15.225774724+00:00\"). {tag} should be a deterministic but unique ID identifying the reason for the expiry. Multiple expires-at annotations can be set on the same Pod, in which case the earliest expiration datetime takes precedence. StatefulSets are rolling-restarted when any of their restart criteria (listed below) expire. Label restarter.stackable.tech/enabled StatefulSets can be configured to restart when any referenced configuration object (ConfigMap or Secret) changes. To enable this, set the restarter.stackable.tech/enabled label on the StatefulSet to true.","title":"Restarter","component":"commons-operator","version":"nightly","name":"restarter","url":"/commons-operator/nightly/restarter.html","titles":[{"text":"Pod","hash":"_pod","id":1},{"text":"Expiration date","hash":"_expiration_date","id":2},{"text":"StatefulSet","hash":"_statefulset","id":3},{"text":"Stale configuration","hash":"_stale_configuration","id":4}]},"77":{"id":77,"text":"A TLS section is part of Stackable CRDs and describes how to connect to a TLS enabled system like LDAP or S3. If the tls attribute is set to null (or is not specifed) no TLS will be used for the connection. A simple TLS section looks like this: --- # [...] tls: verification: none: {} The parties participating at an TLS connection can be verified using certificates. At the moment the following verification methods are supported No verification Server verification Mutual verification This example will use TLS but not perform any checks on the certificate presented by the server or present a client certificate if asked for one by the server. --- tls: verification: none: {} This example will use TLS and verify the server using the ca certificates that are trusted by common web browsers. This can be useful when you e.g. use public AWS S3 or other public available services. --- tls: verification: server: caCert: webPki: {} This example will use TLS and verify the server using the provided ca certificate. For this to work you need to create a SecretClass that - at least - contains the ca certificate. Note that a SecretClass does not need to have a key but can also work with just a ca cert. So if you got provided with a ca cert but don’t have access to the key you can still use this method. --- tls: verification: server: caCert: secretClass: openldap-tls-ca This example will use TLS and verify both - the server and the client using certificates. For this to work you need to create a SecretClass containing the ca certificate and a key to create new client-certificates. The Stackable Secret Operator will automatically provide the product with a ca.crt, tls.crt and tls.key so that the product can authenticate the server and it can authenticate itself at the server. --- tls: verification: mutual: certSecretClass: openldap-tls","title":"TLS","component":"commons-operator","version":"nightly","name":"tls","url":"/commons-operator/nightly/tls.html","titles":[{"text":"Verification","hash":"_verification","id":1},{"text":"No verification","hash":"_no_verification","id":2},{"text":"Server verification","hash":"_server_verification","id":3},{"text":"Mutual verification","hash":"_mutual_verification","id":4}]},"78":{"id":78,"text":"The commons-operator is used for multiple purposes: Concept Purpose AuthenticationClass CRD describing a generic authentication method like LDAP or Kerberos. Multiple operators use this CRD as a way to express the authentication of the product TLS Section of a CRD describing how to connect to a TLS enabled system Restarter A controller that watches Pod objects and their controllers and restarts them when required Pod Enricher A controller that adds commonly used information to Pod objects The following diagram describes the relationship between the CRDs","title":"Usage","component":"commons-operator","version":"nightly","name":"usage","url":"/commons-operator/nightly/usage.html","titles":[]},"79":{"id":79,"text":"This operator is written in Rust. It is developed against the latest stable Rust release, and we currently don’t support any older versions. However, the Secret Operator is a Container Storage Interface (CSI) provider plugin for the local Kubelet, which means that it should only be executed inside of a Kubernetes Pod. We currently support two ways of building the Secret Operator: docker build and Nix. docker build is currently our primary deployment target, and our official images are built using it. However, Nix has much faster incremental build and deploy times, making it ideal for local development. To build and deploy to the active Kind cluster, run: $ echo Building with Docker # Ensure that all submodules are up-to-date $ git submodule update --recursive --init # Update the Chart metadata and CRD definitions $ make compile-chart # Create a unique image ID $ REPO=secret-operator $ TAG=\"$(uuidgen)\" # Build the image $ docker build . -f docker/Dockerfile -t \"$REPO:$TAG\" # Load the image onto the Kind nodes $ kind load docker-image \"$REPO:$TAG\" # Deploy $ helm upgrade secret-operator deploy/helm/secret-operator \\ --install \\ --set-string \"image.repository=$REPO,image.tag=$TAG\" To build and deploy to the active Kind cluster, run: $ echo Building with Nix # Ensure that all submodules are up-to-date $ git submodule update --recursive --init # Ensure that the Cargo.lock is up-to-date # This is not required if you use a tool that invokes Cargo regularly anyway, such as Rust-Analyzer $ cargo generate-lockfile # Use crate2nix (https://github.com/kolloch/crate2nix) to convert Cargo.lock into a Nix derivation $ nix run -f . crate2nix generate # Build the Docker images $ nix build -f . docker # Load the images onto the Kind nodes # Nix does not use the Docker daemon, instead it builds individual layers, as well as a script (`result/load-image`) that combines them into a Docker image archive $ kind load image-archive <(./result/load-image) # Deploy $ kubectl apply -f result/crds.yaml -f provisioner.yaml $ kubectl rollout restart ds/secret-provisioner You may need to add extra-experimental-features = nix-command to /etc/nix/nix.conf, or add --experimental-features nix-command to the Nix commands. You can also use Tilt to automatically recompile and redeploy when files are changed: $ nix run -f . tilt up Secret-Operator, as with most CSI providers, requires the Kubernetes node’s root folder to be mounted as rshared. K3d does not do this by default, but can be prodded into doing this by running mount --make-rshared / in each node container. To do this for each running node K3d node, run the following script: for i in $(k3d node list -o json | jq -r .[].name); do docker exec -it $i mount --make-rshared / done This is not persistent, and must be re-executed every time the cluster (or a node in it) is restarted.","title":"Building the Operator","component":"secret-operator","version":"0.5","name":"building","url":"/secret-operator/stable/building.html","titles":[{"text":"Docker","hash":"_docker","id":1},{"text":"Nix","hash":"_nix","id":2},{"text":"K3d","hash":"_k3d","id":3}]},"80":{"id":80,"text":"Required: true Multiple values: false Environment variable: CSI_ENDPOINT The path to the Container Storage Interface Unix Domain Socket that the operator should listen on.","title":"","component":"secret-operator","version":"0.5","name":"commandline_args","url":"/secret-operator/stable/commandline_args.html","titles":[{"text":"--csi-endpoint","hash":"_csi_endpoint","id":1}]},"81":{"id":81,"text":"This operator accepts the following command line parameters: Required: true Multiple values: false Environment variable: CSI_ENDPOINT The path to the Container Storage Interface Unix Domain Socket that the operator should listen on.","title":"Configuration","component":"secret-operator","version":"0.5","name":"configuration","url":"/secret-operator/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"--csi-endpoint","hash":"_csi_endpoint","id":2}]},"82":{"id":82,"text":"This is an operator for Kubernetes that provisions and injects secrets into Kubernetes Pods.","title":"Stackable Secret Operator","component":"secret-operator","version":"0.5","name":"index","url":"/secret-operator/stable/index.html","titles":[]},"83":{"id":83,"text":"There are two ways to run the Stackable Secret Operator: Helm managed Docker container deployment on Kubernetes Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Secret Operator $ helm install secret-operator stackable/secret-operator Helm will deploy the operator in Kubernetes containers and apply the CRDs. You’re now ready to deploy secrets! See Building the Operator for more information.","title":"Installation","component":"secret-operator","version":"0.5","name":"installation","url":"/secret-operator/stable/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":2}]},"84":{"id":84,"text":"Secrets often cover some specific aspect of a workload. For example: A Kerberos credential may be bound to one node IP An internal TLS certificate’s subjectAlternateName section must match the Pod object’s name and service To solve this, the Stackable Secret Operator has a concept of \"scopes\", which allow a Volume to selectively include this extra context. The exact effect of the scope depends on which backend is used. The node scope is resolved to the name of the Kubernetes Node object that the Pod is running on. This will typically be the DNS name of the node. The pod scope is resolved to the name of the Kubernetes Pod. This allows the secret to differentiate between StatefulSet replicas. The service scope allows Pod objects to specify custom scopes. This should typically correspond to Service objects that the Pod participate in. For example, a TLS certificate provisioned by the autoTls backend, with the scopes node and pod would contain the following values in its subjectAlternateName (SAN) extension field: The node’s IP address The node’s fully qualified domain name (my-node.example.com) The pod’s fully qualified domain name (my-pod.my-service.my-namespace.svc.cluster.local)","title":"Scope","component":"secret-operator","version":"0.5","name":"scope","url":"/secret-operator/stable/scope.html","titles":[{"text":"Supported Scopes","hash":"_supported_scopes","id":1},{"text":"node","hash":"node","id":2},{"text":"pod","hash":"pod","id":3},{"text":"service","hash":"service","id":4},{"text":"Example","hash":"_example","id":5}]},"85":{"id":85,"text":"A SecretClass is a cluster-global Kubernetes resource that defines a category of secrets that the Secret Operator knows how to provision. This is intended to provide an abstraction between how the secret is used (\"I need a certificate for my cluster’s TLS PKI\") and how it is provisioned (automatically and generated by the operator’s internal CA, provisioned by the cluster administrator, or provisioned by an external service such as Hashicorp Vault). A SecretClass looks like this: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: (1) autoTls: (2) ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true # or... (1) k8sSearch: (3) searchNamespace: pod: {} # or... name: my-namespace 1 Backends are mutually exclusive, only one may be used by each SecretClass 2 Configures and selects the autoTls backend 3 Configures and selects the k8sSearch backend Each SecretClass is a associated with a single backend, which dictates the mechanism for issuing that kind of secret. Format: TLS Issues a TLS certificate signed by the Secret Operator. The certificate authority can be provided by the administrator, or managed automatically by the Secret Operator. A new certificate and keypair will be generated and signed for each Pod, keys or certificates are never reused. Attributes of the certificate (such as the expiration date, fingerprint, or serial number) will be regenerated for each Pod, and should not be expected to be stable. Scopes are used to populate the claims (such as subjectAlternateName) of the provisioned certificates. spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true autoTls Declares that the autoTls backend is used. autoTls.ca Configures the certificate authority used to issue Pod certificates. autoTls.ca.secret Reference (name and namespace) to a K8s Secret object where the CA certificate and key is stored as ca.crt and ca.key respectively. Will be created when the first certificate is issued if it does not already exist. autoTls.ca.autoGenerate Whether the certificate authority should be provisioned if it can not be found. Format: Free-form A Kubernetes Secret object is selected based on the scopes specified on the Volume. Each field in this Secret is mapped to one file. It is suggested these Secret objects should follow one of the formats defined in this document. Scopes are translated into additional label filters of the form secrets.stackable.tech/$SCOPE: $SCOPE_VALUE. For example, a Pod named foo mounting a k8sSearch secret with the pod scope would add the label filter secrets.stackable.tech/pod: foo. spec: backend: k8sSearch: searchNamespace: pod: {} # or... name: my-namespace k8sSearch Declares that the k8sSearch backend is used. k8sSearch.searchNamespace Configures the namespace searched for Secret objects. k8sSearch.searchNamespace.pod The Secret objects are located in the same namespace as the Pod object. Should be used for secrets that are provisioned by the application administrator. k8sSearch.searchNamespace.name The Secret objects are located in a single global namespace. Should be used for secrets that are provisioned by the cluster administrator. A format describes a set of artifacts (files and their respective contents) produced by a backend. Each backend should conform to at least one common format. This is intended to allow cluster operators to switch between interoperable backends with minimal impact on secret consumers. The secret contains the following files: ca.crt The certificate of the Certificate Authority (and associated chain) that has signed the certificate, in the PEM format. tls.crt The certificate identifying the Pod, in the PEM format. tls.key The private key corresponding to tls.crt, in the PEM format.","title":"SecretClass","component":"secret-operator","version":"0.5","name":"secretclass","url":"/secret-operator/stable/secretclass.html","titles":[{"text":"Backend","hash":"backend","id":1},{"text":"autoTls","hash":"backend-autotls","id":2},{"text":"Reference","hash":"_reference","id":3},{"text":"k8sSearch","hash":"backend-k8ssearch","id":4},{"text":"Reference","hash":"_reference_2","id":5},{"text":"Format","hash":"format","id":6},{"text":"TLS","hash":"format-tls","id":7}]},"86":{"id":86,"text":"The operator injects secret data into Volume mounts that declare a CSI volume with driver: secrets.stackable.tech. A minimal secret-consuming Pod looks like this: --- apiVersion: v1 kind: Pod metadata: name: example-secret-consumer spec: volumes: - name: tls ephemeral: volumeClaimTemplate: metadata: annotations: secrets.stackable.tech/class: secret secrets.stackable.tech/scope: node,pod,service=secret-consumer-nginx spec: storageClassName: secrets.stackable.tech accessModes: - ReadWriteOnce resources: requests: storage: \"1\" containers: - name: ubuntu image: ubuntu stdin: true tty: true volumeMounts: - name: tls mountPath: /tls SecretClass defines where the secrets come from. For example, the following SecretClass issues TLS certificates, storing its CA certificate in the Kubernetes Secret object named secret-provisioner-tls-ca: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true","title":"Usage","component":"secret-operator","version":"0.5","name":"usage","url":"/secret-operator/stable/usage.html","titles":[]},"87":{"id":87,"text":"The primary entry point for applications is by mounting a secret into a Pod object’s volume set. This is done by using Kubernetes' EphemeralVolumeSource type. For example: --- apiVersion: v1 kind: Pod metadata: name: example-secret-consumer spec: volumes: - name: secret ephemeral: volumeClaimTemplate: metadata: annotations: secrets.stackable.tech/class: secret (1) secrets.stackable.tech/scope: node (2) spec: storageClassName: secrets.stackable.tech (3) accessModes: (4) - ReadWriteOnce resources: (4) requests: storage: \"1\" containers: - name: ubuntu volumeMounts: - name: tls (5) mountPath: /tls 1 This secret is provided by the SecretClass named tls 2 This secret should be scoped by the intersection of node, pod, and the service named secret-consumer 3 Tells Kubernetes that the Stackable Secret Operator is responsible for mounting this volume 4 Kubernetes requires us to specify some boilerplate settings for a PersistentVolumeClaim to be well-formed 5 The injected volume can then be mounted into a container, just like any other volume. In this example, the secrets are provided in the /tls directory of the container. Only ephemeral volumes are supported, the Secret Operator does not support declaring standalone PersistentVolumeClaim objects. Required: true The name of the SecretClass that is responsible for providing this secret. Required: false Default value: no scopes The scopes used to select or provision the secret. Multiple scopes should be separated by commas (,), and scope parameters are separated by equals signs (=) where applicable.","title":"Volume","component":"secret-operator","version":"0.5","name":"volume","url":"/secret-operator/stable/volume.html","titles":[{"text":"Attributes","hash":"_attributes","id":1},{"text":"secrets.stackable.tech/class","hash":"_secrets_stackable_techclass","id":2},{"text":"secrets.stackable.tech/scope","hash":"_secrets_stackable_techscope","id":3}]},"88":{"id":88,"text":"This operator is written in Rust. It is developed against the latest stable Rust release, and we currently don’t support any older versions. However, the Secret Operator is a Container Storage Interface (CSI) provider plugin for the local Kubelet, which means that it should only be executed inside of a Kubernetes Pod. We currently support two ways of building the Secret Operator: docker build and Nix. docker build is currently our primary deployment target, and our official images are built using it. However, Nix has much faster incremental build and deploy times, making it ideal for local development. To build and deploy to the active Kind cluster, run: $ echo Building with Docker # Ensure that all submodules are up-to-date $ git submodule update --recursive --init # Update the Chart metadata and CRD definitions $ make compile-chart # Create a unique image ID $ REPO=secret-operator $ TAG=\"$(uuidgen)\" # Build the image $ docker build . -f docker/Dockerfile -t \"$REPO:$TAG\" # Load the image onto the Kind nodes $ kind load docker-image \"$REPO:$TAG\" # Deploy $ helm upgrade secret-operator deploy/helm/secret-operator \\ --install \\ --set-string \"image.repository=$REPO,image.tag=$TAG\" To build and deploy to the active Kind cluster, run: $ echo Building with Nix # Ensure that all submodules are up-to-date $ git submodule update --recursive --init # Ensure that the Cargo.lock is up-to-date # This is not required if you use a tool that invokes Cargo regularly anyway, such as Rust-Analyzer $ cargo generate-lockfile # Use crate2nix (https://github.com/kolloch/crate2nix) to convert Cargo.lock into a Nix derivation $ nix run -f . crate2nix generate # Build the Docker images $ nix build -f . docker # Load the images onto the Kind nodes # Nix does not use the Docker daemon, instead it builds individual layers, as well as a script (`result/load-image`) that combines them into a Docker image archive $ kind load image-archive <(./result/load-image) # Deploy $ kubectl apply -f result/crds.yaml -f provisioner.yaml $ kubectl rollout restart ds/secret-provisioner You may need to add extra-experimental-features = nix-command to /etc/nix/nix.conf, or add --experimental-features nix-command to the Nix commands. You can also use Tilt to automatically recompile and redeploy when files are changed: $ nix run -f . tilt up Secret-Operator, as with most CSI providers, requires the Kubernetes node’s root folder to be mounted as rshared. K3d does not do this by default, but can be prodded into doing this by running mount --make-rshared / in each node container. To do this for each running node K3d node, run the following script: for i in $(k3d node list -o json | jq -r .[].name); do docker exec -it $i mount --make-rshared / done This is not persistent, and must be re-executed every time the cluster (or a node in it) is restarted.","title":"Building the Operator","component":"secret-operator","version":"nightly","name":"building","url":"/secret-operator/nightly/building.html","titles":[{"text":"Docker","hash":"_docker","id":1},{"text":"Nix","hash":"_nix","id":2},{"text":"K3d","hash":"_k3d","id":3}]},"89":{"id":89,"text":"Required: true Multiple values: false Environment variable: CSI_ENDPOINT The path to the Container Storage Interface Unix Domain Socket that the operator should listen on.","title":"","component":"secret-operator","version":"nightly","name":"commandline_args","url":"/secret-operator/nightly/commandline_args.html","titles":[{"text":"--csi-endpoint","hash":"_csi_endpoint","id":1}]},"90":{"id":90,"text":"This operator accepts the following command line parameters: Required: true Multiple values: false Environment variable: CSI_ENDPOINT The path to the Container Storage Interface Unix Domain Socket that the operator should listen on.","title":"Configuration","component":"secret-operator","version":"nightly","name":"configuration","url":"/secret-operator/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"--csi-endpoint","hash":"_csi_endpoint","id":2}]},"91":{"id":91,"text":"This is an operator for Kubernetes that provisions and injects secrets into Kubernetes Pods.","title":"Stackable Secret Operator","component":"secret-operator","version":"nightly","name":"index","url":"/secret-operator/nightly/index.html","titles":[]},"92":{"id":92,"text":"There are two ways to run the Stackable Secret Operator: Helm managed Docker container deployment on Kubernetes Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Secret Operator $ helm install secret-operator stackable/secret-operator Helm will deploy the operator in Kubernetes containers and apply the CRDs. You’re now ready to deploy secrets! See Building the Operator for more information.","title":"Installation","component":"secret-operator","version":"nightly","name":"installation","url":"/secret-operator/nightly/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":2}]},"93":{"id":93,"text":"Secrets often cover some specific aspect of a workload. For example: A Kerberos credential may be bound to one node IP An internal TLS certificate’s subjectAlternateName section must match the Pod object’s name and service To solve this, the Stackable Secret Operator has a concept of \"scopes\", which allow a Volume to selectively include this extra context. The exact effect of the scope depends on which backend is used. The node scope is resolved to the name of the Kubernetes Node object that the Pod is running on. This will typically be the DNS name of the node. The pod scope is resolved to the name of the Kubernetes Pod. This allows the secret to differentiate between StatefulSet replicas. The service scope allows Pod objects to specify custom scopes. This should typically correspond to Service objects that the Pod participate in. For example, a TLS certificate provisioned by the autoTls backend, with the scopes node and pod would contain the following values in its subjectAlternateName (SAN) extension field: The node’s IP address The node’s fully qualified domain name (my-node.example.com) The pod’s fully qualified domain name (my-pod.my-service.my-namespace.svc.cluster.local)","title":"Scope","component":"secret-operator","version":"nightly","name":"scope","url":"/secret-operator/nightly/scope.html","titles":[{"text":"Supported Scopes","hash":"_supported_scopes","id":1},{"text":"node","hash":"node","id":2},{"text":"pod","hash":"pod","id":3},{"text":"service","hash":"service","id":4},{"text":"Example","hash":"_example","id":5}]},"94":{"id":94,"text":"A SecretClass is a cluster-global Kubernetes resource that defines a category of secrets that the Secret Operator knows how to provision. This is intended to provide an abstraction between how the secret is used (\"I need a certificate for my cluster’s TLS PKI\") and how it is provisioned (automatically and generated by the operator’s internal CA, provisioned by the cluster administrator, or provisioned by an external service such as Hashicorp Vault). A SecretClass looks like this: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: (1) autoTls: (2) ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true # or... (1) k8sSearch: (3) searchNamespace: pod: {} # or... name: my-namespace 1 Backends are mutually exclusive, only one may be used by each SecretClass 2 Configures and selects the autoTls backend 3 Configures and selects the k8sSearch backend Each SecretClass is a associated with a single backend, which dictates the mechanism for issuing that kind of secret. Format: TLS Issues a TLS certificate signed by the Secret Operator. The certificate authority can be provided by the administrator, or managed automatically by the Secret Operator. A new certificate and keypair will be generated and signed for each Pod, keys or certificates are never reused. Attributes of the certificate (such as the expiration date, fingerprint, or serial number) will be regenerated for each Pod, and should not be expected to be stable. Scopes are used to populate the claims (such as subjectAlternateName) of the provisioned certificates. spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true autoTls Declares that the autoTls backend is used. autoTls.ca Configures the certificate authority used to issue Pod certificates. autoTls.ca.secret Reference (name and namespace) to a K8s Secret object where the CA certificate and key is stored as ca.crt and ca.key respectively. Will be created when the first certificate is issued if it does not already exist. autoTls.ca.autoGenerate Whether the certificate authority should be provisioned if it can not be found. Format: Free-form A Kubernetes Secret object is selected based on the scopes specified on the Volume. Each field in this Secret is mapped to one file. It is suggested these Secret objects should follow one of the formats defined in this document. Scopes are translated into additional label filters of the form secrets.stackable.tech/$SCOPE: $SCOPE_VALUE. For example, a Pod named foo mounting a k8sSearch secret with the pod scope would add the label filter secrets.stackable.tech/pod: foo. spec: backend: k8sSearch: searchNamespace: pod: {} # or... name: my-namespace k8sSearch Declares that the k8sSearch backend is used. k8sSearch.searchNamespace Configures the namespace searched for Secret objects. k8sSearch.searchNamespace.pod The Secret objects are located in the same namespace as the Pod object. Should be used for secrets that are provisioned by the application administrator. k8sSearch.searchNamespace.name The Secret objects are located in a single global namespace. Should be used for secrets that are provisioned by the cluster administrator. A format describes a set of artifacts (files and their respective contents) produced by a backend. Each backend should conform to at least one common format. This is intended to allow cluster operators to switch between interoperable backends with minimal impact on secret consumers. The secret contains the following files: ca.crt The certificate of the Certificate Authority (and associated chain) that has signed the certificate, in the PEM format. tls.crt The certificate identifying the Pod, in the PEM format. tls.key The private key corresponding to tls.crt, in the PEM format.","title":"SecretClass","component":"secret-operator","version":"nightly","name":"secretclass","url":"/secret-operator/nightly/secretclass.html","titles":[{"text":"Backend","hash":"backend","id":1},{"text":"autoTls","hash":"backend-autotls","id":2},{"text":"Reference","hash":"_reference","id":3},{"text":"k8sSearch","hash":"backend-k8ssearch","id":4},{"text":"Reference","hash":"_reference_2","id":5},{"text":"Format","hash":"format","id":6},{"text":"TLS","hash":"format-tls","id":7}]},"95":{"id":95,"text":"The operator injects secret data into Volume mounts that declare a CSI volume with driver: secrets.stackable.tech. A minimal secret-consuming Pod looks like this: --- apiVersion: v1 kind: Pod metadata: name: example-secret-consumer spec: volumes: - name: tls ephemeral: volumeClaimTemplate: metadata: annotations: secrets.stackable.tech/class: secret secrets.stackable.tech/scope: node,pod,service=secret-consumer-nginx spec: storageClassName: secrets.stackable.tech accessModes: - ReadWriteOnce resources: requests: storage: \"1\" containers: - name: ubuntu image: ubuntu stdin: true tty: true volumeMounts: - name: tls mountPath: /tls SecretClass defines where the secrets come from. For example, the following SecretClass issues TLS certificates, storing its CA certificate in the Kubernetes Secret object named secret-provisioner-tls-ca: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true","title":"Usage","component":"secret-operator","version":"nightly","name":"usage","url":"/secret-operator/nightly/usage.html","titles":[]},"96":{"id":96,"text":"The primary entry point for applications is by mounting a secret into a Pod object’s volume set. This is done by using Kubernetes' EphemeralVolumeSource type. For example: --- apiVersion: v1 kind: Pod metadata: name: example-secret-consumer spec: volumes: - name: secret ephemeral: volumeClaimTemplate: metadata: annotations: secrets.stackable.tech/class: secret (1) secrets.stackable.tech/scope: node (2) spec: storageClassName: secrets.stackable.tech (3) accessModes: (4) - ReadWriteOnce resources: (4) requests: storage: \"1\" containers: - name: ubuntu volumeMounts: - name: tls (5) mountPath: /tls 1 This secret is provided by the SecretClass named tls 2 This secret should be scoped by the intersection of node, pod, and the service named secret-consumer 3 Tells Kubernetes that the Stackable Secret Operator is responsible for mounting this volume 4 Kubernetes requires us to specify some boilerplate settings for a PersistentVolumeClaim to be well-formed 5 The injected volume can then be mounted into a container, just like any other volume. In this example, the secrets are provided in the /tls directory of the container. Only ephemeral volumes are supported, the Secret Operator does not support declaring standalone PersistentVolumeClaim objects. Required: true The name of the SecretClass that is responsible for providing this secret. Required: false Default value: no scopes The scopes used to select or provision the secret. Multiple scopes should be separated by commas (,), and scope parameters are separated by equals signs (=) where applicable.","title":"Volume","component":"secret-operator","version":"nightly","name":"volume","url":"/secret-operator/nightly/volume.html","titles":[{"text":"Attributes","hash":"_attributes","id":1},{"text":"secrets.stackable.tech/class","hash":"_secrets_stackable_techclass","id":2},{"text":"secrets.stackable.tech/scope","hash":"_secrets_stackable_techscope","id":3}]},"97":{"id":97,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test","title":"","component":"airflow","version":"0.3","name":"commandline_args","url":"/airflow/0.3/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"98":{"id":98,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"Configuration","component":"airflow","version":"0.3","name":"configuration","url":"/airflow/0.3/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"99":{"id":99,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"","component":"airflow","version":"0.3","name":"env_var_args","url":"/airflow/0.3/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"100":{"id":100,"text":"This is an operator for Kubernetes that can manage Apache Airflow clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache Airflow currently supports the following versions of Airflow: 2.2.3 2.2.4 2.2.5 docker pull docker.stackable.tech/stackable/airflow:","title":"Stackable Operator for Apache Airflow","component":"airflow","version":"0.3","name":"index","url":"/airflow/0.3/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"101":{"id":101,"text":"There are three ways to run the Airflow Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Airflow $ helm install airflow-operator stackable/airflow-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Airflow service. You are now ready to deploy Apache Airflow in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/airflow-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Airflow in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f airflowcluster.crd.yaml $ kubectl apply -f init.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.58 at the time of writing). stackable-airflow-operator crd | kubectl apply -f - stackable-airflow-operator run","title":"Installation","component":"airflow","version":"0.3","name":"installation","url":"/airflow/0.3/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"102":{"id":102,"text":"Airflow can run in standalone mode (see https://airflow.apache.org/docs/apache-airflow/stable/start/local.html) but requires 2 external dependencies if we want to run jobs across more than one worker: these dependencies are an external database (e.g. postgresql) for user/job data, and a queuing component such as Redis. For testing purposes, first add the bitnami repository to helm: helm repo add bitnami https://charts.bitnami.com/bitnami You can spin up a PostgreSQL database with the following command: helm install airflow-postgresql bitnami/postgresql --version 11.0.0 \\ --set auth.username=airflow \\ --set auth.password=airflow \\ --set auth.database=airflow A Redis instance can be setup in a similar way: helm install redis bitnami/redis \\ --set auth.password=redis A secret with the necessary credentials must be created: apiVersion: v1 kind: Secret metadata: name: simple-airflow-credentials type: Opaque stringData: adminUser.username: airflow adminUser.firstname: Airflow adminUser.lastname: Admin adminUser.email: airflow@airflow.com adminUser.password: airflow connections.secretKey: thisISaSECRET_1234 connections.sqlalchemyDatabaseUri: postgresql+psycopg2://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryResultBackend: db+postgresql://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryBrokerUrl: redis://:redis@redis-master:6379/0 The connections.secretKey will be used for securely signing the session cookies and can be used for any other security related needs by extensions. It should be a long random string of bytes. connections.sqlalchemyDatabaseUri must contain the connection string to the SQL database storing the Airflow metadata. connections.celeryResultBackend must contain the connection string to the SQL database storing the job metadata (in the example above we are using the same postgresql database for both). connections.celeryBrokerUrl must contain the connection string to the Redis instance used for queuing the jobs submitted to the airflow worker(s). The adminUser fields are used by the init command to create an admin user. An Airflow cluster must be created as a custom resource: apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.4-python3.9-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: true exposeConfig: false credentialsSecret: simple-airflow-credentials webservers: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 2 schedulers: roleGroups: default: replicas: 1 Please note that the version you need to specify is not only the version of Airflow which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Where: metadata.name contains the name of the Airflow cluster the label of the Docker image provided by Stackable must be set in spec.version spec.statsdExporterVersion must contain the tag of a statsd-exporter Docker image in the Stackable repository. spec.executor: this setting determines how the cluster will run (for more information see https://airflow.apache.org/docs/apache-airflow/stable/executor/index.html#executor-types): the CeleryExecutor is the recommended setting although SequentialExecutor (all jobs run in one process in series) and LocalExecutor (whereby all jobs are run on one node, using whatever parallelism is possible) are also supported importing the sample workflows is determined by loadExamples exposeConfig allows the contents of the configuration file airflow.cfg to be exposed via the webserver UI. This is only for debugging purposes and should be set to false otherwise as it presents a security risk. the previously created secret must be referenced in credentialsSecret Each cluster requires 3 components: webservers: this provides the main UI for user-interaction workers: the nodes over which the job workload will be distributed by the scheduler schedulers: responsible for triggering jobs and persisting their metadata to the backend database The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. Additionally for Airflow it is recommended that each component has the same configuration: not all components use each setting, but some things - such as external end-points - need to be consistent for things to work as expected. Airflow exposes an environment variable for every configuration setting, a list of which can be found in the Configuration Reference. Although Kubernetes can override these settings in one of two ways (Configuration overrides, or Environment Variable overrides), the affect is the same and currently only the latter is implemented. This is described in the following section. These can be set - or overwritten - at either the role level: webservers: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" roleGroups: default: replicas: 1 Or per role group: webservers: roleGroups: default: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" replicas: 1 In both examples above we are replacing the default value of the UI DAG refresh (3s) with 8s. Note that all override property values must be strings. Airflow comes with a default embedded database (intended only for standalone mode): for cluster usage an external database is used such as PostgreSQL, described above. This database must be initialized with an airflow schema and the Admin user defined in the airflow credentials Secret. This is done the first time the cluster is created and can take a few moments. When the Airflow cluster is created and the database is initialized, Airflow can be opened in the browser. The Airflow port which defaults to 8080 can be forwarded to the local host: kubectl port-forward airflow-webserver-default-0 8080 Then it can be opened in the browser with http://localhost:8080. Enter the admin credentials from the Kubernetes secret: If the examples were loaded then some dashboards are already available: Click on an example DAG and then invoke the job: if the scheduler is correctly set up then the job will run and the job tree will update automatically: The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details DAGs can be mounted by using a ConfigMap or a PersistentVolumeClaim. This is best illustrated with an example of each, shown in the next section. --- apiVersion: v1 kind: ConfigMap metadata: name: cm-dag (1) data: test_airflow_dag.py: | (2) from datetime import datetime, timedelta from airflow import DAG from airflow.operators.bash import BashOperator from airflow.operators.dummy import DummyOperator with DAG( dag_id='test_airflow_dag', schedule_interval='0 0 * * *', start_date=datetime(2021, 1, 1), catchup=False, dagrun_timeout=timedelta(minutes=60), tags=['example', 'example2'], params={\"example_key\": \"example_value\"}, ) as dag: run_this_last = DummyOperator( task_id='run_this_last', ) # [START howto_operator_bash] run_this = BashOperator( task_id='run_after_loop', bash_command='echo 1', ) # [END howto_operator_bash] run_this >> run_this_last for i in range(3): task = BashOperator( task_id='runme_' + str(i), bash_command='echo \"{{ task_instance_key_str }}\" && sleep 1', ) task >> run_this # [START howto_operator_bash_template] also_run_this = BashOperator( task_id='also_run_this', bash_command='echo \"run_id={{ run_id }} | dag_run={{ dag_run }}\"', ) # [END howto_operator_bash_template] also_run_this >> run_this_last # [START howto_operator_bash_skip] this_will_skip = BashOperator( task_id='this_will_skip', bash_command='echo \"hello world\"; exit 99;', dag=dag, ) # [END howto_operator_bash_skip] this_will_skip >> run_this_last if __name__ == \"__main__\": dag.cli() --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.5-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: cm-dag (3) configMap: name: cm-dag (4) volumeMounts: - name: cm-dag (5) mountPath: /dags/test_airflow_dag.py (6) subPath: test_airflow_dag.py (7) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 1 The name of the configuration map 2 The name of the DAG (this is a renamed copy of the example_bash_operator.py from the Airflow examples) 3 The volume backed by the configuration map 4 The name of the configuration map referenced by the Airflow cluster 5 The name of the mounted volume 6 The path of the mounted resource. Note that should map to a single DAG. 7 The resource has to be defined using subPath: this is to prevent the versioning of configuration map elements which may cause a conflict with how Airflow propagates DAGs between its components. 8 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable. The advantage of this approach is that a DAG can be provided \"in-line\", as it were. This becomes cumbersome when multiple DAGs are to be made available in this way, as each one has to be mapped individually. For multiple DAGs it is probably easier to expose them all via a mounted volume, which is shown below. --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-airflow (1) spec: accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job (2) metadata: name: airflow-dags spec: template: spec: restartPolicy: Never volumes: - name: external-dags (3) persistentVolumeClaim: claimName: pvc-airflow (4) initContainers: - name: dest-dir image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: [ \"bash\", \"-x\", \"-c\", \"mkdir -p $DEST_DIR && chown stackable:stackable ${DEST_DIR} && chmod -R a=,u=rwX,g=rwX ${DEST_DIR}\", ] securityContext: runAsUser: 0 volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) containers: - name: airflow-dags image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: (7) [ \"bash\", \"-x\", \"-c\", \"curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_bash_operator.py \\ -o ${DEST_DIR}/example_bash_operator.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_complex.py \\ -o ${DEST_DIR}/example_complex.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_branch_datetime_operator.py \\ -o ${DEST_DIR}/example_branch_datetime_operator.py\", ] volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.4-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: external-dags (8) persistentVolumeClaim: claimName: pvc-airflow (9) volumeMounts: - name: external-dags (10) mountPath: /stackable/external-dags (11) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 1 The name of the PersistentVolumeClaim that references the PV 2 Job used to populate the PersistentVolumeClaim with DAG files 3 The volume name that will be mounted as a target for the DAG files 4 Defines the Volume backed by the PVC, local to the Custom Resource 5 The VolumeMount used by the Custom Resource 6 The path for the VolumeMount 7 The command used to access/download the DAG files to a specified location 8 The Volume used by this Custom Resource 9 The PersistentVolumeClaim that backs this Volume 10 The VolumeMount referencing the Volume in the previous step 11 The path where this Volume is located for each role (webserver, worker, scheduler) 12 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable.","title":"Usage","component":"airflow","version":"0.3","name":"usage","url":"/airflow/0.3/usage.html","titles":[{"text":"External dependencies for the Airflow users/job data and job queues","hash":"_external_dependencies_for_the_airflow_usersjob_data_and_job_queues","id":1},{"text":"Secret with Airflow credentials","hash":"_secret_with_airflow_credentials","id":2},{"text":"Creation of an Airflow Cluster","hash":"_creation_of_an_airflow_cluster","id":3},{"text":"Monitoring","hash":"_monitoring","id":4},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":5},{"text":"Configuration Properties","hash":"_configuration_properties","id":6},{"text":"Environment Variables","hash":"_environment_variables","id":7},{"text":"Initializing the Airflow database","hash":"_initializing_the_airflow_database","id":8},{"text":"Using Airflow","hash":"_using_airflow","id":9},{"text":"Monitoring","hash":"_monitoring_2","id":10},{"text":"Mounting DAGs","hash":"_mounting_dags","id":11},{"text":"via ConfigMap","hash":"_via_configmap","id":12},{"text":"via PersistentVolumeclaim","hash":"_via_persistentvolumeclaim","id":13}]},"103":{"id":103,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test","title":"","component":"airflow","version":"0.4","name":"commandline_args","url":"/airflow/0.4/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"104":{"id":104,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"Configuration","component":"airflow","version":"0.4","name":"configuration","url":"/airflow/0.4/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"105":{"id":105,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"","component":"airflow","version":"0.4","name":"env_var_args","url":"/airflow/0.4/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"106":{"id":106,"text":"This is an operator for Kubernetes that can manage Apache Airflow clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache Airflow currently supports the following versions of Airflow: 2.2.3 2.2.4 2.2.5 docker pull docker.stackable.tech/stackable/airflow:","title":"Stackable Operator for Apache Airflow","component":"airflow","version":"0.4","name":"index","url":"/airflow/0.4/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"107":{"id":107,"text":"There are three ways to run the Airflow Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Airflow $ helm install airflow-operator stackable/airflow-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Airflow service. You are now ready to deploy Apache Airflow in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/airflow-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Airflow in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f airflowcluster.crd.yaml $ kubectl apply -f init.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.58 at the time of writing). stackable-airflow-operator crd | kubectl apply -f - stackable-airflow-operator run","title":"Installation","component":"airflow","version":"0.4","name":"installation","url":"/airflow/0.4/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"108":{"id":108,"text":"Airflow can run in standalone mode (see https://airflow.apache.org/docs/apache-airflow/stable/start/local.html) but requires 2 external dependencies if we want to run jobs across more than one worker: these dependencies are an external database (e.g. postgresql) for user/job data, and a queuing component such as Redis. For testing purposes, first add the bitnami repository to helm: helm repo add bitnami https://charts.bitnami.com/bitnami You can spin up a PostgreSQL database with the following command: helm install airflow-postgresql bitnami/postgresql --version 11.0.0 \\ --set auth.username=airflow \\ --set auth.password=airflow \\ --set auth.database=airflow A Redis instance can be setup in a similar way: helm install redis bitnami/redis \\ --set auth.password=redis A secret with the necessary credentials must be created: apiVersion: v1 kind: Secret metadata: name: simple-airflow-credentials type: Opaque stringData: adminUser.username: airflow adminUser.firstname: Airflow adminUser.lastname: Admin adminUser.email: airflow@airflow.com adminUser.password: airflow connections.secretKey: thisISaSECRET_1234 connections.sqlalchemyDatabaseUri: postgresql+psycopg2://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryResultBackend: db+postgresql://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryBrokerUrl: redis://:redis@redis-master:6379/0 The connections.secretKey will be used for securely signing the session cookies and can be used for any other security related needs by extensions. It should be a long random string of bytes. connections.sqlalchemyDatabaseUri must contain the connection string to the SQL database storing the Airflow metadata. connections.celeryResultBackend must contain the connection string to the SQL database storing the job metadata (in the example above we are using the same postgresql database for both). connections.celeryBrokerUrl must contain the connection string to the Redis instance used for queuing the jobs submitted to the airflow worker(s). The adminUser fields are used by the init command to create an admin user. An Airflow cluster must be created as a custom resource: apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.4-python3.9-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: true exposeConfig: false credentialsSecret: simple-airflow-credentials webservers: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 2 schedulers: roleGroups: default: replicas: 1 Please note that the version you need to specify is not only the version of Airflow which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Where: metadata.name contains the name of the Airflow cluster the label of the Docker image provided by Stackable must be set in spec.version spec.statsdExporterVersion must contain the tag of a statsd-exporter Docker image in the Stackable repository. spec.executor: this setting determines how the cluster will run (for more information see https://airflow.apache.org/docs/apache-airflow/stable/executor/index.html#executor-types): the CeleryExecutor is the recommended setting although SequentialExecutor (all jobs run in one process in series) and LocalExecutor (whereby all jobs are run on one node, using whatever parallelism is possible) are also supported importing the sample workflows is determined by loadExamples exposeConfig allows the contents of the configuration file airflow.cfg to be exposed via the webserver UI. This is only for debugging purposes and should be set to false otherwise as it presents a security risk. the previously created secret must be referenced in credentialsSecret Each cluster requires 3 components: webservers: this provides the main UI for user-interaction workers: the nodes over which the job workload will be distributed by the scheduler schedulers: responsible for triggering jobs and persisting their metadata to the backend database The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. Additionally for Airflow it is recommended that each component has the same configuration: not all components use each setting, but some things - such as external end-points - need to be consistent for things to work as expected. Airflow exposes an environment variable for every configuration setting, a list of which can be found in the Configuration Reference. Although Kubernetes can override these settings in one of two ways (Configuration overrides, or Environment Variable overrides), the affect is the same and currently only the latter is implemented. This is described in the following section. These can be set - or overwritten - at either the role level: webservers: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" roleGroups: default: replicas: 1 Or per role group: webservers: roleGroups: default: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" replicas: 1 In both examples above we are replacing the default value of the UI DAG refresh (3s) with 8s. Note that all override property values must be strings. Airflow comes with a default embedded database (intended only for standalone mode): for cluster usage an external database is used such as PostgreSQL, described above. This database must be initialized with an airflow schema and the Admin user defined in the airflow credentials Secret. This is done the first time the cluster is created and can take a few moments. When the Airflow cluster is created and the database is initialized, Airflow can be opened in the browser. The Airflow port which defaults to 8080 can be forwarded to the local host: kubectl port-forward airflow-webserver-default-0 8080 Then it can be opened in the browser with http://localhost:8080. Enter the admin credentials from the Kubernetes secret: If the examples were loaded then some dashboards are already available: Click on an example DAG and then invoke the job: if the scheduler is correctly set up then the job will run and the job tree will update automatically: The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details DAGs can be mounted by using a ConfigMap or a PersistentVolumeClaim. This is best illustrated with an example of each, shown in the next section. --- apiVersion: v1 kind: ConfigMap metadata: name: cm-dag (1) data: test_airflow_dag.py: | (2) from datetime import datetime, timedelta from airflow import DAG from airflow.operators.bash import BashOperator from airflow.operators.dummy import DummyOperator with DAG( dag_id='test_airflow_dag', schedule_interval='0 0 * * *', start_date=datetime(2021, 1, 1), catchup=False, dagrun_timeout=timedelta(minutes=60), tags=['example', 'example2'], params={\"example_key\": \"example_value\"}, ) as dag: run_this_last = DummyOperator( task_id='run_this_last', ) # [START howto_operator_bash] run_this = BashOperator( task_id='run_after_loop', bash_command='echo 1', ) # [END howto_operator_bash] run_this >> run_this_last for i in range(3): task = BashOperator( task_id='runme_' + str(i), bash_command='echo \"{{ task_instance_key_str }}\" && sleep 1', ) task >> run_this # [START howto_operator_bash_template] also_run_this = BashOperator( task_id='also_run_this', bash_command='echo \"run_id={{ run_id }} | dag_run={{ dag_run }}\"', ) # [END howto_operator_bash_template] also_run_this >> run_this_last # [START howto_operator_bash_skip] this_will_skip = BashOperator( task_id='this_will_skip', bash_command='echo \"hello world\"; exit 99;', dag=dag, ) # [END howto_operator_bash_skip] this_will_skip >> run_this_last if __name__ == \"__main__\": dag.cli() --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.5-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: cm-dag (3) configMap: name: cm-dag (4) volumeMounts: - name: cm-dag (5) mountPath: /dags/test_airflow_dag.py (6) subPath: test_airflow_dag.py (7) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 1 The name of the configuration map 2 The name of the DAG (this is a renamed copy of the example_bash_operator.py from the Airflow examples) 3 The volume backed by the configuration map 4 The name of the configuration map referenced by the Airflow cluster 5 The name of the mounted volume 6 The path of the mounted resource. Note that should map to a single DAG. 7 The resource has to be defined using subPath: this is to prevent the versioning of configuration map elements which may cause a conflict with how Airflow propagates DAGs between its components. 8 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable. The advantage of this approach is that a DAG can be provided \"in-line\", as it were. This becomes cumbersome when multiple DAGs are to be made available in this way, as each one has to be mapped individually. For multiple DAGs it is probably easier to expose them all via a mounted volume, which is shown below. --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-airflow (1) spec: accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job (2) metadata: name: airflow-dags spec: template: spec: restartPolicy: Never volumes: - name: external-dags (3) persistentVolumeClaim: claimName: pvc-airflow (4) initContainers: - name: dest-dir image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: [ \"bash\", \"-x\", \"-c\", \"mkdir -p $DEST_DIR && chown stackable:stackable ${DEST_DIR} && chmod -R a=,u=rwX,g=rwX ${DEST_DIR}\", ] securityContext: runAsUser: 0 volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) containers: - name: airflow-dags image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: (7) [ \"bash\", \"-x\", \"-c\", \"curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_bash_operator.py \\ -o ${DEST_DIR}/example_bash_operator.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_complex.py \\ -o ${DEST_DIR}/example_complex.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_branch_datetime_operator.py \\ -o ${DEST_DIR}/example_branch_datetime_operator.py\", ] volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.4-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: external-dags (8) persistentVolumeClaim: claimName: pvc-airflow (9) volumeMounts: - name: external-dags (10) mountPath: /stackable/external-dags (11) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 1 The name of the PersistentVolumeClaim that references the PV 2 Job used to populate the PersistentVolumeClaim with DAG files 3 The volume name that will be mounted as a target for the DAG files 4 Defines the Volume backed by the PVC, local to the Custom Resource 5 The VolumeMount used by the Custom Resource 6 The path for the VolumeMount 7 The command used to access/download the DAG files to a specified location 8 The Volume used by this Custom Resource 9 The PersistentVolumeClaim that backs this Volume 10 The VolumeMount referencing the Volume in the previous step 11 The path where this Volume is located for each role (webserver, worker, scheduler) 12 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable.","title":"Usage","component":"airflow","version":"0.4","name":"usage","url":"/airflow/0.4/usage.html","titles":[{"text":"External dependencies for the Airflow users/job data and job queues","hash":"_external_dependencies_for_the_airflow_usersjob_data_and_job_queues","id":1},{"text":"Secret with Airflow credentials","hash":"_secret_with_airflow_credentials","id":2},{"text":"Creation of an Airflow Cluster","hash":"_creation_of_an_airflow_cluster","id":3},{"text":"Monitoring","hash":"_monitoring","id":4},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":5},{"text":"Configuration Properties","hash":"_configuration_properties","id":6},{"text":"Environment Variables","hash":"_environment_variables","id":7},{"text":"Initializing the Airflow database","hash":"_initializing_the_airflow_database","id":8},{"text":"Using Airflow","hash":"_using_airflow","id":9},{"text":"Monitoring","hash":"_monitoring_2","id":10},{"text":"Mounting DAGs","hash":"_mounting_dags","id":11},{"text":"via ConfigMap","hash":"_via_configmap","id":12},{"text":"via PersistentVolumeclaim","hash":"_via_persistentvolumeclaim","id":13}]},"109":{"id":109,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test","title":"","component":"airflow","version":"0.5","name":"commandline_args","url":"/airflow/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"110":{"id":110,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"Configuration","component":"airflow","version":"0.5","name":"configuration","url":"/airflow/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"111":{"id":111,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"","component":"airflow","version":"0.5","name":"env_var_args","url":"/airflow/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"112":{"id":112,"text":"This is an operator for Kubernetes that can manage Apache Airflow clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache Airflow currently supports the following versions of Airflow: 2.2.3 2.2.4 2.2.5 docker pull docker.stackable.tech/stackable/airflow:","title":"Stackable Operator for Apache Airflow","component":"airflow","version":"0.5","name":"index","url":"/airflow/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"113":{"id":113,"text":"The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. Additionally for Airflow it is recommended that each component has the same configuration: not all components use each setting, but some things - such as external end-points - need to be consistent for things to work as expected. Airflow exposes an environment variable for every configuration setting, a list of which can be found in the Configuration Reference. Although Kubernetes can override these settings in one of two ways (Configuration overrides, or Environment Variable overrides), the affect is the same and currently only the latter is implemented. This is described in the following section. These can be set - or overwritten - at either the role level: webservers: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" roleGroups: default: replicas: 1 Or per role group: webservers: roleGroups: default: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" replicas: 1 In both examples above we are replacing the default value of the UI DAG refresh (3s) with 8s. Note that all override property values must be strings. Airflow comes with a default embedded database (intended only for standalone mode): for cluster usage an external database is used such as PostgreSQL, described above. This database must be initialized with an airflow schema and the Admin user defined in the airflow credentials Secret. This is done the first time the cluster is created and can take a few moments. When the Airflow cluster is created and the database is initialized, Airflow can be opened in the browser. The Airflow port which defaults to 8080 can be forwarded to the local host: kubectl port-forward airflow-webserver-default-0 8080 Then it can be opened in the browser with http://localhost:8080. Enter the admin credentials from the Kubernetes secret: If the examples were loaded then some dashboards are already available: Click on an example DAG and then invoke the job: if the scheduler is correctly set up then the job will run and the job tree will update automatically: Every user has to authenticate themselves before using Airflow and there are several ways of doing this. The default setting is to view and manually set up users via the Webserver UI. Note the blue \"+\" button where users can be added directly: Airflow supports authentication of users against an LDAP server. Have a look at the LDAP example and the general Stackable Authentication documentation on how to set it up. In general, it requires you to specify a AuthenticationClass which is used to authenticate the users. In the example below we assign all the users the Admin role once they log into Airflow: apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow-with-ldap spec: version: 2.2.5-python39-stackable0.3.0 [...] authenticationConfig: authenticationClass: airflow-with-ldap-ldap userRegistrationRole: Admin The users and roles can be viewed as before in the Webserver UI, but note that the blue \"+\" button is not available when authenticating against LDAP: The Airflow Webserver delegates the handling of user access control to Flask AppBuilder. You can view, add to, and assign the roles displayed in the Airflow Webserver UI to existing users. Airflow supports assigning roles to users based on their LDAP group membership , though this is not yet supported by the Stackable operator. Currently, all the users logging in via LDAP get assigned the same role which you can configure via the attribute authenticationConfig.userRegistrationRole on the AirflowCluster object. The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details DAGs can be mounted by using a ConfigMap or a PersistentVolumeClaim. This is best illustrated with an example of each, shown in the next section. --- apiVersion: v1 kind: ConfigMap metadata: name: cm-dag (1) data: test_airflow_dag.py: | (2) from datetime import datetime, timedelta from airflow import DAG from airflow.operators.bash import BashOperator from airflow.operators.dummy import DummyOperator with DAG( dag_id='test_airflow_dag', schedule_interval='0 0 * * *', start_date=datetime(2021, 1, 1), catchup=False, dagrun_timeout=timedelta(minutes=60), tags=['example', 'example2'], params={\"example_key\": \"example_value\"}, ) as dag: run_this_last = DummyOperator( task_id='run_this_last', ) # [START howto_operator_bash] run_this = BashOperator( task_id='run_after_loop', bash_command='echo 1', ) # [END howto_operator_bash] run_this >> run_this_last for i in range(3): task = BashOperator( task_id='runme_' + str(i), bash_command='echo \"{{ task_instance_key_str }}\" && sleep 1', ) task >> run_this # [START howto_operator_bash_template] also_run_this = BashOperator( task_id='also_run_this', bash_command='echo \"run_id={{ run_id }} | dag_run={{ dag_run }}\"', ) # [END howto_operator_bash_template] also_run_this >> run_this_last # [START howto_operator_bash_skip] this_will_skip = BashOperator( task_id='this_will_skip', bash_command='echo \"hello world\"; exit 99;', dag=dag, ) # [END howto_operator_bash_skip] this_will_skip >> run_this_last if __name__ == \"__main__\": dag.cli() --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.5-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: cm-dag (3) configMap: name: cm-dag (4) volumeMounts: - name: cm-dag (5) mountPath: /dags/test_airflow_dag.py (6) subPath: test_airflow_dag.py (7) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 1 The name of the configuration map 2 The name of the DAG (this is a renamed copy of the example_bash_operator.py from the Airflow examples) 3 The volume backed by the configuration map 4 The name of the configuration map referenced by the Airflow cluster 5 The name of the mounted volume 6 The path of the mounted resource. Note that should map to a single DAG. 7 The resource has to be defined using subPath: this is to prevent the versioning of configuration map elements which may cause a conflict with how Airflow propagates DAGs between its components. 8 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable. The advantage of this approach is that a DAG can be provided \"in-line\", as it were. This becomes cumbersome when multiple DAGs are to be made available in this way, as each one has to be mapped individually. For multiple DAGs it is probably easier to expose them all via a mounted volume, which is shown below. --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-airflow (1) spec: accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job (2) metadata: name: airflow-dags spec: template: spec: restartPolicy: Never volumes: - name: external-dags (3) persistentVolumeClaim: claimName: pvc-airflow (4) initContainers: - name: dest-dir image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: [ \"bash\", \"-x\", \"-c\", \"mkdir -p $DEST_DIR && chown stackable:stackable ${DEST_DIR} && chmod -R a=,u=rwX,g=rwX ${DEST_DIR}\", ] securityContext: runAsUser: 0 volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) containers: - name: airflow-dags image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: (7) [ \"bash\", \"-x\", \"-c\", \"curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_bash_operator.py \\ -o ${DEST_DIR}/example_bash_operator.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_complex.py \\ -o ${DEST_DIR}/example_complex.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_branch_datetime_operator.py \\ -o ${DEST_DIR}/example_branch_datetime_operator.py\", ] volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.4-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: external-dags (8) persistentVolumeClaim: claimName: pvc-airflow (9) volumeMounts: - name: external-dags (10) mountPath: /stackable/external-dags (11) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 1 The name of the PersistentVolumeClaim that references the PV 2 Job used to populate the PersistentVolumeClaim with DAG files 3 The volume name that will be mounted as a target for the DAG files 4 Defines the Volume backed by the PVC, local to the Custom Resource 5 The VolumeMount used by the Custom Resource 6 The path for the VolumeMount 7 The command used to access/download the DAG files to a specified location 8 The Volume used by this Custom Resource 9 The PersistentVolumeClaim that backs this Volume 10 The VolumeMount referencing the Volume in the previous step 11 The path where this Volume is located for each role (webserver, worker, scheduler) 12 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable. Airflow expects that all its components (webserver, scheduler, workers etc.) have access to the DAG folder. If this is mounted via a PersistentVolumeClaim, then the permissible access modes on that claim may require that a specific node is selected. This can be done by providing a label-match as shown below: workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" replicas: 1 selector: matchLabels: node: \"2\" Airflow can be used to apply custom resources from within a cluster. An example of this could be a SparkApplication job that is to be triggered by Airflow. The steps below describe how this can be done. An in-cluster connection can either be created from within the Webserver UI (note that the \"in cluster configuration\" box is ticked): Alternatively, the connection can be defined by an environment variable in URI format: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" This can be supplied directly in the custom resource for all roles (Airflow expects configuration to be common across components): --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.3-python38-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials webservers: roleGroups: default: envOverrides: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" replicas: 1 schedulers: roleGroups: default: envOverrides: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" replicas: 1 Airflow cannot create or access SparkApplication resources by default - a cluster role is required for this: --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: airflow-spark-clusterrole rules: - apiGroups: - spark.stackable.tech resources: - sparkapplications verbs: - create - get and a corresponding cluster role binding: --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: airflow-spark-clusterrole-binding roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: airflow-spark-clusterrole subjects: - apiGroup: rbac.authorization.k8s.io kind: Group name: system:serviceaccounts Now for the DAG itself. The job to be started is a simple Spark job that calculates the value of pi: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: pyspark-pi namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/examples/src/main/python/pi.py driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" This will called from within a DAG by using the connection that was defined earlier. It will be wrapped by the KubernetesHook that the Airflow Kubernetes provider makes available. There are two classes that are used to: start the job monitor the status of the job These are written in-line in the python code below, though this is just to make it clear how the code is used (the classes SparkKubernetesOperator and SparkKubernetesSensor will be used for all custom resources and thus are best defined as separate python files that the DAG would reference). # # Licensed to the Apache Software Foundation (ASF) under one # or more contributor license agreements. See the NOTICE file # distributed with this work for additional information # regarding copyright ownership. The ASF licenses this file # to you under the Apache License, Version 2.0 (the # \"License\"); you may not use this file except in compliance # with the License. You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, # software distributed under the License is distributed on an # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY # KIND, either express or implied. See the License for the # specific language governing permissions and limitations # under the License. \"\"\"Example DAG demonstrating how to apply a Kubernetes Resource from Airflow running in-cluster\"\"\" from datetime import datetime, timedelta from airflow import DAG from typing import TYPE_CHECKING, Optional, Sequence, Dict from kubernetes import client from airflow.exceptions import AirflowException from airflow.sensors.base import BaseSensorOperator from airflow.models import BaseOperator from airflow.providers.cncf.kubernetes.hooks.kubernetes import KubernetesHook if TYPE_CHECKING: from airflow.utils.context import Context class SparkKubernetesOperator(BaseOperator): (1) \"\"\" Creates a SparkApplication resource in kubernetes: :param application_file: Defines a 'SparkApplication' custom resource as either a path to a '.yaml' file, '.json' file, YAML string or JSON string. :param namespace: kubernetes namespace for the SparkApplication :param kubernetes_conn_id: The :ref:`kubernetes connection id ` for the Kubernetes cluster. :param api_group: SparkApplication API group :param api_version: SparkApplication API version \"\"\" template_fields: Sequence[str] = ('application_file', 'namespace') template_ext: Sequence[str] = ('.yaml', '.yml', '.json') ui_color = '#f4a460' def __init__( self, *, application_file: str, namespace: Optional[str] = None, kubernetes_conn_id: str = 'kubernetes_in_cluster', (2) api_group: str = 'spark.stackable.tech', api_version: str = 'v1alpha1', **kwargs, ) -> None: super().__init__(**kwargs) self.application_file = application_file self.namespace = namespace self.kubernetes_conn_id = kubernetes_conn_id self.api_group = api_group self.api_version = api_version self.plural = \"sparkapplications\" def execute(self, context: 'Context'): hook = KubernetesHook(conn_id=self.kubernetes_conn_id) self.log.info(\"Creating SparkApplication...\") response = hook.create_custom_object( group=self.api_group, version=self.api_version, plural=self.plural, body=self.application_file, namespace=self.namespace, ) return response class SparkKubernetesSensor(BaseSensorOperator): (3) \"\"\" Monitors a SparkApplication resource in kubernetes: :param application_name: SparkApplication resource name :param namespace: the kubernetes namespace where the SparkApplication reside in :param kubernetes_conn_id: The :ref:`kubernetes connection` to Kubernetes cluster. :param attach_log: determines whether logs for driver pod should be appended to the sensor log :param api_group: SparkApplication API group :param api_version: SparkApplication API version \"\"\" template_fields = (\"application_name\", \"namespace\") FAILURE_STATES = (\"Failed\", \"Unknown\") SUCCESS_STATES = (\"Succeeded\") def __init__( self, *, application_name: str, attach_log: bool = False, namespace: Optional[str] = None, kubernetes_conn_id: str = 'kubernetes_in_cluster', (2) api_group: str = 'spark.stackable.tech', api_version: str = 'v1alpha1', poke_interval: float = 60, **kwargs, ) -> None: super().__init__(**kwargs) self.application_name = application_name self.attach_log = attach_log self.namespace = namespace self.kubernetes_conn_id = kubernetes_conn_id self.hook = KubernetesHook(conn_id=self.kubernetes_conn_id) self.api_group = api_group self.api_version = api_version self.poke_interval = poke_interval def _log_driver(self, application_state: str, response: dict) -> None: if not self.attach_log: return status_info = response[\"status\"] if \"driverInfo\" not in status_info: return driver_info = status_info[\"driverInfo\"] if \"podName\" not in driver_info: return driver_pod_name = driver_info[\"podName\"] namespace = response[\"metadata\"][\"namespace\"] log_method = self.log.error if application_state in self.FAILURE_STATES else self.log.info try: log = \"\" for line in self.hook.get_pod_logs(driver_pod_name, namespace=namespace): log += line.decode() log_method(log) except client.rest.ApiException as e: self.log.warning( \"Could not read logs for pod %s. It may have been disposed.\\n\" \"Make sure timeToLiveSeconds is set on your SparkApplication spec.\\n\" \"underlying exception: %s\", driver_pod_name, e, ) def poke(self, context: Dict) -> bool: self.log.info(\"Poking: %s\", self.application_name) response = self.hook.get_custom_object( group=self.api_group, version=self.api_version, plural=\"sparkapplications\", name=self.application_name, namespace=self.namespace, ) try: application_state = response[\"status\"][\"phase\"] except KeyError: self.log.debug(f\"SparkApplication status could not be established: {response}\") return False if self.attach_log and application_state in self.FAILURE_STATES + self.SUCCESS_STATES: self._log_driver(application_state, response) if application_state in self.FAILURE_STATES: raise AirflowException(f\"SparkApplication failed with state: {application_state}\") elif application_state in self.SUCCESS_STATES: self.log.info(\"SparkApplication ended successfully\") return True else: self.log.info(\"SparkApplication is still in state: %s\", application_state) return False with DAG( (4) dag_id='sparkapp_dag', schedule_interval='0 0 * * *', start_date=datetime(2021, 1, 1), catchup=False, dagrun_timeout=timedelta(minutes=60), tags=['example'], params={\"example_key\": \"example_value\"}, ) as dag: t1 = SparkKubernetesOperator( (5) task_id='spark_pi_submit', namespace=\"default\", application_file=\"pyspark-pi.yaml\", do_xcom_push=True, dag=dag, ) t2 = SparkKubernetesSensor( (6) task_id='spark_pi_monitor', namespace=\"default\", application_name=\"{{ task_instance.xcom_pull(task_ids='spark_pi_submit')['metadata']['name'] }}\", poke_interval=5, dag=dag, ) t1 >> t2 (7) 1 the wrapper class used for calling the job via KubernetesHook 2 the connection that created for in-cluster usage 3 the wrapper class used for monitoring the job via KubernetesHook 4 the start of the DAG code 5 the initial task to invoke the job 6 the subsequent task to monitor the job 7 the jobs are chained together in the correct order Once this DAG is mounted in the DAG folder it can be called and its progress viewed from within the Webserver UI: Clicking on the \"spark_pi_monitor\" task and selecting the logs shows that the status of the job has been tracked by Airflow:","title":"Usage","component":"airflow","version":"0.5","name":"usage","url":"/airflow/stable/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":2},{"text":"Configuration Properties","hash":"_configuration_properties","id":3},{"text":"Environment Variables","hash":"_environment_variables","id":4},{"text":"Initializing the Airflow database","hash":"_initializing_the_airflow_database","id":5},{"text":"Using Airflow","hash":"_using_airflow","id":6},{"text":"Authentication","hash":"_authentication","id":7},{"text":"Webinterface","hash":"_webinterface","id":8},{"text":"LDAP","hash":"_ldap","id":9},{"text":"Authorization","hash":"_authorization","id":10},{"text":"Webinterface","hash":"_webinterface_2","id":11},{"text":"LDAP","hash":"_ldap_2","id":12},{"text":"Monitoring","hash":"_monitoring_2","id":13},{"text":"Mounting DAGs","hash":"_mounting_dags","id":14},{"text":"via ConfigMap","hash":"_via_configmap","id":15},{"text":"via PersistentVolumeclaim","hash":"_via_persistentvolumeclaim","id":16},{"text":"Node selection","hash":"_node_selection","id":17},{"text":"Applying Custom Resources","hash":"_applying_custom_resources","id":18},{"text":"Define an in-cluster Kubernetes connection","hash":"_define_an_in_cluster_kubernetes_connection","id":19},{"text":"Define a cluster role for Airflow to create SparkApplication resources","hash":"_define_a_cluster_role_for_airflow_to_create_sparkapplication_resources","id":20},{"text":"DAG code","hash":"_dag_code","id":21}]},"114":{"id":114,"text":"Once you have followed the steps in the Installation section to install the Operator and its dependencies, you will now deploy a Airflow cluster and its dependencies. Afterwards you can verify that it works by running and tracking an example DAG. As we have installed the external dependencies required by Airflow (Postgresql and Redis) we can now install the Airflow cluster itself. A secret with the necessary credentials must be created, this entails database connection credentials as well as an admin account for Airflow itself. Create a file called airflow-credentials.yaml: --- apiVersion: v1 kind: Secret metadata: name: simple-airflow-credentials type: Opaque stringData: adminUser.username: airflow adminUser.firstname: Airflow adminUser.lastname: Admin adminUser.email: airflow@airflow.com adminUser.password: airflow connections.secretKey: thisISaSECRET_1234 connections.sqlalchemyDatabaseUri: postgresql+psycopg2://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryResultBackend: db+postgresql://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryBrokerUrl: redis://:redis@airflow-redis-master:6379/0 And apply it: kubectl apply -f airflow-credentials.yaml The connections.secretKey will be used for securely signing the session cookies and can be used for any other security related needs by extensions. It should be a long random string of bytes. connections.sqlalchemyDatabaseUri must contain the connection string to the SQL database storing the Airflow metadata. connections.celeryResultBackend must contain the connection string to the SQL database storing the job metadata (in the example above we are using the same postgresql database for both). connections.celeryBrokerUrl must contain the connection string to the Redis instance used for queuing the jobs submitted to the airflow worker(s). The adminUser fields are used to create an admin user. Please note that the admin user will be disabled if you use a non-default authentication mechanism like LDAP. An Airflow cluster is made of up three components: webserver: this provides the main UI for user-interaction workers: the nodes over which the job workload will be distributed by the scheduler scheduler: responsible for triggering jobs and persisting their metadata to the backend database Create a file named airflow.yaml with the following contents: --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.5-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: true exposeConfig: false credentialsSecret: simple-airflow-credentials webservers: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 2 schedulers: roleGroups: default: replicas: 1 And apply it: kubectl apply -f airflow.yaml Where: metadata.name contains the name of the Airflow cluster the label of the Docker image provided by Stackable must be set in spec.version spec.statsdExporterVersion must contain the tag of a statsd-exporter Docker image in the Stackable repository. spec.executor: this setting determines how the cluster will run (for more information see https://airflow.apache.org/docs/apache-airflow/stable/executor/index.html#executor-types): the CeleryExecutor is the recommended setting although SequentialExecutor (all jobs run in one process in series) and LocalExecutor (whereby all jobs are run on one node, using whatever parallelism is possible) are also supported the spec.loadExamples key is optional and defaults to false. It is set to true here as the example DAGs will be used when verifying the installation. the spec.exposeConfig key is optional and defaults to false. It is set to true only as an aid to verify the configuration and should never be used as such in anything other than test or demo clusters. the previously created secret must be referenced in spec.credentialsSecret Please note that the version you need to specify for spec.version is not only the version of Apache Airflow which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. This will create the actual Airflow cluster. When creating an Airflow cluster, a database-initialization job is first started to ensure that the database schema is present and correct (i.e. populated with an admin user). A Kubernetes job is created which starts a pod to initialize the database. This can take a while. You can use kubectl to wait on the resource, although the cluster itself will not be created until this step is complete.: kubectl wait airflowdb/airflow \\ --for jsonpath='{.status.condition}'=Ready \\ --timeout 300s The job status can be inspected and verified like this: kubectl get jobs which will show something like this: NAME COMPLETIONS DURATION AGE airflow 1/1 85s 11m Then, make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready, including the external dependencies: NAME READY AGE airflow-postgresql 1/1 16m airflow-redis-master 1/1 16m airflow-redis-replicas 1/1 16m airflow-scheduler-default 1/1 11m airflow-webserver-default 1/1 11m airflow-worker-default 2/2 11m The completed set of pods for the Airflow cluster will look something like this: When the Airflow cluster has been created and the database is initialized, Airflow can be opened in the browser: the webserver UI port defaults to 8080 can be forwarded to the local host: kubectl port-forward svc/airflow-webserver 8080 2>&1 >/dev/null & The Webserver UI can now be opened in the browser with http://localhost:8080. Enter the admin credentials from the Kubernetes secret: Since the examples were loaded in the cluster definition, they will appear under the DAGs tabs: Select one of these DAGs by clicking on the name in the left-hand column e.g. example_complex. Click on the arrow in the top right of the screen, select \"Trigger DAG\" and the DAG nodes will be automatically highlighted as the job works through its phases. Great! You have set up an Airflow cluster, connected to it and run your first DAG! Alternative: Using the command line If you prefer to interact directly with the API instead of using the web interface, you can use the following commands. The DAG is one of the example DAGs named example_complex. To trigger a DAG run via the API requires an initial extra step to ensure that the DAG is not in a paused state: curl -s --user airflow:airflow -H 'Content-Type:application/json' \\ -XPATCH http://localhost:8080/api/v1/dags/example_complex \\ -d '{\"is_paused\": false}' A DAG can then be triggered by providing the DAG name (in this case, example_complex). The response identifies the DAG identifier, which we can parse out of the JSON like this: curl -s --user airflow:airflow -H 'Content-Type:application/json' \\ -XPOST http://localhost:8080/api/v1/dags/example_complex/dagRuns \\ -d '{}' | jq -r '.dag_run_id' If we read this identifier into a variable such as dag_id (or replace it manually in the command) we can run this command to access the status of the DAG run: curl -s --user airflow:airflow -H 'Content-Type:application/json' \\ -XGET http://localhost:8080/api/v1/dags/example_complex/dagRuns/\"$dag_id\" | jq -r '.state' Look at the Usage page to find out more about configuring your Airflow cluster and loading your own DAG files.","title":"First steps","component":"airflow","version":"0.5","name":"first_steps","url":"/airflow/stable/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Secret with Airflow credentials","hash":"_secret_with_airflow_credentials","id":2},{"text":"Airflow","hash":"_airflow","id":3},{"text":"Initialization of the Airflow database","hash":"_initialization_of_the_airflow_database","id":4},{"text":"Verify that it works","hash":"_verify_that_it_works","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"115":{"id":115,"text":"This guide will get you started with Airflow using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Airflow cluster and connecting to it, and viewing and running one of the example workflows (called DAGs = Direct Acyclic Graphs). You will need: a Kubernetes cluster kubectl Helm The Guide is divided into two steps: Installing the Operators. Setting up the Airflow cluster and running an example DAG.","title":"Getting started","component":"airflow","version":"0.5","name":"index","url":"/airflow/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"116":{"id":116,"text":"On this page you will install the Stackable Airflow Operator and its dependencies - Postgresql and Redis - as well as the commons and secret operator which are required by all Stackable Operators. Postgresql and Redis are required by Airflow: Postgresql to store metadata about DAG runs, and Redis to schedule and/or queue DAG jobs. They are components that may well already be available for customers, in which case we treat them here as pre-requisites for an airflow cluster and hence as part of the installation process. These components will be installed using Helm. Note that specific versions are declared: helm repo add bitnami https://charts.bitnami.com/bitnami helm install --wait airflow-postgresql bitnami/postgresql --version 11.0.0 \\ --set auth.username=airflow \\ --set auth.password=airflow \\ --set auth.database=airflow helm install --wait airflow-redis bitnami/redis \\ --set auth.password=redis \\ --version 16.8.7 \\ --set replica.replicaCount=1 There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all Operators necessary for Airflow: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ airflow=0.5.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing airflow operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait airflow-operator stackable-dev/airflow-operator --version 0.5.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the Airflow cluster (as well as the CRDs for the required operators). You are now ready to deploy Apache Airflow in Kubernetes. Set up an Airflow cluster and its dependencies and verify that it works by inspecting and running an example DAG.","title":"Installation","component":"airflow","version":"0.5","name":"installation","url":"/airflow/stable/getting_started/installation.html","titles":[{"text":"Dependencies","hash":"_dependencies","id":1},{"text":"Stackable Operators","hash":"_stackable_operators","id":2},{"text":"stackablectl","hash":"_stackablectl","id":3},{"text":"Helm","hash":"_helm","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"117":{"id":117,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test","title":"","component":"airflow","version":"nightly","name":"commandline_args","url":"/airflow/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"118":{"id":118,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-airflow-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-airflow-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"Configuration","component":"airflow","version":"nightly","name":"configuration","url":"/airflow/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"119":{"id":119,"text":"Default value: /etc/stackable/airflow-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-airflow-operator run or via docker: docker run \\ --name airflow-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/airflow-operator:latest","title":"","component":"airflow","version":"nightly","name":"env_var_args","url":"/airflow/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"120":{"id":120,"text":"This is an operator for Kubernetes that can manage Apache Airflow clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache Airflow currently supports the following versions of Airflow: 2.2.3 2.2.4 2.2.5 docker pull docker.stackable.tech/stackable/airflow:","title":"Stackable Operator for Apache Airflow","component":"airflow","version":"nightly","name":"index","url":"/airflow/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"121":{"id":121,"text":"The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. Additionally for Airflow it is recommended that each component has the same configuration: not all components use each setting, but some things - such as external end-points - need to be consistent for things to work as expected. Airflow exposes an environment variable for every configuration setting, a list of which can be found in the Configuration Reference. Although Kubernetes can override these settings in one of two ways (Configuration overrides, or Environment Variable overrides), the affect is the same and currently only the latter is implemented. This is described in the following section. These can be set - or overwritten - at either the role level: webservers: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" roleGroups: default: replicas: 1 Or per role group: webservers: roleGroups: default: envOverrides: AIRFLOW__WEBSERVER__AUTO_REFRESH_INTERVAL: \"8\" replicas: 1 In both examples above we are replacing the default value of the UI DAG refresh (3s) with 8s. Note that all override property values must be strings. Airflow comes with a default embedded database (intended only for standalone mode): for cluster usage an external database is used such as PostgreSQL, described above. This database must be initialized with an airflow schema and the Admin user defined in the airflow credentials Secret. This is done the first time the cluster is created and can take a few moments. When the Airflow cluster is created and the database is initialized, Airflow can be opened in the browser. The Airflow port which defaults to 8080 can be forwarded to the local host: kubectl port-forward airflow-webserver-default-0 8080 Then it can be opened in the browser with http://localhost:8080. Enter the admin credentials from the Kubernetes secret: If the examples were loaded then some dashboards are already available: Click on an example DAG and then invoke the job: if the scheduler is correctly set up then the job will run and the job tree will update automatically: Every user has to authenticate themselves before using Airflow and there are several ways of doing this. The default setting is to view and manually set up users via the Webserver UI. Note the blue \"+\" button where users can be added directly: Airflow supports authentication of users against an LDAP server. Have a look at the LDAP example and the general Stackable Authentication documentation on how to set it up. In general, it requires you to specify a AuthenticationClass which is used to authenticate the users. In the example below we assign all the users the Admin role once they log into Airflow: apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow-with-ldap spec: version: 2.2.5-python39-stackable0.3.0 [...] authenticationConfig: authenticationClass: airflow-with-ldap-ldap userRegistrationRole: Admin The users and roles can be viewed as before in the Webserver UI, but note that the blue \"+\" button is not available when authenticating against LDAP: The Airflow Webserver delegates the handling of user access control to Flask AppBuilder. You can view, add to, and assign the roles displayed in the Airflow Webserver UI to existing users. Airflow supports assigning roles to users based on their LDAP group membership , though this is not yet supported by the Stackable operator. Currently, all the users logging in via LDAP get assigned the same role which you can configure via the attribute authenticationConfig.userRegistrationRole on the AirflowCluster object. The managed Airflow instances are automatically configured to export Prometheus metrics. See Monitoring for more details DAGs can be mounted by using a ConfigMap or a PersistentVolumeClaim. This is best illustrated with an example of each, shown in the next section. --- apiVersion: v1 kind: ConfigMap metadata: name: cm-dag (1) data: test_airflow_dag.py: | (2) from datetime import datetime, timedelta from airflow import DAG from airflow.operators.bash import BashOperator from airflow.operators.dummy import DummyOperator with DAG( dag_id='test_airflow_dag', schedule_interval='0 0 * * *', start_date=datetime(2021, 1, 1), catchup=False, dagrun_timeout=timedelta(minutes=60), tags=['example', 'example2'], params={\"example_key\": \"example_value\"}, ) as dag: run_this_last = DummyOperator( task_id='run_this_last', ) # [START howto_operator_bash] run_this = BashOperator( task_id='run_after_loop', bash_command='echo 1', ) # [END howto_operator_bash] run_this >> run_this_last for i in range(3): task = BashOperator( task_id='runme_' + str(i), bash_command='echo \"{{ task_instance_key_str }}\" && sleep 1', ) task >> run_this # [START howto_operator_bash_template] also_run_this = BashOperator( task_id='also_run_this', bash_command='echo \"run_id={{ run_id }} | dag_run={{ dag_run }}\"', ) # [END howto_operator_bash_template] also_run_this >> run_this_last # [START howto_operator_bash_skip] this_will_skip = BashOperator( task_id='this_will_skip', bash_command='echo \"hello world\"; exit 99;', dag=dag, ) # [END howto_operator_bash_skip] this_will_skip >> run_this_last if __name__ == \"__main__\": dag.cli() --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.5-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: cm-dag (3) configMap: name: cm-dag (4) volumeMounts: - name: cm-dag (5) mountPath: /dags/test_airflow_dag.py (6) subPath: test_airflow_dag.py (7) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/dags\" (8) replicas: 1 1 The name of the configuration map 2 The name of the DAG (this is a renamed copy of the example_bash_operator.py from the Airflow examples) 3 The volume backed by the configuration map 4 The name of the configuration map referenced by the Airflow cluster 5 The name of the mounted volume 6 The path of the mounted resource. Note that should map to a single DAG. 7 The resource has to be defined using subPath: this is to prevent the versioning of configuration map elements which may cause a conflict with how Airflow propagates DAGs between its components. 8 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable. The advantage of this approach is that a DAG can be provided \"in-line\", as it were. This becomes cumbersome when multiple DAGs are to be made available in this way, as each one has to be mapped individually. For multiple DAGs it is probably easier to expose them all via a mounted volume, which is shown below. --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-airflow (1) spec: accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job (2) metadata: name: airflow-dags spec: template: spec: restartPolicy: Never volumes: - name: external-dags (3) persistentVolumeClaim: claimName: pvc-airflow (4) initContainers: - name: dest-dir image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: [ \"bash\", \"-x\", \"-c\", \"mkdir -p $DEST_DIR && chown stackable:stackable ${DEST_DIR} && chmod -R a=,u=rwX,g=rwX ${DEST_DIR}\", ] securityContext: runAsUser: 0 volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) containers: - name: airflow-dags image: docker.stackable.tech/stackable/tools:0.2.0-stackable0 env: - name: DEST_DIR value: \"/stackable/externals\" command: (7) [ \"bash\", \"-x\", \"-c\", \"curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_bash_operator.py \\ -o ${DEST_DIR}/example_bash_operator.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_complex.py \\ -o ${DEST_DIR}/example_complex.py && \\ curl -L https://raw.githubusercontent.com/apache/airflow/2.2.5/airflow/example_dags/example_branch_datetime_operator.py \\ -o ${DEST_DIR}/example_branch_datetime_operator.py\", ] volumeMounts: - name: external-dags (5) mountPath: /stackable/externals (6) --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.4-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials volumes: - name: external-dags (8) persistentVolumeClaim: claimName: pvc-airflow (9) volumeMounts: - name: external-dags (10) mountPath: /stackable/external-dags (11) webservers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 2 schedulers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" (12) replicas: 1 1 The name of the PersistentVolumeClaim that references the PV 2 Job used to populate the PersistentVolumeClaim with DAG files 3 The volume name that will be mounted as a target for the DAG files 4 Defines the Volume backed by the PVC, local to the Custom Resource 5 The VolumeMount used by the Custom Resource 6 The path for the VolumeMount 7 The command used to access/download the DAG files to a specified location 8 The Volume used by this Custom Resource 9 The PersistentVolumeClaim that backs this Volume 10 The VolumeMount referencing the Volume in the previous step 11 The path where this Volume is located for each role (webserver, worker, scheduler) 12 If the mount path described above is anything other than the standard location (the default is $AIRFLOW_HOME/dags), then the location should be defined using the relevant environment variable. Airflow expects that all its components (webserver, scheduler, workers etc.) have access to the DAG folder. If this is mounted via a PersistentVolumeClaim, then the permissible access modes on that claim may require that a specific node is selected. This can be done by providing a label-match as shown below: workers: roleGroups: default: envOverrides: AIRFLOW__CORE__DAGS_FOLDER: \"/stackable/external-dags\" replicas: 1 selector: matchLabels: node: \"2\" Airflow can be used to apply custom resources from within a cluster. An example of this could be a SparkApplication job that is to be triggered by Airflow. The steps below describe how this can be done. An in-cluster connection can either be created from within the Webserver UI (note that the \"in cluster configuration\" box is ticked): Alternatively, the connection can be defined by an environment variable in URI format: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" This can be supplied directly in the custom resource for all roles (Airflow expects configuration to be common across components): --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.3-python38-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: false exposeConfig: false credentialsSecret: simple-airflow-credentials webservers: roleGroups: default: envOverrides: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" replicas: 1 workers: roleGroups: default: envOverrides: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" replicas: 1 schedulers: roleGroups: default: envOverrides: AIRFLOW_CONN_KUBERNETES_IN_CLUSTER: \"kubernetes://?__extra__=%7B%22extra__kubernetes__in_cluster%22%3A+true%2C+%22extra__kubernetes__kube_config%22%3A+%22%22%2C+%22extra__kubernetes__kube_config_path%22%3A+%22%22%2C+%22extra__kubernetes__namespace%22%3A+%22%22%7D\" replicas: 1 Airflow cannot create or access SparkApplication resources by default - a cluster role is required for this: --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: airflow-spark-clusterrole rules: - apiGroups: - spark.stackable.tech resources: - sparkapplications verbs: - create - get and a corresponding cluster role binding: --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: airflow-spark-clusterrole-binding roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: airflow-spark-clusterrole subjects: - apiGroup: rbac.authorization.k8s.io kind: Group name: system:serviceaccounts Now for the DAG itself. The job to be started is a simple Spark job that calculates the value of pi: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: pyspark-pi namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/examples/src/main/python/pi.py driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" This will called from within a DAG by using the connection that was defined earlier. It will be wrapped by the KubernetesHook that the Airflow Kubernetes provider makes available. There are two classes that are used to: start the job monitor the status of the job These are written in-line in the python code below, though this is just to make it clear how the code is used (the classes SparkKubernetesOperator and SparkKubernetesSensor will be used for all custom resources and thus are best defined as separate python files that the DAG would reference). # # Licensed to the Apache Software Foundation (ASF) under one # or more contributor license agreements. See the NOTICE file # distributed with this work for additional information # regarding copyright ownership. The ASF licenses this file # to you under the Apache License, Version 2.0 (the # \"License\"); you may not use this file except in compliance # with the License. You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, # software distributed under the License is distributed on an # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY # KIND, either express or implied. See the License for the # specific language governing permissions and limitations # under the License. \"\"\"Example DAG demonstrating how to apply a Kubernetes Resource from Airflow running in-cluster\"\"\" from datetime import datetime, timedelta from airflow import DAG from typing import TYPE_CHECKING, Optional, Sequence, Dict from kubernetes import client from airflow.exceptions import AirflowException from airflow.sensors.base import BaseSensorOperator from airflow.models import BaseOperator from airflow.providers.cncf.kubernetes.hooks.kubernetes import KubernetesHook if TYPE_CHECKING: from airflow.utils.context import Context class SparkKubernetesOperator(BaseOperator): (1) \"\"\" Creates a SparkApplication resource in kubernetes: :param application_file: Defines a 'SparkApplication' custom resource as either a path to a '.yaml' file, '.json' file, YAML string or JSON string. :param namespace: kubernetes namespace for the SparkApplication :param kubernetes_conn_id: The :ref:`kubernetes connection id ` for the Kubernetes cluster. :param api_group: SparkApplication API group :param api_version: SparkApplication API version \"\"\" template_fields: Sequence[str] = ('application_file', 'namespace') template_ext: Sequence[str] = ('.yaml', '.yml', '.json') ui_color = '#f4a460' def __init__( self, *, application_file: str, namespace: Optional[str] = None, kubernetes_conn_id: str = 'kubernetes_in_cluster', (2) api_group: str = 'spark.stackable.tech', api_version: str = 'v1alpha1', **kwargs, ) -> None: super().__init__(**kwargs) self.application_file = application_file self.namespace = namespace self.kubernetes_conn_id = kubernetes_conn_id self.api_group = api_group self.api_version = api_version self.plural = \"sparkapplications\" def execute(self, context: 'Context'): hook = KubernetesHook(conn_id=self.kubernetes_conn_id) self.log.info(\"Creating SparkApplication...\") response = hook.create_custom_object( group=self.api_group, version=self.api_version, plural=self.plural, body=self.application_file, namespace=self.namespace, ) return response class SparkKubernetesSensor(BaseSensorOperator): (3) \"\"\" Monitors a SparkApplication resource in kubernetes: :param application_name: SparkApplication resource name :param namespace: the kubernetes namespace where the SparkApplication reside in :param kubernetes_conn_id: The :ref:`kubernetes connection` to Kubernetes cluster. :param attach_log: determines whether logs for driver pod should be appended to the sensor log :param api_group: SparkApplication API group :param api_version: SparkApplication API version \"\"\" template_fields = (\"application_name\", \"namespace\") FAILURE_STATES = (\"Failed\", \"Unknown\") SUCCESS_STATES = (\"Succeeded\") def __init__( self, *, application_name: str, attach_log: bool = False, namespace: Optional[str] = None, kubernetes_conn_id: str = 'kubernetes_in_cluster', (2) api_group: str = 'spark.stackable.tech', api_version: str = 'v1alpha1', poke_interval: float = 60, **kwargs, ) -> None: super().__init__(**kwargs) self.application_name = application_name self.attach_log = attach_log self.namespace = namespace self.kubernetes_conn_id = kubernetes_conn_id self.hook = KubernetesHook(conn_id=self.kubernetes_conn_id) self.api_group = api_group self.api_version = api_version self.poke_interval = poke_interval def _log_driver(self, application_state: str, response: dict) -> None: if not self.attach_log: return status_info = response[\"status\"] if \"driverInfo\" not in status_info: return driver_info = status_info[\"driverInfo\"] if \"podName\" not in driver_info: return driver_pod_name = driver_info[\"podName\"] namespace = response[\"metadata\"][\"namespace\"] log_method = self.log.error if application_state in self.FAILURE_STATES else self.log.info try: log = \"\" for line in self.hook.get_pod_logs(driver_pod_name, namespace=namespace): log += line.decode() log_method(log) except client.rest.ApiException as e: self.log.warning( \"Could not read logs for pod %s. It may have been disposed.\\n\" \"Make sure timeToLiveSeconds is set on your SparkApplication spec.\\n\" \"underlying exception: %s\", driver_pod_name, e, ) def poke(self, context: Dict) -> bool: self.log.info(\"Poking: %s\", self.application_name) response = self.hook.get_custom_object( group=self.api_group, version=self.api_version, plural=\"sparkapplications\", name=self.application_name, namespace=self.namespace, ) try: application_state = response[\"status\"][\"phase\"] except KeyError: self.log.debug(f\"SparkApplication status could not be established: {response}\") return False if self.attach_log and application_state in self.FAILURE_STATES + self.SUCCESS_STATES: self._log_driver(application_state, response) if application_state in self.FAILURE_STATES: raise AirflowException(f\"SparkApplication failed with state: {application_state}\") elif application_state in self.SUCCESS_STATES: self.log.info(\"SparkApplication ended successfully\") return True else: self.log.info(\"SparkApplication is still in state: %s\", application_state) return False with DAG( (4) dag_id='sparkapp_dag', schedule_interval='0 0 * * *', start_date=datetime(2021, 1, 1), catchup=False, dagrun_timeout=timedelta(minutes=60), tags=['example'], params={\"example_key\": \"example_value\"}, ) as dag: t1 = SparkKubernetesOperator( (5) task_id='spark_pi_submit', namespace=\"default\", application_file=\"pyspark-pi.yaml\", do_xcom_push=True, dag=dag, ) t2 = SparkKubernetesSensor( (6) task_id='spark_pi_monitor', namespace=\"default\", application_name=\"{{ task_instance.xcom_pull(task_ids='spark_pi_submit')['metadata']['name'] }}\", poke_interval=5, dag=dag, ) t1 >> t2 (7) 1 the wrapper class used for calling the job via KubernetesHook 2 the connection that created for in-cluster usage 3 the wrapper class used for monitoring the job via KubernetesHook 4 the start of the DAG code 5 the initial task to invoke the job 6 the subsequent task to monitor the job 7 the jobs are chained together in the correct order Once this DAG is mounted in the DAG folder it can be called and its progress viewed from within the Webserver UI: Clicking on the \"spark_pi_monitor\" task and selecting the logs shows that the status of the job has been tracked by Airflow:","title":"Usage","component":"airflow","version":"nightly","name":"usage","url":"/airflow/nightly/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":2},{"text":"Configuration Properties","hash":"_configuration_properties","id":3},{"text":"Environment Variables","hash":"_environment_variables","id":4},{"text":"Initializing the Airflow database","hash":"_initializing_the_airflow_database","id":5},{"text":"Using Airflow","hash":"_using_airflow","id":6},{"text":"Authentication","hash":"_authentication","id":7},{"text":"Webinterface","hash":"_webinterface","id":8},{"text":"LDAP","hash":"_ldap","id":9},{"text":"Authorization","hash":"_authorization","id":10},{"text":"Webinterface","hash":"_webinterface_2","id":11},{"text":"LDAP","hash":"_ldap_2","id":12},{"text":"Monitoring","hash":"_monitoring_2","id":13},{"text":"Mounting DAGs","hash":"_mounting_dags","id":14},{"text":"via ConfigMap","hash":"_via_configmap","id":15},{"text":"via PersistentVolumeclaim","hash":"_via_persistentvolumeclaim","id":16},{"text":"Node selection","hash":"_node_selection","id":17},{"text":"Applying Custom Resources","hash":"_applying_custom_resources","id":18},{"text":"Define an in-cluster Kubernetes connection","hash":"_define_an_in_cluster_kubernetes_connection","id":19},{"text":"Define a cluster role for Airflow to create SparkApplication resources","hash":"_define_a_cluster_role_for_airflow_to_create_sparkapplication_resources","id":20},{"text":"DAG code","hash":"_dag_code","id":21}]},"122":{"id":122,"text":"Once you have followed the steps in the Installation section to install the Operator and its dependencies, you will now deploy a Airflow cluster and its dependencies. Afterwards you can verify that it works by running and tracking an example DAG. As we have installed the external dependencies required by Airflow (Postgresql and Redis) we can now install the Airflow cluster itself. A secret with the necessary credentials must be created, this entails database connection credentials as well as an admin account for Airflow itself. Create a file called airflow-credentials.yaml: --- apiVersion: v1 kind: Secret metadata: name: simple-airflow-credentials type: Opaque stringData: adminUser.username: airflow adminUser.firstname: Airflow adminUser.lastname: Admin adminUser.email: airflow@airflow.com adminUser.password: airflow connections.secretKey: thisISaSECRET_1234 connections.sqlalchemyDatabaseUri: postgresql+psycopg2://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryResultBackend: db+postgresql://airflow:airflow@airflow-postgresql.default.svc.cluster.local/airflow connections.celeryBrokerUrl: redis://:redis@airflow-redis-master:6379/0 And apply it: kubectl apply -f airflow-credentials.yaml The connections.secretKey will be used for securely signing the session cookies and can be used for any other security related needs by extensions. It should be a long random string of bytes. connections.sqlalchemyDatabaseUri must contain the connection string to the SQL database storing the Airflow metadata. connections.celeryResultBackend must contain the connection string to the SQL database storing the job metadata (in the example above we are using the same postgresql database for both). connections.celeryBrokerUrl must contain the connection string to the Redis instance used for queuing the jobs submitted to the airflow worker(s). The adminUser fields are used to create an admin user. Please note that the admin user will be disabled if you use a non-default authentication mechanism like LDAP. An Airflow cluster is made of up three components: webserver: this provides the main UI for user-interaction workers: the nodes over which the job workload will be distributed by the scheduler scheduler: responsible for triggering jobs and persisting their metadata to the backend database Create a file named airflow.yaml with the following contents: --- apiVersion: airflow.stackable.tech/v1alpha1 kind: AirflowCluster metadata: name: airflow spec: version: 2.2.5-python39-stackable0.3.0 statsdExporterVersion: v0.22.4 executor: CeleryExecutor loadExamples: true exposeConfig: false credentialsSecret: simple-airflow-credentials webservers: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 2 schedulers: roleGroups: default: replicas: 1 And apply it: kubectl apply -f airflow.yaml Where: metadata.name contains the name of the Airflow cluster the label of the Docker image provided by Stackable must be set in spec.version spec.statsdExporterVersion must contain the tag of a statsd-exporter Docker image in the Stackable repository. spec.executor: this setting determines how the cluster will run (for more information see https://airflow.apache.org/docs/apache-airflow/stable/executor/index.html#executor-types): the CeleryExecutor is the recommended setting although SequentialExecutor (all jobs run in one process in series) and LocalExecutor (whereby all jobs are run on one node, using whatever parallelism is possible) are also supported the spec.loadExamples key is optional and defaults to false. It is set to true here as the example DAGs will be used when verifying the installation. the spec.exposeConfig key is optional and defaults to false. It is set to true only as an aid to verify the configuration and should never be used as such in anything other than test or demo clusters. the previously created secret must be referenced in spec.credentialsSecret Please note that the version you need to specify for spec.version is not only the version of Apache Airflow which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. This will create the actual Airflow cluster. When creating an Airflow cluster, a database-initialization job is first started to ensure that the database schema is present and correct (i.e. populated with an admin user). A Kubernetes job is created which starts a pod to initialize the database. This can take a while. You can use kubectl to wait on the resource, although the cluster itself will not be created until this step is complete.: kubectl wait airflowdb/airflow \\ --for jsonpath='{.status.condition}'=Ready \\ --timeout 300s The job status can be inspected and verified like this: kubectl get jobs which will show something like this: NAME COMPLETIONS DURATION AGE airflow 1/1 85s 11m Then, make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready, including the external dependencies: NAME READY AGE airflow-postgresql 1/1 16m airflow-redis-master 1/1 16m airflow-redis-replicas 1/1 16m airflow-scheduler-default 1/1 11m airflow-webserver-default 1/1 11m airflow-worker-default 2/2 11m The completed set of pods for the Airflow cluster will look something like this: When the Airflow cluster has been created and the database is initialized, Airflow can be opened in the browser: the webserver UI port defaults to 8080 can be forwarded to the local host: kubectl port-forward svc/airflow-webserver 8080 2>&1 >/dev/null & The Webserver UI can now be opened in the browser with http://localhost:8080. Enter the admin credentials from the Kubernetes secret: Since the examples were loaded in the cluster definition, they will appear under the DAGs tabs: Select one of these DAGs by clicking on the name in the left-hand column e.g. example_complex. Click on the arrow in the top right of the screen, select \"Trigger DAG\" and the DAG nodes will be automatically highlighted as the job works through its phases. Great! You have set up an Airflow cluster, connected to it and run your first DAG! Alternative: Using the command line If you prefer to interact directly with the API instead of using the web interface, you can use the following commands. The DAG is one of the example DAGs named example_complex. To trigger a DAG run via the API requires an initial extra step to ensure that the DAG is not in a paused state: curl -s --user airflow:airflow -H 'Content-Type:application/json' \\ -XPATCH http://localhost:8080/api/v1/dags/example_complex \\ -d '{\"is_paused\": false}' A DAG can then be triggered by providing the DAG name (in this case, example_complex). The response identifies the DAG identifier, which we can parse out of the JSON like this: curl -s --user airflow:airflow -H 'Content-Type:application/json' \\ -XPOST http://localhost:8080/api/v1/dags/example_complex/dagRuns \\ -d '{}' | jq -r '.dag_run_id' If we read this identifier into a variable such as dag_id (or replace it manually in the command) we can run this command to access the status of the DAG run: curl -s --user airflow:airflow -H 'Content-Type:application/json' \\ -XGET http://localhost:8080/api/v1/dags/example_complex/dagRuns/\"$dag_id\" | jq -r '.state' Look at the Usage page to find out more about configuring your Airflow cluster and loading your own DAG files.","title":"First steps","component":"airflow","version":"nightly","name":"first_steps","url":"/airflow/nightly/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Secret with Airflow credentials","hash":"_secret_with_airflow_credentials","id":2},{"text":"Airflow","hash":"_airflow","id":3},{"text":"Initialization of the Airflow database","hash":"_initialization_of_the_airflow_database","id":4},{"text":"Verify that it works","hash":"_verify_that_it_works","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"123":{"id":123,"text":"This guide will get you started with Airflow using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Airflow cluster and connecting to it, and viewing and running one of the example workflows (called DAGs = Direct Acyclic Graphs). You will need: a Kubernetes cluster kubectl Helm The Guide is divided into two steps: Installing the Operators. Setting up the Airflow cluster and running an example DAG.","title":"Getting started","component":"airflow","version":"nightly","name":"index","url":"/airflow/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"124":{"id":124,"text":"On this page you will install the Stackable Airflow Operator and its dependencies - Postgresql and Redis - as well as the commons and secret operator which are required by all Stackable Operators. Postgresql and Redis are required by Airflow: Postgresql to store metadata about DAG runs, and Redis to schedule and/or queue DAG jobs. They are components that may well already be available for customers, in which case we treat them here as pre-requisites for an airflow cluster and hence as part of the installation process. These components will be installed using Helm. Note that specific versions are declared: helm repo add bitnami https://charts.bitnami.com/bitnami helm install --wait airflow-postgresql bitnami/postgresql --version 11.0.0 \\ --set auth.username=airflow \\ --set auth.password=airflow \\ --set auth.database=airflow helm install --wait airflow-redis bitnami/redis \\ --set auth.password=redis \\ --version 16.8.7 \\ --set replica.replicaCount=1 There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all Operators necessary for Airflow: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ airflow=0.5.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing airflow operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait airflow-operator stackable-dev/airflow-operator --version 0.5.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the Airflow cluster (as well as the CRDs for the required operators). You are now ready to deploy Apache Airflow in Kubernetes. Set up an Airflow cluster and its dependencies and verify that it works by inspecting and running an example DAG.","title":"Installation","component":"airflow","version":"nightly","name":"installation","url":"/airflow/nightly/getting_started/installation.html","titles":[{"text":"Dependencies","hash":"_dependencies","id":1},{"text":"Stackable Operators","hash":"_stackable_operators","id":2},{"text":"stackablectl","hash":"_stackablectl","id":3},{"text":"Helm","hash":"_helm","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"125":{"id":125,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test","title":"","component":"druid","version":"0.1","name":"commandline_args","url":"/druid/0.1/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"126":{"id":126,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"Configuration","component":"druid","version":"0.1","name":"configuration","url":"/druid/0.1/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"127":{"id":127,"text":"The Stackable Operator for Apache Druid publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Druid cluster. The bundle includes several connection strings to Druid services such as the router console and SQL endpoints. The services may be used by other operators or tools to configure their products with access to Druid. This is limited to internal cluster access. Given the following Druid cluster: apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-derby-druid (1) namespace: stackable (2) spec: […​] 1 The name of the Druid cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-derby-druid. The stackable/simple-derby-druid discovery ConfigMap contains the following fields where simple-derby-druid represents the name and stackable the namespace of the cluster: DRUID_AVATICA_JDBC Contains the connection string for the Avatica JDBC driver to connect to the router: jdbc:avatica:remote:url=http://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql/avatica/ DRUID_SQLALCHEMY Contains the connection string for the python SQLAlchemy toolkit: druid://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql DRUID_ROUTER Contains the connection string for the Druid router: simple-derby-druid-router.stackable.svc.cluster.local:8888","title":"Discovery","component":"druid","version":"0.1","name":"discovery","url":"/druid/0.1/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"128":{"id":128,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"","component":"druid","version":"0.1","name":"env_var_args","url":"/druid/0.1/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"129":{"id":129,"text":"This is an operator for Kubernetes that can manage Apache Druid clusters. The Stackable Operator for Apache Druid currently supports the following versions of Druid: 0.22.1","title":"Stackable Operator for Apache Druid","component":"druid","version":"0.1","name":"index","url":"/druid/0.1/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1}]},"130":{"id":130,"text":"There are two ways to run the Apache Druid Operator: Using Helm As a Docker container Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Druid $ helm install druid-operator stackable/druid-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Druid service. You are now ready to deploy Apache Druid in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/druid-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Druid in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f druidcluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest This operator is written in Rust and is developed against the latest stable Rust release. cargo build","title":"Installation","component":"druid","version":"0.1","name":"installation","url":"/druid/0.1/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"131":{"id":131,"text":"Druid requires a Zookeeper to run, as well as a database. If HDFS is used as the backend-storage (so called \"deep storage\") then the HDFS operator is required as well. Please refer to the Zookeeper operator and docs. Please refer to the HDFS operator and docs. Druid requires a MySQL or Postgres database. For testing purposes, you can spin up a PostgreSQL database with the bitnami PostgreSQL helm chart. Add the bitnami repository: helm repo add bitnami https://charts.bitnami.com/bitnami And set up the Postgres database: helm install druid bitnami/postgresql \\ --version=11 \\ --set auth.username=druid \\ --set auth.password=druid \\ --set auth.database=druid With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/druid-operator/crd Then a cluster can be deployed using the example below. apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-druid spec: version: 0.22.1 zookeeperConfigMapName: simple-zk metadataStorageDatabase: dbType: postgresql connString: jdbc:postgresql://druid-postgresql/druid host: druid-postgresql # this is the name of the Postgres service port: 5432 user: druid password: druid deepStorage: storageType: hdfs storageDirectory: hdfs://path/to/druidDeepStorage brokers: roleGroups: default: config: {} replicas: 1 coordinators: roleGroups: default: config: {} replicas: 1 historicals: roleGroups: default: config: {} replicas: 1 middleManagers: roleGroups: default: config: {} replicas: 1 routers: roleGroups: default: config: {} replicas: 1 The Router is hosting the web UI, a NodePort service is created by the operator to access the web UI. Connect to the simple-druid-router NodePort service and follow the druid documentation on how to load and query sample data. The Stackable Platform uses a common set of resource definitions for s3 across all operators, explained in detail on the S3 resources page. In general, you can configure an S3 connection or bucket inline, or as a reference to a dedicated object. In Druid, S3 can be used for two things: Ingesting data from a bucket Using it as a backend for deep storage You can specify just a connection/bucket or just one of these or for both, but Druid only supports a single S3 endpoint under the hood, so if two connections are specified, they must be the same. This is easiest if a dedicated S3 Connection Resource is used. TLS for S3 is not yet supported. To ingest data from s3, you need to specify at least an endpoint to use, but there are more settings that can be set: spec: ingestion: s3connection: host: yourhost.com (1) port: 80 # optional (2) secretClass: my-s3-credentials # optional (3) 1 The S3 host, not optional 2 Port, optional, defaults to 80 3 Credentials to use. Since these might be bucket-dependent, they can instead be given in the ingestion job Druid can use S3 as a backend for deep storage: spec: deepStorage: s3: inline: bucketName: my-bucket (1) connection: inline: host: test-minio (2) port: 9000 (3) secretClass: minio-credentials (4) 1 Bucket name. 2 Bucket host. 3 Optional bucket port. 4 Name of the Secret object expected to contain the following keys: ACCESS_KEY_ID and SECRET_ACCESS_KEY. It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the DruidCluster like this: spec: deepStorage: s3: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 secretClass: minio-credentials This has the advantage that bucket configuration can be shared across `DruidClusters`s (and other stackable CRDs) and reduces the cost of updating these details. Druid can connect to an Open Policy Agent (OPA) instance for authorization policy decisions. You need to run an OPA instance to connect to, for which we refer to the OPA Operator docs. How you can write RegoRules for Druid is explained below. Once you have defined your rules, you need to configure the OPA cluster name and endpoint to use for Druid authorization requests. Add a section to the spec for OPA: opa: configMapName: simple-opa (1) package: my-druid-rules (2) 1 The name of your OPA cluster (simple-opa in this case) 2 The RegoRule package to use for policy decisions. The package should contain an allow rule. This is optional and will default to the name of the Druid cluster. For a general explanation of how rules are written, we refer to the OPA documentation. Inside your rule you will have access to input from Druid. Druid provides this data to you to base your policy decisions on: { \"user\": \"someUsername\", (1) \"action\": \"READ\", (2) \"resource\": { \"type\": \"DATASOURCE\", (3) \"name\": \"myTable\" (4) } } 1 The authenticated identity of the user that wants to perform the action 2 The action type, can be either READ or WRITE. 3 The resource type, one of STATE, CONFIG and DATASOURCE. 4 In case of a datasource this is the table name, for STATE this will simply be STATE, the same for CONFIG. For more details consult the Druid Authentication and Authorization Model. The operator creates a ConfigMap with the name of the cluster which contains connection information. Following our example above (the name of the cluster is simple-druid) a ConfigMap with the name simple-druid will be created containing 3 keys: DRUID_ROUTER with the format :, which points to the router processes HTTP endpoint. Here you can connect to the web UI, or use REST endpoints such as /druid/v2/sql/ to query data. More information in the Druid Docs. DRUID_AVATICA_JDBC contains a JDBC connect string which can be used together with the Avatica JDBC Driver to connect to Druid and query data. More information in the Druid Docs. DRUID_SQALCHEMY contains a connection string used to connect to Druid with SQAlchemy, in - for example - Apache Superset. The managed Druid instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the runtime.properties. For example, if you want to set the druid.server.http.numThreads for the router to 100 adapt the routers section of the cluster resource like so: routers: roleGroups: default: config: {} configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Druid Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: routers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: routers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1","title":"Usage","component":"druid","version":"0.1","name":"usage","url":"/druid/0.1/usage.html","titles":[{"text":"Setup Prerequisites","hash":"_setup_prerequisites","id":1},{"text":"Zookeeper operator","hash":"_zookeeper_operator","id":2},{"text":"HDFS operator (optional)","hash":"_hdfs_operator_optional","id":3},{"text":"SQL Database","hash":"_sql_database","id":4},{"text":"Creating a Druid Cluster","hash":"_creating_a_druid_cluster","id":5},{"text":"Using S3","hash":"_using_s3","id":6},{"text":"S3 for ingestion","hash":"_s3_for_ingestion","id":7},{"text":"S3 deep storage","hash":"_s3_deep_storage","id":8},{"text":"Using Open Policy Agent (OPA) for Authorization","hash":"_using_open_policy_agent_opa_for_authorization","id":9},{"text":"Defining RegoRules","hash":"_defining_regorules","id":10},{"text":"Connecting to Druid from other Services","hash":"_connecting_to_druid_from_other_services","id":11},{"text":"Monitoring","hash":"_monitoring","id":12},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":13},{"text":"Configuration Properties","hash":"_configuration_properties","id":14},{"text":"Environment Variables","hash":"_environment_variables","id":15}]},"132":{"id":132,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test","title":"","component":"druid","version":"0.2","name":"commandline_args","url":"/druid/0.2/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"133":{"id":133,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"Configuration","component":"druid","version":"0.2","name":"configuration","url":"/druid/0.2/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"134":{"id":134,"text":"The Stackable Operator for Apache Druid publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Druid cluster. The bundle includes several connection strings to Druid services such as the router console and SQL endpoints. The services may be used by other operators or tools to configure their products with access to Druid. This is limited to internal cluster access. Given the following Druid cluster: apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-derby-druid (1) namespace: stackable (2) spec: […​] 1 The name of the Druid cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-derby-druid. The stackable/simple-derby-druid discovery ConfigMap contains the following fields where simple-derby-druid represents the name and stackable the namespace of the cluster: DRUID_AVATICA_JDBC Contains the connection string for the Avatica JDBC driver to connect to the router: jdbc:avatica:remote:url=http://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql/avatica/ DRUID_SQLALCHEMY Contains the connection string for the python SQLAlchemy toolkit: druid://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql DRUID_ROUTER Contains the connection string for the Druid router: simple-derby-druid-router.stackable.svc.cluster.local:8888","title":"Discovery","component":"druid","version":"0.2","name":"discovery","url":"/druid/0.2/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"135":{"id":135,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"","component":"druid","version":"0.2","name":"env_var_args","url":"/druid/0.2/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"136":{"id":136,"text":"This is an operator for Kubernetes that can manage Apache Druid clusters. The Stackable Operator for Apache Druid currently supports the following versions of Druid: 0.22.1","title":"Stackable Operator for Apache Druid","component":"druid","version":"0.2","name":"index","url":"/druid/0.2/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1}]},"137":{"id":137,"text":"There are two ways to run the Apache Druid Operator: Using Helm As a Docker container Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Druid $ helm install druid-operator stackable/druid-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Druid service. You are now ready to deploy Apache Druid in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/druid-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Druid in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f druidcluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest This operator is written in Rust and is developed against the latest stable Rust release. cargo build","title":"Installation","component":"druid","version":"0.2","name":"installation","url":"/druid/0.2/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"138":{"id":138,"text":"Druid requires a Zookeeper to run, as well as a database. If HDFS is used as the backend-storage (so called \"deep storage\") then the HDFS operator is required as well. Please refer to the Zookeeper operator and docs. Please refer to the HDFS operator and docs. Druid requires a MySQL or Postgres database. For testing purposes, you can spin up a PostgreSQL database with the bitnami PostgreSQL helm chart. Add the bitnami repository: helm repo add bitnami https://charts.bitnami.com/bitnami And set up the Postgres database: helm install druid bitnami/postgresql \\ --version=11 \\ --set auth.username=druid \\ --set auth.password=druid \\ --set auth.database=druid With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/druid-operator/crd Then a cluster can be deployed using the example below. apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-druid spec: version: 0.22.1 zookeeperConfigMapName: simple-zk metadataStorageDatabase: dbType: postgresql connString: jdbc:postgresql://druid-postgresql/druid host: druid-postgresql # this is the name of the Postgres service port: 5432 user: druid password: druid deepStorage: storageType: hdfs storageDirectory: hdfs://path/to/druidDeepStorage brokers: roleGroups: default: config: {} replicas: 1 coordinators: roleGroups: default: config: {} replicas: 1 historicals: roleGroups: default: config: {} replicas: 1 middleManagers: roleGroups: default: config: {} replicas: 1 routers: roleGroups: default: config: {} replicas: 1 The Router is hosting the web UI, a NodePort service is created by the operator to access the web UI. Connect to the simple-druid-router NodePort service and follow the druid documentation on how to load and query sample data. The Stackable Platform uses a common set of resource definitions for s3 across all operators, explained in detail on the S3 resources page. In general, you can configure an S3 connection or bucket inline, or as a reference to a dedicated object. In Druid, S3 can be used for two things: Ingesting data from a bucket Using it as a backend for deep storage You can specify just a connection/bucket or just one of these or for both, but Druid only supports a single S3 endpoint under the hood, so if two connections are specified, they must be the same. This is easiest if a dedicated S3 Connection Resource is used. TLS for S3 is not yet supported. To ingest data from s3, you need to specify at least an endpoint to use, but there are more settings that can be set: spec: ingestion: s3connection: host: yourhost.com (1) port: 80 # optional (2) secretClass: my-s3-credentials # optional (3) 1 The S3 host, not optional 2 Port, optional, defaults to 80 3 Credentials to use. Since these might be bucket-dependent, they can instead be given in the ingestion job Druid can use S3 as a backend for deep storage: spec: deepStorage: s3: inline: bucketName: my-bucket (1) connection: inline: host: test-minio (2) port: 9000 (3) secretClass: minio-credentials (4) 1 Bucket name. 2 Bucket host. 3 Optional bucket port. 4 Name of the Secret object expected to contain the following keys: ACCESS_KEY_ID and SECRET_ACCESS_KEY. It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the DruidCluster like this: spec: deepStorage: s3: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 secretClass: minio-credentials This has the advantage that bucket configuration can be shared across `DruidClusters`s (and other stackable CRDs) and reduces the cost of updating these details. Druid can connect to an Open Policy Agent (OPA) instance for authorization policy decisions. You need to run an OPA instance to connect to, for which we refer to the OPA Operator docs. How you can write RegoRules for Druid is explained below. Once you have defined your rules, you need to configure the OPA cluster name and endpoint to use for Druid authorization requests. Add a section to the spec for OPA: opa: configMapName: simple-opa (1) package: my-druid-rules (2) 1 The name of your OPA cluster (simple-opa in this case) 2 The RegoRule package to use for policy decisions. The package should contain an allow rule. This is optional and will default to the name of the Druid cluster. For a general explanation of how rules are written, we refer to the OPA documentation. Inside your rule you will have access to input from Druid. Druid provides this data to you to base your policy decisions on: { \"user\": \"someUsername\", (1) \"action\": \"READ\", (2) \"resource\": { \"type\": \"DATASOURCE\", (3) \"name\": \"myTable\" (4) } } 1 The authenticated identity of the user that wants to perform the action 2 The action type, can be either READ or WRITE. 3 The resource type, one of STATE, CONFIG and DATASOURCE. 4 In case of a datasource this is the table name, for STATE this will simply be STATE, the same for CONFIG. For more details consult the Druid Authentication and Authorization Model. The operator creates a ConfigMap with the name of the cluster which contains connection information. Following our example above (the name of the cluster is simple-druid) a ConfigMap with the name simple-druid will be created containing 3 keys: DRUID_ROUTER with the format :, which points to the router processes HTTP endpoint. Here you can connect to the web UI, or use REST endpoints such as /druid/v2/sql/ to query data. More information in the Druid Docs. DRUID_AVATICA_JDBC contains a JDBC connect string which can be used together with the Avatica JDBC Driver to connect to Druid and query data. More information in the Druid Docs. DRUID_SQALCHEMY contains a connection string used to connect to Druid with SQAlchemy, in - for example - Apache Superset. The managed Druid instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the runtime.properties. For example, if you want to set the druid.server.http.numThreads for the router to 100 adapt the routers section of the cluster resource like so: routers: roleGroups: default: config: {} configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Druid Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: routers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: routers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1","title":"Usage","component":"druid","version":"0.2","name":"usage","url":"/druid/0.2/usage.html","titles":[{"text":"Setup Prerequisites","hash":"_setup_prerequisites","id":1},{"text":"Zookeeper operator","hash":"_zookeeper_operator","id":2},{"text":"HDFS operator (optional)","hash":"_hdfs_operator_optional","id":3},{"text":"SQL Database","hash":"_sql_database","id":4},{"text":"Creating a Druid Cluster","hash":"_creating_a_druid_cluster","id":5},{"text":"Using S3","hash":"_using_s3","id":6},{"text":"S3 for ingestion","hash":"_s3_for_ingestion","id":7},{"text":"S3 deep storage","hash":"_s3_deep_storage","id":8},{"text":"Using Open Policy Agent (OPA) for Authorization","hash":"_using_open_policy_agent_opa_for_authorization","id":9},{"text":"Defining RegoRules","hash":"_defining_regorules","id":10},{"text":"Connecting to Druid from other Services","hash":"_connecting_to_druid_from_other_services","id":11},{"text":"Monitoring","hash":"_monitoring","id":12},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":13},{"text":"Configuration Properties","hash":"_configuration_properties","id":14},{"text":"Environment Variables","hash":"_environment_variables","id":15}]},"139":{"id":139,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test","title":"","component":"druid","version":"0.6","name":"commandline_args","url":"/druid/0.6/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"140":{"id":140,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"Configuration","component":"druid","version":"0.6","name":"configuration","url":"/druid/0.6/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"141":{"id":141,"text":"The Stackable Operator for Apache Druid publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Druid cluster. The bundle includes several connection strings to Druid services such as the router console and SQL endpoints. The services may be used by other operators or tools to configure their products with access to Druid. This is limited to internal cluster access. Given the following Druid cluster: apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-derby-druid (1) namespace: stackable (2) spec: […​] 1 The name of the Druid cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-derby-druid. The stackable/simple-derby-druid discovery ConfigMap contains the following fields where simple-derby-druid represents the name and stackable the namespace of the cluster: DRUID_AVATICA_JDBC Contains the connection string for the Avatica JDBC driver to connect to the router: jdbc:avatica:remote:url=http://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql/avatica/ DRUID_SQLALCHEMY Contains the connection string for the python SQLAlchemy toolkit: druid://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql DRUID_ROUTER Contains the connection string for the Druid router: simple-derby-druid-router.stackable.svc.cluster.local:8888","title":"Discovery","component":"druid","version":"0.6","name":"discovery","url":"/druid/0.6/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"142":{"id":142,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"","component":"druid","version":"0.6","name":"env_var_args","url":"/druid/0.6/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"143":{"id":143,"text":"This is an operator for Kubernetes that can manage Apache Druid clusters. The Stackable Operator for Apache Druid currently supports the following versions of Druid: 0.22.1 0.23.0","title":"Stackable Operator for Apache Druid","component":"druid","version":"0.6","name":"index","url":"/druid/0.6/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1}]},"144":{"id":144,"text":"There are two ways to run the Apache Druid Operator: Using Helm As a Docker container Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Druid $ helm install druid-operator stackable/druid-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Druid service. You are now ready to deploy Apache Druid in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/druid-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Druid in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f druidcluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest This operator is written in Rust and is developed against the latest stable Rust release. cargo build","title":"Installation","component":"druid","version":"0.6","name":"installation","url":"/druid/0.6/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"145":{"id":145,"text":"Druid requires a Zookeeper to run, as well as a database. If HDFS is used as the backend-storage (so called \"deep storage\") then the HDFS operator is required as well. Please refer to the Zookeeper operator and docs. Please refer to the HDFS operator and docs. Druid requires a MySQL or Postgres database. For testing purposes, you can spin up a PostgreSQL database with the bitnami PostgreSQL helm chart. Add the bitnami repository: helm repo add bitnami https://charts.bitnami.com/bitnami And set up the Postgres database: helm install druid bitnami/postgresql \\ --version=11 \\ --set auth.username=druid \\ --set auth.password=druid \\ --set auth.database=druid With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/druid-operator/crd Then a cluster can be deployed using the example below. apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-druid spec: version: 0.23.0-stackable0.1.0 zookeeperConfigMapName: simple-zk metadataStorageDatabase: dbType: postgresql connString: jdbc:postgresql://druid-postgresql/druid host: druid-postgresql # this is the name of the Postgres service port: 5432 user: druid password: druid deepStorage: storageType: hdfs storageDirectory: hdfs://path/to/druidDeepStorage brokers: roleGroups: default: config: {} replicas: 1 coordinators: roleGroups: default: config: {} replicas: 1 historicals: roleGroups: default: config: {} replicas: 1 middleManagers: roleGroups: default: config: {} replicas: 1 routers: roleGroups: default: config: {} replicas: 1 Please note that the version you need to specify is not only the version of Druid which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The Router is hosting the web UI, a NodePort service is created by the operator to access the web UI. Connect to the simple-druid-router NodePort service and follow the druid documentation on how to load and query sample data. The Stackable Platform uses a common set of resource definitions for s3 across all operators. In general, you can configure an S3 connection or bucket inline, or as a reference to a dedicated object. In Druid, S3 can be used for two things: Ingesting data from a bucket Using it as a backend for deep storage You can specify just a connection/bucket for just one of these or for both, but Druid only supports a single S3 connection under the hood, so if two connections are specified, they must be the same. This is easiest if a dedicated S3 Connection Resource is used - not defined inline but as a dedicated object. TLS for S3 is not yet supported. To ingest data from s3, you need to specify at least a host to connect to, but there are more settings that can be set: spec: ingestion: s3connection: host: yourhost.com (1) port: 80 # optional (2) credentials: # optional (3) ... 1 The S3 host, not optional 2 Port, optional, defaults to 80 3 Credentials to use. Since these might be bucket-dependent, they can instead be given in the ingestion job. Specifying the credentials here is explained below. Druid can use S3 as a backend for deep storage: spec: deepStorage: s3: inline: bucketName: my-bucket (1) connection: inline: host: test-minio (2) port: 9000 (3) credentials: (4) ... 1 Bucket name. 2 Bucket host. 3 Optional bucket port. 4 Credentials explained below. It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the DruidCluster like this: spec: deepStorage: s3: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 credentials: ... (explained below) This has the advantage that bucket configuration can be shared across `DruidClusters`s (and other stackable CRDs) and reduces the cost of updating these details. No matter if a connection is specified inline or as a separate object, the credentials are always specified in the same way. You will need a Secret containing the access key ID and secret access key, a SecretClass and then a reference to this SecretClass where you want to specify the credentials. The Secret: apiVersion: v1 kind: Secret metadata: name: s3-credentials labels: secrets.stackable.tech/class: s3-credentials-class (1) stringData: accessKey: YOUR_VALID_ACCESS_KEY_ID_HERE secretKey: YOUR_SECRET_ACCES_KEY_THATBELONGS_TO_THE_KEY_ID_HERE 1 This label connects the Secret to the SecretClass. The SecretClass: apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: s3-credentials-class spec: backend: k8sSearch: searchNamespace: pod: {} Referencing it: ... credentials: secretClass: s3-credentials-class ... Druid can connect to an Open Policy Agent (OPA) instance for authorization policy decisions. You need to run an OPA instance to connect to, for which we refer to the OPA Operator docs. How you can write RegoRules for Druid is explained below. Once you have defined your rules, you need to configure the OPA cluster name and endpoint to use for Druid authorization requests. Add a section to the spec for OPA: opa: configMapName: simple-opa (1) package: my-druid-rules (2) 1 The name of your OPA cluster (simple-opa in this case) 2 The RegoRule package to use for policy decisions. The package should contain an allow rule. This is optional and will default to the name of the Druid cluster. For a general explanation of how rules are written, we refer to the OPA documentation. Inside your rule you will have access to input from Druid. Druid provides this data to you to base your policy decisions on: { \"user\": \"someUsername\", (1) \"action\": \"READ\", (2) \"resource\": { \"type\": \"DATASOURCE\", (3) \"name\": \"myTable\" (4) } } 1 The authenticated identity of the user that wants to perform the action 2 The action type, can be either READ or WRITE. 3 The resource type, one of STATE, CONFIG and DATASOURCE. 4 In case of a datasource this is the table name, for STATE this will simply be STATE, the same for CONFIG. For more details consult the Druid Authentication and Authorization Model. The operator creates a ConfigMap with the name of the cluster which contains connection information. Following our example above (the name of the cluster is simple-druid) a ConfigMap with the name simple-druid will be created containing 3 keys: DRUID_ROUTER with the format :, which points to the router processes HTTP endpoint. Here you can connect to the web UI, or use REST endpoints such as /druid/v2/sql/ to query data. More information in the Druid Docs. DRUID_AVATICA_JDBC contains a JDBC connect string which can be used together with the Avatica JDBC Driver to connect to Druid and query data. More information in the Druid Docs. DRUID_SQALCHEMY contains a connection string used to connect to Druid with SQAlchemy, in - for example - Apache Superset. The managed Druid instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the runtime.properties. For example, if you want to set the druid.server.http.numThreads for the router to 100 adapt the routers section of the cluster resource like so: routers: roleGroups: default: config: {} configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Druid Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: routers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: routers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1","title":"Usage","component":"druid","version":"0.6","name":"usage","url":"/druid/0.6/usage.html","titles":[{"text":"Setup Prerequisites","hash":"_setup_prerequisites","id":1},{"text":"Zookeeper operator","hash":"_zookeeper_operator","id":2},{"text":"HDFS operator (optional)","hash":"_hdfs_operator_optional","id":3},{"text":"SQL Database","hash":"_sql_database","id":4},{"text":"Creating a Druid Cluster","hash":"_creating_a_druid_cluster","id":5},{"text":"Using S3","hash":"_using_s3","id":6},{"text":"S3 for ingestion","hash":"_s3_for_ingestion","id":7},{"text":"S3 deep storage","hash":"_s3_deep_storage","id":8},{"text":"S3 Credentials","hash":"_s3_credentials","id":9},{"text":"Using Open Policy Agent (OPA) for Authorization","hash":"_using_open_policy_agent_opa_for_authorization","id":10},{"text":"Defining RegoRules","hash":"_defining_regorules","id":11},{"text":"Connecting to Druid from other Services","hash":"_connecting_to_druid_from_other_services","id":12},{"text":"Monitoring","hash":"_monitoring","id":13},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":14},{"text":"Configuration Properties","hash":"_configuration_properties","id":15},{"text":"Environment Variables","hash":"_environment_variables","id":16}]},"146":{"id":146,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test","title":"","component":"druid","version":"0.7","name":"commandline_args","url":"/druid/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"147":{"id":147,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"Configuration","component":"druid","version":"0.7","name":"configuration","url":"/druid/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"148":{"id":148,"text":"The Stackable Operator for Apache Druid publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Druid cluster. The bundle includes several connection strings to Druid services such as the router console and SQL endpoints. The services may be used by other operators or tools to configure their products with access to Druid. This is limited to internal cluster access. Given the following Druid cluster: apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-derby-druid (1) namespace: stackable (2) spec: […​] 1 The name of the Druid cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-derby-druid. The stackable/simple-derby-druid discovery ConfigMap contains the following fields where simple-derby-druid represents the name and stackable the namespace of the cluster: DRUID_AVATICA_JDBC Contains the connection string for the Avatica JDBC driver to connect to the router: jdbc:avatica:remote:url=http://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql/avatica/ DRUID_SQLALCHEMY Contains the connection string for the python SQLAlchemy toolkit: druid://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql DRUID_ROUTER Contains the connection string for the Druid router: simple-derby-druid-router.stackable.svc.cluster.local:8888","title":"Discovery","component":"druid","version":"0.7","name":"discovery","url":"/druid/stable/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"149":{"id":149,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"","component":"druid","version":"0.7","name":"env_var_args","url":"/druid/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"150":{"id":150,"text":"This is an operator for Kubernetes that can manage Apache Druid clusters. The Stackable Operator for Apache Druid currently supports the following versions of Druid: 0.22.1 0.23.0","title":"Stackable Operator for Apache Druid","component":"druid","version":"0.7","name":"index","url":"/druid/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1}]},"151":{"id":151,"text":"Druid requires a Zookeeper to run, as well as a database. If HDFS is used as the backend-storage (so called \"deep storage\") then the HDFS operator is required as well. Please refer to the Zookeeper operator and docs. Please refer to the HDFS operator and docs. Druid requires a MySQL or Postgres database. For testing purposes, you can spin up a PostgreSQL database with the bitnami PostgreSQL helm chart. Add the bitnami repository: helm repo add bitnami https://charts.bitnami.com/bitnami And set up the Postgres database: helm install druid bitnami/postgresql \\ --version=11 \\ --set auth.username=druid \\ --set auth.password=druid \\ --set auth.database=druid With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/druid-operator/crd Then a cluster can be deployed using the example below. apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-druid spec: version: 0.23.0-stackable0.1.0 zookeeperConfigMapName: simple-zk metadataStorageDatabase: dbType: postgresql connString: jdbc:postgresql://druid-postgresql/druid host: druid-postgresql # this is the name of the Postgres service port: 5432 user: druid password: druid deepStorage: hdfs: configMapName: simple-hdfs directory: /druid brokers: roleGroups: default: config: {} replicas: 1 coordinators: roleGroups: default: config: {} replicas: 1 historicals: roleGroups: default: config: {} replicas: 1 middleManagers: roleGroups: default: config: {} replicas: 1 routers: roleGroups: default: config: {} replicas: 1 Please note that the version you need to specify is not only the version of Druid which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The Router is hosting the web UI, a NodePort service is created by the operator to access the web UI. Connect to the simple-druid-router NodePort service and follow the druid documentation on how to load and query sample data. The Stackable Platform uses a common set of resource definitions for s3 across all operators. In general, you can configure an S3 connection or bucket inline, or as a reference to a dedicated object. In Druid, S3 can be used for two things: Ingesting data from a bucket Using it as a backend for deep storage You can specify just a connection/bucket for just one of these or for both, but Druid only supports a single S3 connection under the hood, so if two connections are specified, they must be the same. This is easiest if a dedicated S3 Connection Resource is used - not defined inline but as a dedicated object. TLS for S3 is not yet supported. To ingest data from s3, you need to specify at least a host to connect to, but there are more settings that can be set: spec: ingestion: s3connection: host: yourhost.com (1) port: 80 # optional (2) credentials: # optional (3) ... 1 The S3 host, not optional 2 Port, optional, defaults to 80 3 Credentials to use. Since these might be bucket-dependent, they can instead be given in the ingestion job. Specifying the credentials here is explained below. Druid can use S3 as a backend for deep storage: spec: deepStorage: s3: bucket: inline: bucketName: my-bucket (1) connection: inline: host: test-minio (2) port: 9000 (3) credentials: (4) ... 1 Bucket name. 2 Bucket host. 3 Optional bucket port. 4 Credentials explained below. It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the DruidCluster like this: spec: deepStorage: s3: bucket: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 credentials: ... (explained below) This has the advantage that bucket configuration can be shared across `DruidClusters`s (and other stackable CRDs) and reduces the cost of updating these details. No matter if a connection is specified inline or as a separate object, the credentials are always specified in the same way. You will need a Secret containing the access key ID and secret access key, a SecretClass and then a reference to this SecretClass where you want to specify the credentials. The Secret: apiVersion: v1 kind: Secret metadata: name: s3-credentials labels: secrets.stackable.tech/class: s3-credentials-class (1) stringData: accessKey: YOUR_VALID_ACCESS_KEY_ID_HERE secretKey: YOUR_SECRET_ACCES_KEY_THATBELONGS_TO_THE_KEY_ID_HERE 1 This label connects the Secret to the SecretClass. The SecretClass: apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: s3-credentials-class spec: backend: k8sSearch: searchNamespace: pod: {} Referencing it: ... credentials: secretClass: s3-credentials-class ... Druid can use HDFS as a backend for deep storage: spec: deepStorage: hdfs: configMapName: simple-hdfs (1) directory: /druid (2) ... 1 Name of the HDFS cluster discovery config map. Can be supplied manually for a cluster not provided by Stackable. Needs to contain the core-site.xml and hdfs-site.xml. 2 The directory where to store the druid data. Druid can connect to an Open Policy Agent (OPA) instance for authorization policy decisions. You need to run an OPA instance to connect to, for which we refer to the OPA Operator docs. How you can write RegoRules for Druid is explained below. Once you have defined your rules, you need to configure the OPA cluster name and endpoint to use for Druid authorization requests. Add a section to the spec for OPA: opa: configMapName: simple-opa (1) package: my-druid-rules (2) 1 The name of your OPA cluster (simple-opa in this case) 2 The RegoRule package to use for policy decisions. The package should contain an allow rule. This is optional and will default to the name of the Druid cluster. For a general explanation of how rules are written, we refer to the OPA documentation. Inside your rule you will have access to input from Druid. Druid provides this data to you to base your policy decisions on: { \"user\": \"someUsername\", (1) \"action\": \"READ\", (2) \"resource\": { \"type\": \"DATASOURCE\", (3) \"name\": \"myTable\" (4) } } 1 The authenticated identity of the user that wants to perform the action 2 The action type, can be either READ or WRITE. 3 The resource type, one of STATE, CONFIG and DATASOURCE. 4 In case of a datasource this is the table name, for STATE this will simply be STATE, the same for CONFIG. For more details consult the Druid Authentication and Authorization Model. The operator creates a ConfigMap with the name of the cluster which contains connection information. Following our example above (the name of the cluster is simple-druid) a ConfigMap with the name simple-druid will be created containing 3 keys: DRUID_ROUTER with the format :, which points to the router processes HTTP endpoint. Here you can connect to the web UI, or use REST endpoints such as /druid/v2/sql/ to query data. More information in the Druid Docs. DRUID_AVATICA_JDBC contains a JDBC connect string which can be used together with the Avatica JDBC Driver to connect to Druid and query data. More information in the Druid Docs. DRUID_SQALCHEMY contains a connection string used to connect to Druid with SQAlchemy, in - for example - Apache Superset. The managed Druid instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the runtime.properties. For example, if you want to set the druid.server.http.numThreads for the router to 100 adapt the routers section of the cluster resource like so: routers: roleGroups: default: config: {} configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Druid Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: routers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: routers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1","title":"Usage","component":"druid","version":"0.7","name":"usage","url":"/druid/stable/usage.html","titles":[{"text":"Setup Prerequisites","hash":"_setup_prerequisites","id":1},{"text":"Zookeeper operator","hash":"_zookeeper_operator","id":2},{"text":"HDFS operator (optional)","hash":"_hdfs_operator_optional","id":3},{"text":"SQL Database","hash":"_sql_database","id":4},{"text":"Creating a Druid Cluster","hash":"_creating_a_druid_cluster","id":5},{"text":"Using S3","hash":"_using_s3","id":6},{"text":"S3 for ingestion","hash":"_s3_for_ingestion","id":7},{"text":"S3 deep storage","hash":"_s3_deep_storage","id":8},{"text":"S3 Credentials","hash":"_s3_credentials","id":9},{"text":"HDFS deep storage","hash":"_hdfs_deep_storage","id":10},{"text":"Using Open Policy Agent (OPA) for Authorization","hash":"_using_open_policy_agent_opa_for_authorization","id":11},{"text":"Defining RegoRules","hash":"_defining_regorules","id":12},{"text":"Connecting to Druid from other Services","hash":"_connecting_to_druid_from_other_services","id":13},{"text":"Monitoring","hash":"_monitoring","id":14},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":15},{"text":"Configuration Properties","hash":"_configuration_properties","id":16},{"text":"Environment Variables","hash":"_environment_variables","id":17}]},"152":{"id":152,"text":"After going through the Installation section and having installed all the Operators, you will now deploy a Druid cluster and it’s dependencies. Afterwards you can verify that it works by ingesting example data and subsequently query it. Three things need to be installed to have a Druid cluster: A ZooKeeper instance for internal use by Druid An HDFS instance to be used as a backend for deep storage The Druid cluster itself We will create them in this order, each one is created by applying a manifest file. The Operators you just installed will then create the resources according to the manifest. Create a file named zookeeper.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.5.8-stackable0.7.0 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 config: {} --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-druid-znode spec: clusterRef: name: simple-zk --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-hdfs-znode spec: clusterRef: name: simple-zk Then create the resources by applying the manifest file kubectl apply -f zookeeper.yaml Create hdfs.yaml with the following contents: --- apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: version: 3.2.2-stackable0.5.0 zookeeperConfigMapName: simple-hdfs-znode dfsReplication: 3 log4j: |- # Define some default values that can be overridden by system properties hadoop.root.logger=INFO,console hadoop.log.dir=. hadoop.log.file=hadoop.log # Define the root logger to the system property \"hadoop.root.logger\". log4j.rootLogger=${hadoop.root.logger}, EventCounter # Logging Threshold log4j.threshold=ALL log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter nameNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 2 dataNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 journalNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 And apply it: kubectl apply -f hdfs.yaml Create a file named druid.yaml with the following contents: --- apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-druid spec: version: 0.23.0-stackable0.1.0 zookeeperConfigMapName: simple-druid-znode metadataStorageDatabase: dbType: derby connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true host: localhost port: 1527 deepStorage: hdfs: configMapName: simple-hdfs directory: /data brokers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 coordinators: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 historicals: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 middleManagers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 routers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 And apply it: kubectl apply -f druid.yaml This will create the actual druid instance. Next you will submit an ingestion job and then query the ingested data - either through the web interface or the API. First, make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE simple-druid-broker-default 1/1 5m simple-druid-coordinator-default 1/1 5m simple-druid-historical-default 1/1 5m simple-druid-middlemanager-default 1/1 5m simple-druid-router-default 1/1 5m simple-hdfs-datanode-default 1/1 6m simple-hdfs-journalnode-default 1/1 6m simple-hdfs-namenode-default 2/2 6m simple-zk-server-default 3/3 7m Then, create a port-forward for the Druid Router: kubectl port-forward svc/simple-druid-router 8888 2>&1 >/dev/null & Next, we will ingest some example data using the web interface. If you prefer to use the command line instead, follow the instructions in the collapsed section below. Alternative: Using the command line If you prefer to not use the web interface and instead interact with the API, create a file ingestion_spec.json with the following contents: { \"type\": \"index_parallel\", \"spec\": { \"ioConfig\": { \"type\": \"index_parallel\", \"inputSource\": { \"type\": \"http\", \"uris\": [ \"https://druid.apache.org/data/wikipedia.json.gz\" ] }, \"inputFormat\": { \"type\": \"json\" } }, \"dataSchema\": { \"granularitySpec\": { \"segmentGranularity\": \"day\", \"queryGranularity\": \"none\", \"rollup\": false }, \"dataSource\": \"wikipedia\", \"timestampSpec\": { \"column\": \"timestamp\", \"format\": \"iso\" }, \"dimensionsSpec\": { \"dimensions\": [ \"isRobot\", \"channel\", \"flags\", \"isUnpatrolled\", \"page\", \"diffUrl\", { \"type\": \"long\", \"name\": \"added\" }, \"comment\", { \"type\": \"long\", \"name\": \"commentLength\" }, \"isNew\", \"isMinor\", { \"type\": \"long\", \"name\": \"delta\" }, \"isAnonymous\", \"user\", { \"type\": \"long\", \"name\": \"deltaBucket\" }, { \"type\": \"long\", \"name\": \"deleted\" }, \"namespace\", \"cityName\", \"countryName\", \"regionIsoCode\", \"metroCode\", \"countryIsoCode\", \"regionName\" ] } }, \"tuningConfig\": { \"type\": \"index_parallel\", \"partitionsSpec\": { \"type\": \"dynamic\" } } } } Submit the file with the following curl command: curl -s -X 'POST' -H 'Content-Type:application/json' -d @ingestion_spec.json http://localhost:8888/druid/indexer/v1/task Continue with the next section. To open the web interface navigate your browser to https://localhost:8888/ to find the dashboard: Now load the example data: Click through all pages of the load process. You can also follow the Druid Quickstart Guide. Once you finished the ingestion dialog you should see the ingestion overview with the job, which will eventually show SUCCESS: Query from the user interface by navigating to the \"Query\" interface in the menu and query the wikipedia table: Alternative: Using the command line To query from the commandline, create a file called query.json with the query: { \"query\": \"SELECT page, COUNT(*) AS Edits FROM wikipedia GROUP BY page ORDER BY Edits DESC LIMIT 10\" } and execute it: curl -s -X 'POST' -H 'Content-Type:application/json' -d @query.json http://localhost:8888/druid/v2/sql The result should be similar to: Great! You’ve set up your first Druid cluster, ingested some data and queried it in the web interface! Have a look at the Usage page to find out more about the features of the Operator, such as S3 backed deep storage or OPA based authorization.","title":"First steps","component":"druid","version":"0.7","name":"first_steps","url":"/druid/stable/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"HDFS","hash":"_hdfs","id":3},{"text":"Druid","hash":"_druid","id":4},{"text":"Verify that it works","hash":"_verify_that_it_works","id":5},{"text":"Ingest example data","hash":"_ingest_example_data","id":6},{"text":"Query the data","hash":"_query_the_data","id":7},{"text":"What’s next","hash":"_whats_next","id":8}]},"153":{"id":153,"text":"This guide will get you started with Druid using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Druid instance and connecting to it, ingesting example data and querying that data. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the Druid instance and loading and querying example data.","title":"Getting started","component":"druid","version":"0.7","name":"index","url":"/druid/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"154":{"id":154,"text":"On this page you will install the Stackable Druid Operator and Operators for its dependencies - ZooKeeper and HDFS - as well as the commons and secret operator which are required by all Stackable Operators. There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all Operators necessary for Druid: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ hdfs=0.5.0-nightly \\ druid=0.7.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing zookeeper operator [INFO ] Installing hdfs operator [INFO ] Installing druid operator Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait hdfs-operator stackable-dev/hdfs-operator --version 0.5.0-nightly helm install --wait druid-operator stackable-dev/druid-operator --version 0.7.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the Apache Druid service (as well as the CRDs for the required operators). You are now ready to deploy Apache Druid in Kubernetes. Set up a Druid cluster and its dependencies and ingest example data and query the data.","title":"Installation","component":"druid","version":"0.7","name":"installation","url":"/druid/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"155":{"id":155,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test","title":"","component":"druid","version":"nightly","name":"commandline_args","url":"/druid/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"156":{"id":156,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-druid-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-druid-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"Configuration","component":"druid","version":"nightly","name":"configuration","url":"/druid/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"157":{"id":157,"text":"The Stackable Operator for Apache Druid publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Druid cluster. The bundle includes several connection strings to Druid services such as the router console and SQL endpoints. The services may be used by other operators or tools to configure their products with access to Druid. This is limited to internal cluster access. Given the following Druid cluster: apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-derby-druid (1) namespace: stackable (2) spec: […​] 1 The name of the Druid cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-derby-druid. The stackable/simple-derby-druid discovery ConfigMap contains the following fields where simple-derby-druid represents the name and stackable the namespace of the cluster: DRUID_AVATICA_JDBC Contains the connection string for the Avatica JDBC driver to connect to the router: jdbc:avatica:remote:url=http://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql/avatica/ DRUID_SQLALCHEMY Contains the connection string for the python SQLAlchemy toolkit: druid://simple-derby-druid-router.stackable.svc.cluster.local:8888/druid/v2/sql DRUID_ROUTER Contains the connection string for the Druid router: simple-derby-druid-router.stackable.svc.cluster.local:8888","title":"Discovery","component":"druid","version":"nightly","name":"discovery","url":"/druid/nightly/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"158":{"id":158,"text":"Default value: /etc/stackable/druid-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-druid-operator run or via docker: docker run \\ --name druid-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/druid-operator:latest","title":"","component":"druid","version":"nightly","name":"env_var_args","url":"/druid/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"159":{"id":159,"text":"This is an operator for Kubernetes that can manage Apache Druid clusters. The Stackable Operator for Apache Druid currently supports the following versions of Druid: 0.22.1 0.23.0","title":"Stackable Operator for Apache Druid","component":"druid","version":"nightly","name":"index","url":"/druid/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1}]},"160":{"id":160,"text":"Druid requires a Zookeeper to run, as well as a database. If HDFS is used as the backend-storage (so called \"deep storage\") then the HDFS operator is required as well. Please refer to the Zookeeper operator and docs. Please refer to the HDFS operator and docs. Druid requires a MySQL or Postgres database. For testing purposes, you can spin up a PostgreSQL database with the bitnami PostgreSQL helm chart. Add the bitnami repository: helm repo add bitnami https://charts.bitnami.com/bitnami And set up the Postgres database: helm install druid bitnami/postgresql \\ --version=11 \\ --set auth.username=druid \\ --set auth.password=druid \\ --set auth.database=druid With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/druid-operator/crd Then a cluster can be deployed using the example below. apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-druid spec: version: 0.23.0-stackable0.1.0 zookeeperConfigMapName: simple-zk metadataStorageDatabase: dbType: postgresql connString: jdbc:postgresql://druid-postgresql/druid host: druid-postgresql # this is the name of the Postgres service port: 5432 user: druid password: druid deepStorage: hdfs: configMapName: simple-hdfs directory: /druid brokers: roleGroups: default: config: {} replicas: 1 coordinators: roleGroups: default: config: {} replicas: 1 historicals: roleGroups: default: config: {} replicas: 1 middleManagers: roleGroups: default: config: {} replicas: 1 routers: roleGroups: default: config: {} replicas: 1 Please note that the version you need to specify is not only the version of Druid which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The Router is hosting the web UI, a NodePort service is created by the operator to access the web UI. Connect to the simple-druid-router NodePort service and follow the druid documentation on how to load and query sample data. The Stackable Platform uses a common set of resource definitions for s3 across all operators. In general, you can configure an S3 connection or bucket inline, or as a reference to a dedicated object. In Druid, S3 can be used for two things: Ingesting data from a bucket Using it as a backend for deep storage You can specify just a connection/bucket for just one of these or for both, but Druid only supports a single S3 connection under the hood, so if two connections are specified, they must be the same. This is easiest if a dedicated S3 Connection Resource is used - not defined inline but as a dedicated object. TLS for S3 is not yet supported. To ingest data from s3, you need to specify at least a host to connect to, but there are more settings that can be set: spec: ingestion: s3connection: host: yourhost.com (1) port: 80 # optional (2) credentials: # optional (3) ... 1 The S3 host, not optional 2 Port, optional, defaults to 80 3 Credentials to use. Since these might be bucket-dependent, they can instead be given in the ingestion job. Specifying the credentials here is explained below. Druid can use S3 as a backend for deep storage: spec: deepStorage: s3: bucket: inline: bucketName: my-bucket (1) connection: inline: host: test-minio (2) port: 9000 (3) credentials: (4) ... 1 Bucket name. 2 Bucket host. 3 Optional bucket port. 4 Credentials explained below. It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the DruidCluster like this: spec: deepStorage: s3: bucket: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 credentials: ... (explained below) This has the advantage that bucket configuration can be shared across `DruidClusters`s (and other stackable CRDs) and reduces the cost of updating these details. No matter if a connection is specified inline or as a separate object, the credentials are always specified in the same way. You will need a Secret containing the access key ID and secret access key, a SecretClass and then a reference to this SecretClass where you want to specify the credentials. The Secret: apiVersion: v1 kind: Secret metadata: name: s3-credentials labels: secrets.stackable.tech/class: s3-credentials-class (1) stringData: accessKey: YOUR_VALID_ACCESS_KEY_ID_HERE secretKey: YOUR_SECRET_ACCES_KEY_THATBELONGS_TO_THE_KEY_ID_HERE 1 This label connects the Secret to the SecretClass. The SecretClass: apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: s3-credentials-class spec: backend: k8sSearch: searchNamespace: pod: {} Referencing it: ... credentials: secretClass: s3-credentials-class ... Druid can use HDFS as a backend for deep storage: spec: deepStorage: hdfs: configMapName: simple-hdfs (1) directory: /druid (2) ... 1 Name of the HDFS cluster discovery config map. Can be supplied manually for a cluster not provided by Stackable. Needs to contain the core-site.xml and hdfs-site.xml. 2 The directory where to store the druid data. Druid can connect to an Open Policy Agent (OPA) instance for authorization policy decisions. You need to run an OPA instance to connect to, for which we refer to the OPA Operator docs. How you can write RegoRules for Druid is explained below. Once you have defined your rules, you need to configure the OPA cluster name and endpoint to use for Druid authorization requests. Add a section to the spec for OPA: opa: configMapName: simple-opa (1) package: my-druid-rules (2) 1 The name of your OPA cluster (simple-opa in this case) 2 The RegoRule package to use for policy decisions. The package should contain an allow rule. This is optional and will default to the name of the Druid cluster. For a general explanation of how rules are written, we refer to the OPA documentation. Inside your rule you will have access to input from Druid. Druid provides this data to you to base your policy decisions on: { \"user\": \"someUsername\", (1) \"action\": \"READ\", (2) \"resource\": { \"type\": \"DATASOURCE\", (3) \"name\": \"myTable\" (4) } } 1 The authenticated identity of the user that wants to perform the action 2 The action type, can be either READ or WRITE. 3 The resource type, one of STATE, CONFIG and DATASOURCE. 4 In case of a datasource this is the table name, for STATE this will simply be STATE, the same for CONFIG. For more details consult the Druid Authentication and Authorization Model. The operator creates a ConfigMap with the name of the cluster which contains connection information. Following our example above (the name of the cluster is simple-druid) a ConfigMap with the name simple-druid will be created containing 3 keys: DRUID_ROUTER with the format :, which points to the router processes HTTP endpoint. Here you can connect to the web UI, or use REST endpoints such as /druid/v2/sql/ to query data. More information in the Druid Docs. DRUID_AVATICA_JDBC contains a JDBC connect string which can be used together with the Avatica JDBC Driver to connect to Druid and query data. More information in the Druid Docs. DRUID_SQALCHEMY contains a connection string used to connect to Druid with SQAlchemy, in - for example - Apache Superset. The managed Druid instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the runtime.properties. For example, if you want to set the druid.server.http.numThreads for the router to 100 adapt the routers section of the cluster resource like so: routers: roleGroups: default: config: {} configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: runtime.properties: druid.server.http.numThreads: \"100\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Druid Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: routers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: routers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1","title":"Usage","component":"druid","version":"nightly","name":"usage","url":"/druid/nightly/usage.html","titles":[{"text":"Setup Prerequisites","hash":"_setup_prerequisites","id":1},{"text":"Zookeeper operator","hash":"_zookeeper_operator","id":2},{"text":"HDFS operator (optional)","hash":"_hdfs_operator_optional","id":3},{"text":"SQL Database","hash":"_sql_database","id":4},{"text":"Creating a Druid Cluster","hash":"_creating_a_druid_cluster","id":5},{"text":"Using S3","hash":"_using_s3","id":6},{"text":"S3 for ingestion","hash":"_s3_for_ingestion","id":7},{"text":"S3 deep storage","hash":"_s3_deep_storage","id":8},{"text":"S3 Credentials","hash":"_s3_credentials","id":9},{"text":"HDFS deep storage","hash":"_hdfs_deep_storage","id":10},{"text":"Using Open Policy Agent (OPA) for Authorization","hash":"_using_open_policy_agent_opa_for_authorization","id":11},{"text":"Defining RegoRules","hash":"_defining_regorules","id":12},{"text":"Connecting to Druid from other Services","hash":"_connecting_to_druid_from_other_services","id":13},{"text":"Monitoring","hash":"_monitoring","id":14},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":15},{"text":"Configuration Properties","hash":"_configuration_properties","id":16},{"text":"Environment Variables","hash":"_environment_variables","id":17}]},"161":{"id":161,"text":"After going through the Installation section and having installed all the Operators, you will now deploy a Druid cluster and it’s dependencies. Afterwards you can verify that it works by ingesting example data and subsequently query it. Three things need to be installed to have a Druid cluster: A ZooKeeper instance for internal use by Druid An HDFS instance to be used as a backend for deep storage The Druid cluster itself We will create them in this order, each one is created by applying a manifest file. The Operators you just installed will then create the resources according to the manifest. Create a file named zookeeper.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.5.8-stackable0.7.0 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 config: {} --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-druid-znode spec: clusterRef: name: simple-zk --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-hdfs-znode spec: clusterRef: name: simple-zk Then create the resources by applying the manifest file kubectl apply -f zookeeper.yaml Create hdfs.yaml with the following contents: --- apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: version: 3.2.2-stackable0.5.0 zookeeperConfigMapName: simple-hdfs-znode dfsReplication: 3 log4j: |- # Define some default values that can be overridden by system properties hadoop.root.logger=INFO,console hadoop.log.dir=. hadoop.log.file=hadoop.log # Define the root logger to the system property \"hadoop.root.logger\". log4j.rootLogger=${hadoop.root.logger}, EventCounter # Logging Threshold log4j.threshold=ALL log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter nameNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 2 dataNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 journalNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 And apply it: kubectl apply -f hdfs.yaml Create a file named druid.yaml with the following contents: --- apiVersion: druid.stackable.tech/v1alpha1 kind: DruidCluster metadata: name: simple-druid spec: version: 0.23.0-stackable0.1.0 zookeeperConfigMapName: simple-druid-znode metadataStorageDatabase: dbType: derby connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true host: localhost port: 1527 deepStorage: hdfs: configMapName: simple-hdfs directory: /data brokers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 coordinators: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 historicals: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 middleManagers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 routers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: {} replicas: 1 And apply it: kubectl apply -f druid.yaml This will create the actual druid instance. Next you will submit an ingestion job and then query the ingested data - either through the web interface or the API. First, make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE simple-druid-broker-default 1/1 5m simple-druid-coordinator-default 1/1 5m simple-druid-historical-default 1/1 5m simple-druid-middlemanager-default 1/1 5m simple-druid-router-default 1/1 5m simple-hdfs-datanode-default 1/1 6m simple-hdfs-journalnode-default 1/1 6m simple-hdfs-namenode-default 2/2 6m simple-zk-server-default 3/3 7m Then, create a port-forward for the Druid Router: kubectl port-forward svc/simple-druid-router 8888 2>&1 >/dev/null & Next, we will ingest some example data using the web interface. If you prefer to use the command line instead, follow the instructions in the collapsed section below. Alternative: Using the command line If you prefer to not use the web interface and instead interact with the API, create a file ingestion_spec.json with the following contents: { \"type\": \"index_parallel\", \"spec\": { \"ioConfig\": { \"type\": \"index_parallel\", \"inputSource\": { \"type\": \"http\", \"uris\": [ \"https://druid.apache.org/data/wikipedia.json.gz\" ] }, \"inputFormat\": { \"type\": \"json\" } }, \"dataSchema\": { \"granularitySpec\": { \"segmentGranularity\": \"day\", \"queryGranularity\": \"none\", \"rollup\": false }, \"dataSource\": \"wikipedia\", \"timestampSpec\": { \"column\": \"timestamp\", \"format\": \"iso\" }, \"dimensionsSpec\": { \"dimensions\": [ \"isRobot\", \"channel\", \"flags\", \"isUnpatrolled\", \"page\", \"diffUrl\", { \"type\": \"long\", \"name\": \"added\" }, \"comment\", { \"type\": \"long\", \"name\": \"commentLength\" }, \"isNew\", \"isMinor\", { \"type\": \"long\", \"name\": \"delta\" }, \"isAnonymous\", \"user\", { \"type\": \"long\", \"name\": \"deltaBucket\" }, { \"type\": \"long\", \"name\": \"deleted\" }, \"namespace\", \"cityName\", \"countryName\", \"regionIsoCode\", \"metroCode\", \"countryIsoCode\", \"regionName\" ] } }, \"tuningConfig\": { \"type\": \"index_parallel\", \"partitionsSpec\": { \"type\": \"dynamic\" } } } } Submit the file with the following curl command: curl -s -X 'POST' -H 'Content-Type:application/json' -d @ingestion_spec.json http://localhost:8888/druid/indexer/v1/task Continue with the next section. To open the web interface navigate your browser to https://localhost:8888/ to find the dashboard: Now load the example data: Click through all pages of the load process. You can also follow the Druid Quickstart Guide. Once you finished the ingestion dialog you should see the ingestion overview with the job, which will eventually show SUCCESS: Query from the user interface by navigating to the \"Query\" interface in the menu and query the wikipedia table: Alternative: Using the command line To query from the commandline, create a file called query.json with the query: { \"query\": \"SELECT page, COUNT(*) AS Edits FROM wikipedia GROUP BY page ORDER BY Edits DESC LIMIT 10\" } and execute it: curl -s -X 'POST' -H 'Content-Type:application/json' -d @query.json http://localhost:8888/druid/v2/sql The result should be similar to: Great! You’ve set up your first Druid cluster, ingested some data and queried it in the web interface! Have a look at the Usage page to find out more about the features of the Operator, such as S3 backed deep storage or OPA based authorization.","title":"First steps","component":"druid","version":"nightly","name":"first_steps","url":"/druid/nightly/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"HDFS","hash":"_hdfs","id":3},{"text":"Druid","hash":"_druid","id":4},{"text":"Verify that it works","hash":"_verify_that_it_works","id":5},{"text":"Ingest example data","hash":"_ingest_example_data","id":6},{"text":"Query the data","hash":"_query_the_data","id":7},{"text":"What’s next","hash":"_whats_next","id":8}]},"162":{"id":162,"text":"This guide will get you started with Druid using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Druid instance and connecting to it, ingesting example data and querying that data. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the Druid instance and loading and querying example data.","title":"Getting started","component":"druid","version":"nightly","name":"index","url":"/druid/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"163":{"id":163,"text":"On this page you will install the Stackable Druid Operator and Operators for its dependencies - ZooKeeper and HDFS - as well as the commons and secret operator which are required by all Stackable Operators. There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all Operators necessary for Druid: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ hdfs=0.5.0-nightly \\ druid=0.7.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing zookeeper operator [INFO ] Installing hdfs operator [INFO ] Installing druid operator Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait hdfs-operator stackable-dev/hdfs-operator --version 0.5.0-nightly helm install --wait druid-operator stackable-dev/druid-operator --version 0.7.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the Apache Druid service (as well as the CRDs for the required operators). You are now ready to deploy Apache Druid in Kubernetes. Set up a Druid cluster and its dependencies and ingest example data and query the data.","title":"Installation","component":"druid","version":"nightly","name":"installation","url":"/druid/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"164":{"id":164,"text":"Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hbase-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hbase-operator run --watch-namespace test","title":"","component":"hbase","version":"0.3","name":"commandline_args","url":"/hbase/0.3/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"165":{"id":165,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hbase-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hbase-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest","title":"Configuration","component":"hbase","version":"0.3","name":"configuration","url":"/hbase/0.3/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"166":{"id":166,"text":"The Stackable Operator for Apache HBase publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache HBase cluster. Given the following HBase cluster: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: {clusterName} (1) namespace: {namespace} (2) spec: hdfsConfigMapName: {hdfs-cluster-name} (3) zookeeperConfigMapName: {zookeeper-znode-name} (4) config: hbaseRootdir: /hbase 1 The name of the HBase cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 The ConfigMap name to discover the HDFS cluster. 4 The ConfigMap name to discover the ZooKeeper cluster. The resulting discovery ConfigMap is located at {namespace}/{clusterName}. The ConfigMap data values are formatted as Hadoop XML files which allows simple mounting of that ConfigMap into pods that require access to HBase. hbase-site.xml Contains the hbase.zookeeper.quorum property.","title":"Discovery","component":"hbase","version":"0.3","name":"discovery","url":"/hbase/0.3/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"167":{"id":167,"text":"Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest","title":"","component":"hbase","version":"0.3","name":"env_var_args","url":"/hbase/0.3/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"168":{"id":168,"text":"This is an operator for Kubernetes that can manage Apache HBase clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache HBase currently supports the following versions of Apache HBase: 2.4.6 2.4.8 2.4.9 2.4.11 2.4.12 ￼ docker pull docker.stackable.tech/stackable/hbase:","title":"Stackable Operator for Apache HBase","component":"hbase","version":"0.3","name":"index","url":"/hbase/0.3/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"169":{"id":169,"text":"There are three ways to run the HBase Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache HBase $ helm install hbase-operator stackable/hbase-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache HBase service. You are now ready to deploy Apache HBase in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/hbase-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache HBase in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f hbasecluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.58 at the time of writing). stackable-hbase-operator crd | kubectl apply -f - stackable-hbase-operator run","title":"Installation","component":"hbase","version":"0.3","name":"installation","url":"/hbase/0.3/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"170":{"id":170,"text":"A distributed Apache HBase installation depends on a running Apache ZooKeeper and HDFS cluster. See the documentation for the Stackable Operator for Apache HDFS how to set up these clusters. An Apache HBase cluster can be created with the following cluster specification: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: simple-hbase spec: version: 2.4.12-stackable0.1.0 hdfsConfigMapName: simple-hdfs-namenode-default zookeeperConfigMapName: simple-hbase-znode config: hbaseOpts: hbaseRootdir: /hbase masters: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 regionServers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 restServers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-hbase-znode spec: clusterRef: name: simple-zk hdfsConfigMapName references the config map created by the Stackable HDFS operator. zookeeperConfigMapName references the config map created by the Stackable ZooKeeper operator. hbaseOpts is mapped to the environment variable HBASE_OPTS in hbase-env.sh. hbaseRootdir is mapped to hbase.rootdir in hbase-site.xml. Please note that the version you need to specify is not only the version of HBase which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The managed HBase instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the following files: hbase-site.xml hbase-env.sh For example, if you want to set the hbase.rest.threads.min to 4 and the HBASE_HEAPSIZE to two GB adapt the restServers section of the cluster resource like so: restServers: roleGroups: default: config: {} configOverrides: hbase-site.xml: hbase.rest.threads.min: \"4\" hbase-env.sh: HBASE_HEAPSIZE: \"2G\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: restServers: configOverrides: hbase-site.xml: hbase.rest.threads.min: \"4\" hbase-env.sh: HBASE_HEAPSIZE: \"2G\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file, respectively inserted as is into the env.sh file. For a full list of configuration options we refer to the HBase Configuration Documentation.","title":"Usage","component":"hbase","version":"0.3","name":"usage","url":"/hbase/0.3/usage.html","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"Deployment of an Apache HBase cluster","hash":"_deployment_of_an_apache_hbase_cluster","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration Overrides","hash":"_configuration_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5}]},"171":{"id":171,"text":"Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hbase-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hbase-operator run --watch-namespace test","title":"","component":"hbase","version":"0.4","name":"commandline_args","url":"/hbase/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"172":{"id":172,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hbase-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hbase-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest","title":"Configuration","component":"hbase","version":"0.4","name":"configuration","url":"/hbase/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"173":{"id":173,"text":"The Stackable Operator for Apache HBase publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache HBase cluster. Given the following HBase cluster: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: {cluster-name} (1) namespace: {namespace} (2) spec: hdfsConfigMapName: {hdfs-cluster-name} (3) zookeeperConfigMapName: {zookeeper-znode-name} (4) config: hbaseRootdir: /hbase 1 The name of the HBase cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 The ConfigMap name to discover the HDFS cluster. 4 The ConfigMap name to discover the ZooKeeper cluster. The resulting discovery ConfigMap is located at {namespace}/{cluster-name}. The ConfigMap data values are formatted as Hadoop XML files which allows simple mounting of that ConfigMap into pods that require access to HBase. hbase-site.xml Contains the hbase.zookeeper.quorum property.","title":"Discovery","component":"hbase","version":"0.4","name":"discovery","url":"/hbase/stable/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"174":{"id":174,"text":"Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest","title":"","component":"hbase","version":"0.4","name":"env_var_args","url":"/hbase/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"175":{"id":175,"text":"This is an operator for Kubernetes that can manage Apache HBase clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache HBase currently supports the following versions of Apache HBase: 2.4.6 2.4.8 2.4.9 2.4.11 2.4.12 ￼ docker pull docker.stackable.tech/stackable/hbase:","title":"Stackable Operator for Apache HBase","component":"hbase","version":"0.4","name":"index","url":"/hbase/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"176":{"id":176,"text":"A distributed Apache HBase installation depends on a running Apache ZooKeeper and HDFS cluster. See the documentation for the Stackable Operator for Apache HDFS how to set up these clusters. An Apache HBase cluster can be created with the following cluster specification: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: simple-hbase spec: version: 2.4.12-stackable0.1.0 hdfsConfigMapName: simple-hdfs-namenode-default zookeeperConfigMapName: simple-hbase-znode config: hbaseOpts: hbaseRootdir: /hbase masters: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 regionServers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 restServers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-hbase-znode spec: clusterRef: name: simple-zk hdfsConfigMapName references the config map created by the Stackable HDFS operator. zookeeperConfigMapName references the config map created by the Stackable ZooKeeper operator. hbaseOpts is mapped to the environment variable HBASE_OPTS in hbase-env.sh. hbaseRootdir is mapped to hbase.rootdir in hbase-site.xml. Please note that the version you need to specify is not only the version of HBase which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The managed HBase instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the following files: hbase-site.xml hbase-env.sh For example, if you want to set the hbase.rest.threads.min to 4 and the HBASE_HEAPSIZE to two GB adapt the restServers section of the cluster resource like so: restServers: roleGroups: default: config: {} configOverrides: hbase-site.xml: hbase.rest.threads.min: \"4\" hbase-env.sh: HBASE_HEAPSIZE: \"2G\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: restServers: configOverrides: hbase-site.xml: hbase.rest.threads.min: \"4\" hbase-env.sh: HBASE_HEAPSIZE: \"2G\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file, respectively inserted as is into the env.sh file. For a full list of configuration options we refer to the HBase Configuration Documentation. The Apache Phoenix project provides the ability to interact with HBase with JBDC using familiar SQL-syntax. The Phoenix dependencies are bundled with the Stackable HBase image and do not need to be installed separately (client components will need to ensure that they have the correct client-side libraries available). Information about client-side installation can be found here. Phoenix comes bundled with a few simple scripts to verify a correct server-side installation. For example, assuming that phoenix dependencies have been installed to their default location of /stackable/phoenix/bin, we can issue the following using the supplied psql.py script: /stackable/phoenix/bin/psql.py && \\ /stackable/phoenix/examples/WEB_STAT.sql && \\ /stackable/phoenix/examples/WEB_STAT.csv && \\ /stackable/phoenix/examples/WEB_STAT_QUERIES.sql This script creates a java command that creates, populates and queries a Phoenix table called WEB_STAT. Alternatively, one can use the sqlline.py script (which wraps the sqlline utility): /stackable/phoenix/bin/sqlline.py [zookeeper] [sql file] The script opens an SQL prompt from where one can list, query, create and generally interact with Phoenix tables. So, to query the table that was created in the previous step, start the script and enter some SQL at the prompt: The Phoenix table WEB_STAT is created as an HBase table, and can be viewed normally from within the HBase UI: The SYSTEM* tables are those required by Phoenix and are created the first time that Phoenix is invoked. Both psql.py and sqlline.py generate a java command that calls classes from the Phoenix client library .jar. The Zookeeper quorum does not need to be supplied as part of the URL used by the JDBC connection string, as long as the environment variable HBASE_CONF_DIR is set and supplied as an element for the -cp classpath search: the cluster information is then extracted from $HBASE_CONF_DIR/hbase-site.xml.","title":"Usage","component":"hbase","version":"0.4","name":"usage","url":"/hbase/stable/usage.html","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"Deployment of an Apache HBase cluster","hash":"_deployment_of_an_apache_hbase_cluster","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration Overrides","hash":"_configuration_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Phoenix","hash":"_phoenix","id":6}]},"177":{"id":177,"text":"Once you have followed the steps in the Installation section to install the operator and its dependencies, you will now deploy an HBase cluster and its dependencies. Afterwards you can verify that it works by creating tables and data in HBase using the REST API and Apache Phoenix (an SQL layer used to interact with HBase). To deploy a ZooKeeper cluster create one file called zk.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 1 We also need to define a ZNode that will be used by the HDFS and HBase clusters to reference ZooKeeper. Create another file called znode.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk Apply both of these files: kubectl apply -f zk.yaml kubectl apply -f znode.yaml The state of the ZooKeeper cluster can be tracked with kubectl: kubectl rollout status --watch statefulset/simple-zk-server-default An HDFS cluster has three components: the namenode, the datanode and the journalnode. Create a file named hdfs.yaml defining 2 namenodes and one datanode and journalnode each: --- apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: version: 3.3.3-stackable0.1.0 zookeeperConfigMapName: simple-znode dfsReplication: 3 nameNodes: roleGroups: default: replicas: 2 dataNodes: roleGroups: default: replicas: 1 journalNodes: roleGroups: default: replicas: 1 Where: metadata.name contains the name of the HDFS cluster the label of the Docker image provided by Stackable must be set in spec.version Please note that the version you need to specify for spec.version is not only the version of Hadoop which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Create the actual HDFS cluster by applying the file: kubectl apply -f hdfs.yaml Track the progress with kubectl as this step may take a few minutes: kubectl rollout status --watch statefulset/simple-hdfs-datanode-default kubectl rollout status --watch statefulset/simple-hdfs-namenode-default kubectl rollout status --watch statefulset/simple-hdfs-journalnode-default You can now create the HBase cluster. Create a file called hbase.yaml containing the following: --- apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: simple-hbase spec: version: 2.4.12-stackable0.2.0 hdfsConfigMapName: simple-hdfs zookeeperConfigMapName: simple-znode config: hbaseRootdir: /hbase masters: roleGroups: default: replicas: 1 regionServers: roleGroups: default: replicas: 1 restServers: roleGroups: default: replicas: 1 To test the cluster you will use the REST API to check its version and status, and to create and inspect a new table. You will also use Phoenix to create, populate and query a second new table, before listing all non-system tables in HBase. These actions wil be carried out from one of the HBase components, the REST server. First, check the cluster version with this callout: kubectl exec -n default simple-hbase-restserver-default-0 -- \\ curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/version/cluster\" This will return the version that was specified in the HBase cluster definition: {\"Version\":\"2.4.12\"} The cluster status can be checked and formatted like this: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/status/cluster\" | json_pp which will display cluster metadata that looks like this (only the first region is included for the sake of readability): { \"DeadNodes\" : [], \"LiveNodes\" : [ { \"Region\" : [ { \"currentCompactedKVs\" : 0, \"memStoreSizeMB\" : 0, \"name\" : \"U1lTVEVNLkNBVEFMT0csLDE2NjExNjA0NDM2NjcuYmYwMzA1YmM4ZjFmOGIwZWMwYjhmMGNjMWI5N2RmMmUu\", \"readRequestsCount\" : 104, \"rootIndexSizeKB\" : 1, \"storefileIndexSizeKB\" : 1, \"storefileSizeMB\" : 1, \"storefiles\" : 1, \"stores\" : 1, \"totalCompactingKVs\" : 0, \"totalStaticBloomSizeKB\" : 0, \"totalStaticIndexSizeKB\" : 1, \"writeRequestsCount\" : 360 }, ... ], \"heapSizeMB\" : 351, \"maxHeapSizeMB\" : 11978, \"name\" : \"simple-hbase-regionserver-default-0.simple-hbase-regionserver-default.default.svc.cluster.local:16020\", \"requests\" : 395, \"startCode\" : 1661156787704 } ], \"averageLoad\" : 43, \"regions\" : 43, \"requests\" : 1716 } You can now create a table like this: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XPUT -H \"Accept: text/xml\" -H \"Content-Type: text/xml\" \\ \"http://simple-hbase-restserver-default:8080/users/schema\" \\ -d '' This will create a table users with a single column family cf. Its creation can be verified by listing it: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/users/schema\" | json_pp { \"table\" : [ { \"name\" : \"users\" } ] } An alternative way to interact with HBase is to use the Phoenix library that is pre-installed on the Stackable HBase image (in the /stackable/phoenix directory). Use the python utility psql.py (found in /stackable/phoenix/bin) to create, populate and query a table called WEB_STAT: kubectl exec -n default simple-hbase-restserver-default-0 -- \\ /stackable/phoenix/bin/psql.py \\ /stackable/phoenix/examples/WEB_STAT.sql \\ /stackable/phoenix/examples/WEB_STAT.csv \\ /stackable/phoenix/examples/WEB_STAT_QUERIES.sql The final command will display some grouped data like this: HO TOTAL_ACTIVE_VISITORS -- ---------------------------------------- EU 150 NA 1 Time: 0.017 sec(s) Check the tables again with: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/users/schema\" | json_pp This time the list includes not just users (created above with the REST API) and WEB_STAT, but several other tables too: { \"table\" : [ { \"name\" : \"SYSTEM.CATALOG\" }, { \"name\" : \"SYSTEM.CHILD_LINK\" }, { \"name\" : \"SYSTEM.FUNCTION\" }, { \"name\" : \"SYSTEM.LOG\" }, { \"name\" : \"SYSTEM.MUTEX\" }, { \"name\" : \"SYSTEM.SEQUENCE\" }, { \"name\" : \"SYSTEM.STATS\" }, { \"name\" : \"SYSTEM.TASK\" }, { \"name\" : \"WEB_STAT\" }, { \"name\" : \"users\" } ] } This is because Phoenix requires these SYSTEM. tables for its own internal mapping mechanism, and they are created the first time that Phoenix is used on the cluster. Look at the Usage page to find out more about configuring your HBase cluster.","title":"First steps","component":"hbase","version":"0.4","name":"first_steps","url":"/hbase/stable/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"HDFS","hash":"_hdfs","id":3},{"text":"HBase","hash":"_hbase","id":4},{"text":"Verify that it works","hash":"_verify_that_it_works","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"178":{"id":178,"text":"This guide will get you started with HBase using the Stackable operator. It will guide you through the installation of the operator and its dependencies, setting up your first HBase cluster and verifying its operation. You will need: a Kubernetes cluster kubectl jq, a commandline JSON processor optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the HBase cluster and verifying it works.","title":"Getting started","component":"hbase","version":"0.4","name":"index","url":"/hbase/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"179":{"id":179,"text":"On this page you will install the Stackable HBase operator and its dependencies, the ZooKeeper and HDFS operators, as well as the commons and secret operators which are required by all Stackable operators. There are 2 ways to run Stackable operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all operators necessary for the HBase cluster: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ hdfs=0.5.0-nightly \\ hbase=0.4.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly [INFO ] Installing hdfs operator 0.5.0-nightly [INFO ] Installing hbase operator 0.4.0-nightly Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait hdfs-operator stackable-dev/hdfs-operator --version 0.5.0-nightly helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait hbase-operator stackable-dev/hbase-operator --version 0.4.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the HBase cluster (as well as the CRDs for the required operators). You are now ready to deploy HBase in Kubernetes. Set up an HBase cluster and its dependencies and verify that it works.","title":"Installation","component":"hbase","version":"0.4","name":"installation","url":"/hbase/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"180":{"id":180,"text":"Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hbase-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hbase-operator run --watch-namespace test","title":"","component":"hbase","version":"nightly","name":"commandline_args","url":"/hbase/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"181":{"id":181,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hbase-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hbase-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest","title":"Configuration","component":"hbase","version":"nightly","name":"configuration","url":"/hbase/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"182":{"id":182,"text":"The Stackable Operator for Apache HBase publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache HBase cluster. Given the following HBase cluster: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: {cluster-name} (1) namespace: {namespace} (2) spec: hdfsConfigMapName: {hdfs-cluster-name} (3) zookeeperConfigMapName: {zookeeper-znode-name} (4) config: hbaseRootdir: /hbase 1 The name of the HBase cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 The ConfigMap name to discover the HDFS cluster. 4 The ConfigMap name to discover the ZooKeeper cluster. The resulting discovery ConfigMap is located at {namespace}/{cluster-name}. The ConfigMap data values are formatted as Hadoop XML files which allows simple mounting of that ConfigMap into pods that require access to HBase. hbase-site.xml Contains the hbase.zookeeper.quorum property.","title":"Discovery","component":"hbase","version":"nightly","name":"discovery","url":"/hbase/nightly/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"183":{"id":183,"text":"Default value: /etc/stackable/hbase-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hbase-operator run or via docker: docker run \\ --name hbase-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hbase-operator:latest","title":"","component":"hbase","version":"nightly","name":"env_var_args","url":"/hbase/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"184":{"id":184,"text":"This is an operator for Kubernetes that can manage Apache HBase clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache HBase currently supports the following versions of Apache HBase: 2.4.6 2.4.8 2.4.9 2.4.11 2.4.12 ￼ docker pull docker.stackable.tech/stackable/hbase:","title":"Stackable Operator for Apache HBase","component":"hbase","version":"nightly","name":"index","url":"/hbase/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"185":{"id":185,"text":"A distributed Apache HBase installation depends on a running Apache ZooKeeper and HDFS cluster. See the documentation for the Stackable Operator for Apache HDFS how to set up these clusters. An Apache HBase cluster can be created with the following cluster specification: apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: simple-hbase spec: version: 2.4.12-stackable0.1.0 hdfsConfigMapName: simple-hdfs-namenode-default zookeeperConfigMapName: simple-hbase-znode config: hbaseOpts: hbaseRootdir: /hbase masters: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 regionServers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 restServers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-hbase-znode spec: clusterRef: name: simple-zk hdfsConfigMapName references the config map created by the Stackable HDFS operator. zookeeperConfigMapName references the config map created by the Stackable ZooKeeper operator. hbaseOpts is mapped to the environment variable HBASE_OPTS in hbase-env.sh. hbaseRootdir is mapped to hbase.rootdir in hbase-site.xml. Please note that the version you need to specify is not only the version of HBase which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The managed HBase instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the following files: hbase-site.xml hbase-env.sh For example, if you want to set the hbase.rest.threads.min to 4 and the HBASE_HEAPSIZE to two GB adapt the restServers section of the cluster resource like so: restServers: roleGroups: default: config: {} configOverrides: hbase-site.xml: hbase.rest.threads.min: \"4\" hbase-env.sh: HBASE_HEAPSIZE: \"2G\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: restServers: configOverrides: hbase-site.xml: hbase.rest.threads.min: \"4\" hbase-env.sh: HBASE_HEAPSIZE: \"2G\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file, respectively inserted as is into the env.sh file. For a full list of configuration options we refer to the HBase Configuration Documentation. The Apache Phoenix project provides the ability to interact with HBase with JBDC using familiar SQL-syntax. The Phoenix dependencies are bundled with the Stackable HBase image and do not need to be installed separately (client components will need to ensure that they have the correct client-side libraries available). Information about client-side installation can be found here. Phoenix comes bundled with a few simple scripts to verify a correct server-side installation. For example, assuming that phoenix dependencies have been installed to their default location of /stackable/phoenix/bin, we can issue the following using the supplied psql.py script: /stackable/phoenix/bin/psql.py && \\ /stackable/phoenix/examples/WEB_STAT.sql && \\ /stackable/phoenix/examples/WEB_STAT.csv && \\ /stackable/phoenix/examples/WEB_STAT_QUERIES.sql This script creates a java command that creates, populates and queries a Phoenix table called WEB_STAT. Alternatively, one can use the sqlline.py script (which wraps the sqlline utility): /stackable/phoenix/bin/sqlline.py [zookeeper] [sql file] The script opens an SQL prompt from where one can list, query, create and generally interact with Phoenix tables. So, to query the table that was created in the previous step, start the script and enter some SQL at the prompt: The Phoenix table WEB_STAT is created as an HBase table, and can be viewed normally from within the HBase UI: The SYSTEM* tables are those required by Phoenix and are created the first time that Phoenix is invoked. Both psql.py and sqlline.py generate a java command that calls classes from the Phoenix client library .jar. The Zookeeper quorum does not need to be supplied as part of the URL used by the JDBC connection string, as long as the environment variable HBASE_CONF_DIR is set and supplied as an element for the -cp classpath search: the cluster information is then extracted from $HBASE_CONF_DIR/hbase-site.xml.","title":"Usage","component":"hbase","version":"nightly","name":"usage","url":"/hbase/nightly/usage.html","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"Deployment of an Apache HBase cluster","hash":"_deployment_of_an_apache_hbase_cluster","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration Overrides","hash":"_configuration_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Phoenix","hash":"_phoenix","id":6}]},"186":{"id":186,"text":"Once you have followed the steps in the Installation section to install the operator and its dependencies, you will now deploy an HBase cluster and its dependencies. Afterwards you can verify that it works by creating tables and data in HBase using the REST API and Apache Phoenix (an SQL layer used to interact with HBase). To deploy a ZooKeeper cluster create one file called zk.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 1 We also need to define a ZNode that will be used by the HDFS and HBase clusters to reference ZooKeeper. Create another file called znode.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk Apply both of these files: kubectl apply -f zk.yaml kubectl apply -f znode.yaml The state of the ZooKeeper cluster can be tracked with kubectl: kubectl rollout status --watch statefulset/simple-zk-server-default An HDFS cluster has three components: the namenode, the datanode and the journalnode. Create a file named hdfs.yaml defining 2 namenodes and one datanode and journalnode each: --- apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: version: 3.3.3-stackable0.1.0 zookeeperConfigMapName: simple-znode dfsReplication: 3 nameNodes: roleGroups: default: replicas: 2 dataNodes: roleGroups: default: replicas: 1 journalNodes: roleGroups: default: replicas: 1 Where: metadata.name contains the name of the HDFS cluster the label of the Docker image provided by Stackable must be set in spec.version Please note that the version you need to specify for spec.version is not only the version of Hadoop which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Create the actual HDFS cluster by applying the file: kubectl apply -f hdfs.yaml Track the progress with kubectl as this step may take a few minutes: kubectl rollout status --watch statefulset/simple-hdfs-datanode-default kubectl rollout status --watch statefulset/simple-hdfs-namenode-default kubectl rollout status --watch statefulset/simple-hdfs-journalnode-default You can now create the HBase cluster. Create a file called hbase.yaml containing the following: --- apiVersion: hbase.stackable.tech/v1alpha1 kind: HbaseCluster metadata: name: simple-hbase spec: version: 2.4.12-stackable0.2.0 hdfsConfigMapName: simple-hdfs zookeeperConfigMapName: simple-znode config: hbaseRootdir: /hbase masters: roleGroups: default: replicas: 1 regionServers: roleGroups: default: replicas: 1 restServers: roleGroups: default: replicas: 1 To test the cluster you will use the REST API to check its version and status, and to create and inspect a new table. You will also use Phoenix to create, populate and query a second new table, before listing all non-system tables in HBase. These actions wil be carried out from one of the HBase components, the REST server. First, check the cluster version with this callout: kubectl exec -n default simple-hbase-restserver-default-0 -- \\ curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/version/cluster\" This will return the version that was specified in the HBase cluster definition: {\"Version\":\"2.4.12\"} The cluster status can be checked and formatted like this: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/status/cluster\" | json_pp which will display cluster metadata that looks like this (only the first region is included for the sake of readability): { \"DeadNodes\" : [], \"LiveNodes\" : [ { \"Region\" : [ { \"currentCompactedKVs\" : 0, \"memStoreSizeMB\" : 0, \"name\" : \"U1lTVEVNLkNBVEFMT0csLDE2NjExNjA0NDM2NjcuYmYwMzA1YmM4ZjFmOGIwZWMwYjhmMGNjMWI5N2RmMmUu\", \"readRequestsCount\" : 104, \"rootIndexSizeKB\" : 1, \"storefileIndexSizeKB\" : 1, \"storefileSizeMB\" : 1, \"storefiles\" : 1, \"stores\" : 1, \"totalCompactingKVs\" : 0, \"totalStaticBloomSizeKB\" : 0, \"totalStaticIndexSizeKB\" : 1, \"writeRequestsCount\" : 360 }, ... ], \"heapSizeMB\" : 351, \"maxHeapSizeMB\" : 11978, \"name\" : \"simple-hbase-regionserver-default-0.simple-hbase-regionserver-default.default.svc.cluster.local:16020\", \"requests\" : 395, \"startCode\" : 1661156787704 } ], \"averageLoad\" : 43, \"regions\" : 43, \"requests\" : 1716 } You can now create a table like this: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XPUT -H \"Accept: text/xml\" -H \"Content-Type: text/xml\" \\ \"http://simple-hbase-restserver-default:8080/users/schema\" \\ -d '' This will create a table users with a single column family cf. Its creation can be verified by listing it: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/users/schema\" | json_pp { \"table\" : [ { \"name\" : \"users\" } ] } An alternative way to interact with HBase is to use the Phoenix library that is pre-installed on the Stackable HBase image (in the /stackable/phoenix directory). Use the python utility psql.py (found in /stackable/phoenix/bin) to create, populate and query a table called WEB_STAT: kubectl exec -n default simple-hbase-restserver-default-0 -- \\ /stackable/phoenix/bin/psql.py \\ /stackable/phoenix/examples/WEB_STAT.sql \\ /stackable/phoenix/examples/WEB_STAT.csv \\ /stackable/phoenix/examples/WEB_STAT_QUERIES.sql The final command will display some grouped data like this: HO TOTAL_ACTIVE_VISITORS -- ---------------------------------------- EU 150 NA 1 Time: 0.017 sec(s) Check the tables again with: kubectl exec -n default simple-hbase-restserver-default-0 \\ -- curl -s -XGET -H \"Accept: application/json\" \"http://simple-hbase-restserver-default:8080/users/schema\" | json_pp This time the list includes not just users (created above with the REST API) and WEB_STAT, but several other tables too: { \"table\" : [ { \"name\" : \"SYSTEM.CATALOG\" }, { \"name\" : \"SYSTEM.CHILD_LINK\" }, { \"name\" : \"SYSTEM.FUNCTION\" }, { \"name\" : \"SYSTEM.LOG\" }, { \"name\" : \"SYSTEM.MUTEX\" }, { \"name\" : \"SYSTEM.SEQUENCE\" }, { \"name\" : \"SYSTEM.STATS\" }, { \"name\" : \"SYSTEM.TASK\" }, { \"name\" : \"WEB_STAT\" }, { \"name\" : \"users\" } ] } This is because Phoenix requires these SYSTEM. tables for its own internal mapping mechanism, and they are created the first time that Phoenix is used on the cluster. Look at the Usage page to find out more about configuring your HBase cluster.","title":"First steps","component":"hbase","version":"nightly","name":"first_steps","url":"/hbase/nightly/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"HDFS","hash":"_hdfs","id":3},{"text":"HBase","hash":"_hbase","id":4},{"text":"Verify that it works","hash":"_verify_that_it_works","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"187":{"id":187,"text":"This guide will get you started with HBase using the Stackable operator. It will guide you through the installation of the operator and its dependencies, setting up your first HBase cluster and verifying its operation. You will need: a Kubernetes cluster kubectl jq, a commandline JSON processor optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the HBase cluster and verifying it works.","title":"Getting started","component":"hbase","version":"nightly","name":"index","url":"/hbase/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"188":{"id":188,"text":"On this page you will install the Stackable HBase operator and its dependencies, the ZooKeeper and HDFS operators, as well as the commons and secret operators which are required by all Stackable operators. There are 2 ways to run Stackable operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all operators necessary for the HBase cluster: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ hdfs=0.5.0-nightly \\ hbase=0.4.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly [INFO ] Installing hdfs operator 0.5.0-nightly [INFO ] Installing hbase operator 0.4.0-nightly Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait hdfs-operator stackable-dev/hdfs-operator --version 0.5.0-nightly helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait hbase-operator stackable-dev/hbase-operator --version 0.4.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the HBase cluster (as well as the CRDs for the required operators). You are now ready to deploy HBase in Kubernetes. Set up an HBase cluster and its dependencies and verify that it works.","title":"Installation","component":"hbase","version":"nightly","name":"installation","url":"/hbase/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"189":{"id":189,"text":"Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hdfs-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hdfs-operator run --watch-namespace test","title":"","component":"hdfs","version":"0.4","name":"commandline_args","url":"/hdfs/0.4/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"190":{"id":190,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hdfs-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hdfs-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest","title":"Configuration","component":"hdfs","version":"0.4","name":"configuration","url":"/hdfs/0.4/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"191":{"id":191,"text":"The Stackable Operator for Apache HDFS publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache HDFS cluster. Given the following HDFS cluster: apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: {clusterName} (1) namespace: {namespace} (2) spec: namenode: roleGroups: default: (3) […​] 1 The name of the HDFS cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 A role group name of the namenode role. The resulting discovery ConfigMap is located at {namespace}/{clusterName}. The ConfigMap data values are formatted as Hadoop XML files which allows simple mounting of that ConfigMap into pods that require access to HDFS. core-site.xml Contains the fs.DefaultFS which defaults to hdfs://{clusterName}/. hdfs-site.xml Contains the dfs.namenode.* properties for rpc and http addresses for the namenodes as well as the dfs.nameservices property which defaults to hdfs://{clusterName}/.","title":"Discovery","component":"hdfs","version":"0.4","name":"discovery","url":"/hdfs/0.4/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"192":{"id":192,"text":"Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest","title":"","component":"hdfs","version":"0.4","name":"env_var_args","url":"/hdfs/0.4/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"193":{"id":193,"text":"This operator can be used to set up a highly available HDFS cluster. It implements three roles of the HDFS cluster: Data Node - responsible for holding the actual data. IMPORTANT Currently the data is kept in hostPath volumes of 1GB and no configuration options are exposed to the user. Each data node has its own volume. Journal Node - responsible for keeping track of HDFS blocks and used to perform failovers in case the active name node fails. For details see: https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html Name Node - responsible for keeping track of HDFS blocks and providing access to the data. The operator creates the following K8S objects per role group defined in the custom resource. ClusterIP - used for intra-cluster communication. ConfigMap - HDFS configuration files like core-site.xml and hdfs-site.xml are defined here and mounted in the pods. StatefulSet - where the replica count of each role group is defined. By default, a cluster will have 2 name nodes, 3 journal nodes and 3 data nodes. In addition, a NodePort service is created for each pod that exposes all container ports to the outside world (from the perspective of K8S). In the custom resource you can specify the number of replicas per role group (name node, data node or journal node) but the operator will make sure that: * at least two name nodes are started * at least one journal node is started * no datanodes are started unless the number of replicas is greater than zero. The cluster can be monitored with Prometheus from inside or outside the K8S cluster. All services (with the exception of the Zookeeper daemon on the node names) run with the JMX exporter agent enabled and expose metrics on the metrics port. This port is available form the container level up to the NodePort services. The metrics endpoints are also used as liveliness probes by K8S.","title":"Implementation","component":"hdfs","version":"0.4","name":"implementation","url":"/hdfs/0.4/implementation.html","titles":[{"text":"Kubernetes objects","hash":"_kubernetes_objects","id":1},{"text":"HDFS","hash":"_hdfs","id":2},{"text":"Monitoring","hash":"_monitoring","id":3}]},"194":{"id":194,"text":"This is an operator for Kubernetes that can manage Apache HDFS clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache HDFS currently supports the following versions of HDFS: 3.2.2 3.3.1 3.3.3 docker pull docker.stackable.tech/stackable/hadoop:","title":"Stackable Operator for Apache HDFS","component":"hdfs","version":"0.4","name":"index","url":"/hdfs/0.4/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"195":{"id":195,"text":"There are two ways to run the HDFS Operator: Using Helm. Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: helm repo add stackable https://repo.stackable.tech/repository/helm-dev/ helm repo update stackable Then install the Stackable Operator for Apache Hadoop helm install hdfs-operator stackable/hdfs-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Hdfs service. You’re now ready to deploy Apache Hdfs in Kubernetes as described in Usage. For development, testing and debugging purposes it is useful to be able to deploy a locally modified operator without the need to publish a container image and/or a helm chart. Requirements: * A recent Rust toolchain to compile the sources. Version 1.58 is the latest at the time of this writing. * Docker to build the image. * Optionally a local Kubernetes cluster like kind to run the operator and the Hdfs cluster. cargo build cp target/debug/stackable-hdfs-operator . docker build -t docker.stackable.tech/stackable/hdfs-operator:0.3.0-nightly -f docker/Dockerfile.devel . rm stackable-hdfs-operator The image can then be loaded in local kind cluster like this: kind load docker-image docker.stackable.tech/stackable/hdfs-operator:0.3.0-nightly --name hdfs and the operator can be deployed by using the local Helm chart: helm install hdfs-operator deploy/helm/hdfs-operator/ Now you can proceed to install a custom Apache Hdfs cluster as described in Usage.","title":"Installation","component":"hdfs","version":"0.4","name":"installation","url":"/hdfs/0.4/installation.html","titles":[{"text":"Using Helm","hash":"_using_helm","id":1},{"text":"Build from source","hash":"_build_from_source","id":2}]},"196":{"id":196,"text":"Since Apache Hdfs is installed in high-availability mode, an Apache Zookeeper cluster is required to coordinate the active/passive namenode. Install the Stackable Zookeeper operator and an Apache Zookeeper cluster like this: helm install zookeeper-operator stackable/zookeeper-operator cat <<EOF | kubectl apply -f - apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.5.8-stackable0.7.0 servers: roleGroups: default: replicas: 3 config: {} --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk namespace: default EOF Once a Zookeeper cluster and the operator are up and running, you can create an Apache HDFS cluster like shown below. Please note that the version you need to specify is not only the version of Hadoop which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. cat <<EOF | kubectl apply -f - apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple spec: version: 3.3.3-stackable0.1.0 zookeeperConfigMapName: simple-znode dfsReplication: 3 log4j: |- # Define some default values that can be overridden by system properties hadoop.root.logger=INFO,console hadoop.log.dir=. hadoop.log.file=hadoop.log # Define the root logger to the system property \"hadoop.root.logger\". log4j.rootLogger=${hadoop.root.logger}, EventCounter # Logging Threshold log4j.threshold=ALL log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter nameNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 2 dataNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 journalNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 EOF When scaling namenodes up, make sure to increase the replica count only by one and not more nodes at once. The managed HDFS instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties can lead to faulty clusters. In general this means, do not change ports, hostnames or properties related to data dirs, high-availability or security. For a role or role group, at the same level of config, you can specify configOverrides for the hdfs-site.xml and core-site.xml. For example, if you want to set additional properties on the namenode servers, adapt the nameNodes section of the cluster resource like so: nameNodes: roleGroups: default: config: [...] configOverrides: core-site.xml: fs.trash.interval: \"5\" hdfs-site.xml: dfs.namenode.num.checkpoints.retained: \"3\" replicas: 2 Just as for the config, it is possible to specify this at role level as well: nameNodes: configOverrides: core-site.xml: fs.trash.interval: \"5\" hdfs-site.xml: dfs.namenode.num.checkpoints.retained: \"3\" roleGroups: default: config: [...] replicas: 2 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file. For a full list of configuration options we refer to the Apache Hdfs documentation for hdfs-site.xml and core-site.xml In a similar fashion, environment variables can be (over)written. For example per role group: nameNodes: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: nameNodes: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 Some environment variables will be overriden by the operator and cannot be set manually by the user. These are HADOOP_HOME, HADOOP_CONF_DIR, POD_NAME and ZOOKEEPER. You can mount volumes where data is stored by specifiying PersistentVolumeClaims for each individual role group: dataNodes: roleGroups: default: config: resources: storage: data: capacity: 128Gi In the above example, all data nodes in the default group will store data (the location of dfs.datanode.name.dir) on a 128Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: nameNodes: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each namenode container in the \"default\" group will have a maximum of 64 megabytes of memory. To be more precise, these memory limits apply to the containers running the name node daemons but not to any sidecar containers that are part of the namenod’s pod. Setting this property will automatically also set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: dataNodes: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"hdfs","version":"0.4","name":"usage","url":"/hdfs/0.4/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":2},{"text":"Configuration Properties","hash":"_configuration_properties","id":3},{"text":"Environment Variables","hash":"_environment_variables","id":4},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":5},{"text":"Memory requests","hash":"_memory_requests","id":6},{"text":"CPU requests","hash":"_cpu_requests","id":7}]},"197":{"id":197,"text":"Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hdfs-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hdfs-operator run --watch-namespace test","title":"","component":"hdfs","version":"0.5","name":"commandline_args","url":"/hdfs/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"198":{"id":198,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hdfs-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hdfs-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest","title":"Configuration","component":"hdfs","version":"0.5","name":"configuration","url":"/hdfs/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"199":{"id":199,"text":"The Stackable Operator for Apache HDFS publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache HDFS cluster. Given the following HDFS cluster: apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: {clusterName} (1) namespace: {namespace} (2) spec: namenode: roleGroups: default: (3) […​] 1 The name of the HDFS cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 A role group name of the namenode role. The resulting discovery ConfigMap is located at {namespace}/{clusterName}. The ConfigMap data values are formatted as Hadoop XML files which allows simple mounting of that ConfigMap into pods that require access to HDFS. core-site.xml Contains the fs.DefaultFS which defaults to hdfs://{clusterName}/. hdfs-site.xml Contains the dfs.namenode.* properties for rpc and http addresses for the namenodes as well as the dfs.nameservices property which defaults to hdfs://{clusterName}/.","title":"Discovery","component":"hdfs","version":"0.5","name":"discovery","url":"/hdfs/stable/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"200":{"id":200,"text":"Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest","title":"","component":"hdfs","version":"0.5","name":"env_var_args","url":"/hdfs/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"201":{"id":201,"text":"This operator can be used to set up a highly available HDFS cluster. It implements three roles of the HDFS cluster: Data Node - responsible for holding the actual data. IMPORTANT Currently the data is kept in hostPath volumes of 1GB and no configuration options are exposed to the user. Each data node has its own volume. Journal Node - responsible for keeping track of HDFS blocks and used to perform failovers in case the active name node fails. For details see: https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html Name Node - responsible for keeping track of HDFS blocks and providing access to the data. The operator creates the following K8S objects per role group defined in the custom resource. ClusterIP - used for intra-cluster communication. ConfigMap - HDFS configuration files like core-site.xml and hdfs-site.xml are defined here and mounted in the pods. StatefulSet - where the replica count of each role group is defined. By default, a cluster will have 2 name nodes, 3 journal nodes and 3 data nodes. In addition, a NodePort service is created for each pod that exposes all container ports to the outside world (from the perspective of K8S). In the custom resource you can specify the number of replicas per role group (name node, data node or journal node) but the operator will make sure that: * at least two name nodes are started * at least one journal node is started * no datanodes are started unless the number of replicas is greater than zero. The cluster can be monitored with Prometheus from inside or outside the K8S cluster. All services (with the exception of the Zookeeper daemon on the node names) run with the JMX exporter agent enabled and expose metrics on the metrics port. This port is available form the container level up to the NodePort services. The metrics endpoints are also used as liveliness probes by K8S.","title":"Implementation","component":"hdfs","version":"0.5","name":"implementation","url":"/hdfs/stable/implementation.html","titles":[{"text":"Kubernetes objects","hash":"_kubernetes_objects","id":1},{"text":"HDFS","hash":"_hdfs","id":2},{"text":"Monitoring","hash":"_monitoring","id":3}]},"202":{"id":202,"text":"This is an operator for Kubernetes that can manage Apache HDFS clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache HDFS currently supports the following versions of HDFS: 3.2.2 3.3.1 3.3.3 docker pull docker.stackable.tech/stackable/hadoop:","title":"Stackable Operator for Apache HDFS","component":"hdfs","version":"0.5","name":"index","url":"/hdfs/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"203":{"id":203,"text":"Since Apache Hdfs is installed in high-availability mode, an Apache Zookeeper cluster is required to coordinate the active/passive namenode. Install the Stackable Zookeeper operator and an Apache Zookeeper cluster like this: helm install zookeeper-operator stackable/zookeeper-operator cat <<EOF | kubectl apply -f - apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.5.8-stackable0.7.0 servers: roleGroups: default: replicas: 3 config: {} --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk namespace: default EOF Once a Zookeeper cluster and the operator are up and running, you can create an Apache HDFS cluster like shown below. Please note that the version you need to specify is not only the version of Hadoop which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. cat <<EOF | kubectl apply -f - apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple spec: version: 3.3.3-stackable0.1.0 zookeeperConfigMapName: simple-znode dfsReplication: 3 log4j: |- # Define some default values that can be overridden by system properties hadoop.root.logger=INFO,console hadoop.log.dir=. hadoop.log.file=hadoop.log # Define the root logger to the system property \"hadoop.root.logger\". log4j.rootLogger=${hadoop.root.logger}, EventCounter # Logging Threshold log4j.threshold=ALL log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter nameNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 2 dataNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 journalNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 EOF When scaling namenodes up, make sure to increase the replica count only by one and not more nodes at once. The managed HDFS instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties can lead to faulty clusters. In general this means, do not change ports, hostnames or properties related to data dirs, high-availability or security. For a role or role group, at the same level of config, you can specify configOverrides for the hdfs-site.xml and core-site.xml. For example, if you want to set additional properties on the namenode servers, adapt the nameNodes section of the cluster resource like so: nameNodes: roleGroups: default: config: [...] configOverrides: core-site.xml: fs.trash.interval: \"5\" hdfs-site.xml: dfs.namenode.num.checkpoints.retained: \"3\" replicas: 2 Just as for the config, it is possible to specify this at role level as well: nameNodes: configOverrides: core-site.xml: fs.trash.interval: \"5\" hdfs-site.xml: dfs.namenode.num.checkpoints.retained: \"3\" roleGroups: default: config: [...] replicas: 2 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file. For a full list of configuration options we refer to the Apache Hdfs documentation for hdfs-site.xml and core-site.xml In a similar fashion, environment variables can be (over)written. For example per role group: nameNodes: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: nameNodes: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 Some environment variables will be overriden by the operator and cannot be set manually by the user. These are HADOOP_HOME, HADOOP_CONF_DIR, POD_NAME and ZOOKEEPER. You can mount volumes where data is stored by specifiying PersistentVolumeClaims for each individual role group: dataNodes: roleGroups: default: config: resources: storage: data: capacity: 128Gi In the above example, all data nodes in the default group will store data (the location of dfs.datanode.name.dir) on a 128Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: nameNodes: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each namenode container in the \"default\" group will have a maximum of 64 megabytes of memory. To be more precise, these memory limits apply to the containers running the name node daemons but not to any sidecar containers that are part of the namenod’s pod. Setting this property will automatically also set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: dataNodes: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"hdfs","version":"0.5","name":"usage","url":"/hdfs/stable/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":2},{"text":"Configuration Properties","hash":"_configuration_properties","id":3},{"text":"Environment Variables","hash":"_environment_variables","id":4},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":5},{"text":"Memory requests","hash":"_memory_requests","id":6},{"text":"CPU requests","hash":"_cpu_requests","id":7}]},"204":{"id":204,"text":"Once you have followed the steps in the Installation section to install the operator and its dependencies, you will now deploy an HDFS cluster and its dependencies. Afterwards you can verify that it works by creating, verifying and deleting a test file in HDFS. To deploy a Zookeeper cluster create one file called zk.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 1 We also need to define a ZNode that will be used by the HDFS cluster to reference Zookeeper. Create another file called znode.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-hdfs-znode spec: clusterRef: name: simple-zk Apply both of these files: kubectl apply -f zk.yaml kubectl apply -f znode.yaml The state of the Zookeeper cluster can be tracked with kubectl: kubectl rollout status --watch statefulset/simple-zk-server-default An HDFS cluster has three components: the namenode, the datanode and the journalnode. Create a file named hdfs.yaml defining 2 namenodes and one datanode and journalnode each: --- apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: version: 3.3.3-stackable0.1.0 zookeeperConfigMapName: simple-hdfs-znode dfsReplication: 3 log4j: |- # Define some default values that can be overridden by system properties hadoop.root.logger=INFO,console hadoop.log.dir=. hadoop.log.file=hadoop.log # Define the root logger to the system property \"hadoop.root.logger\". log4j.rootLogger=${hadoop.root.logger}, EventCounter # Logging Threshold log4j.threshold=ALL log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter nameNodes: roleGroups: default: replicas: 2 dataNodes: roleGroups: default: replicas: 1 journalNodes: roleGroups: default: replicas: 1 Where: metadata.name contains the name of the HDFS cluster the label of the Docker image provided by Stackable must be set in spec.version Please note that the version you need to specify for spec.version is not only the version of Hadoop which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Create the actual HDFS cluster by applying the file: kubectl apply -f hdfs.yaml Track the progress with kubectl as this step may take a few minutes: kubectl rollout status --watch statefulset/simple-hdfs-datanode-default kubectl rollout status --watch statefulset/simple-hdfs-namenode-default kubectl rollout status --watch statefulset/simple-hdfs-journalnode-default To test the cluster you can create a new file, check its status and then delete it. We will execute these actions from within a helper pod. Create a file called webhdfs.yaml: --- apiVersion: apps/v1 kind: StatefulSet metadata: name: webhdfs labels: app: webhdfs spec: replicas: 1 serviceName: webhdfs-svc selector: matchLabels: app: webhdfs template: metadata: labels: app: webhdfs spec: containers: - name: webhdfs image: docker.stackable.tech/stackable/testing-tools:0.1.0-stackable0.1.0 stdin: true tty: true Apply it and monitor its progress: kubectl apply -f webhdfs.yaml kubectl rollout status --watch statefulset/webhdfs To begin with the cluster should be empty: this can be verified by listing all resources at the root directory (which should return an empty array!): kubectl exec -n default webhdfs-0 -- curl -s -XGET \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/?op=LISTSTATUS\" Creating a file in HDFS using the Webhdfs API requires a two-step PUT (the reason for having a two-step create/append is to prevent clients from sending out data before the redirect). First, create a file with some text in it called testdata.txt and copy it to the tmp directory on the helper pod: kubectl cp -n default ./testdata.txt webhdfs-0:/tmp Then use curl to issue a PUT command: kubectl exec -n default webhdfs-0 -- \\ curl -s -XPUT -T /tmp/testdata.txt \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=CREATE&noredirect=true\" This will return a location that will look something like this: http://simple-hdfs-datanode-default-0.simple-hdfs-datanode-default.default.svc.cluster.local:9864/webhdfs/v1/testdata.txt?op=CREATE&user.name=stackable&namenoderpcaddress=simple-hdfs&createflag=&createparent=true&overwrite=false You can assign this to a local variable - e.g. $location - or you can copy-and-paste it into the URL, and then issue a second PUT like this: kubectl exec -n default webhdfs-0 -- curl -s -XPUT -T /tmp/testdata.txt \"$location\" Rechecking the status again with: kubectl exec -n default webhdfs-0 -- curl -s -XGET \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/?op=LISTSTATUS\" will now display some metadata about the file that was created in the HDFS cluster: { \"FileStatuses\": { \"FileStatus\": [ { \"accessTime\": 1660821734999, \"blockSize\": 134217728, \"childrenNum\": 0, \"fileId\": 16396, \"group\": \"supergroup\", \"length\": 597, \"modificationTime\": 1660821735602, \"owner\": \"stackable\", \"pathSuffix\": \"testdata.txt\", \"permission\": \"644\", \"replication\": 3, \"storagePolicy\": 0, \"type\": \"FILE\" } ] } } To clean up, the file can be deleted like this: kubectl exec -n default webhdfs-0 -- curl -s -XDELETE \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=DELETE\" Look at the Usage page to find out more about configuring your HDFS cluster.","title":"First steps","component":"hdfs","version":"0.5","name":"first_steps","url":"/hdfs/stable/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Zookeeper","hash":"_zookeeper","id":2},{"text":"HDFS","hash":"_hdfs","id":3},{"text":"Verify that it works","hash":"_verify_that_it_works","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"205":{"id":205,"text":"This guide will get you started with HDFS using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first HDFS cluster and verifying its operation. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the HDFS cluster and verifying it works.","title":"Getting started","component":"hdfs","version":"0.5","name":"index","url":"/hdfs/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"206":{"id":206,"text":"On this page you will install the Stackable HDFS operator and its dependency, the Zookeeper operator, as well as the commons and secret operators which are required by all Stackable operators. There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all operators necessary for the HDFS cluster: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ hdfs=0.5.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing zookeeper operator [INFO ] Installing hdfs operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait hdfs-operator stackable-dev/hdfs-operator --version 0.5.0-nightly helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the HDFS cluster (as well as the CRDs for the required operators). You are now ready to deploy HDFS in Kubernetes. Set up an HDFS cluster and its dependencies and verify that it works.","title":"Installation","component":"hdfs","version":"0.5","name":"installation","url":"/hdfs/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"207":{"id":207,"text":"Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hdfs-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hdfs-operator run --watch-namespace test","title":"","component":"hdfs","version":"nightly","name":"commandline_args","url":"/hdfs/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"208":{"id":208,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hdfs-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-hdfs-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest","title":"Configuration","component":"hdfs","version":"nightly","name":"configuration","url":"/hdfs/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"209":{"id":209,"text":"The Stackable Operator for Apache HDFS publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache HDFS cluster. Given the following HDFS cluster: apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: {clusterName} (1) namespace: {namespace} (2) spec: namenode: roleGroups: default: (3) […​] 1 The name of the HDFS cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 A role group name of the namenode role. The resulting discovery ConfigMap is located at {namespace}/{clusterName}. The ConfigMap data values are formatted as Hadoop XML files which allows simple mounting of that ConfigMap into pods that require access to HDFS. core-site.xml Contains the fs.DefaultFS which defaults to hdfs://{clusterName}/. hdfs-site.xml Contains the dfs.namenode.* properties for rpc and http addresses for the namenodes as well as the dfs.nameservices property which defaults to hdfs://{clusterName}/.","title":"Discovery","component":"hdfs","version":"nightly","name":"discovery","url":"/hdfs/nightly/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"210":{"id":210,"text":"Default value: /etc/stackable/hdfs-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hdfs-operator run or via docker: docker run \\ --name hdfs-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hdfs-operator:latest","title":"","component":"hdfs","version":"nightly","name":"env_var_args","url":"/hdfs/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"211":{"id":211,"text":"This operator can be used to set up a highly available HDFS cluster. It implements three roles of the HDFS cluster: Data Node - responsible for holding the actual data. IMPORTANT Currently the data is kept in hostPath volumes of 1GB and no configuration options are exposed to the user. Each data node has its own volume. Journal Node - responsible for keeping track of HDFS blocks and used to perform failovers in case the active name node fails. For details see: https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html Name Node - responsible for keeping track of HDFS blocks and providing access to the data. The operator creates the following K8S objects per role group defined in the custom resource. ClusterIP - used for intra-cluster communication. ConfigMap - HDFS configuration files like core-site.xml and hdfs-site.xml are defined here and mounted in the pods. StatefulSet - where the replica count of each role group is defined. By default, a cluster will have 2 name nodes, 3 journal nodes and 3 data nodes. In addition, a NodePort service is created for each pod that exposes all container ports to the outside world (from the perspective of K8S). In the custom resource you can specify the number of replicas per role group (name node, data node or journal node) but the operator will make sure that: * at least two name nodes are started * at least one journal node is started * no datanodes are started unless the number of replicas is greater than zero. The cluster can be monitored with Prometheus from inside or outside the K8S cluster. All services (with the exception of the Zookeeper daemon on the node names) run with the JMX exporter agent enabled and expose metrics on the metrics port. This port is available form the container level up to the NodePort services. The metrics endpoints are also used as liveliness probes by K8S.","title":"Implementation","component":"hdfs","version":"nightly","name":"implementation","url":"/hdfs/nightly/implementation.html","titles":[{"text":"Kubernetes objects","hash":"_kubernetes_objects","id":1},{"text":"HDFS","hash":"_hdfs","id":2},{"text":"Monitoring","hash":"_monitoring","id":3}]},"212":{"id":212,"text":"This is an operator for Kubernetes that can manage Apache HDFS clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache HDFS currently supports the following versions of HDFS: 3.2.2 3.3.1 3.3.3 docker pull docker.stackable.tech/stackable/hadoop:","title":"Stackable Operator for Apache HDFS","component":"hdfs","version":"nightly","name":"index","url":"/hdfs/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"213":{"id":213,"text":"Since Apache Hdfs is installed in high-availability mode, an Apache Zookeeper cluster is required to coordinate the active/passive namenode. Install the Stackable Zookeeper operator and an Apache Zookeeper cluster like this: helm install zookeeper-operator stackable/zookeeper-operator cat <<EOF | kubectl apply -f - apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.5.8-stackable0.7.0 servers: roleGroups: default: replicas: 3 config: {} --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk namespace: default EOF Once a Zookeeper cluster and the operator are up and running, you can create an Apache HDFS cluster like shown below. Please note that the version you need to specify is not only the version of Hadoop which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. cat <<EOF | kubectl apply -f - apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple spec: version: 3.3.3-stackable0.1.0 zookeeperConfigMapName: simple-znode dfsReplication: 3 log4j: |- # Define some default values that can be overridden by system properties hadoop.root.logger=INFO,console hadoop.log.dir=. hadoop.log.file=hadoop.log # Define the root logger to the system property \"hadoop.root.logger\". log4j.rootLogger=${hadoop.root.logger}, EventCounter # Logging Threshold log4j.threshold=ALL log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter nameNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 2 dataNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 journalNodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 3 EOF When scaling namenodes up, make sure to increase the replica count only by one and not more nodes at once. The managed HDFS instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties can lead to faulty clusters. In general this means, do not change ports, hostnames or properties related to data dirs, high-availability or security. For a role or role group, at the same level of config, you can specify configOverrides for the hdfs-site.xml and core-site.xml. For example, if you want to set additional properties on the namenode servers, adapt the nameNodes section of the cluster resource like so: nameNodes: roleGroups: default: config: [...] configOverrides: core-site.xml: fs.trash.interval: \"5\" hdfs-site.xml: dfs.namenode.num.checkpoints.retained: \"3\" replicas: 2 Just as for the config, it is possible to specify this at role level as well: nameNodes: configOverrides: core-site.xml: fs.trash.interval: \"5\" hdfs-site.xml: dfs.namenode.num.checkpoints.retained: \"3\" roleGroups: default: config: [...] replicas: 2 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file. For a full list of configuration options we refer to the Apache Hdfs documentation for hdfs-site.xml and core-site.xml In a similar fashion, environment variables can be (over)written. For example per role group: nameNodes: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: nameNodes: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 Some environment variables will be overriden by the operator and cannot be set manually by the user. These are HADOOP_HOME, HADOOP_CONF_DIR, POD_NAME and ZOOKEEPER. You can mount volumes where data is stored by specifiying PersistentVolumeClaims for each individual role group: dataNodes: roleGroups: default: config: resources: storage: data: capacity: 128Gi In the above example, all data nodes in the default group will store data (the location of dfs.datanode.name.dir) on a 128Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: nameNodes: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each namenode container in the \"default\" group will have a maximum of 64 megabytes of memory. To be more precise, these memory limits apply to the containers running the name node daemons but not to any sidecar containers that are part of the namenod’s pod. Setting this property will automatically also set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: dataNodes: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"hdfs","version":"nightly","name":"usage","url":"/hdfs/nightly/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":2},{"text":"Configuration Properties","hash":"_configuration_properties","id":3},{"text":"Environment Variables","hash":"_environment_variables","id":4},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":5},{"text":"Memory requests","hash":"_memory_requests","id":6},{"text":"CPU requests","hash":"_cpu_requests","id":7}]},"214":{"id":214,"text":"Once you have followed the steps in the Installation section to install the operator and its dependencies, you will now deploy an HDFS cluster and its dependencies. Afterwards you can verify that it works by creating, verifying and deleting a test file in HDFS. To deploy a Zookeeper cluster create one file called zk.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 1 We also need to define a ZNode that will be used by the HDFS cluster to reference Zookeeper. Create another file called znode.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-hdfs-znode spec: clusterRef: name: simple-zk Apply both of these files: kubectl apply -f zk.yaml kubectl apply -f znode.yaml The state of the Zookeeper cluster can be tracked with kubectl: kubectl rollout status --watch statefulset/simple-zk-server-default An HDFS cluster has three components: the namenode, the datanode and the journalnode. Create a file named hdfs.yaml defining 2 namenodes and one datanode and journalnode each: --- apiVersion: hdfs.stackable.tech/v1alpha1 kind: HdfsCluster metadata: name: simple-hdfs spec: version: 3.3.3-stackable0.1.0 zookeeperConfigMapName: simple-hdfs-znode dfsReplication: 3 log4j: |- # Define some default values that can be overridden by system properties hadoop.root.logger=INFO,console hadoop.log.dir=. hadoop.log.file=hadoop.log # Define the root logger to the system property \"hadoop.root.logger\". log4j.rootLogger=${hadoop.root.logger}, EventCounter # Logging Threshold log4j.threshold=ALL log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n log4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter nameNodes: roleGroups: default: replicas: 2 dataNodes: roleGroups: default: replicas: 1 journalNodes: roleGroups: default: replicas: 1 Where: metadata.name contains the name of the HDFS cluster the label of the Docker image provided by Stackable must be set in spec.version Please note that the version you need to specify for spec.version is not only the version of Hadoop which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Create the actual HDFS cluster by applying the file: kubectl apply -f hdfs.yaml Track the progress with kubectl as this step may take a few minutes: kubectl rollout status --watch statefulset/simple-hdfs-datanode-default kubectl rollout status --watch statefulset/simple-hdfs-namenode-default kubectl rollout status --watch statefulset/simple-hdfs-journalnode-default To test the cluster you can create a new file, check its status and then delete it. We will execute these actions from within a helper pod. Create a file called webhdfs.yaml: --- apiVersion: apps/v1 kind: StatefulSet metadata: name: webhdfs labels: app: webhdfs spec: replicas: 1 serviceName: webhdfs-svc selector: matchLabels: app: webhdfs template: metadata: labels: app: webhdfs spec: containers: - name: webhdfs image: docker.stackable.tech/stackable/testing-tools:0.1.0-stackable0.1.0 stdin: true tty: true Apply it and monitor its progress: kubectl apply -f webhdfs.yaml kubectl rollout status --watch statefulset/webhdfs To begin with the cluster should be empty: this can be verified by listing all resources at the root directory (which should return an empty array!): kubectl exec -n default webhdfs-0 -- curl -s -XGET \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/?op=LISTSTATUS\" Creating a file in HDFS using the Webhdfs API requires a two-step PUT (the reason for having a two-step create/append is to prevent clients from sending out data before the redirect). First, create a file with some text in it called testdata.txt and copy it to the tmp directory on the helper pod: kubectl cp -n default ./testdata.txt webhdfs-0:/tmp Then use curl to issue a PUT command: kubectl exec -n default webhdfs-0 -- \\ curl -s -XPUT -T /tmp/testdata.txt \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=CREATE&noredirect=true\" This will return a location that will look something like this: http://simple-hdfs-datanode-default-0.simple-hdfs-datanode-default.default.svc.cluster.local:9864/webhdfs/v1/testdata.txt?op=CREATE&user.name=stackable&namenoderpcaddress=simple-hdfs&createflag=&createparent=true&overwrite=false You can assign this to a local variable - e.g. $location - or you can copy-and-paste it into the URL, and then issue a second PUT like this: kubectl exec -n default webhdfs-0 -- curl -s -XPUT -T /tmp/testdata.txt \"$location\" Rechecking the status again with: kubectl exec -n default webhdfs-0 -- curl -s -XGET \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/?op=LISTSTATUS\" will now display some metadata about the file that was created in the HDFS cluster: { \"FileStatuses\": { \"FileStatus\": [ { \"accessTime\": 1660821734999, \"blockSize\": 134217728, \"childrenNum\": 0, \"fileId\": 16396, \"group\": \"supergroup\", \"length\": 597, \"modificationTime\": 1660821735602, \"owner\": \"stackable\", \"pathSuffix\": \"testdata.txt\", \"permission\": \"644\", \"replication\": 3, \"storagePolicy\": 0, \"type\": \"FILE\" } ] } } To clean up, the file can be deleted like this: kubectl exec -n default webhdfs-0 -- curl -s -XDELETE \"http://simple-hdfs-namenode-default-0:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=DELETE\" Look at the Usage page to find out more about configuring your HDFS cluster.","title":"First steps","component":"hdfs","version":"nightly","name":"first_steps","url":"/hdfs/nightly/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Zookeeper","hash":"_zookeeper","id":2},{"text":"HDFS","hash":"_hdfs","id":3},{"text":"Verify that it works","hash":"_verify_that_it_works","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"215":{"id":215,"text":"This guide will get you started with HDFS using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first HDFS cluster and verifying its operation. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the HDFS cluster and verifying it works.","title":"Getting started","component":"hdfs","version":"nightly","name":"index","url":"/hdfs/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"216":{"id":216,"text":"On this page you will install the Stackable HDFS operator and its dependency, the Zookeeper operator, as well as the commons and secret operators which are required by all Stackable operators. There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all operators necessary for the HDFS cluster: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ hdfs=0.5.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing zookeeper operator [INFO ] Installing hdfs operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait hdfs-operator stackable-dev/hdfs-operator --version 0.5.0-nightly helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the HDFS cluster (as well as the CRDs for the required operators). You are now ready to deploy HDFS in Kubernetes. Set up an HDFS cluster and its dependencies and verify that it works.","title":"Installation","component":"hdfs","version":"nightly","name":"installation","url":"/hdfs/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"217":{"id":217,"text":"Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hive-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false If provided the operator will only watch for resources in the provided namespace. If not provided it will watch in all namespaces. Example: Only watch the test namespace stackable-hive-operator run --watch-namespace test","title":"","component":"hive","version":"0.6","name":"commandline_args","url":"/hive/0.6/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"218":{"id":218,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hive-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false If provided the operator will only watch for resources in the provided namespace. If not provided it will watch in all namespaces. Example: Only watch the test namespace stackable-hive-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest","title":"Configuration","component":"hive","version":"0.6","name":"configuration","url":"/hive/0.6/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"219":{"id":219,"text":"The Stackable Operator for Apache Hive publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Hive cluster. The bundle includes an Apache Thrift connection string to access the Hive Metastore service. This string may be used by other operators or tools to configure their products with access to Hive. Access is limited to services within the same Kubernetes cluster. Given the following Hive cluster: apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: {clusterName} (1) namespace: {namespace} (2) spec: metastore: roleGroups: default: (3) […​] 1 The name of the Hive cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 A role group name of the metastore role. The resulting discovery ConfigMap is {namespace}/{clusterName}. The {namespace}/{clusterName} discovery ConfigMap contains the following fields where {clusterName} represents the name, {namespace} the namespace of the cluster and {roleGroup} a role group of the metastore role: HIVE Contains the thrift protocol connection string for the Hive metastore: thrift://{clusterName}-metastore-{roleGroup}-0.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 or thrift://{clusterName}-metastore-{roleGroup}-0.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 thrift://{clusterName}-metastore-{roleGroup}-1.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 for the role group replicas greater than one (two in this case), which should be avoided since the metastore instances do not sync between each other.","title":"Discovery","component":"hive","version":"0.6","name":"discovery","url":"/hive/0.6/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"220":{"id":220,"text":"Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest","title":"","component":"hive","version":"0.6","name":"env_var_args","url":"/hive/0.6/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"221":{"id":221,"text":"This is an operator for Kubernetes that can manage Apache Hive. Currently, it only supports the Hive Metastore! This operator only works with images from the Stackable repository The Stackable Operator for Apache Hive currently supports the following versions of Hive: 2.3.9 docker pull docker.stackable.tech/stackable/hive:","title":"Stackable Operator for Apache Hive","component":"hive","version":"0.6","name":"index","url":"/hive/0.6/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"222":{"id":222,"text":"There are three ways to run the Stackable Operator for Apache Hive: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Hive helm install hive-operator stackable/hive-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Hive service. You are now ready to deploy Apache Hive in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/hive-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Hive in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f hivecluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.60 at the time of writing). cargo run crd | kubectl apply -f - cargo run run","title":"Installation","component":"hive","version":"0.6","name":"installation","url":"/hive/0.6/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"223":{"id":223,"text":"Apache Hive Metastores need a relational database to store their state. We currently support PostgreSQL and Apache Derby (embedded database, not recommended for production). Other databases might work if JDBC drivers are available. Please open an issue if you require support for another database. Hive supports creating tables in S3 compatible object stores. To use this feature you need to provide connection details for the object store. The managed Hive instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties, which are set by the operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the hive-site.xml. For example, if you want to set the datanucleus.connectionPool.maxPoolSize for the metastore to 20 adapt the metastore section of the cluster resource like so: metastore: roleGroups: default: config: [...] configOverrides: hive-site.xml: datanucleus.connectionPool.maxPoolSize: \"20\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: metastore: configOverrides: hive-site.xml: datanucleus.connectionPool.maxPoolSize: \"20\" roleGroups: default: config: [...] replicas: 1 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file. For a full list of configuration options we refer to the Hive Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: metastore: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: metastore: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 Please note that the version you need to specify is not only the version of Apache Hive which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Create a single node Apache Hive Metastore cluster using Derby: --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-derby spec: version: 2.3.9-stackable0.4.0 metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:derby:;databaseName=/tmp/metastore_db;create=true user: APP password: mine dbType: derby To create a single node Apache Hive Metastore (v2.3.9) cluster with derby and S3 access, deploy a minio (or use any available S3 bucket): helm install minio \\ minio \\ --repo https://charts.bitnami.com/bitnami \\ --set auth.rootUser=minio-access-key \\ --set auth.rootPassword=minio-secret-key In order to upload data to minio we need a port-forward to access the web ui. kubectl port-forward service/minio 9001 Then, connect to localhost:9001 and login with the user minio-access-key and password minio-secret-key. Create a bucket and upload data. Deploy the hive cluster: --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-derby spec: version: 2.3.9-stackable0.4.0 s3: inline: host: minio port: 9000 accessStyle: Path credentials: secretClass: simple-hive-s3-secret-class metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:derby:;databaseName=/stackable/metastore_db;create=true user: APP password: mine dbType: derby --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: simple-hive-s3-secret-class spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: simple-hive-s3-secret labels: secrets.stackable.tech/class: simple-hive-s3-secret-class stringData: accessKey: minio-access-key secretKey: minio-secret-key To create a single node Apache Hive Metastore using PostgreSQL, deploy a PostgreSQL instance via helm. PostgreSQL introduced a new way to encrypt its passwords in version 10. This is called scram-sha-256 and has been the default as of PostgreSQL 14. Unfortunately, Hive up until the latest 3.3.x version ships with JDBC drivers that do not support this method. You might see an error message like this: The authentication type 10 is not supported. If this is the case please either use an older PostgreSQL version or change its password_encryption setting to md5. This installs PostgreSQL in version 10 to work around the issue mentioned above: helm install hive bitnami/postgresql --version=10 \\ --set postgresqlUsername=hive \\ --set postgresqlPassword=hive \\ --set postgresqlDatabase=hive Create Hive Metastore using a PostgreSQL database apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-postgres spec: version: 2.3.9-stackable0.4.0 metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:postgresql://hive-postgresql.default.svc.cluster.local:5432/hive user: hive password: hive dbType: postgres","title":"Usage","component":"hive","version":"0.6","name":"usage","url":"/hive/0.6/usage.html","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"S3 Support","hash":"_s3_support","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Environment Variables","hash":"_environment_variables","id":6},{"text":"Examples","hash":"_examples","id":7}]},"224":{"id":224,"text":"Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hive-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false If provided the operator will only watch for resources in the provided namespace. If not provided it will watch in all namespaces. Example: Only watch the test namespace stackable-hive-operator run --watch-namespace test","title":"","component":"hive","version":"0.7","name":"commandline_args","url":"/hive/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"225":{"id":225,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hive-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false If provided the operator will only watch for resources in the provided namespace. If not provided it will watch in all namespaces. Example: Only watch the test namespace stackable-hive-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest","title":"Configuration","component":"hive","version":"0.7","name":"configuration","url":"/hive/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"226":{"id":226,"text":"The Stackable Operator for Apache Hive publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Hive cluster. The bundle includes an Apache Thrift connection string to access the Hive Metastore service. This string may be used by other operators or tools to configure their products with access to Hive. Access is limited to services within the same Kubernetes cluster. Given the following Hive cluster: apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: {clusterName} (1) namespace: {namespace} (2) spec: metastore: roleGroups: default: (3) […​] 1 The name of the Hive cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 A role group name of the metastore role. The resulting discovery ConfigMap is {namespace}/{clusterName}. The {namespace}/{clusterName} discovery ConfigMap contains the following fields where {clusterName} represents the name, {namespace} the namespace of the cluster and {roleGroup} a role group of the metastore role: HIVE Contains the thrift protocol connection string for the Hive metastore: thrift://{clusterName}-metastore-{roleGroup}-0.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 or thrift://{clusterName}-metastore-{roleGroup}-0.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 thrift://{clusterName}-metastore-{roleGroup}-1.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 for the role group replicas greater than one (two in this case), which should be avoided since the metastore instances do not sync between each other.","title":"Discovery","component":"hive","version":"0.7","name":"discovery","url":"/hive/stable/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"227":{"id":227,"text":"Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest","title":"","component":"hive","version":"0.7","name":"env_var_args","url":"/hive/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"228":{"id":228,"text":"This is an operator for Kubernetes that can manage Apache Hive. Currently, it only supports the Hive Metastore! This operator only works with images from the Stackable repository The Stackable Operator for Apache Hive currently supports the following versions of Hive: 2.3.9 3.1.3 docker pull docker.stackable.tech/stackable/hive:","title":"Stackable Operator for Apache Hive","component":"hive","version":"0.7","name":"index","url":"/hive/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"229":{"id":229,"text":"Apache Hive Metastores need a relational database to store their state. We currently support PostgreSQL and Apache Derby (embedded database, not recommended for production). Other databases might work if JDBC drivers are available. Please open an issue if you require support for another database. Hive supports creating tables in S3 compatible object stores. To use this feature you need to provide connection details for the object store. The managed Hive instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties, which are set by the operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the hive-site.xml. For example, if you want to set the datanucleus.connectionPool.maxPoolSize for the metastore to 20 adapt the metastore section of the cluster resource like so: metastore: roleGroups: default: config: [...] configOverrides: hive-site.xml: datanucleus.connectionPool.maxPoolSize: \"20\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: metastore: configOverrides: hive-site.xml: datanucleus.connectionPool.maxPoolSize: \"20\" roleGroups: default: config: [...] replicas: 1 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file. For a full list of configuration options we refer to the Hive Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: metastore: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: metastore: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 Please note that the version you need to specify is not only the version of Apache Hive which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Create a single node Apache Hive Metastore cluster using Derby: --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-derby spec: version: 3.1.3-stackable0.1.0 metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:derby:;databaseName=/tmp/metastore_db;create=true user: APP password: mine dbType: derby To create a single node Apache Hive Metastore (v2.3.9) cluster with derby and S3 access, deploy a minio (or use any available S3 bucket): helm install minio \\ minio \\ --repo https://charts.bitnami.com/bitnami \\ --set auth.rootUser=minio-access-key \\ --set auth.rootPassword=minio-secret-key In order to upload data to minio we need a port-forward to access the web ui. kubectl port-forward service/minio 9001 Then, connect to localhost:9001 and login with the user minio-access-key and password minio-secret-key. Create a bucket and upload data. Deploy the hive cluster: --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-derby spec: version: 3.1.3-stackable0.1.0 s3: inline: host: minio port: 9000 accessStyle: Path credentials: secretClass: simple-hive-s3-secret-class metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:derby:;databaseName=/stackable/metastore_db;create=true user: APP password: mine dbType: derby --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: simple-hive-s3-secret-class spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: simple-hive-s3-secret labels: secrets.stackable.tech/class: simple-hive-s3-secret-class stringData: accessKey: minio-access-key secretKey: minio-secret-key To create a single node Apache Hive Metastore using PostgreSQL, deploy a PostgreSQL instance via helm. PostgreSQL introduced a new way to encrypt its passwords in version 10. This is called scram-sha-256 and has been the default as of PostgreSQL 14. Unfortunately, Hive up until the latest 3.3.x version ships with JDBC drivers that do not support this method. You might see an error message like this: The authentication type 10 is not supported. If this is the case please either use an older PostgreSQL version or change its password_encryption setting to md5. This installs PostgreSQL in version 10 to work around the issue mentioned above: helm install hive bitnami/postgresql --version=10 \\ --set postgresqlUsername=hive \\ --set postgresqlPassword=hive \\ --set postgresqlDatabase=hive Create Hive Metastore using a PostgreSQL database apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-postgres spec: version: 3.1.3-stackable0.1.0 metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:postgresql://hive-postgresql.default.svc.cluster.local:5432/hive user: hive password: hive dbType: postgres","title":"Usage","component":"hive","version":"0.7","name":"usage","url":"/hive/stable/usage.html","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"S3 Support","hash":"_s3_support","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Environment Variables","hash":"_environment_variables","id":6},{"text":"Examples","hash":"_examples","id":7}]},"230":{"id":230,"text":"After going through the Installation section and having installed all the operators, you will now deploy a Hive metastore cluster and it’s dependencies. Afterwards you can verify that it works. Several requirements should have already been installed in the Installation guide: Commons Operator Secret Operator Hive Operator PostgreSQL MinIO for S3 In order to connect Hive to MinIO we need to create several files (or concat in one file). An S3Connection to connect to MinIO (hive-minio-s3-connection.yaml) --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: minio spec: host: minio port: 9000 accessStyle: Path credentials: secretClass: hive-s3-secret-class Credentials for the S3Connection to log into MinIO (hive-minio-credentials.yaml) --- apiVersion: v1 kind: Secret metadata: name: hive-s3-secret labels: secrets.stackable.tech/class: hive-s3-secret-class stringData: accessKey: hive secretKey: hivehive A SecretClass for the credentials to the Minio. The credentials were defined in the installation of Minio (hive-minio-credentials-secret-class.yaml) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: hive-s3-secret-class spec: backend: k8sSearch: searchNamespace: pod: {} And lastly the actual Apache Hive cluster definition (hive-postgres-s3.yaml). Note how it references the minio S3 object --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: hive-postgres-s3 spec: version: 3.1.3-stackable0.1.0 s3: reference: minio metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:postgresql://postgresql:5432/hive user: hive password: hive dbType: postgres Once the files are created apply them to the cluster: kubectl apply -f hive-minio-credentials.yaml kubectl apply -f hive-minio-credentials-secret-class.yaml kubectl apply -f hive-minio-s3-connection.yaml kubectl apply -f hive-postgres-s3.yaml Make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE hive-postgres-s3-metastore-default 1/1 48s For further testing we recommend to use e.g. the python hive-metastore-client in order to e.g. create tables or connect a product like Trino via the Stackable Trino Operator. Have a look at the Usage page to find out more about the features of the Operator.","title":"First steps","component":"hive","version":"0.7","name":"first_steps","url":"/hive/stable/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"S3Connection","hash":"_s3connection","id":2},{"text":"Verify that it works","hash":"_verify_that_it_works","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"231":{"id":231,"text":"This guide will get you started with Apache Hive using the Stackable Operator. It will guide you through the installation of the operator, its dependencies and setting up your first Hive metastore instance. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the operators. Setting up the Hive metastore instance with PostgreSQL and Minio.","title":"Getting started","component":"hive","version":"0.7","name":"index","url":"/hive/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"232":{"id":232,"text":"On this page you will install the Stackable Operator for Apache Hive and all required dependencies. For the installation of the dependencies and operators you can use Helm or stackablectl. The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. First you need to install MinIO and PostgreSQL instances for the Hive metastore. There are 2 ways to install the dependencies: Using stackablectl Using Helm In order to install MinIO and PostgreSQL, you can use the Stacks feature of stackablectl. This is for demonstration purposes, a simpler method via Helm is shown below. stackablectl \\ --additional-stacks-file stackablectl-postgres-minio-stack.yaml \\ --additional-releases-file release.yaml \\ stack install minio-postgres For this to work you need to create two yaml files. The stackablectl-hive-postgres-s3-stack.yaml: --- stacks: minio-postgres: stackableRelease: empty description: Stack containing MinIO and PostgreSQL labels: - minio - postgresql manifests: - helmChart: releaseName: minio name: minio repo: name: minio url: https://charts.min.io/ version: 4.0.2 options: rootUser: root rootPassword: rootroot mode: standalone users: - accessKey: hive secretKey: hivehive policy: readwrite buckets: - name: hive policy: public resources: requests: memory: 2Gi service: type: NodePort nodePort: null consoleService: type: NodePort nodePort: null - helmChart: releaseName: postgresql name: postgresql repo: name: bitnami url: https://charts.bitnami.com/bitnami/ version: 10.16.2 options: # Old version (10) of helm-charts has old way of setting credentials postgresqlUsername: hive postgresqlPassword: hive postgresqlDatabase: hive The release.yaml: --- releases: empty: releaseDate: 2022-08-12 description: Empty release for testing / doc purposes products: {} Consult the Quickstart to learn more about how to use stackablectl. In order to install the MinIO and PostgreSQL dependencies via Helm, you have to deploy two charts. helm install minio \\ --namespace default \\ --version 4.0.2 \\ --set mode=standalone \\ --set replicas=1 \\ --set persistence.enabled=false \\ --set buckets[0].name=hive,buckets[0].policy=none \\ --set users[0].accessKey=hive,users[0].secretKey=hivehive,users[0].policy=readwrite \\ --set resources.requests.memory=1Gi \\ --set service.type=NodePort,service.nodePort=null \\ --set consoleService.type=NodePort,consoleService.nodePort=null \\ --repo https://charts.min.io/ minio helm install postgresql \\ --version=10 \\ --namespace default \\ --set postgresqlUsername=hive \\ --set postgresqlPassword=hive \\ --set postgresqlDatabase=hive \\ --repo https://charts.bitnami.com/bitnami postgresql After the dependencies are deployed, you can start to install the operators. There are 2 ways to run Stackable Operators: Using stackablectl Using Helm Run the following command to install all operators necessary for Apache Hive: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ hive=0.7.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing hive operator in version 0.7.0-nightly Run the following commands Helm to install the operators via Helm Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait hive-operator stackable-dev/hive-operator --version 0.7.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Apache Hive service (as well as the CRDs for the required operators). You are now ready to deploy the Apache Hive metastore in Kubernetes. Set up an Apache Hive cluster","title":"Installation","component":"hive","version":"0.7","name":"installation","url":"/hive/stable/getting_started/installation.html","titles":[{"text":"Dependencies","hash":"_dependencies","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"Minio","hash":"_minio","id":4},{"text":"PostgresSQL","hash":"_postgressql","id":5},{"text":"Stackable Operators","hash":"_stackable_operators","id":6},{"text":"stackablectl","hash":"_stackablectl_2","id":7},{"text":"Helm","hash":"_helm_2","id":8},{"text":"What’s next","hash":"_whats_next","id":9}]},"233":{"id":233,"text":"Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hive-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false If provided the operator will only watch for resources in the provided namespace. If not provided it will watch in all namespaces. Example: Only watch the test namespace stackable-hive-operator run --watch-namespace test","title":"","component":"hive","version":"nightly","name":"commandline_args","url":"/hive/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"234":{"id":234,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-hive-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false If provided the operator will only watch for resources in the provided namespace. If not provided it will watch in all namespaces. Example: Only watch the test namespace stackable-hive-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest","title":"Configuration","component":"hive","version":"nightly","name":"configuration","url":"/hive/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"235":{"id":235,"text":"The Stackable Operator for Apache Hive publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Hive cluster. The bundle includes an Apache Thrift connection string to access the Hive Metastore service. This string may be used by other operators or tools to configure their products with access to Hive. Access is limited to services within the same Kubernetes cluster. Given the following Hive cluster: apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: {clusterName} (1) namespace: {namespace} (2) spec: metastore: roleGroups: default: (3) […​] 1 The name of the Hive cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. 3 A role group name of the metastore role. The resulting discovery ConfigMap is {namespace}/{clusterName}. The {namespace}/{clusterName} discovery ConfigMap contains the following fields where {clusterName} represents the name, {namespace} the namespace of the cluster and {roleGroup} a role group of the metastore role: HIVE Contains the thrift protocol connection string for the Hive metastore: thrift://{clusterName}-metastore-{roleGroup}-0.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 or thrift://{clusterName}-metastore-{roleGroup}-0.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 thrift://{clusterName}-metastore-{roleGroup}-1.{clusterName}-metastore-{roleGroup}.{namespace}.svc.cluster.local:9083 for the role group replicas greater than one (two in this case), which should be avoided since the metastore instances do not sync between each other.","title":"Discovery","component":"hive","version":"nightly","name":"discovery","url":"/hive/nightly/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"236":{"id":236,"text":"Default value: /etc/stackable/hive-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-hive-operator run or via docker: docker run \\ --name hive-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/hive-operator:latest","title":"","component":"hive","version":"nightly","name":"env_var_args","url":"/hive/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"237":{"id":237,"text":"This is an operator for Kubernetes that can manage Apache Hive. Currently, it only supports the Hive Metastore! This operator only works with images from the Stackable repository The Stackable Operator for Apache Hive currently supports the following versions of Hive: 2.3.9 3.1.3 docker pull docker.stackable.tech/stackable/hive:","title":"Stackable Operator for Apache Hive","component":"hive","version":"nightly","name":"index","url":"/hive/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"238":{"id":238,"text":"Apache Hive Metastores need a relational database to store their state. We currently support PostgreSQL and Apache Derby (embedded database, not recommended for production). Other databases might work if JDBC drivers are available. Please open an issue if you require support for another database. Hive supports creating tables in S3 compatible object stores. To use this feature you need to provide connection details for the object store. The managed Hive instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties, which are set by the operator (such as the HTTP port) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the hive-site.xml. For example, if you want to set the datanucleus.connectionPool.maxPoolSize for the metastore to 20 adapt the metastore section of the cluster resource like so: metastore: roleGroups: default: config: [...] configOverrides: hive-site.xml: datanucleus.connectionPool.maxPoolSize: \"20\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: metastore: configOverrides: hive-site.xml: datanucleus.connectionPool.maxPoolSize: \"20\" roleGroups: default: config: [...] replicas: 1 All override property values must be strings. The properties will be formatted and escaped correctly into the XML file. For a full list of configuration options we refer to the Hive Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: metastore: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: metastore: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 Please note that the version you need to specify is not only the version of Apache Hive which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. Create a single node Apache Hive Metastore cluster using Derby: --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-derby spec: version: 3.1.3-stackable0.1.0 metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:derby:;databaseName=/tmp/metastore_db;create=true user: APP password: mine dbType: derby To create a single node Apache Hive Metastore (v2.3.9) cluster with derby and S3 access, deploy a minio (or use any available S3 bucket): helm install minio \\ minio \\ --repo https://charts.bitnami.com/bitnami \\ --set auth.rootUser=minio-access-key \\ --set auth.rootPassword=minio-secret-key In order to upload data to minio we need a port-forward to access the web ui. kubectl port-forward service/minio 9001 Then, connect to localhost:9001 and login with the user minio-access-key and password minio-secret-key. Create a bucket and upload data. Deploy the hive cluster: --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-derby spec: version: 3.1.3-stackable0.1.0 s3: inline: host: minio port: 9000 accessStyle: Path credentials: secretClass: simple-hive-s3-secret-class metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:derby:;databaseName=/stackable/metastore_db;create=true user: APP password: mine dbType: derby --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: simple-hive-s3-secret-class spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: simple-hive-s3-secret labels: secrets.stackable.tech/class: simple-hive-s3-secret-class stringData: accessKey: minio-access-key secretKey: minio-secret-key To create a single node Apache Hive Metastore using PostgreSQL, deploy a PostgreSQL instance via helm. PostgreSQL introduced a new way to encrypt its passwords in version 10. This is called scram-sha-256 and has been the default as of PostgreSQL 14. Unfortunately, Hive up until the latest 3.3.x version ships with JDBC drivers that do not support this method. You might see an error message like this: The authentication type 10 is not supported. If this is the case please either use an older PostgreSQL version or change its password_encryption setting to md5. This installs PostgreSQL in version 10 to work around the issue mentioned above: helm install hive bitnami/postgresql --version=10 \\ --set postgresqlUsername=hive \\ --set postgresqlPassword=hive \\ --set postgresqlDatabase=hive Create Hive Metastore using a PostgreSQL database apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: simple-hive-postgres spec: version: 3.1.3-stackable0.1.0 metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:postgresql://hive-postgresql.default.svc.cluster.local:5432/hive user: hive password: hive dbType: postgres","title":"Usage","component":"hive","version":"nightly","name":"usage","url":"/hive/nightly/usage.html","titles":[{"text":"Requirements","hash":"_requirements","id":1},{"text":"S3 Support","hash":"_s3_support","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Environment Variables","hash":"_environment_variables","id":6},{"text":"Examples","hash":"_examples","id":7}]},"239":{"id":239,"text":"After going through the Installation section and having installed all the operators, you will now deploy a Hive metastore cluster and it’s dependencies. Afterwards you can verify that it works. Several requirements should have already been installed in the Installation guide: Commons Operator Secret Operator Hive Operator PostgreSQL MinIO for S3 In order to connect Hive to MinIO we need to create several files (or concat in one file). An S3Connection to connect to MinIO (hive-minio-s3-connection.yaml) --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: minio spec: host: minio port: 9000 accessStyle: Path credentials: secretClass: hive-s3-secret-class Credentials for the S3Connection to log into MinIO (hive-minio-credentials.yaml) --- apiVersion: v1 kind: Secret metadata: name: hive-s3-secret labels: secrets.stackable.tech/class: hive-s3-secret-class stringData: accessKey: hive secretKey: hivehive A SecretClass for the credentials to the Minio. The credentials were defined in the installation of Minio (hive-minio-credentials-secret-class.yaml) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: hive-s3-secret-class spec: backend: k8sSearch: searchNamespace: pod: {} And lastly the actual Apache Hive cluster definition (hive-postgres-s3.yaml). Note how it references the minio S3 object --- apiVersion: hive.stackable.tech/v1alpha1 kind: HiveCluster metadata: name: hive-postgres-s3 spec: version: 3.1.3-stackable0.1.0 s3: reference: minio metastore: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: database: connString: jdbc:postgresql://postgresql:5432/hive user: hive password: hive dbType: postgres Once the files are created apply them to the cluster: kubectl apply -f hive-minio-credentials.yaml kubectl apply -f hive-minio-credentials-secret-class.yaml kubectl apply -f hive-minio-s3-connection.yaml kubectl apply -f hive-postgres-s3.yaml Make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE hive-postgres-s3-metastore-default 1/1 48s For further testing we recommend to use e.g. the python hive-metastore-client in order to e.g. create tables or connect a product like Trino via the Stackable Trino Operator. Have a look at the Usage page to find out more about the features of the Operator.","title":"First steps","component":"hive","version":"nightly","name":"first_steps","url":"/hive/nightly/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"S3Connection","hash":"_s3connection","id":2},{"text":"Verify that it works","hash":"_verify_that_it_works","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"240":{"id":240,"text":"This guide will get you started with Apache Hive using the Stackable Operator. It will guide you through the installation of the operator, its dependencies and setting up your first Hive metastore instance. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the operators. Setting up the Hive metastore instance with PostgreSQL and Minio.","title":"Getting started","component":"hive","version":"nightly","name":"index","url":"/hive/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"241":{"id":241,"text":"On this page you will install the Stackable Operator for Apache Hive and all required dependencies. For the installation of the dependencies and operators you can use Helm or stackablectl. The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. First you need to install MinIO and PostgreSQL instances for the Hive metastore. There are 2 ways to install the dependencies: Using stackablectl Using Helm In order to install MinIO and PostgreSQL, you can use the Stacks feature of stackablectl. This is for demonstration purposes, a simpler method via Helm is shown below. stackablectl \\ --additional-stacks-file stackablectl-postgres-minio-stack.yaml \\ --additional-releases-file release.yaml \\ stack install minio-postgres For this to work you need to create two yaml files. The stackablectl-hive-postgres-s3-stack.yaml: --- stacks: minio-postgres: stackableRelease: empty description: Stack containing MinIO and PostgreSQL labels: - minio - postgresql manifests: - helmChart: releaseName: minio name: minio repo: name: minio url: https://charts.min.io/ version: 4.0.2 options: rootUser: root rootPassword: rootroot mode: standalone users: - accessKey: hive secretKey: hivehive policy: readwrite buckets: - name: hive policy: public resources: requests: memory: 2Gi service: type: NodePort nodePort: null consoleService: type: NodePort nodePort: null - helmChart: releaseName: postgresql name: postgresql repo: name: bitnami url: https://charts.bitnami.com/bitnami/ version: 10.16.2 options: # Old version (10) of helm-charts has old way of setting credentials postgresqlUsername: hive postgresqlPassword: hive postgresqlDatabase: hive The release.yaml: --- releases: empty: releaseDate: 2022-08-12 description: Empty release for testing / doc purposes products: {} Consult the Quickstart to learn more about how to use stackablectl. In order to install the MinIO and PostgreSQL dependencies via Helm, you have to deploy two charts. helm install minio \\ --namespace default \\ --version 4.0.2 \\ --set mode=standalone \\ --set replicas=1 \\ --set persistence.enabled=false \\ --set buckets[0].name=hive,buckets[0].policy=none \\ --set users[0].accessKey=hive,users[0].secretKey=hivehive,users[0].policy=readwrite \\ --set resources.requests.memory=1Gi \\ --set service.type=NodePort,service.nodePort=null \\ --set consoleService.type=NodePort,consoleService.nodePort=null \\ --repo https://charts.min.io/ minio helm install postgresql \\ --version=10 \\ --namespace default \\ --set postgresqlUsername=hive \\ --set postgresqlPassword=hive \\ --set postgresqlDatabase=hive \\ --repo https://charts.bitnami.com/bitnami postgresql After the dependencies are deployed, you can start to install the operators. There are 2 ways to run Stackable Operators: Using stackablectl Using Helm Run the following command to install all operators necessary for Apache Hive: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ hive=0.7.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing hive operator in version 0.7.0-nightly Run the following commands Helm to install the operators via Helm Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait hive-operator stackable-dev/hive-operator --version 0.7.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Apache Hive service (as well as the CRDs for the required operators). You are now ready to deploy the Apache Hive metastore in Kubernetes. Set up an Apache Hive cluster","title":"Installation","component":"hive","version":"nightly","name":"installation","url":"/hive/nightly/getting_started/installation.html","titles":[{"text":"Dependencies","hash":"_dependencies","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"Minio","hash":"_minio","id":4},{"text":"PostgresSQL","hash":"_postgressql","id":5},{"text":"Stackable Operators","hash":"_stackable_operators","id":6},{"text":"stackablectl","hash":"_stackablectl_2","id":7},{"text":"Helm","hash":"_helm_2","id":8},{"text":"What’s next","hash":"_whats_next","id":9}]},"242":{"id":242,"text":"Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-kafka-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-kafka-operator run --watch-namespace test","title":"","component":"kafka","version":"0.6","name":"commandline_args","url":"/kafka/0.6/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"243":{"id":243,"text":"The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group, role group or role specific configuration like port definitions etc. apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 There are three levels of configuration: Common shared options Contains configuration that is shared within the whole cluster ensemble. E.g., version, image, encryption or logging. Role options This configuration is shared for all roles of a certain type (in this operator, only the Broker role). RoleGroup options Options provided in the role group apply to each created \"pod\". Name Type Description Related Kafka properties version string The Kafka version used in the format: x.y.z-stackableX.Y.Z zookeeperConfigMapName string A reference to a ConfigMap containing a connection string for connecting to a ZooKeeper cluster opa struct An OPA configuration for Kafka, consisting of an OPA reference (namespace, name) and some authorizer properties We pool Role and RoleGroup options, since they are the same for Role and RoleGroup. Name Type Description Related Kafka properties Location","title":"","component":"kafka","version":"0.6","name":"config_properties","url":"/kafka/0.6/config_properties.html","titles":[{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":1},{"text":"Structure","hash":"_structure","id":2},{"text":"Common shared options","hash":"_common_shared_options","id":3},{"text":"Role & RoleGroup options","hash":"_role_rolegroup_options","id":4},{"text":"Broker","hash":"_broker","id":5}]},"244":{"id":244,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-kafka-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-kafka-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group, role group or role specific configuration like port definitions etc. apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 There are three levels of configuration: Common shared options Contains configuration that is shared within the whole cluster ensemble. E.g., version, image, encryption or logging. Role options This configuration is shared for all roles of a certain type (in this operator, only the Broker role). RoleGroup options Options provided in the role group apply to each created \"pod\". Name Type Description Related Kafka properties version string The Kafka version used in the format: x.y.z-stackableX.Y.Z zookeeperConfigMapName string A reference to a ConfigMap containing a connection string for connecting to a ZooKeeper cluster opa struct An OPA configuration for Kafka, consisting of an OPA reference (namespace, name) and some authorizer properties We pool Role and RoleGroup options, since they are the same for Role and RoleGroup. Name Type Description Related Kafka properties Location","title":"Configuration","component":"kafka","version":"0.6","name":"configuration","url":"/kafka/0.6/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Structure","hash":"_structure","id":8},{"text":"Common shared options","hash":"_common_shared_options","id":9},{"text":"Role & RoleGroup options","hash":"_role_rolegroup_options","id":10},{"text":"Broker","hash":"_broker","id":11}]},"245":{"id":245,"text":"Kafka currently requires ZooKeeper for coordination purposes. This will change in the future. Which means a reference to an existing ZooKeeper ensemble must be provided.","title":"Dependencies","component":"kafka","version":"0.6","name":"dependencies","url":"/kafka/0.6/dependencies.html","titles":[{"text":"ZooKeeper","hash":"_zookeeper","id":1}]},"246":{"id":246,"text":"The Stackable Operator for Apache Kafka publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Kafka cluster. The bundle includes a thrift connection string to access the Kafka broker service. This string may be used by other operators or tools to configure their products with access to Kafka. This is limited to internal cluster access. Given the following Kafka cluster: apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka (1) namespace: stackable (2) spec: […​] 1 The name of the Kafka cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-kafka. The stackable/simple-kafka discovery ConfigMap contains the following fields where simple-kafka represents the name and stackable the namespace of the cluster: KAFKA Contains the thrift protocol connection string for the Kafka cluster: simple-kafka.stackable.svc.cluster.local:9092","title":"Discovery","component":"kafka","version":"0.6","name":"discovery","url":"/kafka/0.6/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"247":{"id":247,"text":"Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest","title":"","component":"kafka","version":"0.6","name":"env_var_args","url":"/kafka/0.6/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"248":{"id":248,"text":"This is an operator for Kubernetes that can manage Apache Kafka clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Kafka currently supports the following versions of Kafka: 2.7.1 2.8.1 3.1.0 3.2.0 docker pull docker.stackable.tech/stackable/kafka:","title":"Stackable Operator for Apache Kafka","component":"kafka","version":"0.6","name":"index","url":"/kafka/0.6/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"249":{"id":249,"text":"There are three ways to run the Kafka Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operator for Apache Kafka $ helm install kafka-operator stackable/kafka-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Kafka service. You’re now ready to deploy Apache Kafka in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/kafka-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Kafka in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ sudo kubectl apply -f kafkacluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.56 at the time of writing). cargo build","title":"Installation","component":"kafka","version":"0.6","name":"installation","url":"/kafka/0.6/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"250":{"id":250,"text":"After installation, the CRD for this operator must be created: kubectl apply -f /etc/stackable/kafka-operator/crd/kafkacluster.crd.yaml To create an Apache Kafka (v3.2.0) cluster named simple-kafka assuming that you already have a Zookeeper cluster named simple-zk: cat <<EOF | kubectl apply -f - apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-kafka-znode spec: clusterRef: name: simple-zk namespace: default --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 EOF If you wish to include integration with Open Policy Agent and already have an OPA cluster, then you can include an opa field pointing to the OPA cluster discovery ConfigMap and the required package. The package is optional and will default to the metadata.name field: cat <<EOF | kubectl apply -f - apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode opa: configMapName: simple-opa package: kafka/authz brokers: roleGroups: default: replicas: 1 EOF You can change some opa cache properties by overriding: cat <<EOF | kubectl apply -f - apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode opa: configMapName: simple-opa package: kafka/authz brokers: configOverrides: server.properties: opa.authorizer.cache.initial.capacity: \"100\" opa.authorizer.cache.maximum.size: \"100\" opa.authorizer.cache.expire.after.seconds: \"10\" roleGroups: default: replicas: 1 EOF A full list of settings and their respective defaults can be found here. The managed Kafka instances are automatically configured to export Prometheus metrics. See Monitoring for more details. Per default, the log4j.properties from the kafka package is used. However, you can provide your own log4j.properties via the custom resource: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode log4j: |- log4j.rootLogger=INFO, stdout, kafkaAppender log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n brokers: roleGroups: default: replicas: 3 The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the ports) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the server.properties. For example, if you want to set the auto.create.topics.enable to disable automatic topic creation, it can be configured in the KafkaCluster resource like so: brokers: roleGroups: default: configOverrides: server.properties: auto.create.topics.enable: \"false\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: brokers: configOverrides: server.properties: auto.create.topics.enable: \"false\" roleGroups: default: replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Apache Kafka Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: servers: roleGroups: default: envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: replicas: 1 You can mount volumes where data is stored by specifying PersistentVolumeClaims for each individual role group: brokers: roleGroups: default: config: resources: storage: data: capacity: 2Gi In the above example, all Kafka brokers in the default group will store data (the location of the property log.dirs) on a 2Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: brokers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each Kafka container in the \"default\" group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the containers running the Kafka daemons but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: brokers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"kafka","version":"0.6","name":"usage","url":"/kafka/0.6/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Provide log4j.properties","hash":"_provide_log4j_properties","id":2},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":3},{"text":"Configuration Properties","hash":"_configuration_properties","id":4},{"text":"Environment Variables","hash":"_environment_variables","id":5},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":6},{"text":"Memory requests","hash":"_memory_requests","id":7},{"text":"CPU requests","hash":"_cpu_requests","id":8}]},"251":{"id":251,"text":"Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-kafka-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-kafka-operator run --watch-namespace test","title":"","component":"kafka","version":"0.7","name":"commandline_args","url":"/kafka/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"252":{"id":252,"text":"The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group, role group or role specific configuration like port definitions etc. apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 There are three levels of configuration: Common shared options Contains configuration that is shared within the whole cluster ensemble. E.g., version, image, encryption or logging. Role options This configuration is shared for all roles of a certain type (in this operator, only the Broker role). RoleGroup options Options provided in the role group apply to each created \"pod\". Name Type Description Related Kafka properties version string The Kafka version used in the format: x.y.z-stackableX.Y.Z zookeeperConfigMapName string A reference to a ConfigMap containing a connection string for connecting to a ZooKeeper cluster opa struct An OPA configuration for Kafka, consisting of an OPA reference (namespace, name) and some authorizer properties We pool Role and RoleGroup options, since they are the same for Role and RoleGroup. Name Type Description Related Kafka properties Location","title":"","component":"kafka","version":"0.7","name":"config_properties","url":"/kafka/stable/config_properties.html","titles":[{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":1},{"text":"Structure","hash":"_structure","id":2},{"text":"Common shared options","hash":"_common_shared_options","id":3},{"text":"Role & RoleGroup options","hash":"_role_rolegroup_options","id":4},{"text":"Broker","hash":"_broker","id":5}]},"253":{"id":253,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-kafka-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-kafka-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group, role group or role specific configuration like port definitions etc. apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 There are three levels of configuration: Common shared options Contains configuration that is shared within the whole cluster ensemble. E.g., version, image, encryption or logging. Role options This configuration is shared for all roles of a certain type (in this operator, only the Broker role). RoleGroup options Options provided in the role group apply to each created \"pod\". Name Type Description Related Kafka properties version string The Kafka version used in the format: x.y.z-stackableX.Y.Z zookeeperConfigMapName string A reference to a ConfigMap containing a connection string for connecting to a ZooKeeper cluster opa struct An OPA configuration for Kafka, consisting of an OPA reference (namespace, name) and some authorizer properties We pool Role and RoleGroup options, since they are the same for Role and RoleGroup. Name Type Description Related Kafka properties Location","title":"Configuration","component":"kafka","version":"0.7","name":"configuration","url":"/kafka/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Structure","hash":"_structure","id":8},{"text":"Common shared options","hash":"_common_shared_options","id":9},{"text":"Role & RoleGroup options","hash":"_role_rolegroup_options","id":10},{"text":"Broker","hash":"_broker","id":11}]},"254":{"id":254,"text":"Kafka currently requires ZooKeeper for coordination purposes. This will change in the future. Which means a reference to an existing ZooKeeper ensemble must be provided.","title":"Dependencies","component":"kafka","version":"0.7","name":"dependencies","url":"/kafka/stable/dependencies.html","titles":[{"text":"ZooKeeper","hash":"_zookeeper","id":1}]},"255":{"id":255,"text":"The Stackable Operator for Apache Kafka publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Kafka cluster. The bundle includes a thrift connection string to access the Kafka broker service. This string may be used by other operators or tools to configure their products with access to Kafka. This is limited to internal cluster access. Given the following Kafka cluster: apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka (1) namespace: stackable (2) spec: […​] 1 The name of the Kafka cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-kafka. The stackable/simple-kafka discovery ConfigMap contains the following fields where simple-kafka represents the name and stackable the namespace of the cluster: KAFKA Contains the thrift protocol connection string for the Kafka cluster: simple-kafka.stackable.svc.cluster.local:9092","title":"Discovery","component":"kafka","version":"0.7","name":"discovery","url":"/kafka/stable/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"256":{"id":256,"text":"Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest","title":"","component":"kafka","version":"0.7","name":"env_var_args","url":"/kafka/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"257":{"id":257,"text":"This is an operator for Kubernetes that can manage Apache Kafka clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Kafka currently supports the following versions of Kafka: 2.7.1 2.8.1 3.1.0 3.2.0 docker pull docker.stackable.tech/stackable/kafka:","title":"Stackable Operator for Apache Kafka","component":"kafka","version":"0.7","name":"index","url":"/kafka/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"258":{"id":258,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f /etc/stackable/kafka-operator/crd/kafkacluster.crd.yaml To create an Apache Kafka (v3.2.0) cluster named simple-kafka assuming that you already have a Zookeeper cluster named simple-zk: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-kafka-znode spec: clusterRef: name: simple-zk namespace: default --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 If you wish to include integration with Open Policy Agent and already have an OPA cluster, then you can include an opa field pointing to the OPA cluster discovery ConfigMap and the required package. The package is optional and will default to the metadata.name field: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode opa: configMapName: simple-opa package: kafka brokers: roleGroups: default: replicas: 1 You can change some opa cache properties by overriding: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode opa: configMapName: simple-opa package: kafka brokers: configOverrides: server.properties: opa.authorizer.cache.initial.capacity: \"100\" opa.authorizer.cache.maximum.size: \"100\" opa.authorizer.cache.expire.after.seconds: \"10\" roleGroups: default: replicas: 1 A full list of settings and their respective defaults can be found here. The managed Kafka instances are automatically configured to export Prometheus metrics. See Monitoring for more details. Per default, the log4j.properties from the kafka package is used. However, you can provide your own log4j.properties via the custom resource: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode log4j: |- log4j.rootLogger=INFO, stdout, kafkaAppender log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n brokers: roleGroups: default: replicas: 3 The internal and client communication can be encrypted TLS. This requires the Secret Operator to be present in order to provide certificates. The utilized certificates can be changed in a top-level config. --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode config: tls: secretClass: tls (1) internalTls: secretClass: kafka-internal-tls (2) brokers: roleGroups: default: replicas: 3 1 The tls.secretClass refers to the client-to-server encryption. Defaults to the tls secret. It can be deactivated by setting config.tls to null. 2 The internalTls.secretClass refers to the broker-to-broker internal encryption. This must be explicitly set or defaults to tls. Can be disabled by setting config.internalTls to null. The tls secret is deployed from the Secret Operator and looks like this: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true You can create your own secrets and reference them e.g. in the tls.secretClass or internalTls.secretClass to use different certificates. The internal or broker-to-broker communication is authenticated via TLS. In order to enforce TLS authentication for client-to-server communication, you can set an AuthenticationClass reference in the custom resource provided by the Commons Operator. --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: kafka-client-tls (2) spec: provider: tls: clientCertSecretClass: kafka-client-auth-secret (3) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: kafka-client-auth-secret (4) spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-kafka-client-ca namespace: default autoGenerate: true --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode config: tls: secretClass: tls clientAuthentication: authenticationClass: kafka-client-tls (1) brokers: roleGroups: default: replicas: 3 1 The config.clientAuthentication.authenticationClass can be set to use TLS for authentication. This is optional. 2 The referenced AuthenticationClass that references a SecretClass to provide certificates. 3 The reference to a SecretClass. 4 The SecretClass that is referenced by the AuthenticationClass in order to provide certificates. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the ports) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the server.properties. For example, if you want to set the auto.create.topics.enable to disable automatic topic creation, it can be configured in the KafkaCluster resource like so: brokers: roleGroups: default: configOverrides: server.properties: auto.create.topics.enable: \"false\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: brokers: configOverrides: server.properties: auto.create.topics.enable: \"false\" roleGroups: default: replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Apache Kafka Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: servers: roleGroups: default: envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: replicas: 1 You can mount volumes where data is stored by specifying PersistentVolumeClaims for each individual role group: brokers: roleGroups: default: config: resources: storage: data: capacity: 2Gi In the above example, all Kafka brokers in the default group will store data (the location of the property log.dirs) on a 2Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: brokers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each Kafka container in the \"default\" group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the containers running the Kafka daemons but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: brokers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"kafka","version":"0.7","name":"usage","url":"/kafka/stable/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Provide log4j.properties","hash":"_provide_log4j_properties","id":2},{"text":"Encryption","hash":"_encryption","id":3},{"text":"Authentication","hash":"_authentication","id":4},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":5},{"text":"Configuration Properties","hash":"_configuration_properties","id":6},{"text":"Environment Variables","hash":"_environment_variables","id":7},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":8},{"text":"Memory requests","hash":"_memory_requests","id":9},{"text":"CPU requests","hash":"_cpu_requests","id":10}]},"259":{"id":259,"text":"After going through the Installation section and having installed all the operators, you will now deploy a Kafka cluster and the required dependencies. Afterwards you can verify that it works by producing test data into a topic and consuming it. Two things need to be installed to create a Kafka cluster: A ZooKeeper instance for internal use by Kafka The Kafka cluster itself We will create them in this order, each one is created by applying a manifest file. The operators you just installed will then create the resources according to the manifest. Create a file named zookeeper.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f zookeeper.yaml Create a file kafka-znode.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-kafka-znode spec: clusterRef: name: simple-zk and apply it: kubectl apply -f kafka-znode.yaml Create a file named kafka.yaml with the following contents: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode config: tls: null brokers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f kafka.yaml This will create the actual Kafka instance. Next you will produce data into a topic and read it via kcat. Depending on your platform you may need to replace kafkacat in the commands below with kcat. First, make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE simple-kafka-broker-default 3/3 5m simple-zk-server-default 3/3 7m Then, create a port-forward for the Kafka Broker: kubectl port-forward svc/simple-kafka 9092 2>&1 >/dev/null & Create a file containing some data: echo \"some test data\" > data Write that data: kafkacat -b localhost:9092 -t test-data-topic -P data Read that data: kafkacat -b localhost:9092 -t test-data-topic -C -e > read-data Check the content: cat read-data | grep \"some test data\" And clean up: rm data rm read-data You successfully created a Kafka cluster and produced and consumed data. Have a look at the Usage page to find out more about the features of the Kafka Operator.","title":"First steps","component":"kafka","version":"0.7","name":"first_steps","url":"/kafka/stable/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"Kafka","hash":"_kafka","id":3},{"text":"Verify that it works","hash":"_verify_that_it_works","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"260":{"id":260,"text":"This guide will get you started with Apache Kafka using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Kafka instance and create, write to and read from a topic. You will need: a Kubernetes cluster kubectl optional: Helm kcat for testing The Guide is divided into two steps: Installing the Operators. Setting up the Kafka instance.","title":"Getting started","component":"kafka","version":"0.7","name":"index","url":"/kafka/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"261":{"id":261,"text":"On this page you will install the Stackable Operator for Apache Kafka and operators for its dependencies - ZooKeeper - as well as the commons and secret operator which are required by all Stackable Operators. There are 2 ways to install Stackable Operators: Using stackablectl Using Helm The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. After you have installed stackablectl, run the following command to install all operators necessary for Kafka: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ kafka=0.7.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly [INFO ] Installing kafka operator in version 0.7.0-nightly Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait kafka-operator stackable-dev/kafka-operator --version 0.7.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Apache Kafka service (as well as the CRDs for the required operators). You are now ready to deploy Apache Kafka in Kubernetes. Set up a Kafka cluster and its dependencies.","title":"Installation","component":"kafka","version":"0.7","name":"installation","url":"/kafka/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"262":{"id":262,"text":"Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-kafka-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-kafka-operator run --watch-namespace test","title":"","component":"kafka","version":"nightly","name":"commandline_args","url":"/kafka/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"263":{"id":263,"text":"The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group, role group or role specific configuration like port definitions etc. apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 There are three levels of configuration: Common shared options Contains configuration that is shared within the whole cluster ensemble. E.g., version, image, encryption or logging. Role options This configuration is shared for all roles of a certain type (in this operator, only the Broker role). RoleGroup options Options provided in the role group apply to each created \"pod\". Name Type Description Related Kafka properties version string The Kafka version used in the format: x.y.z-stackableX.Y.Z zookeeperConfigMapName string A reference to a ConfigMap containing a connection string for connecting to a ZooKeeper cluster opa struct An OPA configuration for Kafka, consisting of an OPA reference (namespace, name) and some authorizer properties We pool Role and RoleGroup options, since they are the same for Role and RoleGroup. Name Type Description Related Kafka properties Location","title":"","component":"kafka","version":"nightly","name":"config_properties","url":"/kafka/nightly/config_properties.html","titles":[{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":1},{"text":"Structure","hash":"_structure","id":2},{"text":"Common shared options","hash":"_common_shared_options","id":3},{"text":"Role & RoleGroup options","hash":"_role_rolegroup_options","id":4},{"text":"Broker","hash":"_broker","id":5}]},"264":{"id":264,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-kafka-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-kafka-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group, role group or role specific configuration like port definitions etc. apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 There are three levels of configuration: Common shared options Contains configuration that is shared within the whole cluster ensemble. E.g., version, image, encryption or logging. Role options This configuration is shared for all roles of a certain type (in this operator, only the Broker role). RoleGroup options Options provided in the role group apply to each created \"pod\". Name Type Description Related Kafka properties version string The Kafka version used in the format: x.y.z-stackableX.Y.Z zookeeperConfigMapName string A reference to a ConfigMap containing a connection string for connecting to a ZooKeeper cluster opa struct An OPA configuration for Kafka, consisting of an OPA reference (namespace, name) and some authorizer properties We pool Role and RoleGroup options, since they are the same for Role and RoleGroup. Name Type Description Related Kafka properties Location","title":"Configuration","component":"kafka","version":"nightly","name":"configuration","url":"/kafka/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Structure","hash":"_structure","id":8},{"text":"Common shared options","hash":"_common_shared_options","id":9},{"text":"Role & RoleGroup options","hash":"_role_rolegroup_options","id":10},{"text":"Broker","hash":"_broker","id":11}]},"265":{"id":265,"text":"Kafka currently requires ZooKeeper for coordination purposes. This will change in the future. Which means a reference to an existing ZooKeeper ensemble must be provided.","title":"Dependencies","component":"kafka","version":"nightly","name":"dependencies","url":"/kafka/nightly/dependencies.html","titles":[{"text":"ZooKeeper","hash":"_zookeeper","id":1}]},"266":{"id":266,"text":"The Stackable Operator for Apache Kafka publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the Apache Kafka cluster. The bundle includes a thrift connection string to access the Kafka broker service. This string may be used by other operators or tools to configure their products with access to Kafka. This is limited to internal cluster access. Given the following Kafka cluster: apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka (1) namespace: stackable (2) spec: […​] 1 The name of the Kafka cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-kafka. The stackable/simple-kafka discovery ConfigMap contains the following fields where simple-kafka represents the name and stackable the namespace of the cluster: KAFKA Contains the thrift protocol connection string for the Kafka cluster: simple-kafka.stackable.svc.cluster.local:9092","title":"Discovery","component":"kafka","version":"nightly","name":"discovery","url":"/kafka/nightly/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"267":{"id":267,"text":"Default value: /etc/stackable/kafka-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-kafka-operator run or via docker: docker run \\ --name kafka-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/kafka-operator:latest","title":"","component":"kafka","version":"nightly","name":"env_var_args","url":"/kafka/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"268":{"id":268,"text":"This is an operator for Kubernetes that can manage Apache Kafka clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Kafka currently supports the following versions of Kafka: 2.7.1 2.8.1 3.1.0 3.2.0 docker pull docker.stackable.tech/stackable/kafka:","title":"Stackable Operator for Apache Kafka","component":"kafka","version":"nightly","name":"index","url":"/kafka/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"269":{"id":269,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f /etc/stackable/kafka-operator/crd/kafkacluster.crd.yaml To create an Apache Kafka (v3.2.0) cluster named simple-kafka assuming that you already have a Zookeeper cluster named simple-zk: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-kafka-znode spec: clusterRef: name: simple-zk namespace: default --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode brokers: roleGroups: default: replicas: 1 If you wish to include integration with Open Policy Agent and already have an OPA cluster, then you can include an opa field pointing to the OPA cluster discovery ConfigMap and the required package. The package is optional and will default to the metadata.name field: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode opa: configMapName: simple-opa package: kafka brokers: roleGroups: default: replicas: 1 You can change some opa cache properties by overriding: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode opa: configMapName: simple-opa package: kafka brokers: configOverrides: server.properties: opa.authorizer.cache.initial.capacity: \"100\" opa.authorizer.cache.maximum.size: \"100\" opa.authorizer.cache.expire.after.seconds: \"10\" roleGroups: default: replicas: 1 A full list of settings and their respective defaults can be found here. The managed Kafka instances are automatically configured to export Prometheus metrics. See Monitoring for more details. Per default, the log4j.properties from the kafka package is used. However, you can provide your own log4j.properties via the custom resource: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode log4j: |- log4j.rootLogger=INFO, stdout, kafkaAppender log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n brokers: roleGroups: default: replicas: 3 The internal and client communication can be encrypted TLS. This requires the Secret Operator to be present in order to provide certificates. The utilized certificates can be changed in a top-level config. --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode config: tls: secretClass: tls (1) internalTls: secretClass: kafka-internal-tls (2) brokers: roleGroups: default: replicas: 3 1 The tls.secretClass refers to the client-to-server encryption. Defaults to the tls secret. It can be deactivated by setting config.tls to null. 2 The internalTls.secretClass refers to the broker-to-broker internal encryption. This must be explicitly set or defaults to tls. Can be disabled by setting config.internalTls to null. The tls secret is deployed from the Secret Operator and looks like this: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true You can create your own secrets and reference them e.g. in the tls.secretClass or internalTls.secretClass to use different certificates. The internal or broker-to-broker communication is authenticated via TLS. In order to enforce TLS authentication for client-to-server communication, you can set an AuthenticationClass reference in the custom resource provided by the Commons Operator. --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: kafka-client-tls (2) spec: provider: tls: clientCertSecretClass: kafka-client-auth-secret (3) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: kafka-client-auth-secret (4) spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-kafka-client-ca namespace: default autoGenerate: true --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode config: tls: secretClass: tls clientAuthentication: authenticationClass: kafka-client-tls (1) brokers: roleGroups: default: replicas: 3 1 The config.clientAuthentication.authenticationClass can be set to use TLS for authentication. This is optional. 2 The referenced AuthenticationClass that references a SecretClass to provide certificates. 3 The reference to a SecretClass. 4 The SecretClass that is referenced by the AuthenticationClass in order to provide certificates. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the ports) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the server.properties. For example, if you want to set the auto.create.topics.enable to disable automatic topic creation, it can be configured in the KafkaCluster resource like so: brokers: roleGroups: default: configOverrides: server.properties: auto.create.topics.enable: \"false\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: brokers: configOverrides: server.properties: auto.create.topics.enable: \"false\" roleGroups: default: replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Apache Kafka Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: servers: roleGroups: default: envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: replicas: 1 You can mount volumes where data is stored by specifying PersistentVolumeClaims for each individual role group: brokers: roleGroups: default: config: resources: storage: data: capacity: 2Gi In the above example, all Kafka brokers in the default group will store data (the location of the property log.dirs) on a 2Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: brokers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each Kafka container in the \"default\" group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the containers running the Kafka daemons but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: brokers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"kafka","version":"nightly","name":"usage","url":"/kafka/nightly/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Provide log4j.properties","hash":"_provide_log4j_properties","id":2},{"text":"Encryption","hash":"_encryption","id":3},{"text":"Authentication","hash":"_authentication","id":4},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":5},{"text":"Configuration Properties","hash":"_configuration_properties","id":6},{"text":"Environment Variables","hash":"_environment_variables","id":7},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":8},{"text":"Memory requests","hash":"_memory_requests","id":9},{"text":"CPU requests","hash":"_cpu_requests","id":10}]},"270":{"id":270,"text":"After going through the Installation section and having installed all the operators, you will now deploy a Kafka cluster and the required dependencies. Afterwards you can verify that it works by producing test data into a topic and consuming it. Two things need to be installed to create a Kafka cluster: A ZooKeeper instance for internal use by Kafka The Kafka cluster itself We will create them in this order, each one is created by applying a manifest file. The operators you just installed will then create the resources according to the manifest. Create a file named zookeeper.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f zookeeper.yaml Create a file kafka-znode.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-kafka-znode spec: clusterRef: name: simple-zk and apply it: kubectl apply -f kafka-znode.yaml Create a file named kafka.yaml with the following contents: --- apiVersion: kafka.stackable.tech/v1alpha1 kind: KafkaCluster metadata: name: simple-kafka spec: version: 3.2.0-stackable0.1.0 zookeeperConfigMapName: simple-kafka-znode config: tls: null brokers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f kafka.yaml This will create the actual Kafka instance. Next you will produce data into a topic and read it via kcat. Depending on your platform you may need to replace kafkacat in the commands below with kcat. First, make sure that all the Pods in the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE simple-kafka-broker-default 3/3 5m simple-zk-server-default 3/3 7m Then, create a port-forward for the Kafka Broker: kubectl port-forward svc/simple-kafka 9092 2>&1 >/dev/null & Create a file containing some data: echo \"some test data\" > data Write that data: kafkacat -b localhost:9092 -t test-data-topic -P data Read that data: kafkacat -b localhost:9092 -t test-data-topic -C -e > read-data Check the content: cat read-data | grep \"some test data\" And clean up: rm data rm read-data You successfully created a Kafka cluster and produced and consumed data. Have a look at the Usage page to find out more about the features of the Kafka Operator.","title":"First steps","component":"kafka","version":"nightly","name":"first_steps","url":"/kafka/nightly/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"Kafka","hash":"_kafka","id":3},{"text":"Verify that it works","hash":"_verify_that_it_works","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"271":{"id":271,"text":"This guide will get you started with Apache Kafka using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Kafka instance and create, write to and read from a topic. You will need: a Kubernetes cluster kubectl optional: Helm kcat for testing The Guide is divided into two steps: Installing the Operators. Setting up the Kafka instance.","title":"Getting started","component":"kafka","version":"nightly","name":"index","url":"/kafka/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"272":{"id":272,"text":"On this page you will install the Stackable Operator for Apache Kafka and operators for its dependencies - ZooKeeper - as well as the commons and secret operator which are required by all Stackable Operators. There are 2 ways to install Stackable Operators: Using stackablectl Using Helm The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. After you have installed stackablectl, run the following command to install all operators necessary for Kafka: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ kafka=0.7.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly [INFO ] Installing kafka operator in version 0.7.0-nightly Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait kafka-operator stackable-dev/kafka-operator --version 0.7.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Apache Kafka service (as well as the CRDs for the required operators). You are now ready to deploy Apache Kafka in Kubernetes. Set up a Kafka cluster and its dependencies.","title":"Installation","component":"kafka","version":"nightly","name":"installation","url":"/kafka/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"273":{"id":273,"text":"Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-nifi-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-nifi-operator run --watch-namespace test","title":"","component":"nifi","version":"0.6","name":"commandline_args","url":"/nifi/0.6/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"274":{"id":274,"text":"The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. The following listing shows a fairly complete example that sets most available options, for more detail about the individual elements please refer to the table further down on the page. apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO replicas: 3 nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: replicas: 3 The nodes element is used to define how many pods with which configuration should be rolled out. It is possible to define multiple groups of nodes, each with its own distinct configuration, every roleGroup has the following elements: selector: a Kubernetes Selector to specify criteria that can be used to target nodes config: The NiFi config to use for this group replicas: How many pods to roll out for this group authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true All authentication related parameters are configured in the authenticationConfig element. Currently, the only supported authentication method is \"SingleUser\", which allows the definition of one admin user which can then access the cluster. Specification of these users credentials happens via referring to a Secret in Kubernetes, this secret will need to contain at least the two keys username and password. Extra keys may be present, but will be ignored by the operator. NiFi can be configured to allow anonymous access to the web UI, this is turned off by default, but can be enabled via the parameter allowAnonymousAccess. This setting is independent of the configured authentication method and will override anything specified for the authentication provider. zookeeperConfigMapName: simple-nifi-znode NiFi in cluster mode requires a ZooKeeper ensemble for state management and leader election purposes, this operator at the moment does not support single node deployments without ZooKeeper, hence this is a required setting. Configuration happens via a ConfigMap, which needs to contain two keys called ZOOKEEPER_HOSTS with the value being the ZooKeeper connection string and ZOOKEEPER_CHROOT with the value being the ZooKeeper chroot. This ConfigMap typically is created by a ZookeeperZnode of the ZooKeeper Operator. config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO This is the actual NiFi configuration element. At the moment only a very limited set of options is supported, but you can expect these to grow quickly over time. Anything that is not mentioned here can be configured via configOverrides. This does not include properties for XML files like state-management.xml. Apache NiFi runtime configuration is stored in a file named nifi.properties. The configOverrides block allows you to add custom parameters to this file. A Full list of the available configuration options can be found in the official Apache NiFi documentation at https://nifi.apache.org/docs/nifi-docs/components/nifi-docs/html/administration-guide.html#system_properties. Overrides consist of a key, which must match the property name in the configuration file and a value. This allows arbitrary configuration properties to be added to Spark. In the example above a property aws.region is being explicitly set to 'eu-west-1', overriding the default value. Please be aware that by overriding config settings in this section you have a very high risk of breaking things, because the product does not behave the way the Stackable Operator for Apache NiFi expects it to behave any more. The following snippet shows an example of how this would look in the NifiCluster definition: config: sensitivePropertyKeySecret: nifi-sensitive-property- configOverrides: nifi.properties: aws.region: eu-west-1 replicas: 2","title":"","component":"nifi","version":"0.6","name":"config_properties","url":"/nifi/0.6/config_properties.html","titles":[{"text":"Node Configuration","hash":"_node_configuration","id":1},{"text":"Authentication","hash":"_authentication","id":2},{"text":"Authentication Method","hash":"_authentication_method","id":3},{"text":"Anonymous Access","hash":"_anonymous_access","id":4},{"text":"ZooKeeper Connection","hash":"_zookeeper_connection","id":5},{"text":"NiFi Configuration","hash":"_nifi_configuration","id":6},{"text":"Configuration Overrides","hash":"_configuration_overrides","id":7}]},"275":{"id":275,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-nifi-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-nifi-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. The following listing shows a fairly complete example that sets most available options, for more detail about the individual elements please refer to the table further down on the page. apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO replicas: 3 nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: replicas: 3 The nodes element is used to define how many pods with which configuration should be rolled out. It is possible to define multiple groups of nodes, each with its own distinct configuration, every roleGroup has the following elements: selector: a Kubernetes Selector to specify criteria that can be used to target nodes config: The NiFi config to use for this group replicas: How many pods to roll out for this group authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true All authentication related parameters are configured in the authenticationConfig element. Currently, the only supported authentication method is \"SingleUser\", which allows the definition of one admin user which can then access the cluster. Specification of these users credentials happens via referring to a Secret in Kubernetes, this secret will need to contain at least the two keys username and password. Extra keys may be present, but will be ignored by the operator. NiFi can be configured to allow anonymous access to the web UI, this is turned off by default, but can be enabled via the parameter allowAnonymousAccess. This setting is independent of the configured authentication method and will override anything specified for the authentication provider. zookeeperConfigMapName: simple-nifi-znode NiFi in cluster mode requires a ZooKeeper ensemble for state management and leader election purposes, this operator at the moment does not support single node deployments without ZooKeeper, hence this is a required setting. Configuration happens via a ConfigMap, which needs to contain two keys called ZOOKEEPER_HOSTS with the value being the ZooKeeper connection string and ZOOKEEPER_CHROOT with the value being the ZooKeeper chroot. This ConfigMap typically is created by a ZookeeperZnode of the ZooKeeper Operator. config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO This is the actual NiFi configuration element. At the moment only a very limited set of options is supported, but you can expect these to grow quickly over time. Anything that is not mentioned here can be configured via configOverrides. This does not include properties for XML files like state-management.xml. Apache NiFi runtime configuration is stored in a file named nifi.properties. The configOverrides block allows you to add custom parameters to this file. A Full list of the available configuration options can be found in the official Apache NiFi documentation at https://nifi.apache.org/docs/nifi-docs/components/nifi-docs/html/administration-guide.html#system_properties. Overrides consist of a key, which must match the property name in the configuration file and a value. This allows arbitrary configuration properties to be added to Spark. In the example above a property aws.region is being explicitly set to 'eu-west-1', overriding the default value. Please be aware that by overriding config settings in this section you have a very high risk of breaking things, because the product does not behave the way the Stackable Operator for Apache NiFi expects it to behave any more. The following snippet shows an example of how this would look in the NifiCluster definition: config: sensitivePropertyKeySecret: nifi-sensitive-property- configOverrides: nifi.properties: aws.region: eu-west-1 replicas: 2","title":"Configuration","component":"nifi","version":"0.6","name":"configuration","url":"/nifi/0.6/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Node Configuration","hash":"_node_configuration","id":8},{"text":"Authentication","hash":"_authentication","id":9},{"text":"Authentication Method","hash":"_authentication_method","id":10},{"text":"Anonymous Access","hash":"_anonymous_access","id":11},{"text":"ZooKeeper Connection","hash":"_zookeeper_connection","id":12},{"text":"NiFi Configuration","hash":"_nifi_configuration","id":13},{"text":"Configuration Overrides","hash":"_configuration_overrides","id":14}]},"276":{"id":276,"text":"In contrast to the other Stackable operators, the config properties overwrite the property files (bootstrap.conf, nifi.properties…​) in the deployed Apache NiFi package structure. There is no extra config directory. The state provider is ZooKeeper. Which means a reference to an existing ZooKeeper ensemble must be provided Tested with version: 3.5.8 Not working with version: 3.4.14","title":"Dependencies","component":"nifi","version":"0.6","name":"dependencies","url":"/nifi/0.6/dependencies.html","titles":[{"text":"ZooKeeper","hash":"_zookeeper","id":1}]},"277":{"id":277,"text":"Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest","title":"","component":"nifi","version":"0.6","name":"env_var_args","url":"/nifi/0.6/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"278":{"id":278,"text":"This is an operator for Kubernetes that can manage Apache NiFi clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache NiFi currently supports the following versions of NiFi: 1.15.0 1.16.3 docker pull docker.stackable.tech/stackable/nifi:","title":"Stackable Operator for Apache NiFi","component":"nifi","version":"0.6","name":"index","url":"/nifi/0.6/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"279":{"id":279,"text":"There are three ways to run the Stackable Operator for Apache NiFi: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ or to access the latest dev/nightly versions: $ helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operator for Apache NiFi $ helm install nifi-operator stackable/nifi-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache NiFi service. You’re now ready to deploy Apache NiFi in Kubernetes. A valid Zookeeper installation must be available and configured accordingly in the custom resource. This operator also requires the Stackable Secret Operator to be present as CSI provider in Kubernetes. The simplest way to install it is to just run: $ helm install secret-operator stackable-dev/secret-operator This Operator is published as a Docker image: docker.stackable.tech/stackable/nifi-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache ZooKeeper in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ sudo kubectl apply -f simple-nificluster.yaml To run it straight from Docker you can use this command: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.56 at the time of writing). cargo build","title":"Installation","component":"nifi","version":"0.6","name":"installation","url":"/nifi/0.6/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"280":{"id":280,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f deploy/nificluster.yaml To create a three-node Apache NiFi cluster with SingleUser authentication enabled apply the following to your Kubernetes cluster. Please note that the version you need to specify is not only the version of NiFi which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The admin credentials that you can then log in with are: admin:supersecretpassword If you do not provide the admin user credentials the operator can auto generate a random password for you, if you enable this functionality. You can retrieve this password by running the following command: kubectl get secret nifi-admin-credentials-simple -o jsonpath=\"{.data.password}\" | base64 --decode | cat - <(echo) You may need to adjust this command if you change the configuration for adminCredentialsSecret in the example below. apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode config: authentication: method: singleUser: adminCredentialsSecret: nifi-admin-credentials-simple sensitiveProperties: keySecret: nifi-sensitive-property-key nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: log: rootLogLevel: INFO replicas: 3 If you want to set a password for the initial admin user you can do this by applying the following object: apiVersion: v1 kind: Secret metadata: name: nifi-admin-credentials-simple stringData: username: admin password: supersecretpassword You can create the ZNode config map referenced in zookeeperConfigMapName via (assuming there is a ZooKeeper cluster called simple-zk: apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-nifi-znode spec: clusterRef: name: simple-zk The managed NiFi instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to cluster malfunction. Currently, not supported for any file. Environment variables can be (over)written by adding the envOverrides property. For example per role group: nodes: roleGroups: default: config: {} replicas: 1 envOverrides: MY_ENV_VAR: \"MY_VALUE\" or per role: nodes: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 By default, a Nifi cluster will create five different persistent volume claims for flow files, provenance, database, content and state folders. These PVCs will request 2Gi. It is recommended that you configure these volume requests according to your needs. Storage requests can be configured at role or group level, for one or more of the persistent volumes as follows: nodes: roleGroups: default: config: resources: storage: flowfile_repo: capacity: 12Gi provenance_repo: capacity: 12Gi database_repo: capacity: 12Gi content_repo: capacity: 12Gi state_repo: capacity: 12Gi In the above example, all nodes in the default group will request 12Gi of storage the various folders. You can request a certain amount of memory for each individual role group as shown below: nodes: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each node container in the \"default\" group will have a maximum of 2Gi of memory. Setting this property will automatically also set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: nodes: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"nifi","version":"0.6","name":"usage","url":"/nifi/0.6/usage.html","titles":[{"text":"Monitoring","hash":"_monitoring","id":1},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":2},{"text":"Configuration Properties","hash":"_configuration_properties","id":3},{"text":"Environment Variables","hash":"_environment_variables","id":4},{"text":"Volume storage","hash":"_volume_storage","id":5},{"text":"Memory requests","hash":"_memory_requests","id":6},{"text":"CPU requests","hash":"_cpu_requests","id":7}]},"281":{"id":281,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-nifi-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-nifi-operator run --watch-namespace test","title":"","component":"nifi","version":"0.7","name":"commandline_args","url":"/nifi/stable/commandline_args.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3}]},"282":{"id":282,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-nifi-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-nifi-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. The following listing shows a fairly complete example that sets most available options, for more detail about the individual elements please refer to the table further down on the page. apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO replicas: 3 nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: replicas: 3 The nodes element is used to define how many pods with which configuration should be rolled out. It is possible to define multiple groups of nodes, each with its own distinct configuration, every roleGroup has the following elements: selector: a Kubernetes Selector to specify criteria that can be used to target nodes config: The NiFi config to use for this group replicas: How many pods to roll out for this group authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true All authentication related parameters are configured in the authenticationConfig element. Currently, the only supported authentication method is \"SingleUser\", which allows the definition of one admin user which can then access the cluster. Specification of these users credentials happens via referring to a Secret in Kubernetes, this secret will need to contain at least the two keys username and password. Extra keys may be present, but will be ignored by the operator. NiFi can be configured to allow anonymous access to the web UI, this is turned off by default, but can be enabled via the parameter allowAnonymousAccess. This setting is independent of the configured authentication method and will override anything specified for the authentication provider. zookeeperConfigMapName: simple-nifi-znode NiFi in cluster mode requires a ZooKeeper ensemble for state management and leader election purposes, this operator at the moment does not support single node deployments without ZooKeeper, hence this is a required setting. Configuration happens via a ConfigMap, which needs to contain two keys called ZOOKEEPER_HOSTS with the value being the ZooKeeper connection string and ZOOKEEPER_CHROOT with the value being the ZooKeeper chroot. This ConfigMap typically is created by a ZookeeperZnode of the ZooKeeper Operator. config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO This is the actual NiFi configuration element. At the moment only a very limited set of options is supported, but you can expect these to grow quickly over time. Anything that is not mentioned here can be configured via configOverrides. This does not include properties for XML files like state-management.xml.","title":"Configuration","component":"nifi","version":"0.7","name":"configuration","url":"/nifi/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Node Configuration","hash":"_node_configuration","id":8},{"text":"Authentication","hash":"_authentication","id":9},{"text":"Authentication Method","hash":"_authentication_method","id":10},{"text":"Anonymous Access","hash":"_anonymous_access","id":11},{"text":"ZooKeeper Connection","hash":"_zookeeper_connection","id":12},{"text":"NiFi Configuration","hash":"_nifi_configuration","id":13}]},"283":{"id":283,"text":"In contrast to the other Stackable operators, the config properties overwrite the property files (bootstrap.conf, nifi.properties…​) in the deployed Apache NiFi package structure. There is no extra config directory. The state provider is ZooKeeper. Which means a reference to an existing ZooKeeper ensemble must be provided Tested with version: 3.5.8 Not working with version: 3.4.14","title":"Dependencies","component":"nifi","version":"0.7","name":"dependencies","url":"/nifi/stable/dependencies.html","titles":[{"text":"ZooKeeper","hash":"_zookeeper","id":1}]},"284":{"id":284,"text":"This is an operator for Kubernetes that can manage Apache NiFi clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache NiFi currently supports the following versions of NiFi: 1.15.0 1.16.3 docker pull docker.stackable.tech/stackable/nifi:","title":"Stackable Operator for Apache NiFi","component":"nifi","version":"0.7","name":"index","url":"/nifi/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"285":{"id":285,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f deploy/nificluster.yaml To create a three-node Apache NiFi cluster with SingleUser authentication enabled apply the following to your Kubernetes cluster. Please note that the version you need to specify is not only the version of NiFi which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The admin credentials that you can then log in with are: admin:supersecretpassword If you do not provide the admin user credentials the operator can auto generate a random password for you, if you enable this functionality. You can retrieve this password by running the following command: kubectl get secret nifi-admin-credentials-simple -o jsonpath=\"{.data.password}\" | base64 --decode | cat - <(echo) You may need to adjust this command if you change the configuration for adminCredentialsSecret in the example below. apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode config: authentication: method: singleUser: adminCredentialsSecret: nifi-admin-credentials-simple sensitiveProperties: keySecret: nifi-sensitive-property-key nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: log: rootLogLevel: INFO replicas: 3 If you want to set a password for the initial admin user you can do this by applying the following object: apiVersion: v1 kind: Secret metadata: name: nifi-admin-credentials-simple stringData: username: admin password: supersecretpassword You can create the ZNode config map referenced in zookeeperConfigMapName via (assuming there is a ZooKeeper cluster called simple-zk: apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-nifi-znode spec: clusterRef: name: simple-zk Every user has to authenticate themselves before using NiFI. There are multiple options to set up the authentication of users. The default setting is to only provision a single user with administrative privileges. You need to specify the username and password of the user. Further users can not be added. NiFI supports authentication of users against an LDAP server. Have a look at the LDAP test and the general Stackable Authentication documentation on how to set it up. In general, it requires you to specify a AuthenticationClass which is used to authenticate the users. Here you have an example usage --- apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: test-nifi spec: config: authentication: method: authenticationClass: ldap-without-tls --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: ldap-without-tls spec: provider: ldap: hostname: openldap.default.svc.cluster.local searchBase: ou=users,dc=example,dc=org bindCredentials: secretClass: nifi-with-ldap-bind port: 1389 --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: nifi-with-ldap-bind spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: nifi-with-ldap-bind labels: secrets.stackable.tech/class: nifi-with-ldap-bind stringData: user: cn=integrationtest,ou=users,dc=example,dc=org password: integrationtest NiFi supports multiple authorization methods documented here. The available authorization methods depend on the chosen authentication method. Authorization is not fully implemented by the stackable nifi-operator. Because of this the operator currently infers the authorization method to use from the configured authentication method. For this authentication method the Single user authorization will be used. Basically the single user is allowed to do everything. In the future retrieving groups from LDAP and providing policies via OPA is planned. Currently we will use the org.apache.nifi.authorization.FileUserGroupProvider and org.apache.nifi.authorization.FileAccessPolicyProvider. The user specified in the LDAP bind will be the admin user which can log into the NiFi cluster and create and modify other users. He is also able to create and modify groups and polices in the Webinterface. The changes made will be written to local files which are not persistent. The managed NiFi cluster is automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to cluster malfunction. Apache NiFi runtime configuration is stored in the files bootstrap.conf and nifi.properties. The configOverrides block allows you to add custom parameters to these files. A Full list of the available configuration options can be found in the official Apache NiFi documentation at https://nifi.apache.org/docs/nifi-docs/components/nifi-docs/html/administration-guide.html#system_properties. Overrides consist of a key, which must match the property name in the configuration file and a value. This allows arbitrary configuration properties to be added to Spark. In the example above a property aws.region is being explicitly set to 'eu-west-1', overriding the default value. Please be aware that by overriding config settings in this section you have a very high risk of breaking things, because the product does not behave the way the Stackable Operator for Apache NiFi expects it to behave anymore. The following snippet shows an example of how this would look in the NifiCluster definition: config: sensitivePropertyKeySecret: nifi-sensitive-property- configOverrides: nifi.properties: nifi.config.property: eu-west-1 bootstrap.conf: boostrap.config.property: some_string replicas: 2 Environment variables can be (over)written by adding the envOverrides property. For example per role group: nodes: roleGroups: default: config: {} replicas: 1 envOverrides: MY_ENV_VAR: \"MY_VALUE\" or per role: nodes: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 By default, a Nifi cluster will create five different persistent volume claims for flow files, provenance, database, content and state folders. These PVCs will request 2Gi. It is recommended that you configure these volume requests according to your needs. Storage requests can be configured at role or group level, for one or more of the persistent volumes as follows: nodes: roleGroups: default: config: resources: storage: flowfile_repo: capacity: 12Gi provenance_repo: capacity: 12Gi database_repo: capacity: 12Gi content_repo: capacity: 12Gi state_repo: capacity: 12Gi In the above example, all nodes in the default group will request 12Gi of storage the various folders. You can request a certain amount of memory for each individual role group as shown below: nodes: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each node container in the \"default\" group will have a maximum of 2Gi of memory. Setting this property will automatically also set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: nodes: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"nifi","version":"0.7","name":"usage","url":"/nifi/stable/usage.html","titles":[{"text":"Authentication","hash":"_authentication","id":1},{"text":"Single user","hash":"_single_user","id":2},{"text":"LDAP","hash":"_ldap","id":3},{"text":"Authorization","hash":"_authorization","id":4},{"text":"Single user","hash":"_single_user_2","id":5},{"text":"LDAP","hash":"_ldap_2","id":6},{"text":"Monitoring","hash":"_monitoring","id":7},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":8},{"text":"Configuration Overrides","hash":"_configuration_overrides","id":9},{"text":"Environment Variables","hash":"_environment_variables","id":10},{"text":"Volume storage","hash":"_volume_storage","id":11},{"text":"Memory requests","hash":"_memory_requests","id":12},{"text":"CPU requests","hash":"_cpu_requests","id":13}]},"286":{"id":286,"text":"After going through the Installation section and having installed all the operators, you will now deploy a NiFi cluster and the required dependencies. Afterwards you can verify that it works by querying the REST API. Two things need to be installed to create a NiFi cluster: A ZooKeeper cluster for internal use by NiFi The NiFi cluster itself We will create them in this order, each one is created by applying a manifest file. The operators you just installed will then create the resources according to the manifest. Create a file named zookeeper.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f zookeeper.yaml Create a file nifi-znode.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-nifi-znode spec: clusterRef: name: simple-zk and apply it: kubectl apply -f nifi-znode.yaml The ZNode makes sure that the NiFi cluster will operate in its own separated directory in ZooKeeper. The NiFi cluster requires authentication. In order to provide credentials, create a file named nifi-admin-credentials.yaml with the following content: --- apiVersion: v1 kind: Secret metadata: name: nifi-admin-credentials-simple stringData: username: admin password: admin and apply it: kubectl apply -f nifi-admin-credentials.yaml Create a file named nifi.yaml with the following content: --- apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode config: authentication: method: singleUser: adminCredentialsSecret: nifi-admin-credentials-simple autoGenerate: true sensitiveProperties: keySecret: nifi-sensitive-property-key autoGenerate: true nodes: roleGroups: default: replicas: 2 and apply it: kubectl apply -f nifi.yaml This will create the actual NiFi cluster. First, make sure all pods are ready: kubectl wait -l statefulset.kubernetes.io/pod-name=simple-nifi-node-default-0 \\ --for=condition=ready pod --timeout=1200s && \\ kubectl wait -l statefulset.kubernetes.io/pod-name=simple-nifi-node-default-1 \\ --for=condition=ready pod --timeout=1200s Then make sure the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE simple-nifi-node-default 2/2 5m simple-zk-server-default 3/3 7m Congratulations, you successfully created your first NiFi cluster. You can retrieve the URL for the NiFi cluster web interface via stackablectl or kubectl. Use the service command of stackablectl to get a list of all available endpoints: stackablectl svc list which should return something like this: PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS nifi simple-nifi default https https://172.18.0.3:32595 zookeeper simple-zk default zk 172.18.0.3:30173 Then connect to https://172.18.0.3:32595/nifi and you should see the NiFi web login. After providing the username admin and password admin you are redirected to the NiFi web interface. Extracting the IP and port via kubectl is cumbersome. We recommend using stackablectl instead. The following kubectl commands store their output for further use in a variable and write its content to stdout afterwards. Make sure to run these commands in the same terminal: nifi_node_name=$(kubectl get endpoints simple-nifi --output=jsonpath='{.subsets[0].addresses[0].nodeName}') && \\ echo \"NodeName: $nifi_node_name\" which should output a single node name where a NiFi pod is scheduled: NodeName: kind-worker Retrieve the IP of that node: nifi_node_ip=$(kubectl get nodes -o jsonpath=\"{.items[?(@.metadata.name==\\\"$nifi_node_name\\\")].status.addresses[?(@.type==\\\"InternalIP\\\")].address}\") && \\ echo \"NodeIp: $nifi_node_ip\" which should output the internal IP of that node: NodeIp: 172.18.0.3 Finally, retrieve the NodePort of the simple-nifi service: nifi_service_port=$(kubectl get service -o jsonpath=\"{.items[?(@.metadata.name==\\\"simple-nifi\\\")].spec.ports[?(@.name==\\\"https\\\")].nodePort}\") && \\ echo \"NodePort: $nifi_service_port\" which should output the NodePort: NodePort: 32595 Now build the full URL: nifi_url=\"https://$nifi_node_ip:$nifi_service_port\" && \\ echo \"NiFi web interface: $nifi_url\" which should output a URL to connect to the NiFi web interface: NiFi web interface: https://172.18.0.3:32595 Then connect to https://172.18.0.3:32595/nifi and you should see the NiFi web login. After providing the username admin and password admin you are redirected to the NiFi web interface. Have a look at the Usage page to find out more about the features of the NiFi Operator.","title":"First steps","component":"nifi","version":"0.7","name":"first_steps","url":"/nifi/stable/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"NiFi","hash":"_nifi","id":3},{"text":"Verify that it works","hash":"_verify_that_it_works","id":4},{"text":"Access the NiFi web interface","hash":"_access_the_nifi_web_interface","id":5},{"text":"stackablectl","hash":"_stackablectl","id":6},{"text":"Via kubectl","hash":"_via_kubectl","id":7},{"text":"What’s next","hash":"_whats_next","id":8}]},"287":{"id":287,"text":"This guide will get you started with Apache NiFi using the Stackable operator. It will guide you through the installation of the operator and its dependencies, setting up your first NiFi cluster. You will need: a Kubernetes cluster kubectl optional: Helm The guide is divided into the following steps: Installing the Operators Setting up the NiFi cluster","title":"Getting started","component":"nifi","version":"0.7","name":"index","url":"/nifi/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"288":{"id":288,"text":"On this page you will install the Stackable Operator for Apache NiFi and operators for its dependencies - ZooKeeper - as well as the commons and secret operator which are required by all Stackable Operators. There are two ways to install Stackable Operators: Using stackablectl Using Helm The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. After you have installed stackablectl, run the following command to install all operators necessary for NiFi: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ nifi=0.7.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly [INFO ] Installing nifi operator in version 0.7.0-nightly Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait nifi-operator stackable-dev/nifi-operator --version 0.7.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Apache NiFi service (as well as the CRDs for the required operators). You are now ready to deploy Apache NiFi in Kubernetes. Setting up a NiFi cluster and its dependencies.","title":"Installation","component":"nifi","version":"0.7","name":"installation","url":"/nifi/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"289":{"id":289,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-nifi-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-nifi-operator run --watch-namespace test","title":"","component":"nifi","version":"nightly","name":"commandline_args","url":"/nifi/nightly/commandline_args.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3}]},"290":{"id":290,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-nifi-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-nifi-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/nifi-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-nifi-operator run or via docker: docker run \\ --name nifi-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/nifi-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. The following listing shows a fairly complete example that sets most available options, for more detail about the individual elements please refer to the table further down on the page. apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO replicas: 3 nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: replicas: 3 The nodes element is used to define how many pods with which configuration should be rolled out. It is possible to define multiple groups of nodes, each with its own distinct configuration, every roleGroup has the following elements: selector: a Kubernetes Selector to specify criteria that can be used to target nodes config: The NiFi config to use for this group replicas: How many pods to roll out for this group authenticationConfig: method: SingleUser: adminCredentialsSecret: name: nifi-admin-credentials-simple namespace: default allowAnonymousAccess: true All authentication related parameters are configured in the authenticationConfig element. Currently, the only supported authentication method is \"SingleUser\", which allows the definition of one admin user which can then access the cluster. Specification of these users credentials happens via referring to a Secret in Kubernetes, this secret will need to contain at least the two keys username and password. Extra keys may be present, but will be ignored by the operator. NiFi can be configured to allow anonymous access to the web UI, this is turned off by default, but can be enabled via the parameter allowAnonymousAccess. This setting is independent of the configured authentication method and will override anything specified for the authentication provider. zookeeperConfigMapName: simple-nifi-znode NiFi in cluster mode requires a ZooKeeper ensemble for state management and leader election purposes, this operator at the moment does not support single node deployments without ZooKeeper, hence this is a required setting. Configuration happens via a ConfigMap, which needs to contain two keys called ZOOKEEPER_HOSTS with the value being the ZooKeeper connection string and ZOOKEEPER_CHROOT with the value being the ZooKeeper chroot. This ConfigMap typically is created by a ZookeeperZnode of the ZooKeeper Operator. config: sensitivePropertyKeySecret: nifi-sensitive-property-key log: rootLogLevel: INFO This is the actual NiFi configuration element. At the moment only a very limited set of options is supported, but you can expect these to grow quickly over time. Anything that is not mentioned here can be configured via configOverrides. This does not include properties for XML files like state-management.xml.","title":"Configuration","component":"nifi","version":"nightly","name":"configuration","url":"/nifi/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Node Configuration","hash":"_node_configuration","id":8},{"text":"Authentication","hash":"_authentication","id":9},{"text":"Authentication Method","hash":"_authentication_method","id":10},{"text":"Anonymous Access","hash":"_anonymous_access","id":11},{"text":"ZooKeeper Connection","hash":"_zookeeper_connection","id":12},{"text":"NiFi Configuration","hash":"_nifi_configuration","id":13}]},"291":{"id":291,"text":"In contrast to the other Stackable operators, the config properties overwrite the property files (bootstrap.conf, nifi.properties…​) in the deployed Apache NiFi package structure. There is no extra config directory. The state provider is ZooKeeper. Which means a reference to an existing ZooKeeper ensemble must be provided Tested with version: 3.5.8 Not working with version: 3.4.14","title":"Dependencies","component":"nifi","version":"nightly","name":"dependencies","url":"/nifi/nightly/dependencies.html","titles":[{"text":"ZooKeeper","hash":"_zookeeper","id":1}]},"292":{"id":292,"text":"This is an operator for Kubernetes that can manage Apache NiFi clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache NiFi currently supports the following versions of NiFi: 1.15.0 1.16.3 docker pull docker.stackable.tech/stackable/nifi:","title":"Stackable Operator for Apache NiFi","component":"nifi","version":"nightly","name":"index","url":"/nifi/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Docker","hash":"_docker","id":2}]},"293":{"id":293,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f deploy/nificluster.yaml To create a three-node Apache NiFi cluster with SingleUser authentication enabled apply the following to your Kubernetes cluster. Please note that the version you need to specify is not only the version of NiFi which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. The admin credentials that you can then log in with are: admin:supersecretpassword If you do not provide the admin user credentials the operator can auto generate a random password for you, if you enable this functionality. You can retrieve this password by running the following command: kubectl get secret nifi-admin-credentials-simple -o jsonpath=\"{.data.password}\" | base64 --decode | cat - <(echo) You may need to adjust this command if you change the configuration for adminCredentialsSecret in the example below. apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode config: authentication: method: singleUser: adminCredentialsSecret: nifi-admin-credentials-simple sensitiveProperties: keySecret: nifi-sensitive-property-key nodes: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux config: log: rootLogLevel: INFO replicas: 3 If you want to set a password for the initial admin user you can do this by applying the following object: apiVersion: v1 kind: Secret metadata: name: nifi-admin-credentials-simple stringData: username: admin password: supersecretpassword You can create the ZNode config map referenced in zookeeperConfigMapName via (assuming there is a ZooKeeper cluster called simple-zk: apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-nifi-znode spec: clusterRef: name: simple-zk Every user has to authenticate themselves before using NiFI. There are multiple options to set up the authentication of users. The default setting is to only provision a single user with administrative privileges. You need to specify the username and password of the user. Further users can not be added. NiFI supports authentication of users against an LDAP server. Have a look at the LDAP test and the general Stackable Authentication documentation on how to set it up. In general, it requires you to specify a AuthenticationClass which is used to authenticate the users. Here you have an example usage --- apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: test-nifi spec: config: authentication: method: authenticationClass: ldap-without-tls --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: ldap-without-tls spec: provider: ldap: hostname: openldap.default.svc.cluster.local searchBase: ou=users,dc=example,dc=org bindCredentials: secretClass: nifi-with-ldap-bind port: 1389 --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: nifi-with-ldap-bind spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: nifi-with-ldap-bind labels: secrets.stackable.tech/class: nifi-with-ldap-bind stringData: user: cn=integrationtest,ou=users,dc=example,dc=org password: integrationtest NiFi supports multiple authorization methods documented here. The available authorization methods depend on the chosen authentication method. Authorization is not fully implemented by the stackable nifi-operator. Because of this the operator currently infers the authorization method to use from the configured authentication method. For this authentication method the Single user authorization will be used. Basically the single user is allowed to do everything. In the future retrieving groups from LDAP and providing policies via OPA is planned. Currently we will use the org.apache.nifi.authorization.FileUserGroupProvider and org.apache.nifi.authorization.FileAccessPolicyProvider. The user specified in the LDAP bind will be the admin user which can log into the NiFi cluster and create and modify other users. He is also able to create and modify groups and polices in the Webinterface. The changes made will be written to local files which are not persistent. The managed NiFi cluster is automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to cluster malfunction. Apache NiFi runtime configuration is stored in the files bootstrap.conf and nifi.properties. The configOverrides block allows you to add custom parameters to these files. A Full list of the available configuration options can be found in the official Apache NiFi documentation at https://nifi.apache.org/docs/nifi-docs/components/nifi-docs/html/administration-guide.html#system_properties. Overrides consist of a key, which must match the property name in the configuration file and a value. This allows arbitrary configuration properties to be added to Spark. In the example above a property aws.region is being explicitly set to 'eu-west-1', overriding the default value. Please be aware that by overriding config settings in this section you have a very high risk of breaking things, because the product does not behave the way the Stackable Operator for Apache NiFi expects it to behave anymore. The following snippet shows an example of how this would look in the NifiCluster definition: config: sensitivePropertyKeySecret: nifi-sensitive-property- configOverrides: nifi.properties: nifi.config.property: eu-west-1 bootstrap.conf: boostrap.config.property: some_string replicas: 2 Environment variables can be (over)written by adding the envOverrides property. For example per role group: nodes: roleGroups: default: config: {} replicas: 1 envOverrides: MY_ENV_VAR: \"MY_VALUE\" or per role: nodes: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {} replicas: 1 By default, a Nifi cluster will create five different persistent volume claims for flow files, provenance, database, content and state folders. These PVCs will request 2Gi. It is recommended that you configure these volume requests according to your needs. Storage requests can be configured at role or group level, for one or more of the persistent volumes as follows: nodes: roleGroups: default: config: resources: storage: flowfile_repo: capacity: 12Gi provenance_repo: capacity: 12Gi database_repo: capacity: 12Gi content_repo: capacity: 12Gi state_repo: capacity: 12Gi In the above example, all nodes in the default group will request 12Gi of storage the various folders. You can request a certain amount of memory for each individual role group as shown below: nodes: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each node container in the \"default\" group will have a maximum of 2Gi of memory. Setting this property will automatically also set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: nodes: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"nifi","version":"nightly","name":"usage","url":"/nifi/nightly/usage.html","titles":[{"text":"Authentication","hash":"_authentication","id":1},{"text":"Single user","hash":"_single_user","id":2},{"text":"LDAP","hash":"_ldap","id":3},{"text":"Authorization","hash":"_authorization","id":4},{"text":"Single user","hash":"_single_user_2","id":5},{"text":"LDAP","hash":"_ldap_2","id":6},{"text":"Monitoring","hash":"_monitoring","id":7},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":8},{"text":"Configuration Overrides","hash":"_configuration_overrides","id":9},{"text":"Environment Variables","hash":"_environment_variables","id":10},{"text":"Volume storage","hash":"_volume_storage","id":11},{"text":"Memory requests","hash":"_memory_requests","id":12},{"text":"CPU requests","hash":"_cpu_requests","id":13}]},"294":{"id":294,"text":"After going through the Installation section and having installed all the operators, you will now deploy a NiFi cluster and the required dependencies. Afterwards you can verify that it works by querying the REST API. Two things need to be installed to create a NiFi cluster: A ZooKeeper cluster for internal use by NiFi The NiFi cluster itself We will create them in this order, each one is created by applying a manifest file. The operators you just installed will then create the resources according to the manifest. Create a file named zookeeper.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f zookeeper.yaml Create a file nifi-znode.yaml with the following content: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-nifi-znode spec: clusterRef: name: simple-zk and apply it: kubectl apply -f nifi-znode.yaml The ZNode makes sure that the NiFi cluster will operate in its own separated directory in ZooKeeper. The NiFi cluster requires authentication. In order to provide credentials, create a file named nifi-admin-credentials.yaml with the following content: --- apiVersion: v1 kind: Secret metadata: name: nifi-admin-credentials-simple stringData: username: admin password: admin and apply it: kubectl apply -f nifi-admin-credentials.yaml Create a file named nifi.yaml with the following content: --- apiVersion: nifi.stackable.tech/v1alpha1 kind: NifiCluster metadata: name: simple-nifi spec: version: 1.16.3-stackable0.1.0 zookeeperConfigMapName: simple-nifi-znode config: authentication: method: singleUser: adminCredentialsSecret: nifi-admin-credentials-simple autoGenerate: true sensitiveProperties: keySecret: nifi-sensitive-property-key autoGenerate: true nodes: roleGroups: default: replicas: 2 and apply it: kubectl apply -f nifi.yaml This will create the actual NiFi cluster. First, make sure all pods are ready: kubectl wait -l statefulset.kubernetes.io/pod-name=simple-nifi-node-default-0 \\ --for=condition=ready pod --timeout=1200s && \\ kubectl wait -l statefulset.kubernetes.io/pod-name=simple-nifi-node-default-1 \\ --for=condition=ready pod --timeout=1200s Then make sure the StatefulSets are ready: kubectl get statefulset The output should show all pods ready: NAME READY AGE simple-nifi-node-default 2/2 5m simple-zk-server-default 3/3 7m Congratulations, you successfully created your first NiFi cluster. You can retrieve the URL for the NiFi cluster web interface via stackablectl or kubectl. Use the service command of stackablectl to get a list of all available endpoints: stackablectl svc list which should return something like this: PRODUCT NAME NAMESPACE ENDPOINTS EXTRA INFOS nifi simple-nifi default https https://172.18.0.3:32595 zookeeper simple-zk default zk 172.18.0.3:30173 Then connect to https://172.18.0.3:32595/nifi and you should see the NiFi web login. After providing the username admin and password admin you are redirected to the NiFi web interface. Extracting the IP and port via kubectl is cumbersome. We recommend using stackablectl instead. The following kubectl commands store their output for further use in a variable and write its content to stdout afterwards. Make sure to run these commands in the same terminal: nifi_node_name=$(kubectl get endpoints simple-nifi --output=jsonpath='{.subsets[0].addresses[0].nodeName}') && \\ echo \"NodeName: $nifi_node_name\" which should output a single node name where a NiFi pod is scheduled: NodeName: kind-worker Retrieve the IP of that node: nifi_node_ip=$(kubectl get nodes -o jsonpath=\"{.items[?(@.metadata.name==\\\"$nifi_node_name\\\")].status.addresses[?(@.type==\\\"InternalIP\\\")].address}\") && \\ echo \"NodeIp: $nifi_node_ip\" which should output the internal IP of that node: NodeIp: 172.18.0.3 Finally, retrieve the NodePort of the simple-nifi service: nifi_service_port=$(kubectl get service -o jsonpath=\"{.items[?(@.metadata.name==\\\"simple-nifi\\\")].spec.ports[?(@.name==\\\"https\\\")].nodePort}\") && \\ echo \"NodePort: $nifi_service_port\" which should output the NodePort: NodePort: 32595 Now build the full URL: nifi_url=\"https://$nifi_node_ip:$nifi_service_port\" && \\ echo \"NiFi web interface: $nifi_url\" which should output a URL to connect to the NiFi web interface: NiFi web interface: https://172.18.0.3:32595 Then connect to https://172.18.0.3:32595/nifi and you should see the NiFi web login. After providing the username admin and password admin you are redirected to the NiFi web interface. Have a look at the Usage page to find out more about the features of the NiFi Operator.","title":"First steps","component":"nifi","version":"nightly","name":"first_steps","url":"/nifi/nightly/getting_started/first_steps.html","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"ZooKeeper","hash":"_zookeeper","id":2},{"text":"NiFi","hash":"_nifi","id":3},{"text":"Verify that it works","hash":"_verify_that_it_works","id":4},{"text":"Access the NiFi web interface","hash":"_access_the_nifi_web_interface","id":5},{"text":"stackablectl","hash":"_stackablectl","id":6},{"text":"Via kubectl","hash":"_via_kubectl","id":7},{"text":"What’s next","hash":"_whats_next","id":8}]},"295":{"id":295,"text":"This guide will get you started with Apache NiFi using the Stackable operator. It will guide you through the installation of the operator and its dependencies, setting up your first NiFi cluster. You will need: a Kubernetes cluster kubectl optional: Helm The guide is divided into the following steps: Installing the Operators Setting up the NiFi cluster","title":"Getting started","component":"nifi","version":"nightly","name":"index","url":"/nifi/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"296":{"id":296,"text":"On this page you will install the Stackable Operator for Apache NiFi and operators for its dependencies - ZooKeeper - as well as the commons and secret operator which are required by all Stackable Operators. There are two ways to install Stackable Operators: Using stackablectl Using Helm The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. After you have installed stackablectl, run the following command to install all operators necessary for NiFi: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly \\ nifi=0.7.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly [INFO ] Installing nifi operator in version 0.7.0-nightly Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly helm install --wait nifi-operator stackable-dev/nifi-operator --version 0.7.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Apache NiFi service (as well as the CRDs for the required operators). You are now ready to deploy Apache NiFi in Kubernetes. Setting up a NiFi cluster and its dependencies.","title":"Installation","component":"nifi","version":"nightly","name":"installation","url":"/nifi/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"297":{"id":297,"text":"Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-opa-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-opa-operator run --watch-namespace test Default value: None. A value is generated automatically by Helm. Required: false. When not specified, the environment variable OPA_BUNDLE_BUILDER_CLUSTERROLE must be present. Multiple values: false The name of the ClusterRole object that is referenced by the OPA pods. This object must exist in the Kubernetes cluster and is created by Helm.","title":"","component":"opa","version":"0.10","name":"commandline_args","url":"/opa/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"opa-bundle-builder-clusterrole","hash":"_opa_bundle_builder_clusterrole","id":3}]},"298":{"id":298,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-opa-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-opa-operator run --watch-namespace test Default value: None. A value is generated automatically by Helm. Required: false. When not specified, the environment variable OPA_BUNDLE_BUILDER_CLUSTERROLE must be present. Multiple values: false The name of the ClusterRole object that is referenced by the OPA pods. This object must exist in the Kubernetes cluster and is created by Helm. This operator accepts the following environment variables: Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: None. Required: true Multiple values: false The name of the cluster role to use for the OPA pods. export OPA_BUNDLE_BUILDER_CLUSTERROLE=test stackable-opa-operator run","title":"Configuration","component":"opa","version":"0.10","name":"configuration","url":"/opa/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"opa-bundle-builder-clusterrole","hash":"_opa_bundle_builder_clusterrole","id":4},{"text":"Environment variables","hash":"_environment_variables","id":5},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":6},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":7},{"text":"OPA_BUNDLE_BUILDER_CLUSTERROLE","hash":"_opa_bundle_builder_clusterrole_2","id":8}]},"299":{"id":299,"text":"The Stackable Operator for OpenPolicyAgent (OPA) publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the OPA cluster. The bundle includes a connection string to access the OPA cluster. This string may be used by other operators or tools to configure their products with access to OPA. This is limited to internal cluster access. Given the following OPA cluster: apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa (1) namespace: stackable (2) spec: […​] 1 The name of the OPA cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-opa. The stackable/simple-opa discovery ConfigMap contains the following fields where simple-opa represents the name and stackable the namespace of the cluster: OPA A connection string for cluster internal OPA requests. Provided the cluster example above, the connection string is created as follows: http://simple-opa.stackable.svc.cluster.local:8081/ This connection string points to the base URL (and web UI) of the OPA cluster. In order to query policies you have to configure your product and its OPA url as follows, given the rego package name opa-test and the policy name allow: http://simple-opa.stackable.svc.cluster.local:8081/v1/data/opa-test/allow","title":"Discovery","component":"opa","version":"0.10","name":"discovery","url":"/opa/stable/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"300":{"id":300,"text":"Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: None. Required: true Multiple values: false The name of the cluster role to use for the OPA pods. export OPA_BUNDLE_BUILDER_CLUSTERROLE=test stackable-opa-operator run","title":"","component":"opa","version":"0.10","name":"env_var_args","url":"/opa/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2},{"text":"OPA_BUNDLE_BUILDER_CLUSTERROLE","hash":"_opa_bundle_builder_clusterrole","id":3}]},"301":{"id":301,"text":"These notes may be of use when trying to understand why things are implemented the way that they are, but should not be required reading for regular use. We run an OPA on each node, because we want to avoid requiring network round trips for services making policy queries (which are often chained in serial, and block other tasks in the products). We ensure local access via an InternalTrafficPolicy. This means that Pods accessing OPA via the service discovery will be routed to the OPA Pod on the same Node to reduce request latency and network traffic. This feature is only activated per default in Kubernetes versions 1.22 or higher. Each OPA pod runs a container that watches for ConfigMap objects labeled opa.stackable.tech/bundle. All ConfigMap`s are bundled together in a single `bundle.tar.gz file that is served to the colocated OPA container.","title":"Implementation Notes","component":"opa","version":"0.10","name":"implementation-notes","url":"/opa/stable/implementation-notes.html","titles":[{"text":"OPA replica per Node","hash":"_opa_replica_per_node","id":1},{"text":"OPA Bundle Builder","hash":"_opa_bundle_builder","id":2}]},"302":{"id":302,"text":"This is an operator for Kubernetes that can manage OPA servers. This operator only works with images from the Stackable repository The Stackable Operator for OPA currently supports the following versions of OPA: 0.27.1 0.28.0 0.37.2 0.41.0 docker pull docker.stackable.tech/stackable/opa:","title":"Stackable Operator for OPA (OpenPolicyAgent)","component":"opa","version":"0.10","name":"index","url":"/opa/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"303":{"id":303,"text":"After installation, the CRD for this operator must be created: kubectl apply -f /etc/stackable/opa-operator/crd/openpolicyagent.crd.yaml To create a single node OPA (v0.41.0) cluster with Prometheus metrics exposed on port 8081: apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa spec: version: \"0.41.0-stackable0.1.0\" servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux Please note that the version you need to specify is not only the version of OPA which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. OPA bundles are generated from ConfigMap objects by a side car container running along side the OPA server. Alternatively, the OPA servers can load bundles from a remote server when a regoRuleReference is configured in the role group’s config section. The managed OPA instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to faulty installations. Currently, not supported for config.yaml. Environment variables can be (over)written by adding the envOverrides property. For example per role group: servers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {}","title":"Usage","component":"opa","version":"0.10","name":"usage","url":"/opa/stable/usage.html","titles":[{"text":"Bundle Sources","hash":"_bundle_sources","id":1},{"text":"Monitoring","hash":"_monitoring","id":2},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":3},{"text":"Configuration Properties","hash":"_configuration_properties","id":4},{"text":"Environment Variables","hash":"_environment_variables","id":5}]},"304":{"id":304,"text":"After you went through the Installation, on this page you will deploy OPA, deploy your first rule and query it from the command line. To deploy OPA, you just need to create an OpaCluster resource in Kubernetes and the Operator will create the OPA instances. Create a file called opa.yaml with the following contents: --- apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa spec: version: \"0.41.0-stackable0.1.0\" servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux and apply it: kubectl apply -f opa.yaml This will create an OPA cluster. The Operator deploys a DaemonSet, so every node in your cluster will have an OPA instance. Now deploy first Rego rule to the Agent. Rules are deployed in ConfigMaps. Create a file simple-rule.yaml with the following contents: --- apiVersion: v1 kind: ConfigMap metadata: name: test labels: opa.stackable.tech/bundle: \"true\" data: test.rego: | package test hello { true } world { false } and apply it: kubectl apply -f simple-rule.yaml The Operator will read the rule file, bundle it and publish the bundle to all OPA instances. Now that you have deployed the rule, you can query OPA for it. First, port-forward the service so you can query it from outside the Kubernetes cluster: kubectl port-forward svc/simple-opa 8081 2>&1 >/dev/null & Then, request the hello rule: curl -s http://localhost:8081/v1/data/test/hello As it was defined in the rule file, the response should be true: {\"result\":true} You can also request the other rule, world: curl -s http://localhost:8081/v1/data/test/world And see a different response: {} Great! You’ve set up OPA, deployed a rule and queried it! Have a look at the Usage page for more configuration options of the Operator.","title":"First steps","component":"opa","version":"0.10","name":"first_steps","url":"/opa/stable/getting_started/first_steps.html","titles":[{"text":"Deploy OPA","hash":"_deploy_opa","id":1},{"text":"Deploy a rule","hash":"_deploy_a_rule","id":2},{"text":"Make policy requests","hash":"_make_policy_requests","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"305":{"id":305,"text":"This guide will get you started with the OpenPolicyAgent (OPA) using the Stackable Operator. It will guide you through the installation of the Operator, setting up your first OPA instance, creating a policy rule and querying it. You will need: a Kubernetes cluster kubectl curl optional: Helm The Guide is divided into two steps: Installing the Operator. Setting up an OPA, a policy rule and querying it.","title":"Getting started","component":"opa","version":"0.10","name":"index","url":"/opa/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"306":{"id":306,"text":"On this page you will install the Stackable OPA Operator. There are 2 ways to run Stackable Operators Using stackablectl (recommended) Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install the OPA Operator: stackablectl operator install opa=0.10.0-nightly The tool will show [INFO ] Installing opa operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operator. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable OPA Operator: helm install --wait opa-operator stackable-dev/opa-operator --version 0.10.0-nightly Helm will deploy the Operator in a Kubernetes Deployment and apply the CRDs for the OPA service. You are now ready to deploy OPA in Kubernetes. Deploy OPA, a policy rule and query it.","title":"Installation","component":"opa","version":"0.10","name":"installation","url":"/opa/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"307":{"id":307,"text":"Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-opa-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-opa-operator run --watch-namespace test Default value: None. A value is generated automatically by Helm. Required: false. When not specified, the environment variable OPA_BUNDLE_BUILDER_CLUSTERROLE must be present. Multiple values: false The name of the ClusterRole object that is referenced by the OPA pods. This object must exist in the Kubernetes cluster and is created by Helm.","title":"","component":"opa","version":"0.9","name":"commandline_args","url":"/opa/0.9/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"opa-bundle-builder-clusterrole","hash":"_opa_bundle_builder_clusterrole","id":3}]},"308":{"id":308,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-opa-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-opa-operator run --watch-namespace test Default value: None. A value is generated automatically by Helm. Required: false. When not specified, the environment variable OPA_BUNDLE_BUILDER_CLUSTERROLE must be present. Multiple values: false The name of the ClusterRole object that is referenced by the OPA pods. This object must exist in the Kubernetes cluster and is created by Helm. This operator accepts the following environment variables: Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: None. Required: true Multiple values: false The name of the cluster role to use for the OPA pods. export OPA_BUNDLE_BUILDER_CLUSTERROLE=test stackable-opa-operator run","title":"Configuration","component":"opa","version":"0.9","name":"configuration","url":"/opa/0.9/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"opa-bundle-builder-clusterrole","hash":"_opa_bundle_builder_clusterrole","id":4},{"text":"Environment variables","hash":"_environment_variables","id":5},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":6},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":7},{"text":"OPA_BUNDLE_BUILDER_CLUSTERROLE","hash":"_opa_bundle_builder_clusterrole_2","id":8}]},"309":{"id":309,"text":"The Stackable Operator for OpenPolicyAgent (OPA) publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the OPA cluster. The bundle includes a connection string to access the OPA cluster. This string may be used by other operators or tools to configure their products with access to OPA. This is limited to internal cluster access. Given the following OPA cluster: apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa (1) namespace: stackable (2) spec: […​] 1 The name of the OPA cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-opa. The stackable/simple-opa discovery ConfigMap contains the following fields where simple-opa represents the name and stackable the namespace of the cluster: OPA A connection string for cluster internal OPA requests. Provided the cluster example above, the connection string is created as follows: http://simple-opa.stackable.svc.cluster.local:8081/ This connection string points to the base URL (and web UI) of the OPA cluster. In order to query policies you have to configure your product and its OPA url as follows, given the rego package name opa-test and the policy name allow: http://simple-opa.stackable.svc.cluster.local:8081/v1/data/opa-test/allow","title":"Discovery","component":"opa","version":"0.9","name":"discovery","url":"/opa/0.9/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"310":{"id":310,"text":"Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: None. Required: true Multiple values: false The name of the cluster role to use for the OPA pods. export OPA_BUNDLE_BUILDER_CLUSTERROLE=test stackable-opa-operator run","title":"","component":"opa","version":"0.9","name":"env_var_args","url":"/opa/0.9/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2},{"text":"OPA_BUNDLE_BUILDER_CLUSTERROLE","hash":"_opa_bundle_builder_clusterrole","id":3}]},"311":{"id":311,"text":"These notes may be of use when trying to understand why things are implemented the way that they are, but should not be required reading for regular use. We run an OPA on each node, because we want to avoid requiring network round trips for services making policy queries (which are often chained in serial, and block other tasks in the products). We ensure local access via an InternalTrafficPolicy. This means that Pods accessing OPA via the service discovery will be routed to the OPA Pod on the same Node to reduce request latency and network traffic. This feature is only activated per default in Kubernetes versions 1.22 or higher. Each OPA pod runs a container that watches for ConfigMap objects labeled opa.stackable.tech/bundle. All ConfigMap`s are bundled together in a single `bundle.tar.gz file that is served to the colocated OPA container.","title":"Implementation Notes","component":"opa","version":"0.9","name":"implementation-notes","url":"/opa/0.9/implementation-notes.html","titles":[{"text":"OPA replica per Node","hash":"_opa_replica_per_node","id":1},{"text":"OPA Bundle Builder","hash":"_opa_bundle_builder","id":2}]},"312":{"id":312,"text":"This is an operator for Kubernetes that can manage OPA servers. This operator only works with images from the Stackable repository The Stackable Operator for OPA currently supports the following versions of OPA: 0.27.1 0.28.0 0.37.2 0.41.0 docker pull docker.stackable.tech/stackable/opa:","title":"Stackable Operator for OPA (OpenPolicyAgent)","component":"opa","version":"0.9","name":"index","url":"/opa/0.9/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"313":{"id":313,"text":"There are three ways to run the OPA Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operator for OPA $ helm install opa-operator stackable/opa-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the OPA service. You’re now ready to deploy OPA in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/opa-operator When installing manually with Docker you will need to install the Stackable CRDs for OPA in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ sudo kubectl apply -f opacluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.56 at the time of writing). cargo build","title":"Installation","component":"opa","version":"0.9","name":"installation","url":"/opa/0.9/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"314":{"id":314,"text":"After installation, the CRD for this operator must be created: kubectl apply -f /etc/stackable/opa-operator/crd/openpolicyagent.crd.yaml To create a single node OPA (v0.41.0) cluster with Prometheus metrics exposed on port 8081: apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa spec: version: \"0.41.0-stackable0.1.0\" servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux Please note that the version you need to specify is not only the version of OPA which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. OPA bundles are generated from ConfigMap objects by a side car container running along side the OPA server. Alternatively, the OPA servers can load bundles from a remote server when a regoRuleReference is configured in the role group’s config section. The managed OPA instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to faulty installations. Currently, not supported for config.yaml. Environment variables can be (over)written by adding the envOverrides property. For example per role group: servers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {}","title":"Usage","component":"opa","version":"0.9","name":"usage","url":"/opa/0.9/usage.html","titles":[{"text":"Bundle Sources","hash":"_bundle_sources","id":1},{"text":"Monitoring","hash":"_monitoring","id":2},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":3},{"text":"Configuration Properties","hash":"_configuration_properties","id":4},{"text":"Environment Variables","hash":"_environment_variables","id":5}]},"315":{"id":315,"text":"Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-opa-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-opa-operator run --watch-namespace test Default value: None. A value is generated automatically by Helm. Required: false. When not specified, the environment variable OPA_BUNDLE_BUILDER_CLUSTERROLE must be present. Multiple values: false The name of the ClusterRole object that is referenced by the OPA pods. This object must exist in the Kubernetes cluster and is created by Helm.","title":"","component":"opa","version":"nightly","name":"commandline_args","url":"/opa/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"opa-bundle-builder-clusterrole","hash":"_opa_bundle_builder_clusterrole","id":3}]},"316":{"id":316,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-opa-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-opa-operator run --watch-namespace test Default value: None. A value is generated automatically by Helm. Required: false. When not specified, the environment variable OPA_BUNDLE_BUILDER_CLUSTERROLE must be present. Multiple values: false The name of the ClusterRole object that is referenced by the OPA pods. This object must exist in the Kubernetes cluster and is created by Helm. This operator accepts the following environment variables: Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: None. Required: true Multiple values: false The name of the cluster role to use for the OPA pods. export OPA_BUNDLE_BUILDER_CLUSTERROLE=test stackable-opa-operator run","title":"Configuration","component":"opa","version":"nightly","name":"configuration","url":"/opa/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"opa-bundle-builder-clusterrole","hash":"_opa_bundle_builder_clusterrole","id":4},{"text":"Environment variables","hash":"_environment_variables","id":5},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":6},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":7},{"text":"OPA_BUNDLE_BUILDER_CLUSTERROLE","hash":"_opa_bundle_builder_clusterrole_2","id":8}]},"317":{"id":317,"text":"The Stackable Operator for OpenPolicyAgent (OPA) publishes a discovery ConfigMap, which exposes a client configuration bundle that allows access to the OPA cluster. The bundle includes a connection string to access the OPA cluster. This string may be used by other operators or tools to configure their products with access to OPA. This is limited to internal cluster access. Given the following OPA cluster: apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa (1) namespace: stackable (2) spec: […​] 1 The name of the OPA cluster, which is also the name of the created discovery ConfigMap. 2 The namespace of the discovery ConfigMap. The resulting discovery ConfigMap is stackable/simple-opa. The stackable/simple-opa discovery ConfigMap contains the following fields where simple-opa represents the name and stackable the namespace of the cluster: OPA A connection string for cluster internal OPA requests. Provided the cluster example above, the connection string is created as follows: http://simple-opa.stackable.svc.cluster.local:8081/ This connection string points to the base URL (and web UI) of the OPA cluster. In order to query policies you have to configure your product and its OPA url as follows, given the rego package name opa-test and the policy name allow: http://simple-opa.stackable.svc.cluster.local:8081/v1/data/opa-test/allow","title":"Discovery","component":"opa","version":"nightly","name":"discovery","url":"/opa/nightly/discovery.html","titles":[{"text":"Example","hash":"_example","id":1},{"text":"Contents","hash":"_contents","id":2}]},"318":{"id":318,"text":"Default value: /etc/stackable/opa-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-opa-operator run or via docker: docker run \\ --name opa-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/opa-operator:latest Default value: None. Required: true Multiple values: false The name of the cluster role to use for the OPA pods. export OPA_BUNDLE_BUILDER_CLUSTERROLE=test stackable-opa-operator run","title":"","component":"opa","version":"nightly","name":"env_var_args","url":"/opa/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2},{"text":"OPA_BUNDLE_BUILDER_CLUSTERROLE","hash":"_opa_bundle_builder_clusterrole","id":3}]},"319":{"id":319,"text":"These notes may be of use when trying to understand why things are implemented the way that they are, but should not be required reading for regular use. We run an OPA on each node, because we want to avoid requiring network round trips for services making policy queries (which are often chained in serial, and block other tasks in the products). We ensure local access via an InternalTrafficPolicy. This means that Pods accessing OPA via the service discovery will be routed to the OPA Pod on the same Node to reduce request latency and network traffic. This feature is only activated per default in Kubernetes versions 1.22 or higher. Each OPA pod runs a container that watches for ConfigMap objects labeled opa.stackable.tech/bundle. All ConfigMap`s are bundled together in a single `bundle.tar.gz file that is served to the colocated OPA container.","title":"Implementation Notes","component":"opa","version":"nightly","name":"implementation-notes","url":"/opa/nightly/implementation-notes.html","titles":[{"text":"OPA replica per Node","hash":"_opa_replica_per_node","id":1},{"text":"OPA Bundle Builder","hash":"_opa_bundle_builder","id":2}]},"320":{"id":320,"text":"This is an operator for Kubernetes that can manage OPA servers. This operator only works with images from the Stackable repository The Stackable Operator for OPA currently supports the following versions of OPA: 0.27.1 0.28.0 0.37.2 0.41.0 docker pull docker.stackable.tech/stackable/opa:","title":"Stackable Operator for OPA (OpenPolicyAgent)","component":"opa","version":"nightly","name":"index","url":"/opa/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"321":{"id":321,"text":"After installation, the CRD for this operator must be created: kubectl apply -f /etc/stackable/opa-operator/crd/openpolicyagent.crd.yaml To create a single node OPA (v0.41.0) cluster with Prometheus metrics exposed on port 8081: apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa spec: version: \"0.41.0-stackable0.1.0\" servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux Please note that the version you need to specify is not only the version of OPA which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. OPA bundles are generated from ConfigMap objects by a side car container running along side the OPA server. Alternatively, the OPA servers can load bundles from a remote server when a regoRuleReference is configured in the role group’s config section. The managed OPA instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to faulty installations. Currently, not supported for config.yaml. Environment variables can be (over)written by adding the envOverrides property. For example per role group: servers: roleGroups: default: config: {} envOverrides: MY_ENV_VAR: \"MY_VALUE\" or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: config: {}","title":"Usage","component":"opa","version":"nightly","name":"usage","url":"/opa/nightly/usage.html","titles":[{"text":"Bundle Sources","hash":"_bundle_sources","id":1},{"text":"Monitoring","hash":"_monitoring","id":2},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":3},{"text":"Configuration Properties","hash":"_configuration_properties","id":4},{"text":"Environment Variables","hash":"_environment_variables","id":5}]},"322":{"id":322,"text":"After you went through the Installation, on this page you will deploy OPA, deploy your first rule and query it from the command line. To deploy OPA, you just need to create an OpaCluster resource in Kubernetes and the Operator will create the OPA instances. Create a file called opa.yaml with the following contents: --- apiVersion: opa.stackable.tech/v1alpha1 kind: OpaCluster metadata: name: simple-opa spec: version: \"0.41.0-stackable0.1.0\" servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux and apply it: kubectl apply -f opa.yaml This will create an OPA cluster. The Operator deploys a DaemonSet, so every node in your cluster will have an OPA instance. Now deploy first Rego rule to the Agent. Rules are deployed in ConfigMaps. Create a file simple-rule.yaml with the following contents: --- apiVersion: v1 kind: ConfigMap metadata: name: test labels: opa.stackable.tech/bundle: \"true\" data: test.rego: | package test hello { true } world { false } and apply it: kubectl apply -f simple-rule.yaml The Operator will read the rule file, bundle it and publish the bundle to all OPA instances. Now that you have deployed the rule, you can query OPA for it. First, port-forward the service so you can query it from outside the Kubernetes cluster: kubectl port-forward svc/simple-opa 8081 2>&1 >/dev/null & Then, request the hello rule: curl -s http://localhost:8081/v1/data/test/hello As it was defined in the rule file, the response should be true: {\"result\":true} You can also request the other rule, world: curl -s http://localhost:8081/v1/data/test/world And see a different response: {} Great! You’ve set up OPA, deployed a rule and queried it! Have a look at the Usage page for more configuration options of the Operator.","title":"First steps","component":"opa","version":"nightly","name":"first_steps","url":"/opa/nightly/getting_started/first_steps.html","titles":[{"text":"Deploy OPA","hash":"_deploy_opa","id":1},{"text":"Deploy a rule","hash":"_deploy_a_rule","id":2},{"text":"Make policy requests","hash":"_make_policy_requests","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"323":{"id":323,"text":"This guide will get you started with the OpenPolicyAgent (OPA) using the Stackable Operator. It will guide you through the installation of the Operator, setting up your first OPA instance, creating a policy rule and querying it. You will need: a Kubernetes cluster kubectl curl optional: Helm The Guide is divided into two steps: Installing the Operator. Setting up an OPA, a policy rule and querying it.","title":"Getting started","component":"opa","version":"nightly","name":"index","url":"/opa/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"324":{"id":324,"text":"On this page you will install the Stackable OPA Operator. There are 2 ways to run Stackable Operators Using stackablectl (recommended) Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install the OPA Operator: stackablectl operator install opa=0.10.0-nightly The tool will show [INFO ] Installing opa operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operator. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable OPA Operator: helm install --wait opa-operator stackable-dev/opa-operator --version 0.10.0-nightly Helm will deploy the Operator in a Kubernetes Deployment and apply the CRDs for the OPA service. You are now ready to deploy OPA in Kubernetes. Deploy OPA, a policy rule and query it.","title":"Installation","component":"opa","version":"nightly","name":"installation","url":"/opa/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"325":{"id":325,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test","title":"","component":"spark-k8s","version":"0.2","name":"commandline_args","url":"/spark-k8s/0.2/commandline_args.html","titles":[{"text":"watch-namespace","hash":"_watch_namespace","id":1}]},"326":{"id":326,"text":"This operator accepts the following command line parameters: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test This operator accepts the following environment variables: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"Configuration","component":"spark-k8s","version":"0.2","name":"configuration","url":"/spark-k8s/0.2/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"Environment variables","hash":"_environment_variables","id":3},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":4}]},"327":{"id":327,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"","component":"spark-k8s","version":"0.2","name":"env_var_args","url":"/spark-k8s/0.2/env_var_args.html","titles":[{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":1}]},"328":{"id":328,"text":"This is an operator for Kubernetes that can manage Apache Spark kubernetes clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Spark on Kubernetes currently supports the following versions of Spark: 3.2.1-hadoop3.2 3.2.1-hadoop3.2-python39 docker pull docker.stackable.tech/stackable/spark-k8s:","title":"Stackable Operator for Apache Spark on Kubernetes","component":"spark-k8s","version":"0.2","name":"index","url":"/spark-k8s/0.2/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"329":{"id":329,"text":"There are three ways to run the Spark Operator: Helm managed Docker container deployment on Kubernetes Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Spark helm install spark-k8s-operator stackable/spark-k8s-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Spark service. You are now ready to deploy Apache Spark in Kubernetes. To run it from your local machine - usually for development purposes - you need to install the required manifest files. make renenerate-charts kubectl create -f deploy/manifests Then, start the operator: cargo run -- run The above describes the installation of the operator alone and is sufficient for spark jobs that do not require any external dependencies. In practice, this is often not the case and spark- and/or job-dependencies will be required. These can be made available in different ways - e.g. by including them in the spark images used by spark-submit, reading them external repositories or by using local external storage such as Kuberentes persistent volumes. See the Job Dependencies page for detailed information. The examples provided with the operator code show different ways of combining these elements.","title":"Installation","component":"spark-k8s","version":"0.2","name":"installation","url":"/spark-k8s/0.2/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":2},{"text":"Additional/Optional components","hash":"_additionaloptional_components","id":3},{"text":"Examples","hash":"_examples","id":4}]},"330":{"id":330,"text":"The Stackable Spark-on-Kubernetes operator enables users to run Apache Spark workloads in a Kubernetes cluster easily by eliminating the requirement of having a local Spark installation. For this purpose, Stackble provides ready made Docker images with recent versions of Apache Spark and Python - for PySpark jobs - that provide the basis for running those workloads. Users of the Stackable Spark-on-Kubernetes operator can run their workloads on any recent Kubernetes cluster by applying a SparkApplication custom resource in which the job code, job dependencies, input and output data locations can be specified. The Stackable operator translates the user’s SparkApplication manifest into a Kubernetes Job object and handles control to the Apache Spark scheduler for Kubernetes to construct the necessary driver and executor Pods. When the job is finished, the Pods are terminated and the Kubernetes Job is completed. The base images provided by Stackable contain only the minimum of components to run Spark workloads. This is done mostly for performance and compatibility reasons. Many Spark workloads build on top of third party libraries and frameworks and thus depend on additional packages that are not included in the Stackable images. This guide explains how users can provision their Spark jobs with additional dependencies. There are multiple ways to submit Apache Spark jobs with external dependencies. Each has its own advantages and disadvantages and the choice of one over the other depends on existing technical and managerial constraints. To provision job dependencies in their workloads, users have to construct their SparkApplication with one of the following dependency specifications: Hardened or encapsulated job images Dependency volumes Spark native package coordinates and Python requirements The following table provides a high level overview of the relevant aspects of each method. Dependency specification Job image size Reproduciblity Dev-op cost Encapsulated job images Large Guaranteed Medium to High Dependency volumes Small Guaranteed Small to Medium Spark and Python packages Small Not guranteed Small With this method, users submit a SparkApplication for which the sparkImage refers to a Docker image containing Apache Spark itself, the job code and dependencies required by the job. It is recommended the users base their image on one of the Stackable images to ensure compatibility with the Stackable operator. Since all packages required to run the Spark job are bundled in the image, the size of this image tends to get very large while at the same time guaranteeing reproducibility between submissions. Example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-pi spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.2.1-hadoop3.2-stackable0.4.0 (1) mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: /stackable/spark/examples/jars/spark-examples_2.12-3.2.1.jar (2) driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" 1 Name of the encapsulated image. 2 Name of the Spark job to run. With this method, the user provisions the job dependencies from a PersistentVolume as shown in this example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.2.1-hadoop3.2-stackable0.4.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" \"spark.executor.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors The Spark operator has no control over the contents of the dependency volume. It is the responsibility of the user to make sure all required dependencies are installed in the correct versions. A PersistentVolumeClaim and the associated PersistentVolume can be defined like this: --- apiVersion: v1 kind: PersistentVolume metadata: name: pv-ksv (1) spec: storageClassName: standard accessModes: - ReadWriteOnce capacity: storage: 2Gi hostPath: path: /some-host-location --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-ksv (2) spec: volumeName: pv-ksv (1) accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job metadata: name: aws-deps spec: template: spec: restartPolicy: Never volumes: - name: job-deps (3) persistentVolumeClaim: claimName: pvc-ksv (2) containers: - name: aws-deps volumeMounts: - name: job-deps (4) mountPath: /stackable/spark/dependencies 1 Reference to a PersistentVolume, defining some cluster-reachable storage 2 The name of the PersistentVolumeClaim that references the PV 3 Defines a Volume backed by the PVC, local to the Custom Resource 4 Defines the VolumeMount that is used by the Custom Resource The last and most flexible way to provision dependencies is to use the built-in spark-submit support for Maven package coordinates. These can be specified by adding the following section to the SparkApplication manifest file: spec: deps: repositories: - https://repository.example.com/prod packages: - com.example:some-package:1.0.0 excludePackages: - com.example:other-package These directly translate to the spark-submit parameters --packages, --exclude-packages, and --repositories. When submitting PySpark jobs, users can specify pip requirements that are installed before the driver and executor pods are created. Here is an example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.2.1-hadoop3.2-python39-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" \"spark.executor.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) Note the section requirements. Also note that in this case, a sparkImage that bundles Python has to be provisioned.","title":"Job Dependencies","component":"spark-k8s","version":"0.2","name":"job_dependencies","url":"/spark-k8s/0.2/job_dependencies.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Dependency provisioning","hash":"_dependency_provisioning","id":2},{"text":"Hardened or encapsulated job images","hash":"_hardened_or_encapsulated_job_images","id":3},{"text":"Dependency volumes","hash":"_dependency_volumes","id":4},{"text":"Spark native package coordinates and Python requirements","hash":"_spark_native_package_coordinates_and_python_requirements","id":5}]},"331":{"id":331,"text":"The Spark-Kubernetes RBAC documentation describes what is needed for spark-submit jobs to run successfully: minimally a role/cluster-role to allow the driver pod to create and manage executor pods. However, to add security, each spark-submit job launched by the spark-k8s operator will be assigned its own service account. When the spark-k8s operator is installed via helm, a cluster role named spark-driver-edit-role is created with pre-defined permissions. When a new Spark application is submitted, the operator creates a new service account with the same name as the application and binds this account to the cluster role spark-driver-edit-role created by helm.","title":"RBAC","component":"spark-k8s","version":"0.2","name":"rbac","url":"/spark-k8s/0.2/rbac.html","titles":[{"text":"Overview","hash":"_overview","id":1}]},"332":{"id":332,"text":"If you followed the installation instructions, you should now have a Stackable Operator for Apache Spark up and running and you are ready to create your first Apache Spark kubernetes cluster. The example below creates a job running on Apache Spark 3.2.1, using the spark-on-kubernetes paradigm described in the spark documentation. The application file is itself part of the spark distribution and local refers to the path on the driver/executors; there are no external dependencies. cat <<EOF | kubectl apply -f - apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-clustermode-001 spec: version: 3.2.1-hadoop3.2 mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: local:///stackable/spark/examples/jars/spark-examples_2.12-3.2.1.jar image: 3.2.1-hadoop3.2 driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" EOF The following examples have the following spec fields in common: version: the current version is \"1.0\" sparkImage: the docker image that will be used by job, driver and executor pods. This can be provided by the user. mode: only cluster is currently supported mainApplicationFile: the artifact (Java, Scala or Python) that forms the basis of the Spark job. args: these are the arguments passed directly to the application. In the examples below it is e.g. the input path for part of the public New York taxi dataset. sparkConf: these list spark configuration settings that are passed directly to spark-submit and which are best defined explicitly by the user. Since the SparkApplication \"knows\" that there is an external dependency (the s3 bucket where the data and/or the application is located) and how that dependency should be treated (i.e. what type of credential checks are required, if any), it is better to have these things declared together. volumes: refers to any volumes needed by the SparkApplication, in this case an underlying PersistentVoulmeClaim. driver: driver-specific settings, including any volume mounts. executor: executor-specific settings, including any volume mounts. Job-specific settings are annotated below. --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.2.1-hadoop3.2-python39-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" \"spark.executor.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) 1 Job python artifact (external) 2 Job argument (external) 3 List of python job requirements: these will be installed in the pods via pip 4 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3) 5 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 6 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-image namespace: default spec: version: \"1.0\" image: docker.stackable.tech/stackable/ny-tlc-report:0.1.0 (1) sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.2.1-hadoop3.2-python39-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/jobs/ny_tlc_report.py (2) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (3) deps: requirements: - tabulate==0.8.9 (4) sparkConf: (5) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" \"spark.executor.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: job-deps (6) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) 1 Job image: this contains the job artifact that will retrieved from the volume mount backed by the PVC 2 Job python artifact (local) 3 Job argument (external) 4 List of python job requirements: these will be installed in the pods via pip 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3) 6 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 7 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.2.1-hadoop3.2-stackable0.4.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" \"spark.executor.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-s3-private spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.2.1-hadoop3.2-stackable0.4.0 mode: cluster mainApplicationFile: s3a://my-bucket/spark-examples_2.12-3.2.1.jar (1) mainClass: org.apache.spark.examples.SparkPi (2) s3bucket: (3) inline: bucketName: my-bucket connection: inline: host: test-minio port: 9000 secretClass: minio-credentials (4) sparkConf: (5) spark.hadoop.fs.s3a.aws.credentials.provider: \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\" (6) spark.hadoop.fs.s3a.path.style.access: \"true\" spark.driver.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" spark.executor.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: spark-pi-deps (7) persistentVolumeClaim: claimName: spark-pi-pvc driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) 1 Job python artifact (located in S3) 2 Artifact class 3 S3 section, specifying the existing secret and S3 end-point (in this case, MinIO) 4 Credentials secret 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources…​ 6 …​in this case, in s3, accessed with the credentials defined in the secret 7 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 8 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: v1 kind: ConfigMap metadata: name: cm-job-arguments (1) data: job-args.txt: | s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv (2) --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: ny-tlc-report-configmap namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.2.1-hadoop3.2-stackable0.4.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.1.0.jar (3) mainClass: tech.stackable.demo.spark.NYTLCReport volumes: - name: job-deps persistentVolumeClaim: claimName: pvc-ksv - name: cm-job-arguments configMap: name: cm-job-arguments (4) args: - \"--input /arguments/job-args.txt\" (5) sparkConf: \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" \"spark.executor.extraClassPath\": \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) 1 Name of the configuration map 2 Argument required by the job 3 Job scala artifact that requires an input argument 4 The volume backed by the configuration map 5 The expected job argument, accessed via the mounted configuration map file 6 The name of the volume backed by the configuration map that will be mounted to the driver/executor 7 The mount location of the volume (this will contain a file /arguments/job-args.txt) You can specify S3 connection details directly inside the SparkApplication specification or by refering to an external S3Bucket custom resource. To specify S3 connection details directly as part of the SparkApplication resource you add an inline bucket configuration as shown below. s3bucket: (1) inline: bucketName: my-bucket (2) connection: inline: host: test-minio (3) port: 9000 (4) secretClass: minio-credentials (5) 1 Entry point for the bucket configuration. 2 Bucket name. 3 Bucket host. 4 Optional bucket port. 5 Name of the Secret object expected to contain the following keys: ACCESS_KEY_ID and SECRET_ACCESS_KEY It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the SparkApplication like this: s3bucket: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 secretClass: minio-credentials This has the advantage that bucket configuration can be shared across `SparkApplication`s and reduces the cost of updating these details. Below are listed the CRD fields that can be defined by the user: CRD field Remarks apiVersion spark.stackable.tech/v1alpha1 kind SparkApplication metadata.name Job name spec.version \"1.0\" spec.mode cluster or client. Currently only cluster is supported spec.image User-supplied image containing spark-job dependencies that will be copied to the specified volume mount spec.sparkImage Spark image which will be deployed to driver and executor pods, which must contain spark environment needed by the job e.g. docker.stackable.tech/stackable/spark-k8s:3.2.1-hadoop3.2-stackable0.4.0 spec.sparkImagePullPolicy Optional Enum (one of Always, IfNotPresent or Never) that determines the pull policy of the spark job image spec.sparkImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling any of the images used by a SparkApplication resource. Each reference has a single property (name) that must contain a reference to a valid secret spec.mainApplicationFile The actual application file that will be called by spark-submit spec.mainClass The main class i.e. entry point for JVM artifacts spec.args Arguments passed directly to the job artifact spec.s3bucket S3 bucket and connection specification. See the S3 bucket specification for more details. spec.sparkConf A map of key/value strings that will be passed directly to spark-submit spec.deps.requirements A list of python packages that will be installed via pip spec.deps.packages A list of packages that is passed directly to spark-submit spec.deps.excludePackages A list of excluded packages that is passed directly to spark-submit spec.deps.repositories A list of repositories that is passed directly to spark-submit spec.volumes A list of volumes spec.volumes.name The volume name spec.volumes.persistentVolumeClaim.claimName The persistent volume claim backing the volume spec.driver.cores Number of cores used by the driver (only in cluster mode) spec.driver.coreLimit Total cores for all executors spec.driver.memory Specified memory for the driver spec.driver.volumeMounts A list of mounted volumes for the driver spec.driver.volumeMounts.name Name of mount spec.driver.volumeMounts.mountPath Volume mount path spec.driver.nodeSelector A dictionary of labels to use for node selection when scheduling the driver N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere. spec.executor.cores Number of cores for each executor spec.executor.instances Number of executor instances launched for this job spec.executor.memory Memory specified for executor spec.executor.volumeMounts A list of mounted volumes for each executor spec.executor.volumeMounts.name Name of mount spec.executor.volumeMounts.mountPath Volume mount path spec.executor.nodeSelector A dictionary of labels to use for node selection when scheduling the executors N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere.","title":"Usage","component":"spark-k8s","version":"0.2","name":"usage","url":"/spark-k8s/0.2/usage.html","titles":[{"text":"Create an Apache Spark job","hash":"_create_an_apache_spark_job","id":1},{"text":"Examples","hash":"_examples","id":2},{"text":"Pyspark: externally located artifact and dataset","hash":"_pyspark_externally_located_artifact_and_dataset","id":3},{"text":"Pyspark: externally located dataset, artifact available via PVC/volume mount","hash":"_pyspark_externally_located_dataset_artifact_available_via_pvcvolume_mount","id":4},{"text":"JVM (Scala): externally located artifact and dataset","hash":"_jvm_scala_externally_located_artifact_and_dataset","id":5},{"text":"JVM (Scala): externally located artifact accessed with credentials","hash":"_jvm_scala_externally_located_artifact_accessed_with_credentials","id":6},{"text":"JVM (Scala): externally located artifact accessed with job arguments provided via configuration map","hash":"_jvm_scala_externally_located_artifact_accessed_with_job_arguments_provided_via_configuration_map","id":7},{"text":"S3 bucket specification","hash":"_s3_bucket_specification","id":8},{"text":"CRD argument coverage","hash":"_crd_argument_coverage","id":9}]},"333":{"id":333,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test","title":"","component":"spark-k8s","version":"0.3","name":"commandline_args","url":"/spark-k8s/0.3/commandline_args.html","titles":[{"text":"watch-namespace","hash":"_watch_namespace","id":1}]},"334":{"id":334,"text":"This operator accepts the following command line parameters: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test This operator accepts the following environment variables: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"Configuration","component":"spark-k8s","version":"0.3","name":"configuration","url":"/spark-k8s/0.3/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"Environment variables","hash":"_environment_variables","id":3},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":4}]},"335":{"id":335,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"","component":"spark-k8s","version":"0.3","name":"env_var_args","url":"/spark-k8s/0.3/env_var_args.html","titles":[{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":1}]},"336":{"id":336,"text":"This is an operator for Kubernetes that can manage Apache Spark kubernetes clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Spark on Kubernetes currently supports the following versions of Spark: 3.2.1-hadoop3.2 3.2.1-hadoop3.2-python39 3.3.0-hadoop3 docker pull docker.stackable.tech/stackable/spark-k8s:","title":"Stackable Operator for Apache Spark on Kubernetes","component":"spark-k8s","version":"0.3","name":"index","url":"/spark-k8s/0.3/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"337":{"id":337,"text":"There are three ways to run the Spark Operator: Helm managed Docker container deployment on Kubernetes Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Spark helm install spark-k8s-operator stackable/spark-k8s-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Spark service. You are now ready to deploy Apache Spark in Kubernetes. To run it from your local machine - usually for development purposes - you need to install the required manifest files. make renenerate-charts kubectl create -f deploy/manifests Then, start the operator: cargo run -- run The above describes the installation of the operator alone and is sufficient for spark jobs that do not require any external dependencies. In practice, this is often not the case and spark- and/or job-dependencies will be required. These can be made available in different ways - e.g. by including them in the spark images used by spark-submit, reading them external repositories or by using local external storage such as Kuberentes persistent volumes. See the Job Dependencies page for detailed information. The examples provided with the operator code show different ways of combining these elements.","title":"Installation","component":"spark-k8s","version":"0.3","name":"installation","url":"/spark-k8s/0.3/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":2},{"text":"Additional/Optional components","hash":"_additionaloptional_components","id":3},{"text":"Examples","hash":"_examples","id":4}]},"338":{"id":338,"text":"The Stackable Spark-on-Kubernetes operator enables users to run Apache Spark workloads in a Kubernetes cluster easily by eliminating the requirement of having a local Spark installation. For this purpose, Stackble provides ready made Docker images with recent versions of Apache Spark and Python - for PySpark jobs - that provide the basis for running those workloads. Users of the Stackable Spark-on-Kubernetes operator can run their workloads on any recent Kubernetes cluster by applying a SparkApplication custom resource in which the job code, job dependencies, input and output data locations can be specified. The Stackable operator translates the user’s SparkApplication manifest into a Kubernetes Job object and handles control to the Apache Spark scheduler for Kubernetes to construct the necessary driver and executor Pods. When the job is finished, the Pods are terminated and the Kubernetes Job is completed. The base images provided by Stackable contain only the minimum of components to run Spark workloads. This is done mostly for performance and compatibility reasons. Many Spark workloads build on top of third party libraries and frameworks and thus depend on additional packages that are not included in the Stackable images. This guide explains how users can provision their Spark jobs with additional dependencies. There are multiple ways to submit Apache Spark jobs with external dependencies. Each has its own advantages and disadvantages and the choice of one over the other depends on existing technical and managerial constraints. To provision job dependencies in their workloads, users have to construct their SparkApplication with one of the following dependency specifications: Hardened or encapsulated job images Dependency volumes Spark native package coordinates and Python requirements The following table provides a high level overview of the relevant aspects of each method. Dependency specification Job image size Reproduciblity Dev-op cost Encapsulated job images Large Guaranteed Medium to High Dependency volumes Small Guaranteed Small to Medium Spark and Python packages Small Not guranteed Small With this method, users submit a SparkApplication for which the sparkImage refers to a Docker image containing Apache Spark itself, the job code and dependencies required by the job. It is recommended the users base their image on one of the Stackable images to ensure compatibility with the Stackable operator. Since all packages required to run the Spark job are bundled in the image, the size of this image tends to get very large while at the same time guaranteeing reproducibility between submissions. Example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-pi spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 (1) mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: /stackable/spark/examples/jars/spark-examples_2.12-3.3.0.jar (2) driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" 1 Name of the encapsulated image. 2 Name of the Spark job to run. With this method, the user provisions the job dependencies from a PersistentVolume as shown in this example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors The Spark operator has no control over the contents of the dependency volume. It is the responsibility of the user to make sure all required dependencies are installed in the correct versions. A PersistentVolumeClaim and the associated PersistentVolume can be defined like this: --- apiVersion: v1 kind: PersistentVolume metadata: name: pv-ksv (1) spec: storageClassName: standard accessModes: - ReadWriteOnce capacity: storage: 2Gi hostPath: path: /some-host-location --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-ksv (2) spec: volumeName: pv-ksv (1) accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job metadata: name: aws-deps spec: template: spec: restartPolicy: Never volumes: - name: job-deps (3) persistentVolumeClaim: claimName: pvc-ksv (2) containers: - name: aws-deps volumeMounts: - name: job-deps (4) mountPath: /stackable/spark/dependencies 1 Reference to a PersistentVolume, defining some cluster-reachable storage 2 The name of the PersistentVolumeClaim that references the PV 3 Defines a Volume backed by the PVC, local to the Custom Resource 4 Defines the VolumeMount that is used by the Custom Resource The last and most flexible way to provision dependencies is to use the built-in spark-submit support for Maven package coordinates. These can be specified by adding the following section to the SparkApplication manifest file: spec: deps: repositories: - https://repository.example.com/prod packages: - com.example:some-package:1.0.0 excludePackages: - com.example:other-package These directly translate to the spark-submit parameters --packages, --exclude-packages, and --repositories. When submitting PySpark jobs, users can specify pip requirements that are installed before the driver and executor pods are created. Here is an example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) Note the section requirements. Also note that in this case, a sparkImage that bundles Python has to be provisioned.","title":"Job Dependencies","component":"spark-k8s","version":"0.3","name":"job_dependencies","url":"/spark-k8s/0.3/job_dependencies.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Dependency provisioning","hash":"_dependency_provisioning","id":2},{"text":"Hardened or encapsulated job images","hash":"_hardened_or_encapsulated_job_images","id":3},{"text":"Dependency volumes","hash":"_dependency_volumes","id":4},{"text":"Spark native package coordinates and Python requirements","hash":"_spark_native_package_coordinates_and_python_requirements","id":5}]},"339":{"id":339,"text":"The Spark-Kubernetes RBAC documentation describes what is needed for spark-submit jobs to run successfully: minimally a role/cluster-role to allow the driver pod to create and manage executor pods. However, to add security, each spark-submit job launched by the spark-k8s operator will be assigned its own service account. When the spark-k8s operator is installed via helm, a cluster role named spark-driver-edit-role is created with pre-defined permissions. When a new Spark application is submitted, the operator creates a new service account with the same name as the application and binds this account to the cluster role spark-driver-edit-role created by helm.","title":"RBAC","component":"spark-k8s","version":"0.3","name":"rbac","url":"/spark-k8s/0.3/rbac.html","titles":[{"text":"Overview","hash":"_overview","id":1}]},"340":{"id":340,"text":"If you followed the installation instructions, you should now have a Stackable Operator for Apache Spark up and running, and you are ready to create your first Apache Spark kubernetes cluster. The example below creates a job running on Apache Spark 3.3.0, using the spark-on-kubernetes paradigm described in the spark documentation. The application file is itself part of the spark distribution and local refers to the path on the driver/executors; there are no external dependencies. cat <<EOF | kubectl apply -f - apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-clustermode-001 spec: version: 1.0 mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: local:///stackable/spark/examples/jars/spark-examples_2.12-3.3.0.jar image: 3.3.0-stackable0.1.0 driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" EOF The following examples have the following spec fields in common: version: the current version is \"1.0\" sparkImage: the docker image that will be used by job, driver and executor pods. This can be provided by the user. mode: only cluster is currently supported mainApplicationFile: the artifact (Java, Scala or Python) that forms the basis of the Spark job. args: these are the arguments passed directly to the application. In the examples below it is e.g. the input path for part of the public New York taxi dataset. sparkConf: these list spark configuration settings that are passed directly to spark-submit and which are best defined explicitly by the user. Since the SparkApplication \"knows\" that there is an external dependency (the s3 bucket where the data and/or the application is located) and how that dependency should be treated (i.e. what type of credential checks are required, if any), it is better to have these things declared together. volumes: refers to any volumes needed by the SparkApplication, in this case an underlying PersistentVoulmeClaim. driver: driver-specific settings, including any volume mounts. executor: executor-specific settings, including any volume mounts. Job-specific settings are annotated below. --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) 1 Job python artifact (external) 2 Job argument (external) 3 List of python job requirements: these will be installed in the pods via pip 4 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3) 5 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 6 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-image namespace: default spec: version: \"1.0\" image: docker.stackable.tech/stackable/ny-tlc-report:0.1.0 (1) sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/jobs/ny_tlc_report.py (2) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (3) deps: requirements: - tabulate==0.8.9 (4) sparkConf: (5) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (6) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) 1 Job image: this contains the job artifact that will be retrieved from the volume mount backed by the PVC 2 Job python artifact (local) 3 Job argument (external) 4 List of python job requirements: these will be installed in the pods via pip 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store) 6 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 7 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-s3-private spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://my-bucket/spark-examples_2.12-3.3.0.jar (1) mainClass: org.apache.spark.examples.SparkPi (2) s3bucket: (3) inline: bucketName: my-bucket connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: (4) secretClass: s3-credentials-class sparkConf: (5) spark.hadoop.fs.s3a.aws.credentials.provider: \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\" (6) spark.driver.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" spark.executor.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: spark-pi-deps (7) persistentVolumeClaim: claimName: spark-pi-pvc driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) 1 Job python artifact (located in an S3 store) 2 Artifact class 3 S3 section, specifying the existing secret and S3 end-point (in this case, MinIO) 4 Credentials referencing a secretClass (not shown in is example) 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources…​ 6 …​in this case, in an S3 store, accessed with the credentials defined in the secret 7 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 8 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: v1 kind: ConfigMap metadata: name: cm-job-arguments (1) data: job-args.txt: | s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv (2) --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: ny-tlc-report-configmap namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.1.0.jar (3) mainClass: tech.stackable.demo.spark.NYTLCReport volumes: - name: job-deps persistentVolumeClaim: claimName: pvc-ksv - name: cm-job-arguments configMap: name: cm-job-arguments (4) args: - \"--input /arguments/job-args.txt\" (5) sparkConf: \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) 1 Name of the configuration map 2 Argument required by the job 3 Job scala artifact that requires an input argument 4 The volume backed by the configuration map 5 The expected job argument, accessed via the mounted configuration map file 6 The name of the volume backed by the configuration map that will be mounted to the driver/executor 7 The mount location of the volume (this will contain a file /arguments/job-args.txt) You can specify S3 connection details directly inside the SparkApplication specification or by referring to an external S3Bucket custom resource. To specify S3 connection details directly as part of the SparkApplication resource you add an inline bucket configuration as shown below. s3bucket: (1) inline: bucketName: my-bucket (2) connection: inline: host: test-minio (3) port: 9000 (4) accessStyle: Path credentials: secretClass: s3-credentials-class (5) 1 Entry point for the bucket configuration. 2 Bucket name. 3 Bucket host. 4 Optional bucket port. 5 Name of the Secret object expected to contain the following keys: ACCESS_KEY_ID and SECRET_ACCESS_KEY It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the SparkApplication like this: s3bucket: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials-class This has the advantage that bucket configuration can be shared across `SparkApplication`s and reduces the cost of updating these details. Below are listed the CRD fields that can be defined by the user: CRD field Remarks apiVersion spark.stackable.tech/v1alpha1 kind SparkApplication metadata.name Job name spec.version \"1.0\" spec.mode cluster or client. Currently only cluster is supported spec.image User-supplied image containing spark-job dependencies that will be copied to the specified volume mount spec.sparkImage Spark image which will be deployed to driver and executor pods, which must contain spark environment needed by the job e.g. docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 spec.sparkImagePullPolicy Optional Enum (one of Always, IfNotPresent or Never) that determines the pull policy of the spark job image spec.sparkImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling any of the images used by a SparkApplication resource. Each reference has a single property (name) that must contain a reference to a valid secret spec.mainApplicationFile The actual application file that will be called by spark-submit spec.mainClass The main class i.e. entry point for JVM artifacts spec.args Arguments passed directly to the job artifact spec.s3bucket S3 bucket and connection specification. See the S3 bucket specification for more details. spec.sparkConf A map of key/value strings that will be passed directly to spark-submit spec.deps.requirements A list of python packages that will be installed via pip spec.deps.packages A list of packages that is passed directly to spark-submit spec.deps.excludePackages A list of excluded packages that is passed directly to spark-submit spec.deps.repositories A list of repositories that is passed directly to spark-submit spec.volumes A list of volumes spec.volumes.name The volume name spec.volumes.persistentVolumeClaim.claimName The persistent volume claim backing the volume spec.driver.cores Number of cores used by the driver (only in cluster mode) spec.driver.coreLimit Total cores for all executors spec.driver.memory Specified memory for the driver spec.driver.volumeMounts A list of mounted volumes for the driver spec.driver.volumeMounts.name Name of mount spec.driver.volumeMounts.mountPath Volume mount path spec.driver.nodeSelector A dictionary of labels to use for node selection when scheduling the driver N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere. spec.executor.cores Number of cores for each executor spec.executor.instances Number of executor instances launched for this job spec.executor.memory Memory specified for executor spec.executor.volumeMounts A list of mounted volumes for each executor spec.executor.volumeMounts.name Name of mount spec.executor.volumeMounts.mountPath Volume mount path spec.executor.nodeSelector A dictionary of labels to use for node selection when scheduling the executors N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere.","title":"Usage","component":"spark-k8s","version":"0.3","name":"usage","url":"/spark-k8s/0.3/usage.html","titles":[{"text":"Create an Apache Spark job","hash":"_create_an_apache_spark_job","id":1},{"text":"Examples","hash":"_examples","id":2},{"text":"Pyspark: externally located artifact and dataset","hash":"_pyspark_externally_located_artifact_and_dataset","id":3},{"text":"Pyspark: externally located dataset, artifact available via PVC/volume mount","hash":"_pyspark_externally_located_dataset_artifact_available_via_pvcvolume_mount","id":4},{"text":"JVM (Scala): externally located artifact and dataset","hash":"_jvm_scala_externally_located_artifact_and_dataset","id":5},{"text":"JVM (Scala): externally located artifact accessed with credentials","hash":"_jvm_scala_externally_located_artifact_accessed_with_credentials","id":6},{"text":"JVM (Scala): externally located artifact accessed with job arguments provided via configuration map","hash":"_jvm_scala_externally_located_artifact_accessed_with_job_arguments_provided_via_configuration_map","id":7},{"text":"S3 bucket specification","hash":"_s3_bucket_specification","id":8},{"text":"CRD argument coverage","hash":"_crd_argument_coverage","id":9}]},"341":{"id":341,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test","title":"","component":"spark-k8s","version":"0.4","name":"commandline_args","url":"/spark-k8s/0.4/commandline_args.html","titles":[{"text":"watch-namespace","hash":"_watch_namespace","id":1}]},"342":{"id":342,"text":"This operator accepts the following command line parameters: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test This operator accepts the following environment variables: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"Configuration","component":"spark-k8s","version":"0.4","name":"configuration","url":"/spark-k8s/0.4/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"Environment variables","hash":"_environment_variables","id":3},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":4}]},"343":{"id":343,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"","component":"spark-k8s","version":"0.4","name":"env_var_args","url":"/spark-k8s/0.4/env_var_args.html","titles":[{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":1}]},"344":{"id":344,"text":"This is an operator for Kubernetes that can manage Apache Spark kubernetes clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Spark on Kubernetes currently supports the following versions of Spark: 3.2.1-hadoop3.2 3.2.1-hadoop3.2-python39 3.3.0-hadoop3 docker pull docker.stackable.tech/stackable/spark-k8s:","title":"Stackable Operator for Apache Spark on Kubernetes","component":"spark-k8s","version":"0.4","name":"index","url":"/spark-k8s/0.4/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"345":{"id":345,"text":"There are three ways to run the Spark Operator: Helm managed Docker container deployment on Kubernetes Build from source Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ Then install the Stackable Operator for Apache Spark helm install spark-k8s-operator stackable/spark-k8s-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Spark service. You are now ready to deploy Apache Spark in Kubernetes. To run it from your local machine - usually for development purposes - you need to install the required manifest files. make renenerate-charts kubectl create -f deploy/manifests Then, start the operator: cargo run -- run The above describes the installation of the operator alone and is sufficient for spark jobs that do not require any external dependencies. In practice, this is often not the case and spark- and/or job-dependencies will be required. These can be made available in different ways - e.g. by including them in the spark images used by spark-submit, reading them external repositories or by using local external storage such as Kuberentes persistent volumes. See the Job Dependencies page for detailed information. The examples provided with the operator code show different ways of combining these elements.","title":"Installation","component":"spark-k8s","version":"0.4","name":"installation","url":"/spark-k8s/0.4/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":2},{"text":"Additional/Optional components","hash":"_additionaloptional_components","id":3},{"text":"Examples","hash":"_examples","id":4}]},"346":{"id":346,"text":"The Stackable Spark-on-Kubernetes operator enables users to run Apache Spark workloads in a Kubernetes cluster easily by eliminating the requirement of having a local Spark installation. For this purpose, Stackble provides ready made Docker images with recent versions of Apache Spark and Python - for PySpark jobs - that provide the basis for running those workloads. Users of the Stackable Spark-on-Kubernetes operator can run their workloads on any recent Kubernetes cluster by applying a SparkApplication custom resource in which the job code, job dependencies, input and output data locations can be specified. The Stackable operator translates the user’s SparkApplication manifest into a Kubernetes Job object and handles control to the Apache Spark scheduler for Kubernetes to construct the necessary driver and executor Pods. When the job is finished, the Pods are terminated and the Kubernetes Job is completed. The base images provided by Stackable contain only the minimum of components to run Spark workloads. This is done mostly for performance and compatibility reasons. Many Spark workloads build on top of third party libraries and frameworks and thus depend on additional packages that are not included in the Stackable images. This guide explains how users can provision their Spark jobs with additional dependencies. There are multiple ways to submit Apache Spark jobs with external dependencies. Each has its own advantages and disadvantages and the choice of one over the other depends on existing technical and managerial constraints. To provision job dependencies in their workloads, users have to construct their SparkApplication with one of the following dependency specifications: Hardened or encapsulated job images Dependency volumes Spark native package coordinates and Python requirements The following table provides a high level overview of the relevant aspects of each method. Dependency specification Job image size Reproduciblity Dev-op cost Encapsulated job images Large Guaranteed Medium to High Dependency volumes Small Guaranteed Small to Medium Spark and Python packages Small Not guranteed Small With this method, users submit a SparkApplication for which the sparkImage refers to a Docker image containing Apache Spark itself, the job code and dependencies required by the job. It is recommended the users base their image on one of the Stackable images to ensure compatibility with the Stackable operator. Since all packages required to run the Spark job are bundled in the image, the size of this image tends to get very large while at the same time guaranteeing reproducibility between submissions. Example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-pi spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 (1) mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: /stackable/spark/examples/jars/spark-examples_2.12-3.3.0.jar (2) driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" 1 Name of the encapsulated image. 2 Name of the Spark job to run. With this method, the user provisions the job dependencies from a PersistentVolume as shown in this example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors The Spark operator has no control over the contents of the dependency volume. It is the responsibility of the user to make sure all required dependencies are installed in the correct versions. A PersistentVolumeClaim and the associated PersistentVolume can be defined like this: --- apiVersion: v1 kind: PersistentVolume metadata: name: pv-ksv (1) spec: storageClassName: standard accessModes: - ReadWriteOnce capacity: storage: 2Gi hostPath: path: /some-host-location --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-ksv (2) spec: volumeName: pv-ksv (1) accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job metadata: name: aws-deps spec: template: spec: restartPolicy: Never volumes: - name: job-deps (3) persistentVolumeClaim: claimName: pvc-ksv (2) containers: - name: aws-deps volumeMounts: - name: job-deps (4) mountPath: /stackable/spark/dependencies 1 Reference to a PersistentVolume, defining some cluster-reachable storage 2 The name of the PersistentVolumeClaim that references the PV 3 Defines a Volume backed by the PVC, local to the Custom Resource 4 Defines the VolumeMount that is used by the Custom Resource The last and most flexible way to provision dependencies is to use the built-in spark-submit support for Maven package coordinates. These can be specified by adding the following section to the SparkApplication manifest file: spec: deps: repositories: - https://repository.example.com/prod packages: - com.example:some-package:1.0.0 excludePackages: - com.example:other-package These directly translate to the spark-submit parameters --packages, --exclude-packages, and --repositories. When submitting PySpark jobs, users can specify pip requirements that are installed before the driver and executor pods are created. Here is an example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) Note the section requirements. Also note that in this case, a sparkImage that bundles Python has to be provisioned.","title":"Job Dependencies","component":"spark-k8s","version":"0.4","name":"job_dependencies","url":"/spark-k8s/0.4/job_dependencies.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Dependency provisioning","hash":"_dependency_provisioning","id":2},{"text":"Hardened or encapsulated job images","hash":"_hardened_or_encapsulated_job_images","id":3},{"text":"Dependency volumes","hash":"_dependency_volumes","id":4},{"text":"Spark native package coordinates and Python requirements","hash":"_spark_native_package_coordinates_and_python_requirements","id":5}]},"347":{"id":347,"text":"The Spark-Kubernetes RBAC documentation describes what is needed for spark-submit jobs to run successfully: minimally a role/cluster-role to allow the driver pod to create and manage executor pods. However, to add security, each spark-submit job launched by the spark-k8s operator will be assigned its own service account. When the spark-k8s operator is installed via helm, a cluster role named spark-driver-edit-role is created with pre-defined permissions. When a new Spark application is submitted, the operator creates a new service account with the same name as the application and binds this account to the cluster role spark-driver-edit-role created by helm.","title":"RBAC","component":"spark-k8s","version":"0.4","name":"rbac","url":"/spark-k8s/0.4/rbac.html","titles":[{"text":"Overview","hash":"_overview","id":1}]},"348":{"id":348,"text":"If you followed the installation instructions, you should now have a Stackable Operator for Apache Spark up and running, and you are ready to create your first Apache Spark kubernetes cluster. The example below creates a job running on Apache Spark 3.3.0, using the spark-on-kubernetes paradigm described in the spark documentation. The application file is itself part of the spark distribution and local refers to the path on the driver/executors; there are no external dependencies. cat <<EOF | kubectl apply -f - apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-clustermode-001 spec: version: 1.0 mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: local:///stackable/spark/examples/jars/spark-examples_2.12-3.3.0.jar image: 3.3.0-stackable0.1.0 driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" EOF The following examples have the following spec fields in common: version: the current version is \"1.0\" sparkImage: the docker image that will be used by job, driver and executor pods. This can be provided by the user. mode: only cluster is currently supported mainApplicationFile: the artifact (Java, Scala or Python) that forms the basis of the Spark job. args: these are the arguments passed directly to the application. In the examples below it is e.g. the input path for part of the public New York taxi dataset. sparkConf: these list spark configuration settings that are passed directly to spark-submit and which are best defined explicitly by the user. Since the SparkApplication \"knows\" that there is an external dependency (the s3 bucket where the data and/or the application is located) and how that dependency should be treated (i.e. what type of credential checks are required, if any), it is better to have these things declared together. volumes: refers to any volumes needed by the SparkApplication, in this case an underlying PersistentVoulmeClaim. driver: driver-specific settings, including any volume mounts. executor: executor-specific settings, including any volume mounts. Job-specific settings are annotated below. --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) 1 Job python artifact (external) 2 Job argument (external) 3 List of python job requirements: these will be installed in the pods via pip 4 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3) 5 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 6 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-image namespace: default spec: version: \"1.0\" image: docker.stackable.tech/stackable/ny-tlc-report:0.1.0 (1) sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/jobs/ny_tlc_report.py (2) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (3) deps: requirements: - tabulate==0.8.9 (4) sparkConf: (5) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (6) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) 1 Job image: this contains the job artifact that will be retrieved from the volume mount backed by the PVC 2 Job python artifact (local) 3 Job argument (external) 4 List of python job requirements: these will be installed in the pods via pip 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store) 6 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 7 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-s3-private spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://my-bucket/spark-examples_2.12-3.3.0.jar (1) mainClass: org.apache.spark.examples.SparkPi (2) s3bucket: (3) inline: bucketName: my-bucket connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: (4) secretClass: s3-credentials-class sparkConf: (5) spark.hadoop.fs.s3a.aws.credentials.provider: \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\" (6) spark.driver.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" spark.executor.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: spark-pi-deps (7) persistentVolumeClaim: claimName: spark-pi-pvc driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) 1 Job python artifact (located in an S3 store) 2 Artifact class 3 S3 section, specifying the existing secret and S3 end-point (in this case, MinIO) 4 Credentials referencing a secretClass (not shown in is example) 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources…​ 6 …​in this case, in an S3 store, accessed with the credentials defined in the secret 7 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 8 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: v1 kind: ConfigMap metadata: name: cm-job-arguments (1) data: job-args.txt: | s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv (2) --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: ny-tlc-report-configmap namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.1.0.jar (3) mainClass: tech.stackable.demo.spark.NYTLCReport volumes: - name: job-deps persistentVolumeClaim: claimName: pvc-ksv - name: cm-job-arguments configMap: name: cm-job-arguments (4) args: - \"--input /arguments/job-args.txt\" (5) sparkConf: \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) 1 Name of the configuration map 2 Argument required by the job 3 Job scala artifact that requires an input argument 4 The volume backed by the configuration map 5 The expected job argument, accessed via the mounted configuration map file 6 The name of the volume backed by the configuration map that will be mounted to the driver/executor 7 The mount location of the volume (this will contain a file /arguments/job-args.txt) You can specify S3 connection details directly inside the SparkApplication specification or by referring to an external S3Bucket custom resource. To specify S3 connection details directly as part of the SparkApplication resource you add an inline bucket configuration as shown below. s3bucket: (1) inline: bucketName: my-bucket (2) connection: inline: host: test-minio (3) port: 9000 (4) accessStyle: Path credentials: secretClass: s3-credentials-class (5) 1 Entry point for the bucket configuration. 2 Bucket name. 3 Bucket host. 4 Optional bucket port. 5 Name of the Secret object expected to contain the following keys: ACCESS_KEY_ID and SECRET_ACCESS_KEY It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the SparkApplication like this: s3bucket: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials-class This has the advantage that bucket configuration can be shared across `SparkApplication`s and reduces the cost of updating these details. Below are listed the CRD fields that can be defined by the user: CRD field Remarks apiVersion spark.stackable.tech/v1alpha1 kind SparkApplication metadata.name Job name spec.version \"1.0\" spec.mode cluster or client. Currently only cluster is supported spec.image User-supplied image containing spark-job dependencies that will be copied to the specified volume mount spec.sparkImage Spark image which will be deployed to driver and executor pods, which must contain spark environment needed by the job e.g. docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 spec.sparkImagePullPolicy Optional Enum (one of Always, IfNotPresent or Never) that determines the pull policy of the spark job image spec.sparkImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling any of the images used by a SparkApplication resource. Each reference has a single property (name) that must contain a reference to a valid secret spec.mainApplicationFile The actual application file that will be called by spark-submit spec.mainClass The main class i.e. entry point for JVM artifacts spec.args Arguments passed directly to the job artifact spec.s3bucket S3 bucket and connection specification. See the S3 bucket specification for more details. spec.sparkConf A map of key/value strings that will be passed directly to spark-submit spec.deps.requirements A list of python packages that will be installed via pip spec.deps.packages A list of packages that is passed directly to spark-submit spec.deps.excludePackages A list of excluded packages that is passed directly to spark-submit spec.deps.repositories A list of repositories that is passed directly to spark-submit spec.volumes A list of volumes spec.volumes.name The volume name spec.volumes.persistentVolumeClaim.claimName The persistent volume claim backing the volume spec.driver.cores Number of cores used by the driver (only in cluster mode) spec.driver.coreLimit Total cores for all executors spec.driver.memory Specified memory for the driver spec.driver.volumeMounts A list of mounted volumes for the driver spec.driver.volumeMounts.name Name of mount spec.driver.volumeMounts.mountPath Volume mount path spec.driver.nodeSelector A dictionary of labels to use for node selection when scheduling the driver N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere. spec.executor.cores Number of cores for each executor spec.executor.instances Number of executor instances launched for this job spec.executor.memory Memory specified for executor spec.executor.volumeMounts A list of mounted volumes for each executor spec.executor.volumeMounts.name Name of mount spec.executor.volumeMounts.mountPath Volume mount path spec.executor.nodeSelector A dictionary of labels to use for node selection when scheduling the executors N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere.","title":"Usage","component":"spark-k8s","version":"0.4","name":"usage","url":"/spark-k8s/0.4/usage.html","titles":[{"text":"Create an Apache Spark job","hash":"_create_an_apache_spark_job","id":1},{"text":"Examples","hash":"_examples","id":2},{"text":"Pyspark: externally located artifact and dataset","hash":"_pyspark_externally_located_artifact_and_dataset","id":3},{"text":"Pyspark: externally located dataset, artifact available via PVC/volume mount","hash":"_pyspark_externally_located_dataset_artifact_available_via_pvcvolume_mount","id":4},{"text":"JVM (Scala): externally located artifact and dataset","hash":"_jvm_scala_externally_located_artifact_and_dataset","id":5},{"text":"JVM (Scala): externally located artifact accessed with credentials","hash":"_jvm_scala_externally_located_artifact_accessed_with_credentials","id":6},{"text":"JVM (Scala): externally located artifact accessed with job arguments provided via configuration map","hash":"_jvm_scala_externally_located_artifact_accessed_with_job_arguments_provided_via_configuration_map","id":7},{"text":"S3 bucket specification","hash":"_s3_bucket_specification","id":8},{"text":"CRD argument coverage","hash":"_crd_argument_coverage","id":9}]},"349":{"id":349,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test","title":"","component":"spark-k8s","version":"0.5","name":"commandline_args","url":"/spark-k8s/stable/commandline_args.html","titles":[{"text":"watch-namespace","hash":"_watch_namespace","id":1}]},"350":{"id":350,"text":"This operator accepts the following command line parameters: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test This operator accepts the following environment variables: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"Configuration","component":"spark-k8s","version":"0.5","name":"configuration","url":"/spark-k8s/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"Environment variables","hash":"_environment_variables","id":3},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":4}]},"351":{"id":351,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"","component":"spark-k8s","version":"0.5","name":"env_var_args","url":"/spark-k8s/stable/env_var_args.html","titles":[{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":1}]},"352":{"id":352,"text":"This is an operator for Kubernetes that can manage Apache Spark kubernetes clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Spark on Kubernetes currently supports the following versions of Spark: 3.2.1-hadoop3.2 3.2.1-hadoop3.2-python39 3.3.0-hadoop3 docker pull docker.stackable.tech/stackable/spark-k8s:","title":"Stackable Operator for Apache Spark on Kubernetes","component":"spark-k8s","version":"0.5","name":"index","url":"/spark-k8s/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"353":{"id":353,"text":"The Stackable Spark-on-Kubernetes operator enables users to run Apache Spark workloads in a Kubernetes cluster easily by eliminating the requirement of having a local Spark installation. For this purpose, Stackble provides ready made Docker images with recent versions of Apache Spark and Python - for PySpark jobs - that provide the basis for running those workloads. Users of the Stackable Spark-on-Kubernetes operator can run their workloads on any recent Kubernetes cluster by applying a SparkApplication custom resource in which the job code, job dependencies, input and output data locations can be specified. The Stackable operator translates the user’s SparkApplication manifest into a Kubernetes Job object and handles control to the Apache Spark scheduler for Kubernetes to construct the necessary driver and executor Pods. When the job is finished, the Pods are terminated and the Kubernetes Job is completed. The base images provided by Stackable contain only the minimum of components to run Spark workloads. This is done mostly for performance and compatibility reasons. Many Spark workloads build on top of third party libraries and frameworks and thus depend on additional packages that are not included in the Stackable images. This guide explains how users can provision their Spark jobs with additional dependencies. There are multiple ways to submit Apache Spark jobs with external dependencies. Each has its own advantages and disadvantages and the choice of one over the other depends on existing technical and managerial constraints. To provision job dependencies in their workloads, users have to construct their SparkApplication with one of the following dependency specifications: Hardened or encapsulated job images Dependency volumes Spark native package coordinates and Python requirements The following table provides a high level overview of the relevant aspects of each method. Dependency specification Job image size Reproduciblity Dev-op cost Encapsulated job images Large Guaranteed Medium to High Dependency volumes Small Guaranteed Small to Medium Spark and Python packages Small Not guranteed Small With this method, users submit a SparkApplication for which the sparkImage refers to a Docker image containing Apache Spark itself, the job code and dependencies required by the job. It is recommended the users base their image on one of the Stackable images to ensure compatibility with the Stackable operator. Since all packages required to run the Spark job are bundled in the image, the size of this image tends to get very large while at the same time guaranteeing reproducibility between submissions. Example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-pi spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 (1) mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: /stackable/spark/examples/jars/spark-examples_2.12-3.3.0.jar (2) driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" 1 Name of the encapsulated image. 2 Name of the Spark job to run. With this method, the user provisions the job dependencies from a PersistentVolume as shown in this example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors The Spark operator has no control over the contents of the dependency volume. It is the responsibility of the user to make sure all required dependencies are installed in the correct versions. A PersistentVolumeClaim and the associated PersistentVolume can be defined like this: --- apiVersion: v1 kind: PersistentVolume metadata: name: pv-ksv (1) spec: storageClassName: standard accessModes: - ReadWriteOnce capacity: storage: 2Gi hostPath: path: /some-host-location --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-ksv (2) spec: volumeName: pv-ksv (1) accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job metadata: name: aws-deps spec: template: spec: restartPolicy: Never volumes: - name: job-deps (3) persistentVolumeClaim: claimName: pvc-ksv (2) containers: - name: aws-deps volumeMounts: - name: job-deps (4) mountPath: /stackable/spark/dependencies 1 Reference to a PersistentVolume, defining some cluster-reachable storage 2 The name of the PersistentVolumeClaim that references the PV 3 Defines a Volume backed by the PVC, local to the Custom Resource 4 Defines the VolumeMount that is used by the Custom Resource The last and most flexible way to provision dependencies is to use the built-in spark-submit support for Maven package coordinates. These can be specified by adding the following section to the SparkApplication manifest file: spec: deps: repositories: - https://repository.example.com/prod packages: - com.example:some-package:1.0.0 excludePackages: - com.example:other-package These directly translate to the spark-submit parameters --packages, --exclude-packages, and --repositories. When submitting PySpark jobs, users can specify pip requirements that are installed before the driver and executor pods are created. Here is an example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) Note the section requirements. Also note that in this case, a sparkImage that bundles Python has to be provisioned.","title":"Job Dependencies","component":"spark-k8s","version":"0.5","name":"job_dependencies","url":"/spark-k8s/stable/job_dependencies.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Dependency provisioning","hash":"_dependency_provisioning","id":2},{"text":"Hardened or encapsulated job images","hash":"_hardened_or_encapsulated_job_images","id":3},{"text":"Dependency volumes","hash":"_dependency_volumes","id":4},{"text":"Spark native package coordinates and Python requirements","hash":"_spark_native_package_coordinates_and_python_requirements","id":5}]},"354":{"id":354,"text":"The Spark-Kubernetes RBAC documentation describes what is needed for spark-submit jobs to run successfully: minimally a role/cluster-role to allow the driver pod to create and manage executor pods. However, to add security, each spark-submit job launched by the spark-k8s operator will be assigned its own service account. When the spark-k8s operator is installed via Helm, a cluster role named spark-k8s-clusterrole is created with pre-defined permissions. When a new Spark application is submitted, the operator creates a new service account with the same name as the application and binds this account to the cluster role spark-k8s-clusterrole created by Helm.","title":"RBAC","component":"spark-k8s","version":"0.5","name":"rbac","url":"/spark-k8s/stable/rbac.html","titles":[{"text":"Overview","hash":"_overview","id":1}]},"355":{"id":355,"text":"The following examples have the following spec fields in common: version: the current version is \"1.0\" sparkImage: the docker image that will be used by job, driver and executor pods. This can be provided by the user. mode: only cluster is currently supported mainApplicationFile: the artifact (Java, Scala or Python) that forms the basis of the Spark job. args: these are the arguments passed directly to the application. In the examples below it is e.g. the input path for part of the public New York taxi dataset. sparkConf: these list spark configuration settings that are passed directly to spark-submit and which are best defined explicitly by the user. Since the SparkApplication \"knows\" that there is an external dependency (the s3 bucket where the data and/or the application is located) and how that dependency should be treated (i.e. what type of credential checks are required, if any), it is better to have these things declared together. volumes: refers to any volumes needed by the SparkApplication, in this case an underlying PersistentVoulmeClaim. driver: driver-specific settings, including any volume mounts. executor: executor-specific settings, including any volume mounts. Job-specific settings are annotated below. --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) 1 Job python artifact (external) 2 Job argument (external) 3 List of python job requirements: these will be installed in the pods via pip 4 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3) 5 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 6 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-image namespace: default spec: version: \"1.0\" image: docker.stackable.tech/stackable/ny-tlc-report:0.1.0 (1) sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/jobs/ny_tlc_report.py (2) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (3) deps: requirements: - tabulate==0.8.9 (4) sparkConf: (5) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (6) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) 1 Job image: this contains the job artifact that will be retrieved from the volume mount backed by the PVC 2 Job python artifact (local) 3 Job argument (external) 4 List of python job requirements: these will be installed in the pods via pip 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store) 6 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 7 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-s3-private spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://my-bucket/spark-examples_2.12-3.3.0.jar (1) mainClass: org.apache.spark.examples.SparkPi (2) s3bucket: (3) inline: bucketName: my-bucket connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: (4) secretClass: s3-credentials-class sparkConf: (5) spark.hadoop.fs.s3a.aws.credentials.provider: \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\" (6) spark.driver.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" spark.executor.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: spark-pi-deps (7) persistentVolumeClaim: claimName: spark-pi-pvc driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) 1 Job python artifact (located in an S3 store) 2 Artifact class 3 S3 section, specifying the existing secret and S3 end-point (in this case, MinIO) 4 Credentials referencing a secretClass (not shown in is example) 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources…​ 6 …​in this case, in an S3 store, accessed with the credentials defined in the secret 7 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 8 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: v1 kind: ConfigMap metadata: name: cm-job-arguments (1) data: job-args.txt: | s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv (2) --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: ny-tlc-report-configmap namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.1.0.jar (3) mainClass: tech.stackable.demo.spark.NYTLCReport volumes: - name: job-deps persistentVolumeClaim: claimName: pvc-ksv - name: cm-job-arguments configMap: name: cm-job-arguments (4) args: - \"--input /arguments/job-args.txt\" (5) sparkConf: \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) 1 Name of the configuration map 2 Argument required by the job 3 Job scala artifact that requires an input argument 4 The volume backed by the configuration map 5 The expected job argument, accessed via the mounted configuration map file 6 The name of the volume backed by the configuration map that will be mounted to the driver/executor 7 The mount location of the volume (this will contain a file /arguments/job-args.txt) You can specify S3 connection details directly inside the SparkApplication specification or by referring to an external S3Bucket custom resource. To specify S3 connection details directly as part of the SparkApplication resource you add an inline bucket configuration as shown below. s3bucket: (1) inline: bucketName: my-bucket (2) connection: inline: host: test-minio (3) port: 9000 (4) accessStyle: Path credentials: secretClass: s3-credentials-class (5) 1 Entry point for the bucket configuration. 2 Bucket name. 3 Bucket host. 4 Optional bucket port. 5 Name of the Secret object expected to contain the following keys: ACCESS_KEY_ID and SECRET_ACCESS_KEY It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the SparkApplication like this: s3bucket: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials-class This has the advantage that bucket configuration can be shared across `SparkApplication`s and reduces the cost of updating these details. Below are listed the CRD fields that can be defined by the user: CRD field Remarks apiVersion spark.stackable.tech/v1alpha1 kind SparkApplication metadata.name Job name spec.version \"1.0\" spec.mode cluster or client. Currently only cluster is supported spec.image User-supplied image containing spark-job dependencies that will be copied to the specified volume mount spec.sparkImage Spark image which will be deployed to driver and executor pods, which must contain spark environment needed by the job e.g. docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 spec.sparkImagePullPolicy Optional Enum (one of Always, IfNotPresent or Never) that determines the pull policy of the spark job image spec.sparkImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling any of the images used by a SparkApplication resource. Each reference has a single property (name) that must contain a reference to a valid secret spec.mainApplicationFile The actual application file that will be called by spark-submit spec.mainClass The main class i.e. entry point for JVM artifacts spec.args Arguments passed directly to the job artifact spec.s3bucket S3 bucket and connection specification. See the S3 bucket specification for more details. spec.sparkConf A map of key/value strings that will be passed directly to spark-submit spec.deps.requirements A list of python packages that will be installed via pip spec.deps.packages A list of packages that is passed directly to spark-submit spec.deps.excludePackages A list of excluded packages that is passed directly to spark-submit spec.deps.repositories A list of repositories that is passed directly to spark-submit spec.volumes A list of volumes spec.volumes.name The volume name spec.volumes.persistentVolumeClaim.claimName The persistent volume claim backing the volume spec.driver.cores Number of cores used by the driver (only in cluster mode) spec.driver.coreLimit Total cores for all executors spec.driver.memory Specified memory for the driver spec.driver.volumeMounts A list of mounted volumes for the driver spec.driver.volumeMounts.name Name of mount spec.driver.volumeMounts.mountPath Volume mount path spec.driver.nodeSelector A dictionary of labels to use for node selection when scheduling the driver N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere. spec.executor.cores Number of cores for each executor spec.executor.instances Number of executor instances launched for this job spec.executor.memory Memory specified for executor spec.executor.volumeMounts A list of mounted volumes for each executor spec.executor.volumeMounts.name Name of mount spec.executor.volumeMounts.mountPath Volume mount path spec.executor.nodeSelector A dictionary of labels to use for node selection when scheduling the executors N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere.","title":"Usage","component":"spark-k8s","version":"0.5","name":"usage","url":"/spark-k8s/stable/usage.html","titles":[{"text":"Examples","hash":"_examples","id":1},{"text":"Pyspark: externally located artifact and dataset","hash":"_pyspark_externally_located_artifact_and_dataset","id":2},{"text":"Pyspark: externally located dataset, artifact available via PVC/volume mount","hash":"_pyspark_externally_located_dataset_artifact_available_via_pvcvolume_mount","id":3},{"text":"JVM (Scala): externally located artifact and dataset","hash":"_jvm_scala_externally_located_artifact_and_dataset","id":4},{"text":"JVM (Scala): externally located artifact accessed with credentials","hash":"_jvm_scala_externally_located_artifact_accessed_with_credentials","id":5},{"text":"JVM (Scala): externally located artifact accessed with job arguments provided via configuration map","hash":"_jvm_scala_externally_located_artifact_accessed_with_job_arguments_provided_via_configuration_map","id":6},{"text":"S3 bucket specification","hash":"_s3_bucket_specification","id":7},{"text":"CRD argument coverage","hash":"_crd_argument_coverage","id":8}]},"356":{"id":356,"text":"Once you have followed the steps in the Installation section to install the operator and its dependencies, you will now create a Spark job. Afterwards you can verify that it works by looking at the logs from the driver pod. A Spark application is made of up three components: Job: this will build a spark-submit command from the resource, passing this to internal spark code together with templates for building the driver and executor pods Driver: the driver starts the designated number of executors and removes them when the job is completed. Executor(s): responsible for executing the job itself Create a file named pyspark-pi.yaml with the following contents: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: pyspark-pi namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/examples/src/main/python/pi.py driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" And apply it: kubectl apply -f pyspark-pi.yaml Where: metadata.name contains the name of the SparkApplication spec.version: the current version is \"1.0\" spec.sparkImage: the docker image that will be used by job, driver and executor pods. This can be provided by the user. spec.mode: only cluster is currently supported spec.mainApplicationFile: the artifact (Java, Scala or Python) that forms the basis of the Spark job. This path is relative to the image, so in this case we are running an example python script (that calculates the value of pi): it is bundled with the Spark code and therefore already present in the job image spec.driver: driver-specific settings. spec.executor: executor-specific settings. If using Stackable image versions, please note that the version you need to specify for spec.version is not only the version of Spark which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. This will create the SparkApplication that in turn creates the Spark job. As mentioned above, the SparkApplication that has just been created will build a spark-submit command and pass it to the driver pod, which in turn will create executor pods that run for the duration of the job before being clean up. A running process will look like this: pyspark-pi-xxxx: this is the initialising job that creates the spark-submit command (named as metadata.name with a unique suffix) pyspark-pi-xxxxxxx-driver: the driver pod that drives the execution pythonpi-xxxxxxxxx-exec-x: the set of executors started by the driver (in our example spec.executor.instances was set to 3 which is why we have 3 executors) Job progress can be followed by issuing this command: kubectl wait pods -l 'job-name=pyspark-pi' \\ --for jsonpath='{.status.phase}'=Succeeded \\ --timeout 300s When the job completes the driver cleans up the executor. The initial job is persisted for several minutes before being removed. The completed state will look like this: The driver logs can be inspected for more information about the results of the job. In this case we expect to find the results of our (approximate!) pi calculation:","title":"First steps","component":"spark-k8s","version":"0.5","name":"first_steps","url":"/spark-k8s/stable/getting_started/first_steps.html","titles":[{"text":"Starting a Spark job","hash":"_starting_a_spark_job","id":1},{"text":"Verify that it works","hash":"_verify_that_it_works","id":2}]},"357":{"id":357,"text":"This guide will get you started with Spark using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, executing your first Spark job and reviewing its result. You will need: a Kubernetes cluster kubectl Helm The Guide is divided into two steps: Installing the Operators. Starting a Spark job.","title":"Getting started","component":"spark-k8s","version":"0.5","name":"index","url":"/spark-k8s/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"358":{"id":358,"text":"On this page you will install the Stackable Spark-on-Kubernetes operator as well as the Commons and Secret operators which are required by all Stackable operators. Spark applications almost always require dependencies like database drivers, REST api clients and many others. These dependencies must be available on the classpath of each executor (and in some cases of the driver, too). There are multiple ways to provision Spark jobs with such dependencies: some are built into Spark itself while others are implemented at the operator level. In this guide we are going to keep things simple and look at executing a Spark job that has a minimum of dependencies. More information about the different ways to define Spark jobs and their dependencies is given on the following pages: Usage Job Dependencies There are 2 ways to install Stackable operators Using stackablectl Using a Helm chart stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install the Spark-k8s operator: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ spark-k8s=0.5.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing spark-k8s operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the operator. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait spark-k8s-operator stackable-dev/spark-k8s-operator --version 0.5.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the SparkApplication (as well as the CRDs for the required operators). You are now ready to create a Spark job. Execute a Spark Job and verify that it works by inspecting the pod logs.","title":"Installation","component":"spark-k8s","version":"0.5","name":"installation","url":"/spark-k8s/stable/getting_started/installation.html","titles":[{"text":"Dependencies","hash":"_dependencies","id":1},{"text":"Stackable Operators","hash":"_stackable_operators","id":2},{"text":"stackablectl","hash":"_stackablectl","id":3},{"text":"Helm","hash":"_helm","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"359":{"id":359,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test","title":"","component":"spark-k8s","version":"nightly","name":"commandline_args","url":"/spark-k8s/nightly/commandline_args.html","titles":[{"text":"watch-namespace","hash":"_watch_namespace","id":1}]},"360":{"id":360,"text":"This operator accepts the following command line parameters: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-spark-k8s-operator run --watch-namespace test This operator accepts the following environment variables: Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"Configuration","component":"spark-k8s","version":"nightly","name":"configuration","url":"/spark-k8s/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2},{"text":"Environment variables","hash":"_environment_variables","id":3},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":4}]},"361":{"id":361,"text":"Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-spark-k8s-operator run or via docker: docker run \\ --name spark-k8s-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/spark-k8s-operator:latest","title":"","component":"spark-k8s","version":"nightly","name":"env_var_args","url":"/spark-k8s/nightly/env_var_args.html","titles":[{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":1}]},"362":{"id":362,"text":"This is an operator for Kubernetes that can manage Apache Spark kubernetes clusters. This operator only works with images from the Stackable repository The Stackable Operator for Apache Spark on Kubernetes currently supports the following versions of Spark: 3.2.1-hadoop3.2 3.2.1-hadoop3.2-python39 3.3.0-hadoop3 docker pull docker.stackable.tech/stackable/spark-k8s:","title":"Stackable Operator for Apache Spark on Kubernetes","component":"spark-k8s","version":"nightly","name":"index","url":"/spark-k8s/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"363":{"id":363,"text":"The Stackable Spark-on-Kubernetes operator enables users to run Apache Spark workloads in a Kubernetes cluster easily by eliminating the requirement of having a local Spark installation. For this purpose, Stackble provides ready made Docker images with recent versions of Apache Spark and Python - for PySpark jobs - that provide the basis for running those workloads. Users of the Stackable Spark-on-Kubernetes operator can run their workloads on any recent Kubernetes cluster by applying a SparkApplication custom resource in which the job code, job dependencies, input and output data locations can be specified. The Stackable operator translates the user’s SparkApplication manifest into a Kubernetes Job object and handles control to the Apache Spark scheduler for Kubernetes to construct the necessary driver and executor Pods. When the job is finished, the Pods are terminated and the Kubernetes Job is completed. The base images provided by Stackable contain only the minimum of components to run Spark workloads. This is done mostly for performance and compatibility reasons. Many Spark workloads build on top of third party libraries and frameworks and thus depend on additional packages that are not included in the Stackable images. This guide explains how users can provision their Spark jobs with additional dependencies. There are multiple ways to submit Apache Spark jobs with external dependencies. Each has its own advantages and disadvantages and the choice of one over the other depends on existing technical and managerial constraints. To provision job dependencies in their workloads, users have to construct their SparkApplication with one of the following dependency specifications: Hardened or encapsulated job images Dependency volumes Spark native package coordinates and Python requirements The following table provides a high level overview of the relevant aspects of each method. Dependency specification Job image size Reproduciblity Dev-op cost Encapsulated job images Large Guaranteed Medium to High Dependency volumes Small Guaranteed Small to Medium Spark and Python packages Small Not guranteed Small With this method, users submit a SparkApplication for which the sparkImage refers to a Docker image containing Apache Spark itself, the job code and dependencies required by the job. It is recommended the users base their image on one of the Stackable images to ensure compatibility with the Stackable operator. Since all packages required to run the Spark job are bundled in the image, the size of this image tends to get very large while at the same time guaranteeing reproducibility between submissions. Example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: spark-pi spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 (1) mode: cluster mainClass: org.apache.spark.examples.SparkPi mainApplicationFile: /stackable/spark/examples/jars/spark-examples_2.12-3.3.0.jar (2) driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" 1 Name of the encapsulated image. 2 Name of the Spark job to run. With this method, the user provisions the job dependencies from a PersistentVolume as shown in this example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors The Spark operator has no control over the contents of the dependency volume. It is the responsibility of the user to make sure all required dependencies are installed in the correct versions. A PersistentVolumeClaim and the associated PersistentVolume can be defined like this: --- apiVersion: v1 kind: PersistentVolume metadata: name: pv-ksv (1) spec: storageClassName: standard accessModes: - ReadWriteOnce capacity: storage: 2Gi hostPath: path: /some-host-location --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-ksv (2) spec: volumeName: pv-ksv (1) accessModes: - ReadWriteOnce resources: requests: storage: 1Gi --- apiVersion: batch/v1 kind: Job metadata: name: aws-deps spec: template: spec: restartPolicy: Never volumes: - name: job-deps (3) persistentVolumeClaim: claimName: pvc-ksv (2) containers: - name: aws-deps volumeMounts: - name: job-deps (4) mountPath: /stackable/spark/dependencies 1 Reference to a PersistentVolume, defining some cluster-reachable storage 2 The name of the PersistentVolumeClaim that references the PV 3 Defines a Volume backed by the PVC, local to the Custom Resource 4 Defines the VolumeMount that is used by the Custom Resource The last and most flexible way to provision dependencies is to use the built-in spark-submit support for Maven package coordinates. These can be specified by adding the following section to the SparkApplication manifest file: spec: deps: repositories: - https://repository.example.com/prod packages: - com.example:some-package:1.0.0 excludePackages: - com.example:other-package These directly translate to the spark-submit parameters --packages, --exclude-packages, and --repositories. When submitting PySpark jobs, users can specify pip requirements that are installed before the driver and executor pods are created. Here is an example: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) Note the section requirements. Also note that in this case, a sparkImage that bundles Python has to be provisioned.","title":"Job Dependencies","component":"spark-k8s","version":"nightly","name":"job_dependencies","url":"/spark-k8s/nightly/job_dependencies.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Dependency provisioning","hash":"_dependency_provisioning","id":2},{"text":"Hardened or encapsulated job images","hash":"_hardened_or_encapsulated_job_images","id":3},{"text":"Dependency volumes","hash":"_dependency_volumes","id":4},{"text":"Spark native package coordinates and Python requirements","hash":"_spark_native_package_coordinates_and_python_requirements","id":5}]},"364":{"id":364,"text":"The Spark-Kubernetes RBAC documentation describes what is needed for spark-submit jobs to run successfully: minimally a role/cluster-role to allow the driver pod to create and manage executor pods. However, to add security, each spark-submit job launched by the spark-k8s operator will be assigned its own service account. When the spark-k8s operator is installed via Helm, a cluster role named spark-k8s-clusterrole is created with pre-defined permissions. When a new Spark application is submitted, the operator creates a new service account with the same name as the application and binds this account to the cluster role spark-k8s-clusterrole created by Helm.","title":"RBAC","component":"spark-k8s","version":"nightly","name":"rbac","url":"/spark-k8s/nightly/rbac.html","titles":[{"text":"Overview","hash":"_overview","id":1}]},"365":{"id":365,"text":"The following examples have the following spec fields in common: version: the current version is \"1.0\" sparkImage: the docker image that will be used by job, driver and executor pods. This can be provided by the user. mode: only cluster is currently supported mainApplicationFile: the artifact (Java, Scala or Python) that forms the basis of the Spark job. args: these are the arguments passed directly to the application. In the examples below it is e.g. the input path for part of the public New York taxi dataset. sparkConf: these list spark configuration settings that are passed directly to spark-submit and which are best defined explicitly by the user. Since the SparkApplication \"knows\" that there is an external dependency (the s3 bucket where the data and/or the application is located) and how that dependency should be treated (i.e. what type of credential checks are required, if any), it is better to have these things declared together. volumes: refers to any volumes needed by the SparkApplication, in this case an underlying PersistentVoulmeClaim. driver: driver-specific settings, including any volume mounts. executor: executor-specific settings, including any volume mounts. Job-specific settings are annotated below. --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-external-dependencies namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny_tlc_report.py (1) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (2) deps: requirements: - tabulate==0.8.9 (3) sparkConf: (4) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (5) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (6) 1 Job python artifact (external) 2 Job argument (external) 3 List of python job requirements: these will be installed in the pods via pip 4 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in s3) 5 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 6 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-image namespace: default spec: version: \"1.0\" image: docker.stackable.tech/stackable/ny-tlc-report:0.1.0 (1) sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/jobs/ny_tlc_report.py (2) args: - \"--input 's3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" (3) deps: requirements: - tabulate==0.8.9 (4) sparkConf: (5) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (6) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (7) 1 Job image: this contains the job artifact that will be retrieved from the volume mount backed by the PVC 2 Job python artifact (local) 3 Job argument (external) 4 List of python job requirements: these will be installed in the pods via pip 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store) 6 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 7 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-pvc namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.0-SNAPSHOT.jar (1) mainClass: org.example.App (2) args: - \"'s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv'\" sparkConf: (3) \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" volumes: - name: job-deps (4) persistentVolumeClaim: claimName: pvc-ksv driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies (5) 1 Job artifact located on S3. 2 Job main class 3 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources (in this case, in an S3 store, accessed without credentials) 4 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 5 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: example-sparkapp-s3-private spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://my-bucket/spark-examples_2.12-3.3.0.jar (1) mainClass: org.apache.spark.examples.SparkPi (2) s3bucket: (3) inline: bucketName: my-bucket connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: (4) secretClass: s3-credentials-class sparkConf: (5) spark.hadoop.fs.s3a.aws.credentials.provider: \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\" (6) spark.driver.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" spark.executor.extraClassPath: \"/dependencies/jars/hadoop-aws-3.2.0.jar:/dependencies/jars/aws-java-sdk-bundle-1.11.375.jar\" volumes: - name: spark-pi-deps (7) persistentVolumeClaim: claimName: spark-pi-pvc driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: spark-pi-deps mountPath: /dependencies (8) 1 Job python artifact (located in an S3 store) 2 Artifact class 3 S3 section, specifying the existing secret and S3 end-point (in this case, MinIO) 4 Credentials referencing a secretClass (not shown in is example) 5 Spark dependencies: the credentials provider (the user knows what is relevant here) plus dependencies needed to access external resources…​ 6 …​in this case, in an S3 store, accessed with the credentials defined in the secret 7 the name of the volume mount backed by a PersistentVolumeClaim that must be pre-existing 8 the path on the volume mount: this is referenced in the sparkConf section where the extra class path is defined for the driver and executors --- apiVersion: v1 kind: ConfigMap metadata: name: cm-job-arguments (1) data: job-args.txt: | s3a://nyc-tlc/trip data/yellow_tripdata_2021-07.csv (2) --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: ny-tlc-report-configmap namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: s3a://stackable-spark-k8s-jars/jobs/ny-tlc-report-1.1.0.jar (3) mainClass: tech.stackable.demo.spark.NYTLCReport volumes: - name: job-deps persistentVolumeClaim: claimName: pvc-ksv - name: cm-job-arguments configMap: name: cm-job-arguments (4) args: - \"--input /arguments/job-args.txt\" (5) sparkConf: \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\" \"spark.driver.extraClassPath\": \"/dependencies/jars/*\" \"spark.executor.extraClassPath\": \"/dependencies/jars/*\" driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) executor: cores: 1 instances: 3 memory: \"512m\" volumeMounts: - name: job-deps mountPath: /dependencies - name: cm-job-arguments (6) mountPath: /arguments (7) 1 Name of the configuration map 2 Argument required by the job 3 Job scala artifact that requires an input argument 4 The volume backed by the configuration map 5 The expected job argument, accessed via the mounted configuration map file 6 The name of the volume backed by the configuration map that will be mounted to the driver/executor 7 The mount location of the volume (this will contain a file /arguments/job-args.txt) You can specify S3 connection details directly inside the SparkApplication specification or by referring to an external S3Bucket custom resource. To specify S3 connection details directly as part of the SparkApplication resource you add an inline bucket configuration as shown below. s3bucket: (1) inline: bucketName: my-bucket (2) connection: inline: host: test-minio (3) port: 9000 (4) accessStyle: Path credentials: secretClass: s3-credentials-class (5) 1 Entry point for the bucket configuration. 2 Bucket name. 3 Bucket host. 4 Optional bucket port. 5 Name of the Secret object expected to contain the following keys: ACCESS_KEY_ID and SECRET_ACCESS_KEY It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the SparkApplication like this: s3bucket: reference: my-bucket-resource (1) 1 Name of the bucket resource with connection details. The resource named my-bucket-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Bucket metadata: name: my-bucket-resource spec: bucketName: my-bucket-name connection: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials-class This has the advantage that bucket configuration can be shared across `SparkApplication`s and reduces the cost of updating these details. Below are listed the CRD fields that can be defined by the user: CRD field Remarks apiVersion spark.stackable.tech/v1alpha1 kind SparkApplication metadata.name Job name spec.version \"1.0\" spec.mode cluster or client. Currently only cluster is supported spec.image User-supplied image containing spark-job dependencies that will be copied to the specified volume mount spec.sparkImage Spark image which will be deployed to driver and executor pods, which must contain spark environment needed by the job e.g. docker.stackable.tech/stackable/spark-k8s:3.3.0-stackable0.1.0 spec.sparkImagePullPolicy Optional Enum (one of Always, IfNotPresent or Never) that determines the pull policy of the spark job image spec.sparkImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling any of the images used by a SparkApplication resource. Each reference has a single property (name) that must contain a reference to a valid secret spec.mainApplicationFile The actual application file that will be called by spark-submit spec.mainClass The main class i.e. entry point for JVM artifacts spec.args Arguments passed directly to the job artifact spec.s3bucket S3 bucket and connection specification. See the S3 bucket specification for more details. spec.sparkConf A map of key/value strings that will be passed directly to spark-submit spec.deps.requirements A list of python packages that will be installed via pip spec.deps.packages A list of packages that is passed directly to spark-submit spec.deps.excludePackages A list of excluded packages that is passed directly to spark-submit spec.deps.repositories A list of repositories that is passed directly to spark-submit spec.volumes A list of volumes spec.volumes.name The volume name spec.volumes.persistentVolumeClaim.claimName The persistent volume claim backing the volume spec.driver.cores Number of cores used by the driver (only in cluster mode) spec.driver.coreLimit Total cores for all executors spec.driver.memory Specified memory for the driver spec.driver.volumeMounts A list of mounted volumes for the driver spec.driver.volumeMounts.name Name of mount spec.driver.volumeMounts.mountPath Volume mount path spec.driver.nodeSelector A dictionary of labels to use for node selection when scheduling the driver N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere. spec.executor.cores Number of cores for each executor spec.executor.instances Number of executor instances launched for this job spec.executor.memory Memory specified for executor spec.executor.volumeMounts A list of mounted volumes for each executor spec.executor.volumeMounts.name Name of mount spec.executor.volumeMounts.mountPath Volume mount path spec.executor.nodeSelector A dictionary of labels to use for node selection when scheduling the executors N.B. this assumes there are no implicit node dependencies (e.g. PVC, VolumeMount) defined elsewhere.","title":"Usage","component":"spark-k8s","version":"nightly","name":"usage","url":"/spark-k8s/nightly/usage.html","titles":[{"text":"Examples","hash":"_examples","id":1},{"text":"Pyspark: externally located artifact and dataset","hash":"_pyspark_externally_located_artifact_and_dataset","id":2},{"text":"Pyspark: externally located dataset, artifact available via PVC/volume mount","hash":"_pyspark_externally_located_dataset_artifact_available_via_pvcvolume_mount","id":3},{"text":"JVM (Scala): externally located artifact and dataset","hash":"_jvm_scala_externally_located_artifact_and_dataset","id":4},{"text":"JVM (Scala): externally located artifact accessed with credentials","hash":"_jvm_scala_externally_located_artifact_accessed_with_credentials","id":5},{"text":"JVM (Scala): externally located artifact accessed with job arguments provided via configuration map","hash":"_jvm_scala_externally_located_artifact_accessed_with_job_arguments_provided_via_configuration_map","id":6},{"text":"S3 bucket specification","hash":"_s3_bucket_specification","id":7},{"text":"CRD argument coverage","hash":"_crd_argument_coverage","id":8}]},"366":{"id":366,"text":"Once you have followed the steps in the Installation section to install the operator and its dependencies, you will now create a Spark job. Afterwards you can verify that it works by looking at the logs from the driver pod. A Spark application is made of up three components: Job: this will build a spark-submit command from the resource, passing this to internal spark code together with templates for building the driver and executor pods Driver: the driver starts the designated number of executors and removes them when the job is completed. Executor(s): responsible for executing the job itself Create a file named pyspark-pi.yaml with the following contents: --- apiVersion: spark.stackable.tech/v1alpha1 kind: SparkApplication metadata: name: pyspark-pi namespace: default spec: version: \"1.0\" sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.1.0 mode: cluster mainApplicationFile: local:///stackable/spark/examples/src/main/python/pi.py driver: cores: 1 coreLimit: \"1200m\" memory: \"512m\" executor: cores: 1 instances: 3 memory: \"512m\" And apply it: kubectl apply -f pyspark-pi.yaml Where: metadata.name contains the name of the SparkApplication spec.version: the current version is \"1.0\" spec.sparkImage: the docker image that will be used by job, driver and executor pods. This can be provided by the user. spec.mode: only cluster is currently supported spec.mainApplicationFile: the artifact (Java, Scala or Python) that forms the basis of the Spark job. This path is relative to the image, so in this case we are running an example python script (that calculates the value of pi): it is bundled with the Spark code and therefore already present in the job image spec.driver: driver-specific settings. spec.executor: executor-specific settings. If using Stackable image versions, please note that the version you need to specify for spec.version is not only the version of Spark which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. This will create the SparkApplication that in turn creates the Spark job. As mentioned above, the SparkApplication that has just been created will build a spark-submit command and pass it to the driver pod, which in turn will create executor pods that run for the duration of the job before being clean up. A running process will look like this: pyspark-pi-xxxx: this is the initialising job that creates the spark-submit command (named as metadata.name with a unique suffix) pyspark-pi-xxxxxxx-driver: the driver pod that drives the execution pythonpi-xxxxxxxxx-exec-x: the set of executors started by the driver (in our example spec.executor.instances was set to 3 which is why we have 3 executors) Job progress can be followed by issuing this command: kubectl wait pods -l 'job-name=pyspark-pi' \\ --for jsonpath='{.status.phase}'=Succeeded \\ --timeout 300s When the job completes the driver cleans up the executor. The initial job is persisted for several minutes before being removed. The completed state will look like this: The driver logs can be inspected for more information about the results of the job. In this case we expect to find the results of our (approximate!) pi calculation:","title":"First steps","component":"spark-k8s","version":"nightly","name":"first_steps","url":"/spark-k8s/nightly/getting_started/first_steps.html","titles":[{"text":"Starting a Spark job","hash":"_starting_a_spark_job","id":1},{"text":"Verify that it works","hash":"_verify_that_it_works","id":2}]},"367":{"id":367,"text":"This guide will get you started with Spark using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, executing your first Spark job and reviewing its result. You will need: a Kubernetes cluster kubectl Helm The Guide is divided into two steps: Installing the Operators. Starting a Spark job.","title":"Getting started","component":"spark-k8s","version":"nightly","name":"index","url":"/spark-k8s/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"368":{"id":368,"text":"On this page you will install the Stackable Spark-on-Kubernetes operator as well as the Commons and Secret operators which are required by all Stackable operators. Spark applications almost always require dependencies like database drivers, REST api clients and many others. These dependencies must be available on the classpath of each executor (and in some cases of the driver, too). There are multiple ways to provision Spark jobs with such dependencies: some are built into Spark itself while others are implemented at the operator level. In this guide we are going to keep things simple and look at executing a Spark job that has a minimum of dependencies. More information about the different ways to define Spark jobs and their dependencies is given on the following pages: Usage Job Dependencies There are 2 ways to install Stackable operators Using stackablectl Using a Helm chart stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install the Spark-k8s operator: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ spark-k8s=0.5.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing spark-k8s operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the operator. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait spark-k8s-operator stackable-dev/spark-k8s-operator --version 0.5.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the SparkApplication (as well as the CRDs for the required operators). You are now ready to create a Spark job. Execute a Spark Job and verify that it works by inspecting the pod logs.","title":"Installation","component":"spark-k8s","version":"nightly","name":"installation","url":"/spark-k8s/nightly/getting_started/installation.html","titles":[{"text":"Dependencies","hash":"_dependencies","id":1},{"text":"Stackable Operators","hash":"_stackable_operators","id":2},{"text":"stackablectl","hash":"_stackablectl","id":3},{"text":"Helm","hash":"_helm","id":4},{"text":"What’s next","hash":"_whats_next","id":5}]},"369":{"id":369,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-superset-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-superset-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest","title":"Configuration","component":"superset","version":"0.5","name":"configuration","url":"/superset/0.5/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"370":{"id":370,"text":"Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-superset-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-superset-operator run --watch-namespace test","title":"","component":"superset","version":"0.5","name":"commandline_args","url":"/superset/0.5/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"371":{"id":371,"text":"Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest","title":"","component":"superset","version":"0.5","name":"env_var_args","url":"/superset/0.5/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"372":{"id":372,"text":"This is an operator for Kubernetes that can manage Apache Superset clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache Superset currently supports the following versions of Superset: 1.3.2 1.4.1 1.5.1 ￼ docker pull docker.stackable.tech/stackable/superset:-stackable","title":"Stackable Operator for Apache Superset","component":"superset","version":"0.5","name":"index","url":"/superset/0.5/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"373":{"id":373,"text":"There are three ways to run the Superset Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ We also need some additional components of the Stackable Data Platform (if not installed already): $ helm install commons-operator stackable/commons-operator $ helm install secret-operator stackable/secret-operator Then install the Stackable Operator for Apache Superset $ helm install superset-operator stackable/superset-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache Superset service. You are now ready to deploy Apache Superset in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/superset-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache Superset in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f supersetcluster.crd.yaml $ kubectl apply -f supersetdb.crd.yaml $ kubectl apply -f druidconnection.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.57 at the time of writing). cargo run crd | kubectl apply -f - cargo run run","title":"Installation","component":"superset","version":"0.5","name":"installation","url":"/superset/0.5/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"374":{"id":374,"text":"The metadata of Superset (slices, connections, tables, dashboards, …​) is stored in an SQL database. For testing purposes, you can spin up a PostgreSQL database with the following command: helm repo add bitnami https://charts.bitnami.com/bitnami helm install superset bitnami/postgresql \\ --set auth.username=superset \\ --set auth.password=superset \\ --set auth.database=superset A secret with the necessary credentials must be created, this entails database connection credentials as well as an admin account for Superset itself: apiVersion: v1 kind: Secret metadata: name: simple-superset-credentials type: Opaque stringData: adminUser.username: admin adminUser.firstname: Superset adminUser.lastname: Admin adminUser.email: admin@superset.com adminUser.password: admin connections.secretKey: thisISaSECRET_1234 connections.sqlalchemyDatabaseUri: postgresql://superset:superset@superset-postgresql.default.svc.cluster.local/superset The connections.secretKey will be used for securely signing the session cookies and can be used for any other security related needs by extensions. It should be a long random string of bytes. connections.sqlalchemyDatabaseUri must contain the connection string to the SQL database storing the Superset metadata. The adminUser fields are used to create an admin user. Please note that the admin user will be disabled if you use a non-default authentication mechanism like LDAP. A Superset node must be created as a custom resource: apiVersion: superset.stackable.tech/v1alpha1 kind: SupersetCluster metadata: name: superset spec: version: 1.5.1-stackable0.1.0 statsdExporterVersion: v0.22.4 credentialsSecret: simple-superset-credentials loadExamplesOnInit: true nodes: roleGroups: default: config: rowLimit: 10000 metadata.name contains the name of the Superset cluster. The label of the Docker image provided by Stackable must be set in spec.version. Please note that the version you need to specify is not only the version of Apache Superset which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. spec.statsdExporterVersion must contain the tag of a statsd-exporter Docker image in the Stackable repository. The previously created secret must be referenced in spec.credentialsSecret. The spec.loadExamplesOnInit key is optional and defaults to false, it can be set to true to load example data into Superset when the database is initialized. The rowLimit configuration option defines the row limit when requesting chart data. The first time the cluster is created, the operator creates a SupersetDB resource with the same name as the cluster. It ensures that the database is initialized (schema created, admin user created). A Kubernetes job is created which starts a pod to initialize the database. This can take a while. When the Superset node is created and the database is initialized, Superset can be opened in the browser. The Superset port which defaults to 8088 can be forwarded to the local host: kubectl port-forward service/simple-superset-external 8088 Then it can be opened in the browser with http://localhost:8088. Enter the admin credentials from the Kubernetes secret: If the examples were loaded then some dashboards are already available: Every user has to authenticate themselves before using Superset. There are multiple options to set up the authentication of users. The default setting is to manually set up users via the Webinterface. Superset supports authentication of users against an LDAP server. Have a look at the LDAP example and the general Stackable Authentication documentation on how to set it up. In general, it requires you to specify a AuthenticationClass which is used to authenticate the users. In this example we assign all the users the Admin role once they log into Superset. apiVersion: superset.stackable.tech/v1alpha1 kind: SupersetCluster metadata: name: superset-with-ldap-server-veri-tls spec: version: 1.5.1-stackable0.1.0 [...] authenticationConfig: authenticationClass: superset-with-ldap-server-veri-tls-ldap userRegistrationRole: Admin Superset has a concept called Roles which allows you to grant user permissions based on roles. Have a look at the Superset documentation on Security. You can see all the available roles in the Webinterface of Superset. You can view all the available roles in the Webinterface of Superset and can also assign users to these roles. Superset supports assigning roles to users based on their LDAP group membership. This is not supported yet. Currently all the users logging in via LDAP get assigned the same role which you can configure via the attribute authenticationConfig.userRegistrationRole on the SupersetCluster object. The operator can automatically connect Superset to Apache Druid clusters managed by the Stackable Druid Cluster. To do so, create a DruidConnection resource: apiVersion: superset.stackable.tech/v1alpha1 kind: DruidConnection metadata: name: superset-druid-connection spec: superset: name: superset namespace: default druid: name: my-druid-cluster namespace: default The name and namespace in spec.superset refer to the Superset cluster that you want to connect. Following our example above, the name is superset. In spec.druid you specify the name and namespace of your Druid cluster. The namespace part is optional; if it is omitted it will default to the namespace of the DruidConnection. The namespace for the Superset and Druid cluster can be omitted, in that case the Operator will assume that they are in the same namespace as the DruidConnection. Once the database is initialized, the connection will be added to the cluster by the operator. You can see it in the user interface under Data > Databases: The managed Superset instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by the operator (such as the STATS_LOGGER) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify configOverrides for the superset_config.py. For example, if you want to set the CSV export encoding and the preferred databases adapt the nodes section of the cluster resource like so: nodes: roleGroups: default: config: {} configOverrides: superset_config.py: CSV_EXPORT: \"{'encoding': 'utf-8'}\" PREFERRED_DATABASES: |- [ 'PostgreSQL', 'Presto', 'MySQL', 'SQLite', # etc. ] Just as for the config, it is possible to specify this at the role level as well: nodes: configOverrides: superset_config.py: CSV_EXPORT: \"{'encoding': 'utf-8'}\" PREFERRED_DATABASES: |- [ 'PostgreSQL', 'Presto', 'MySQL', 'SQLite', # etc. ] roleGroups: default: config: {} All override property values must be strings. They are treated as Python expressions. So care must be taken to not produce an invalid configuration. For a full list of configuration options we refer to the main config file for Superset. In a similar fashion, environment variables can be (over)written. For example per role group: nodes: roleGroups: default: config: {} envOverrides: FLASK_ENV: development or per role: nodes: envOverrides: FLASK_ENV: development roleGroups: default: config: {}","title":"Usage","component":"superset","version":"0.5","name":"usage","url":"/superset/0.5/usage.html","titles":[{"text":"Database for the Superset metadata","hash":"_database_for_the_superset_metadata","id":1},{"text":"Secret with Superset credentials","hash":"_secret_with_superset_credentials","id":2},{"text":"Creation of a Superset node","hash":"_creation_of_a_superset_node","id":3},{"text":"Initialization of the Superset database","hash":"_initialization_of_the_superset_database","id":4},{"text":"Using Superset","hash":"_using_superset","id":5},{"text":"Authentication","hash":"_authentication","id":6},{"text":"Webinterface","hash":"_webinterface","id":7},{"text":"LDAP","hash":"_ldap","id":8},{"text":"Authorization","hash":"_authorization","id":9},{"text":"Webinterface","hash":"_webinterface_2","id":10},{"text":"LDAP","hash":"_ldap_2","id":11},{"text":"Connecting Apache Druid Clusters","hash":"_connecting_apache_druid_clusters","id":12},{"text":"Monitoring","hash":"_monitoring","id":13},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":14},{"text":"Configuration Properties","hash":"_configuration_properties","id":15},{"text":"Environment Variables","hash":"_environment_variables","id":16}]},"375":{"id":375,"text":"Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-superset-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-superset-operator run --watch-namespace test","title":"","component":"superset","version":"0.6","name":"commandline_args","url":"/superset/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"376":{"id":376,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-superset-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-superset-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest","title":"Configuration","component":"superset","version":"0.6","name":"configuration","url":"/superset/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"377":{"id":377,"text":"Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest","title":"","component":"superset","version":"0.6","name":"env_var_args","url":"/superset/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"378":{"id":378,"text":"This is an operator for Kubernetes that can manage Apache Superset clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache Superset currently supports the following versions of Superset: 1.3.2 1.4.1 1.5.1 ￼ docker pull docker.stackable.tech/stackable/superset:-stackable","title":"Stackable Operator for Apache Superset","component":"superset","version":"0.6","name":"index","url":"/superset/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"379":{"id":379,"text":"Every user has to authenticate themselves before using Superset. There are multiple options to set up the authentication of users. The default setting is to manually set up users via the Webinterface. Superset supports authentication of users against an LDAP server. Have a look at the LDAP example and the general Stackable Authentication documentation on how to set it up. In general, it requires you to specify a AuthenticationClass which is used to authenticate the users. In this example we assign all the users the Admin role once they log into Superset. apiVersion: superset.stackable.tech/v1alpha1 kind: SupersetCluster metadata: name: superset-with-ldap-server-veri-tls spec: version: 1.5.1-stackable0.1.0 [...] authenticationConfig: authenticationClass: superset-with-ldap-server-veri-tls-ldap userRegistrationRole: Admin Superset has a concept called Roles which allows you to grant user permissions based on roles. Have a look at the Superset documentation on Security. You can see all the available roles in the Webinterface of Superset. You can view all the available roles in the Webinterface of Superset and can also assign users to these roles. Superset supports assigning roles to users based on their LDAP group membership. This is not supported yet. Currently all the users logging in via LDAP get assigned the same role which you can configure via the attribute authenticationConfig.userRegistrationRole on the SupersetCluster object. The operator can automatically connect Superset to Apache Druid clusters managed by the Stackable Druid Cluster. To do so, create a DruidConnection resource: apiVersion: superset.stackable.tech/v1alpha1 kind: DruidConnection metadata: name: superset-druid-connection spec: superset: name: superset namespace: default druid: name: my-druid-cluster namespace: default The name and namespace in spec.superset refer to the Superset cluster that you want to connect. Following our example above, the name is superset. In spec.druid you specify the name and namespace of your Druid cluster. The namespace part is optional; if it is omitted it will default to the namespace of the DruidConnection. The namespace for the Superset and Druid cluster can be omitted, in that case the Operator will assume that they are in the same namespace as the DruidConnection. Once the database is initialized, the connection will be added to the cluster by the operator. You can see it in the user interface under Data > Databases: The managed Superset instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by the operator (such as the STATS_LOGGER) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify configOverrides for the superset_config.py. For example, if you want to set the CSV export encoding and the preferred databases adapt the nodes section of the cluster resource like so: nodes: roleGroups: default: config: {} configOverrides: superset_config.py: CSV_EXPORT: \"{'encoding': 'utf-8'}\" PREFERRED_DATABASES: |- [ 'PostgreSQL', 'Presto', 'MySQL', 'SQLite', # etc. ] Just as for the config, it is possible to specify this at the role level as well: nodes: configOverrides: superset_config.py: CSV_EXPORT: \"{'encoding': 'utf-8'}\" PREFERRED_DATABASES: |- [ 'PostgreSQL', 'Presto', 'MySQL', 'SQLite', # etc. ] roleGroups: default: config: {} All override property values must be strings. They are treated as Python expressions. So care must be taken to not produce an invalid configuration. For a full list of configuration options we refer to the main config file for Superset. In a similar fashion, environment variables can be (over)written. For example per role group: nodes: roleGroups: default: config: {} envOverrides: FLASK_ENV: development or per role: nodes: envOverrides: FLASK_ENV: development roleGroups: default: config: {}","title":"Usage","component":"superset","version":"0.6","name":"usage","url":"/superset/stable/usage.html","titles":[{"text":"Authentication","hash":"_authentication","id":1},{"text":"Webinterface","hash":"_webinterface","id":2},{"text":"LDAP","hash":"_ldap","id":3},{"text":"Authorization","hash":"_authorization","id":4},{"text":"Webinterface","hash":"_webinterface_2","id":5},{"text":"LDAP","hash":"_ldap_2","id":6},{"text":"Connecting Apache Druid Clusters","hash":"_connecting_apache_druid_clusters","id":7},{"text":"Monitoring","hash":"_monitoring","id":8},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":9},{"text":"Configuration Properties","hash":"_configuration_properties","id":10},{"text":"Environment Variables","hash":"_environment_variables","id":11}]},"380":{"id":380,"text":"Once you have followed the steps in Installation for the Operator and its dependencies, you will now go through the steps to set up and connect to a Superset instance. Superset metadata (slices, connections, tables, dashboards etc.) is stored in an SQL database. For testing purposes, you can spin up a PostgreSQL database with the following commands: helm repo add bitnami https://charts.bitnami.com/bitnami helm install --wait superset bitnami/postgresql \\ --set auth.username=superset \\ --set auth.password=superset \\ --set auth.database=superset A secret with the necessary credentials must be created: this contains database connection credentials as well as an admin account for Superset itself. Create a file called superset-credentials.yaml: --- apiVersion: v1 kind: Secret metadata: name: simple-superset-credentials type: Opaque stringData: adminUser.username: admin adminUser.firstname: Superset adminUser.lastname: Admin adminUser.email: admin@superset.com adminUser.password: admin connections.secretKey: thisISaSECRET_1234 connections.sqlalchemyDatabaseUri: postgresql://superset:superset@superset-postgresql.default.svc.cluster.local/superset And apply it: kubectl apply -f superset-credentials.yaml The connections.secretKey will be used for securely signing the session cookies and can be used for any other security related needs by extensions. It should be a long random string of bytes. connections.sqlalchemyDatabaseUri must contain the connection string to the SQL database storing the Superset metadata. The adminUser fields are used to create an admin user. Please note that the admin user will be disabled if you use a non-default authentication mechanism like LDAP. A Superset node must be created as a custom resource, create file called superset.yaml: --- apiVersion: superset.stackable.tech/v1alpha1 kind: SupersetCluster metadata: name: simple-superset spec: version: 1.5.1-stackable0.1.0 statsdExporterVersion: v0.22.4 credentialsSecret: simple-superset-credentials loadExamplesOnInit: true nodes: roleGroups: default: config: rowLimit: 10000 webserverTimeout: 300 And apply it: kubectl apply -f superset.yaml metadata.name contains the name of the Superset cluster. The label of the Docker image provided by Stackable must be set in spec.version. Please note that the version you need to specify is not only the version of Apache Superset which you want to roll out, but has to also include the Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. spec.statsdExporterVersion must contain the tag of a statsd-exporter Docker image in the Stackable repository. The previously created secret must be referenced in spec.credentialsSecret. The spec.loadExamplesOnInit key is optional and defaults to false, it can be set to true to load example data into Superset when the database is initialized. The rowLimit configuration option defines the row limit when requesting chart data. The webserverTimeout configuration option defines the maximum number of seconds a Superset request can take before timing out. This settings effect the maximum duration a query to an underlying datasource can take. If you get timeout errors before your query returns the result you may need to increase this timeout. The first time the cluster is created, the operator creates a SupersetDB resource with the same name as the cluster. It ensures that the database is initialized (with the creation of a schema and admin user). A Kubernetes job is created which starts a pod to initialize the database. This can take a while. You can use kubectl to wait on the resource: kubectl wait supersetdb/simple-superset \\ --for jsonpath='{.status.condition}'=Ready \\ --timeout 300s When the Superset node is created and the database is initialized, Superset can be opened in the browser. The Superset port which defaults to 8088 can be forwarded to the local host: kubectl port-forward service/simple-superset-external 8088 2>&1 >/dev/null & Then it can be opened in the browser with http://localhost:8088. Enter the admin credentials from the Kubernetes secret: If the examples were loaded then some dashboards are already available: Great! You have set up a Superset instance and connected to it! Look at the Usage page to find out more about configuring your Superset instance or have a look at the Superset documentation to create your first dashboard.","title":"First steps","component":"superset","version":"0.6","name":"first_steps","url":"/superset/stable/getting_started/first_steps.html","titles":[{"text":"Database for the Superset metadata","hash":"_database_for_the_superset_metadata","id":1},{"text":"Secret with Superset credentials","hash":"_secret_with_superset_credentials","id":2},{"text":"Creation of a Superset node","hash":"_creation_of_a_superset_node","id":3},{"text":"Initialization of the Superset database","hash":"_initialization_of_the_superset_database","id":4},{"text":"Using Superset","hash":"_using_superset","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"381":{"id":381,"text":"This guide will get you started with Superset using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Superset instance, connecting to it and looking at some sample data. You will need: a Kubernetes cluster kubectl Helm The Guide is divided into two steps: Installing the Operators. Setting up the Superset instance and connecting to it.","title":"Getting started","component":"superset","version":"0.6","name":"index","url":"/superset/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"382":{"id":382,"text":"On this page you will install the Stackable Superset Operator as well as the commons and secret Operator which are required by all Stackable Operators. There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all Operators necessary for Superset: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ superset=0.6.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing superset operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait superset-operator stackable-dev/superset-operator --version 0.6.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the Superset service (as well as the CRDs for the required operators). You are now ready to deploy Superset in Kubernetes. Deploy a Superset instance and connect to it.","title":"Installation","component":"superset","version":"0.6","name":"installation","url":"/superset/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"383":{"id":383,"text":"Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-superset-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-superset-operator run --watch-namespace test","title":"","component":"superset","version":"nightly","name":"commandline_args","url":"/superset/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"384":{"id":384,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false stackable-superset-operator run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: stackable-superset-operator run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest","title":"Configuration","component":"superset","version":"nightly","name":"configuration","url":"/superset/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"385":{"id":385,"text":"Default value: /etc/stackable/superset-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test stackable-superset-operator run or via docker: docker run \\ --name superset-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/superset-operator:latest","title":"","component":"superset","version":"nightly","name":"env_var_args","url":"/superset/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"386":{"id":386,"text":"This is an operator for Kubernetes that can manage Apache Superset clusters. This operator is part of the Stackable Data Platform and only works with images from the Stackable repository. The Stackable Operator for Apache Superset currently supports the following versions of Superset: 1.3.2 1.4.1 1.5.1 ￼ docker pull docker.stackable.tech/stackable/superset:-stackable","title":"Stackable Operator for Apache Superset","component":"superset","version":"nightly","name":"index","url":"/superset/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"387":{"id":387,"text":"Every user has to authenticate themselves before using Superset. There are multiple options to set up the authentication of users. The default setting is to manually set up users via the Webinterface. Superset supports authentication of users against an LDAP server. Have a look at the LDAP example and the general Stackable Authentication documentation on how to set it up. In general, it requires you to specify a AuthenticationClass which is used to authenticate the users. In this example we assign all the users the Admin role once they log into Superset. apiVersion: superset.stackable.tech/v1alpha1 kind: SupersetCluster metadata: name: superset-with-ldap-server-veri-tls spec: version: 1.5.1-stackable0.1.0 [...] authenticationConfig: authenticationClass: superset-with-ldap-server-veri-tls-ldap userRegistrationRole: Admin Superset has a concept called Roles which allows you to grant user permissions based on roles. Have a look at the Superset documentation on Security. You can see all the available roles in the Webinterface of Superset. You can view all the available roles in the Webinterface of Superset and can also assign users to these roles. Superset supports assigning roles to users based on their LDAP group membership. This is not supported yet. Currently all the users logging in via LDAP get assigned the same role which you can configure via the attribute authenticationConfig.userRegistrationRole on the SupersetCluster object. The operator can automatically connect Superset to Apache Druid clusters managed by the Stackable Druid Cluster. To do so, create a DruidConnection resource: apiVersion: superset.stackable.tech/v1alpha1 kind: DruidConnection metadata: name: superset-druid-connection spec: superset: name: superset namespace: default druid: name: my-druid-cluster namespace: default The name and namespace in spec.superset refer to the Superset cluster that you want to connect. Following our example above, the name is superset. In spec.druid you specify the name and namespace of your Druid cluster. The namespace part is optional; if it is omitted it will default to the namespace of the DruidConnection. The namespace for the Superset and Druid cluster can be omitted, in that case the Operator will assume that they are in the same namespace as the DruidConnection. Once the database is initialized, the connection will be added to the cluster by the operator. You can see it in the user interface under Data > Databases: The managed Superset instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by the operator (such as the STATS_LOGGER) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify configOverrides for the superset_config.py. For example, if you want to set the CSV export encoding and the preferred databases adapt the nodes section of the cluster resource like so: nodes: roleGroups: default: config: {} configOverrides: superset_config.py: CSV_EXPORT: \"{'encoding': 'utf-8'}\" PREFERRED_DATABASES: |- [ 'PostgreSQL', 'Presto', 'MySQL', 'SQLite', # etc. ] Just as for the config, it is possible to specify this at the role level as well: nodes: configOverrides: superset_config.py: CSV_EXPORT: \"{'encoding': 'utf-8'}\" PREFERRED_DATABASES: |- [ 'PostgreSQL', 'Presto', 'MySQL', 'SQLite', # etc. ] roleGroups: default: config: {} All override property values must be strings. They are treated as Python expressions. So care must be taken to not produce an invalid configuration. For a full list of configuration options we refer to the main config file for Superset. In a similar fashion, environment variables can be (over)written. For example per role group: nodes: roleGroups: default: config: {} envOverrides: FLASK_ENV: development or per role: nodes: envOverrides: FLASK_ENV: development roleGroups: default: config: {}","title":"Usage","component":"superset","version":"nightly","name":"usage","url":"/superset/nightly/usage.html","titles":[{"text":"Authentication","hash":"_authentication","id":1},{"text":"Webinterface","hash":"_webinterface","id":2},{"text":"LDAP","hash":"_ldap","id":3},{"text":"Authorization","hash":"_authorization","id":4},{"text":"Webinterface","hash":"_webinterface_2","id":5},{"text":"LDAP","hash":"_ldap_2","id":6},{"text":"Connecting Apache Druid Clusters","hash":"_connecting_apache_druid_clusters","id":7},{"text":"Monitoring","hash":"_monitoring","id":8},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":9},{"text":"Configuration Properties","hash":"_configuration_properties","id":10},{"text":"Environment Variables","hash":"_environment_variables","id":11}]},"388":{"id":388,"text":"Once you have followed the steps in Installation for the Operator and its dependencies, you will now go through the steps to set up and connect to a Superset instance. Superset metadata (slices, connections, tables, dashboards etc.) is stored in an SQL database. For testing purposes, you can spin up a PostgreSQL database with the following commands: helm repo add bitnami https://charts.bitnami.com/bitnami helm install --wait superset bitnami/postgresql \\ --set auth.username=superset \\ --set auth.password=superset \\ --set auth.database=superset A secret with the necessary credentials must be created: this contains database connection credentials as well as an admin account for Superset itself. Create a file called superset-credentials.yaml: --- apiVersion: v1 kind: Secret metadata: name: simple-superset-credentials type: Opaque stringData: adminUser.username: admin adminUser.firstname: Superset adminUser.lastname: Admin adminUser.email: admin@superset.com adminUser.password: admin connections.secretKey: thisISaSECRET_1234 connections.sqlalchemyDatabaseUri: postgresql://superset:superset@superset-postgresql.default.svc.cluster.local/superset And apply it: kubectl apply -f superset-credentials.yaml The connections.secretKey will be used for securely signing the session cookies and can be used for any other security related needs by extensions. It should be a long random string of bytes. connections.sqlalchemyDatabaseUri must contain the connection string to the SQL database storing the Superset metadata. The adminUser fields are used to create an admin user. Please note that the admin user will be disabled if you use a non-default authentication mechanism like LDAP. A Superset node must be created as a custom resource, create file called superset.yaml: --- apiVersion: superset.stackable.tech/v1alpha1 kind: SupersetCluster metadata: name: simple-superset spec: version: 1.5.1-stackable0.1.0 statsdExporterVersion: v0.22.4 credentialsSecret: simple-superset-credentials loadExamplesOnInit: true nodes: roleGroups: default: config: rowLimit: 10000 webserverTimeout: 300 And apply it: kubectl apply -f superset.yaml metadata.name contains the name of the Superset cluster. The label of the Docker image provided by Stackable must be set in spec.version. Please note that the version you need to specify is not only the version of Apache Superset which you want to roll out, but has to also include the Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. spec.statsdExporterVersion must contain the tag of a statsd-exporter Docker image in the Stackable repository. The previously created secret must be referenced in spec.credentialsSecret. The spec.loadExamplesOnInit key is optional and defaults to false, it can be set to true to load example data into Superset when the database is initialized. The rowLimit configuration option defines the row limit when requesting chart data. The webserverTimeout configuration option defines the maximum number of seconds a Superset request can take before timing out. This settings effect the maximum duration a query to an underlying datasource can take. If you get timeout errors before your query returns the result you may need to increase this timeout. The first time the cluster is created, the operator creates a SupersetDB resource with the same name as the cluster. It ensures that the database is initialized (with the creation of a schema and admin user). A Kubernetes job is created which starts a pod to initialize the database. This can take a while. You can use kubectl to wait on the resource: kubectl wait supersetdb/simple-superset \\ --for jsonpath='{.status.condition}'=Ready \\ --timeout 300s When the Superset node is created and the database is initialized, Superset can be opened in the browser. The Superset port which defaults to 8088 can be forwarded to the local host: kubectl port-forward service/simple-superset-external 8088 2>&1 >/dev/null & Then it can be opened in the browser with http://localhost:8088. Enter the admin credentials from the Kubernetes secret: If the examples were loaded then some dashboards are already available: Great! You have set up a Superset instance and connected to it! Look at the Usage page to find out more about configuring your Superset instance or have a look at the Superset documentation to create your first dashboard.","title":"First steps","component":"superset","version":"nightly","name":"first_steps","url":"/superset/nightly/getting_started/first_steps.html","titles":[{"text":"Database for the Superset metadata","hash":"_database_for_the_superset_metadata","id":1},{"text":"Secret with Superset credentials","hash":"_secret_with_superset_credentials","id":2},{"text":"Creation of a Superset node","hash":"_creation_of_a_superset_node","id":3},{"text":"Initialization of the Superset database","hash":"_initialization_of_the_superset_database","id":4},{"text":"Using Superset","hash":"_using_superset","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"389":{"id":389,"text":"This guide will get you started with Superset using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first Superset instance, connecting to it and looking at some sample data. You will need: a Kubernetes cluster kubectl Helm The Guide is divided into two steps: Installing the Operators. Setting up the Superset instance and connecting to it.","title":"Getting started","component":"superset","version":"nightly","name":"index","url":"/superset/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"390":{"id":390,"text":"On this page you will install the Stackable Superset Operator as well as the commons and secret Operator which are required by all Stackable Operators. There are 2 ways to run Stackable Operators Using stackablectl Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl run the following command to install all Operators necessary for Superset: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ superset=0.6.0-nightly The tool will show [INFO ] Installing commons operator [INFO ] Installing secret operator [INFO ] Installing superset operator Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait superset-operator stackable-dev/superset-operator --version 0.6.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the Superset service (as well as the CRDs for the required operators). You are now ready to deploy Superset in Kubernetes. Deploy a Superset instance and connect to it.","title":"Installation","component":"superset","version":"nightly","name":"installation","url":"/superset/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"391":{"id":391,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test","title":"","component":"trino","version":"0.3","name":"commandline_args","url":"/trino/0.3/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"392":{"id":392,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"Configuration","component":"trino","version":"0.3","name":"configuration","url":"/trino/0.3/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"393":{"id":393,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"","component":"trino","version":"0.3","name":"env_var_args","url":"/trino/0.3/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"394":{"id":394,"text":"This is an operator for Kubernetes that can manage Trino clusters. This operator only works with images from the Stackable repository The Stackable Operator for Trino currently supports the following versions of Trino: 377 387 docker pull docker.stackable.tech/stackable/trino:","title":"Stackable Operator for Trino","component":"trino","version":"0.3","name":"index","url":"/trino/0.3/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Get Docker image","hash":"_get_docker_image","id":2}]},"395":{"id":395,"text":"There are three ways to run the Trino Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ We also need some addition components of the Stackable Data Platform. The secret-operator if you are running with authentication. $ helm install secret-operator stackable/secret-operator Then install the Stackable Operator for Trino $ helm install trino-operator stackable/trino-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Trino service. You are now ready to deploy Trino in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/trino-operator When installing manually with Docker you will need to install the Stackable CRDs for Trino in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f trinocluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.56 at the time of writing). cargo run -- crd | kubectl apply -f - cargo run -- run","title":"Installation","component":"trino","version":"0.3","name":"installation","url":"/trino/0.3/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"396":{"id":396,"text":"Trino works together with the Apache Hive metastore and S3 bucket. Deployed Stackable Apache Hive metastore Accessible S3 Bucket Endpoint, access-key and secret-key Data in the Bucket (we use the Iris dataset here) Optional deployed Stackable Secret-Operator for certificates when deploying for HTTPS Optional for authorization: Deployed Stackable OPA-Operator Optional Trino CLI to test SQL queries In the following we explain or link the required installation steps. Please refer to the S3 provider. Please refer to the Hive operator and docs. Both Hive and Trino need the same S3 authentication. Please refer to the OPA operator and docs. We provide user authentication via secret that can be referred in the custom resource: authentication: method: multiUser: userCredentialsSecret: namespace: default name: simple-trino-users-secret These secrets need to be created manually before startup. The secret may look like the following snippet: apiVersion: v1 kind: Secret metadata: name: simple-trino-users-secret type: kubernetes.io/opaque stringData: admin: $2y$10$89xReovvDLacVzRGpjOyAOONnayOgDAyIS2nW9bs5DJT98q17Dy5i alice: $2y$10$HcCa4k9v2DRrD/g7e5vEz.Bk.1xg00YTEHOZjPX7oK3KqMSt2xT8W bob: $2y$10$xVRXtYZnYuQu66SmruijPO8WHFM/UK5QPHTr.Nzf4JMcZSqt3W.2. The : combinations are provided in the stringData field. The hashes are created using bcrypt with 10 rounds or more. htpasswd -nbBC 10 admin admin In order to authorize Trino via OPA, a ConfigMap containing Rego rules for Trino has to be applied. The following example is an all access Rego rule for testing with the user admin. Do not use it in production! apiVersion: v1 kind: ConfigMap metadata: name: opa-bundle-trino labels: opa.stackable.tech/bundle: \"trino\" data: trino.rego: | package trino import future.keywords.in default allow = false allow { is_admin } is_admin() { input.context.identity.user == \"admin\" } Users should write their own rego rules for more complex OPA authorization. With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/trino-operator/crd/trinocluster.crd.yaml Create an insecure single node Trino (v387) cluster for testing. You will access the UI/CLI via http and no user / password or authorization is required. Please adapt the s3 settings with your credentials (check examples/simple-trino-cluster.yaml for an example setting up Hive and Trino): apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 hiveConfigMapName: simple-hive-derby s3: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials coordinators: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} workers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} To access the CLI please execute: ./trino-cli-387-executable.jar --debug --server http://: --user=admin Create a secure single node Trino (v387) cluster. This will disable the UI access via http and requires username and password from the secret above. Please adapt the s3 settings with your credentials (check examples/simple-trino-cluster-authentication-opa-authorization.yaml for a full example setting up Hive, OPA, Secrets and Trino): apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 hiveConfigMapName: simple-hive-derby opa: configMapName: simple-opa package: trino s3: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials authentication: method: multiUser: userCredentialsSecret: namespace: default name: simple-trino-users-secret coordinators: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} workers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} To access the CLI please download the Trino CLI and execute: ./trino-cli-387-executable.jar --debug --server https://: --user=admin --password --insecure If you use self signed certificates, you also need the --insecure flag above which can be omitted otherwise. You can specify S3 connection details directly inside the Trino specification or by referring to an external S3Connection custom resource. To specify S3 connection details directly as part of the Trino resource, you add an inline connection configuration as shown below: s3: (1) inline: host: test-minio (2) port: 9000 (3) pathStyleAccess: true (4) secretClass: minio-credentials (5) 1 Entry point for the connection configuration 2 Connection host 3 Optional connection port 4 Optional flag if path-style URLs should be used; This defaults to false which means virtual hosted-style URLs are used. 5 Name of the Secret object expected to contain the following keys: accessKey and secretKey It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the Trino specification like this: s3: reference: my-connection-resource (1) 1 Name of the connection resource with connection details The resource named my-connection-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: my-connection-resource spec: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials This has the advantage that the connection configuration can be shared across applications and reduces the cost of updating these details. Create a schema and a table for the Iris data located in S3 and query data. This assumes to have the Iris data set in the PARQUET format available in the S3 bucket which can be downloaded here CREATE SCHEMA IF NOT EXISTS hive.iris WITH (location = 's3a://iris/'); which should return: CREATE SCHEMA CREATE TABLE IF NOT EXISTS hive.iris.iris_parquet ( sepal_length DOUBLE, sepal_width DOUBLE, petal_length DOUBLE, petal_width DOUBLE, class VARCHAR ) WITH ( external_location = 's3a://iris/parq', format = 'PARQUET' ); which should return: CREATE TABLE SELECT sepal_length, class FROM hive.iris.iris_parquet LIMIT 10; which should return something like this: sepal_length | class --------------+------------- 5.1 | Iris-setosa 4.9 | Iris-setosa 4.7 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 5.4 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 4.4 | Iris-setosa 4.9 | Iris-setosa (10 rows) Query 20220210_161615_00000_a8nka, FINISHED, 1 node https://172.18.0.5:30299/ui/query.html?20220210_161615_00000_a8nka Splits: 18 total, 18 done (100.00%) CPU Time: 0.7s total, 20 rows/s, 11.3KB/s, 74% active Per Node: 0.3 parallelism, 5 rows/s, 3.02KB/s Parallelism: 0.3 Peak Memory: 0B 2.67 [15 rows, 8.08KB] [5 rows/s, 3.02KB/s] The managed Trino instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to faulty installations. For a role or role group, at the same level of config, you can specify: configOverrides for: config.properties node.properties log.properties password-authenticator.properties hive.properties For a list of possible configuration properties consult the Trino Properties Reference. workers: roleGroups: default: config: {} replicas: 1 configOverrides: config.properties: query.max-memory-per-node: \"2GB\" Just as for the config, it is possible to specify this at role level as well: workers: configOverrides: config.properties: query.max-memory-per-node: \"2GB\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. The properties will be passed on without any escaping or formatting. Environment variables can be (over)written by adding the envOverrides property. For example per role group: workers: roleGroups: default: config: {} replicas: 1 envOverrides: JAVA_HOME: \"path/to/java\" or per role: workers: envOverrides: JAVA_HOME: \"path/to/java\" roleGroups: default: config: {} replicas: 1 Here too, overriding properties such as http-server.https.port will lead to broken installations.","title":"Usage","component":"trino","version":"0.3","name":"usage","url":"/trino/0.3/usage.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Installation","hash":"_installation","id":2},{"text":"S3 bucket","hash":"_s3_bucket","id":3},{"text":"Hive operator","hash":"_hive_operator","id":4},{"text":"OPA operator","hash":"_opa_operator","id":5},{"text":"Authentication","hash":"_authentication","id":6},{"text":"Authorization","hash":"_authorization","id":7},{"text":"Trino","hash":"_trino","id":8},{"text":"Insecure for testing:","hash":"_insecure_for_testing","id":9},{"text":"Secure (https) for production:","hash":"_secure_https_for_production","id":10},{"text":"S3 connection specification","hash":"_s3_connection_specification","id":11},{"text":"Test Trino with Hive and S3","hash":"_test_trino_with_hive_and_s3","id":12},{"text":"Create schema","hash":"_create_schema","id":13},{"text":"Create table","hash":"_create_table","id":14},{"text":"Query data","hash":"_query_data","id":15},{"text":"Monitoring","hash":"_monitoring","id":16},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":17},{"text":"Configuration Properties","hash":"_configuration_properties","id":18},{"text":"Environment Variables","hash":"_environment_variables","id":19}]},"397":{"id":397,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test","title":"","component":"trino","version":"0.4","name":"commandline_args","url":"/trino/0.4/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"398":{"id":398,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"Configuration","component":"trino","version":"0.4","name":"configuration","url":"/trino/0.4/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"399":{"id":399,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"","component":"trino","version":"0.4","name":"env_var_args","url":"/trino/0.4/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"400":{"id":400,"text":"This is an operator for Kubernetes that can manage Trino clusters. This operator only works with images from the Stackable repository The Stackable Operator for Trino currently supports the following versions of Trino: 377 387 docker pull docker.stackable.tech/stackable/trino:","title":"Stackable Operator for Trino","component":"trino","version":"0.4","name":"index","url":"/trino/0.4/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Get Docker image","hash":"_get_docker_image","id":2}]},"401":{"id":401,"text":"There are three ways to run the Trino Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-stable/ We also need some addition components of the Stackable Data Platform. The secret-operator if you are running with authentication. $ helm install secret-operator stackable/secret-operator Then install the Stackable Operator for Trino $ helm install trino-operator stackable/trino-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Trino service. You are now ready to deploy Trino in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/trino-operator When installing manually with Docker you will need to install the Stackable CRDs for Trino in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ kubectl apply -f trinocluster.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.56 at the time of writing). cargo run -- crd | kubectl apply -f - cargo run -- run","title":"Installation","component":"trino","version":"0.4","name":"installation","url":"/trino/0.4/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"402":{"id":402,"text":"Trino works together with the Apache Hive metastore and S3 bucket. Deployed Stackable Apache Hive metastore Accessible S3 Bucket Endpoint, access-key and secret-key Data in the Bucket (we use the Iris dataset here) Optional deployed Stackable Secret-Operator for certificates when deploying for HTTPS Optional for authorization: Deployed Stackable OPA-Operator Optional Trino CLI to test SQL queries In the following we explain or link the required installation steps. Please refer to the S3 provider. Please refer to the Hive operator and docs. Both Hive and Trino need the same S3 authentication. Please refer to the OPA operator and docs. We provide user authentication via secret that can be referred in the custom resource: authentication: method: multiUser: userCredentialsSecret: namespace: default name: simple-trino-users-secret These secrets need to be created manually before startup. The secret may look like the following snippet: apiVersion: v1 kind: Secret metadata: name: simple-trino-users-secret type: kubernetes.io/opaque stringData: admin: $2y$10$89xReovvDLacVzRGpjOyAOONnayOgDAyIS2nW9bs5DJT98q17Dy5i alice: $2y$10$HcCa4k9v2DRrD/g7e5vEz.Bk.1xg00YTEHOZjPX7oK3KqMSt2xT8W bob: $2y$10$xVRXtYZnYuQu66SmruijPO8WHFM/UK5QPHTr.Nzf4JMcZSqt3W.2. The : combinations are provided in the stringData field. The hashes are created using bcrypt with 10 rounds or more. htpasswd -nbBC 10 admin admin In order to authorize Trino via OPA, a ConfigMap containing Rego rules for Trino has to be applied. The following example is an all access Rego rule for testing with the user admin. Do not use it in production! apiVersion: v1 kind: ConfigMap metadata: name: opa-bundle-trino labels: opa.stackable.tech/bundle: \"trino\" data: trino.rego: | package trino import future.keywords.in default allow = false allow { is_admin } is_admin() { input.context.identity.user == \"admin\" } Users should write their own rego rules for more complex OPA authorization. With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/trino-operator/crd/trinocluster.crd.yaml Create an insecure single node Trino (v387) cluster for testing. You will access the UI/CLI via http and no user / password or authorization is required. Please adapt the s3 settings with your credentials (check examples/simple-trino-cluster.yaml for an example setting up Hive and Trino): apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 hiveConfigMapName: simple-hive-derby s3: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials coordinators: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} workers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} To access the CLI please execute: ./trino-cli-387-executable.jar --debug --server http://: --user=admin Create a secure single node Trino (v387) cluster. This will disable the UI access via http and requires username and password from the secret above. Please adapt the s3 settings with your credentials (check examples/simple-trino-cluster-authentication-opa-authorization.yaml for a full example setting up Hive, OPA, Secrets and Trino): apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 hiveConfigMapName: simple-hive-derby opa: configMapName: simple-opa package: trino s3: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials authentication: method: multiUser: userCredentialsSecret: namespace: default name: simple-trino-users-secret coordinators: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} workers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux replicas: 1 config: {} To access the CLI please download the Trino CLI and execute: ./trino-cli-387-executable.jar --debug --server https://: --user=admin --password --insecure If you use self signed certificates, you also need the --insecure flag above which can be omitted otherwise. You can specify S3 connection details directly inside the Trino specification or by referring to an external S3Connection custom resource. To specify S3 connection details directly as part of the Trino resource, you add an inline connection configuration as shown below: s3: (1) inline: host: test-minio (2) port: 9000 (3) pathStyleAccess: true (4) secretClass: minio-credentials (5) 1 Entry point for the connection configuration 2 Connection host 3 Optional connection port 4 Optional flag if path-style URLs should be used; This defaults to false which means virtual hosted-style URLs are used. 5 Name of the Secret object expected to contain the following keys: accessKey and secretKey It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the Trino specification like this: s3: reference: my-connection-resource (1) 1 Name of the connection resource with connection details The resource named my-connection-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: my-connection-resource spec: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials This has the advantage that the connection configuration can be shared across applications and reduces the cost of updating these details. Create a schema and a table for the Iris data located in S3 and query data. This assumes to have the Iris data set in the PARQUET format available in the S3 bucket which can be downloaded here CREATE SCHEMA IF NOT EXISTS hive.iris WITH (location = 's3a://iris/'); which should return: CREATE SCHEMA CREATE TABLE IF NOT EXISTS hive.iris.iris_parquet ( sepal_length DOUBLE, sepal_width DOUBLE, petal_length DOUBLE, petal_width DOUBLE, class VARCHAR ) WITH ( external_location = 's3a://iris/parq', format = 'PARQUET' ); which should return: CREATE TABLE SELECT sepal_length, class FROM hive.iris.iris_parquet LIMIT 10; which should return something like this: sepal_length | class --------------+------------- 5.1 | Iris-setosa 4.9 | Iris-setosa 4.7 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 5.4 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 4.4 | Iris-setosa 4.9 | Iris-setosa (10 rows) Query 20220210_161615_00000_a8nka, FINISHED, 1 node https://172.18.0.5:30299/ui/query.html?20220210_161615_00000_a8nka Splits: 18 total, 18 done (100.00%) CPU Time: 0.7s total, 20 rows/s, 11.3KB/s, 74% active Per Node: 0.3 parallelism, 5 rows/s, 3.02KB/s Parallelism: 0.3 Peak Memory: 0B 2.67 [15 rows, 8.08KB] [5 rows/s, 3.02KB/s] The managed Trino instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to faulty installations. For a role or role group, at the same level of config, you can specify: configOverrides for: config.properties node.properties log.properties password-authenticator.properties hive.properties For a list of possible configuration properties consult the Trino Properties Reference. workers: roleGroups: default: config: {} replicas: 1 configOverrides: config.properties: query.max-memory-per-node: \"2GB\" Just as for the config, it is possible to specify this at role level as well: workers: configOverrides: config.properties: query.max-memory-per-node: \"2GB\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. The properties will be passed on without any escaping or formatting. Environment variables can be (over)written by adding the envOverrides property. For example per role group: workers: roleGroups: default: config: {} replicas: 1 envOverrides: JAVA_HOME: \"path/to/java\" or per role: workers: envOverrides: JAVA_HOME: \"path/to/java\" roleGroups: default: config: {} replicas: 1 Here too, overriding properties such as http-server.https.port will lead to broken installations.","title":"Usage","component":"trino","version":"0.4","name":"usage","url":"/trino/0.4/usage.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Installation","hash":"_installation","id":2},{"text":"S3 bucket","hash":"_s3_bucket","id":3},{"text":"Hive operator","hash":"_hive_operator","id":4},{"text":"OPA operator","hash":"_opa_operator","id":5},{"text":"Authentication","hash":"_authentication","id":6},{"text":"Authorization","hash":"_authorization","id":7},{"text":"Trino","hash":"_trino","id":8},{"text":"Insecure for testing:","hash":"_insecure_for_testing","id":9},{"text":"Secure (https) for production:","hash":"_secure_https_for_production","id":10},{"text":"S3 connection specification","hash":"_s3_connection_specification","id":11},{"text":"Test Trino with Hive and S3","hash":"_test_trino_with_hive_and_s3","id":12},{"text":"Create schema","hash":"_create_schema","id":13},{"text":"Create table","hash":"_create_table","id":14},{"text":"Query data","hash":"_query_data","id":15},{"text":"Monitoring","hash":"_monitoring","id":16},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":17},{"text":"Configuration Properties","hash":"_configuration_properties","id":18},{"text":"Environment Variables","hash":"_environment_variables","id":19}]},"403":{"id":403,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test","title":"","component":"trino","version":"0.5","name":"commandline_args","url":"/trino/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"404":{"id":404,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"Configuration","component":"trino","version":"0.5","name":"configuration","url":"/trino/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"405":{"id":405,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"","component":"trino","version":"0.5","name":"env_var_args","url":"/trino/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"406":{"id":406,"text":"This is an operator for Kubernetes that can manage Trino clusters. This operator only works with images from the Stackable repository The Stackable Operator for Trino currently supports the following versions of Trino: 377 387 docker pull docker.stackable.tech/stackable/trino:","title":"Stackable Operator for Trino","component":"trino","version":"0.5","name":"index","url":"/trino/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Get Docker image","hash":"_get_docker_image","id":2}]},"407":{"id":407,"text":"Trino works together with the Apache Hive metastore and S3 bucket. Deployed Stackable Apache Hive metastore Accessible S3 Bucket Endpoint, access-key and secret-key Data in the Bucket (we use the Iris dataset here) Optional deployed Stackable Secret Operator for certificates when deploying for TLS Optional deployed Stackable Commons Operator for certificates when deploying for TLS authentication Optional for authorization: Deployed Stackable OPA Operator[OPA-Operator] Optional Trino CLI to test SQL queries In the following we explain or link the required installation steps. Please refer to the S3 provider. Please refer to the Hive Operator docs. Both Hive and Trino need the same S3 authentication. Please refer to the OPA Operator docs. We provide user authentication via secret that can be referred in the custom resource: authentication: method: multiUser: userCredentialsSecret: namespace: default name: simple-trino-users-secret These secrets need to be created manually before startup. The secret may look like the following snippet: apiVersion: v1 kind: Secret metadata: name: simple-trino-users-secret type: kubernetes.io/opaque stringData: admin: $2y$10$89xReovvDLacVzRGpjOyAOONnayOgDAyIS2nW9bs5DJT98q17Dy5i alice: $2y$10$HcCa4k9v2DRrD/g7e5vEz.Bk.1xg00YTEHOZjPX7oK3KqMSt2xT8W bob: $2y$10$xVRXtYZnYuQu66SmruijPO8WHFM/UK5QPHTr.Nzf4JMcZSqt3W.2. The : combinations are provided in the stringData field. The hashes are created using bcrypt with 10 rounds or more. htpasswd -nbBC 10 admin admin In order to authorize Trino via OPA, a ConfigMap containing Rego rules for Trino has to be applied. The following example is an all access Rego rule for testing with the user admin. Do not use it in production! apiVersion: v1 kind: ConfigMap metadata: name: opa-bundle-trino labels: opa.stackable.tech/bundle: \"trino\" data: trino.rego: | package trino import future.keywords.in default allow = false allow { is_admin } is_admin() { input.context.identity.user == \"admin\" } Users should write their own rego rules for more complex OPA authorization. With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/trino-operator/crd/trinocluster.crd.yaml Create an insecure single node Trino (v387) cluster for testing. You will access the UI/CLI via http and no user / password or authorization is required. Please adapt the s3 settings with your credentials (check examples/simple-trino-cluster.yaml for an example setting up Hive and Trino): apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 hiveConfigMapName: simple-hive-derby catalogLabelSelector: trino: simple-trino coordinators: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 1 --- apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCatalog metadata: name: hive labels: trino: simple-trino spec: connector: hive: metastore: configMap: simple-hive-derby s3: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials To access the CLI please execute: ./trino-cli-387-executable.jar --debug --server http://: --user=admin There are multiple steps that must be taken to secure a Trino cluster: Enable authentication Enable TLS between the clients and coordinator Enable internal TLS for communications between coordinators and workers For testing purposes we use the Trino CLI. If authentication is enabled, TLS for the coordinator as well as a shared secret for internal communications (this is base64 and not encrypted) must be configured. Securing the Trino cluster will disable all HTTP ports and disable the web interface on the HTTP port as well. apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 config: tls: secretClass: trino-tls authentication: method: multiUser: userCredentialsSecret: name: simple-trino-users-secret [..] If no config.tls.secretClass is provided but authentication is enabled, it will default to tls provided by the Secret Operator. ./trino-cli-387-executable.jar --debug --server https://: --user=admin --keystore-path=keystore.p12 --keystore-password=changeit or ./trino-cli-387-executable.jar --debug --server https://: --user=admin --insecure This will disable the HTTP port and UI access and encrypt client-server communications. apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 config: tls: secretClass: trino-tls [..] ./trino-cli-387-executable.jar --debug --server https://: --user=admin --keystore-path=keystore.p12 --keystore-password=changeit Internal TLS is for encrypted and authenticated communications between coordinators and workers. Since this applies to all the data send and processed between the processes, this may reduce the performance significantly. apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 config: internalTls: secretClass: trino-internal-tls [..] Since Trino has internal and external communications running over a single port, this will enable the HTTPS port but not expose it. Cluster access is only possible via HTTP. ./trino-cli-387-executable.jar --debug --server http://: --user=admin You can specify S3 connection details directly inside the TrinoCatalog specification or by referring to an external S3Connection custom resource. To specify S3 connection details directly as part of the TrinoCatalog resource, you add an inline connection configuration as shown below: s3: (1) inline: host: test-minio (2) port: 9000 (3) pathStyleAccess: true (4) secretClass: minio-credentials (5) tls: verification: server: caCert: secretClass: minio-tls-certificates (6) 1 Entry point for the connection configuration 2 Connection host 3 Optional connection port 4 Optional flag if path-style URLs should be used; This defaults to false which means virtual hosted-style URLs are used. 5 Name of the Secret object expected to contain the following keys: accessKey and secretKey 6 Optional TLS settings for encrypted traffic. The secretClass can be provided by the Secret Operator or yourself. A self provided S3 TLS secret can be specified like this: apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: minio-tls-certificates spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: minio-tls-certificates labels: secrets.stackable.tech/class: minio-tls-certificates data: ca.crt: tls.crt: tls.key: It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the TrinoCatalog specification like this: s3: reference: my-connection-resource (1) 1 Name of the connection resource with connection details The resource named my-connection-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: my-connection-resource spec: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials This has the advantage that the connection configuration can be shared across applications and reduces the cost of updating these details. Create a schema and a table for the Iris data located in S3 and query data. This assumes to have the Iris data set in the PARQUET format available in the S3 bucket which can be downloaded here CREATE SCHEMA IF NOT EXISTS hive.iris WITH (location = 's3a://iris/'); which should return: CREATE SCHEMA CREATE TABLE IF NOT EXISTS hive.iris.iris_parquet ( sepal_length DOUBLE, sepal_width DOUBLE, petal_length DOUBLE, petal_width DOUBLE, class VARCHAR ) WITH ( external_location = 's3a://iris/parq', format = 'PARQUET' ); which should return: CREATE TABLE SELECT sepal_length, class FROM hive.iris.iris_parquet LIMIT 10; which should return something like this: sepal_length | class --------------+------------- 5.1 | Iris-setosa 4.9 | Iris-setosa 4.7 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 5.4 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 4.4 | Iris-setosa 4.9 | Iris-setosa (10 rows) Query 20220210_161615_00000_a8nka, FINISHED, 1 node https://172.18.0.5:30299/ui/query.html?20220210_161615_00000_a8nka Splits: 18 total, 18 done (100.00%) CPU Time: 0.7s total, 20 rows/s, 11.3KB/s, 74% active Per Node: 0.3 parallelism, 5 rows/s, 3.02KB/s Parallelism: 0.3 Peak Memory: 0B 2.67 [15 rows, 8.08KB] [5 rows/s, 3.02KB/s] The managed Trino instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to faulty installations. For a role or role group, at the same level of config, you can specify: configOverrides for: config.properties node.properties log.properties password-authenticator.properties For a list of possible configuration properties consult the Trino Properties Reference. workers: roleGroups: default: config: {} replicas: 1 configOverrides: config.properties: query.max-memory-per-node: \"2GB\" Just as for the config, it is possible to specify this at role level as well: workers: configOverrides: config.properties: query.max-memory-per-node: \"2GB\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. The properties will be passed on without any escaping or formatting. Environment variables can be (over)written by adding the envOverrides property. For example per role group: workers: roleGroups: default: config: {} replicas: 1 envOverrides: JAVA_HOME: \"path/to/java\" or per role: workers: envOverrides: JAVA_HOME: \"path/to/java\" roleGroups: default: config: {} replicas: 1 Here too, overriding properties such as http-server.https.port will lead to broken installations. You can mount a volume where data (config and logs of Trino) is stored by specifying PersistentVolumeClaims for each individual role or role group: workers: config: resources: storage: data: capacity: 2Gi roleGroups: default: config: resources: storage: data: capacity: 3Gi In the above example, all Trino workers in the default group will store data (the location of the property --data-dir) on a 3Gi volume. Additional role groups not specifying any resources will inherit the config provided on the role level (2Gi volume). This works the same for memory or CPU requests. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 2Gi large local volume mount for the data location containing mainly logs. You can request a certain amount of memory for each individual role group as shown below: workers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each Trino container in the default group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the container running Trino but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: workers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' If nothing is specified, the operator will automatically set the following default values for resources: workers: roleGroups: default: config: resources: requests: cpu: 200m memory: 2Gi limits: cpu: \"4\" memory: 2Gi storage: data: capacity: 2Gi The default values are most likely not sufficient to run a proper cluster in production. Please adapt according to your requirements. For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"trino","version":"0.5","name":"usage","url":"/trino/stable/usage.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Installation","hash":"_installation","id":2},{"text":"S3 bucket","hash":"_s3_bucket","id":3},{"text":"Hive operator","hash":"_hive_operator","id":4},{"text":"OPA operator","hash":"_opa_operator","id":5},{"text":"Authentication","hash":"_authentication","id":6},{"text":"Authorization","hash":"_authorization","id":7},{"text":"Trino","hash":"_trino","id":8},{"text":"Insecure for testing:","hash":"_insecure_for_testing","id":9},{"text":"Secure for production:","hash":"_secure_for_production","id":10},{"text":"Via authentication","hash":"_via_authentication","id":11},{"text":"Via TLS only","hash":"_via_tls_only","id":12},{"text":"Via internal TLS","hash":"_via_internal_tls","id":13},{"text":"S3 connection specification","hash":"_s3_connection_specification","id":14},{"text":"Test Trino with Hive and S3","hash":"_test_trino_with_hive_and_s3","id":15},{"text":"Create schema","hash":"_create_schema","id":16},{"text":"Create table","hash":"_create_table","id":17},{"text":"Query data","hash":"_query_data","id":18},{"text":"Monitoring","hash":"_monitoring","id":19},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":20},{"text":"Configuration Properties","hash":"_configuration_properties","id":21},{"text":"Environment Variables","hash":"_environment_variables","id":22},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":23},{"text":"Memory requests","hash":"_memory_requests","id":24},{"text":"CPU requests","hash":"_cpu_requests","id":25},{"text":"Defaults","hash":"_defaults","id":26}]},"408":{"id":408,"text":"After going through the Installation section and having installed all the operators, you will now deploy a Trino cluster and the required dependencies. Afterwards you can verify that it works by running some queries against Trino or visit the Trino web interface. In the simplest form, Trino does not require any other operators (except the commons and secret operator) to work and access the web interface. There are no data sources (e.g. PostgreSQL, Hive or S3) configured and for the tests only internal data is queried. Create a file named trino.yaml with the following content: --- apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 coordinators: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 1 and apply it: kubectl apply -f trino.yaml Wait for the Trino cluster to get ready: kubectl rollout status --watch statefulset/simple-trino-coordinator-default kubectl rollout status --watch statefulset/simple-trino-worker-default At first, make sure the StatefulSets are ready: kubectl get statefulset The output should show all pods in the StatefulSets ready: NAME READY AGE simple-trino-coordinator-default 1/1 5m simple-trino-worker-default 1/1 5m Create a port-forward for the coordinator to access Trino easily in the next steps: kubectl port-forward svc/simple-trino-coordinator 8443 2>&1 >/dev/null & We use the Trino CLI tool to access the Trino cluster. This link points to the latest Trino version. In this guide we keep Trino cluster and client versions (v387) in sync and download the CLI tool from the Stackable repository: curl --output trino.jar https://repo.stackable.tech/repository/packages/trino-cli/trino-cli-387-executable.jar We need to make the CLI tool executable: chmod +x trino.jar Now, run some queries against the coordinator. Show available catalogs: ./trino.jar --insecure --output-format=CSV_UNQUOTED --server https://localhost:8443 --user admin --execute \"SHOW CATALOGS\" which should output: system Check how many workers are connected to the coordinator: ./trino.jar --insecure --output-format=CSV_UNQUOTED --server https://localhost:8443 --user admin --execute \"SELECT COUNT(*) as nodes FROM system.runtime.nodes WHERE coordinator=false AND state='active'\" which should output: 1 Congratulations, you set up your first Stackable Trino cluster successfully. With the port-forward still active, you can connect to the Trino web interface. Enter https://localhost:8443/ui in your browser and login with the username admin. Since no authentication is enabled you do not need to enter a password. Your browser will probably show a security risk warning because it does not trust the self generated TLS certificates. Just ignore that and continue. After logging in you should see the Trino web interface: If you mark the Finished button in the Query Details section, you should see the two queries that were sent earlier via the CLI tool: In order to remove the previously downloaded CLI tool, you can safely remove it from your system: rm trino.jar Have a look at the Usage page to find out more about the features of the Trino Operator.","title":"First steps","component":"trino","version":"0.5","name":"first_steps","url":"/trino/stable/getting_started/first_steps.html","titles":[{"text":"Setup Trino","hash":"_setup_trino","id":1},{"text":"Verify that it works","hash":"_verify_that_it_works","id":2},{"text":"Access the Trino cluster via CLI tool","hash":"_access_the_trino_cluster_via_cli_tool","id":3},{"text":"Access the Trino web interface","hash":"_access_the_trino_web_interface","id":4},{"text":"Clean up","hash":"_clean_up","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"409":{"id":409,"text":"This guide will get you started with Trino using the Stackable Operator. It will guide you through the installation of the operator and its dependencies and setting up your first Trino cluster. You will need: a Kubernetes cluster kubectl optional: Helm optional: Trino CLI tool and curl (for testing) The guide is divided into the following steps: Installing the Operators Setting up the Trino cluster","title":"Getting started","component":"trino","version":"0.5","name":"index","url":"/trino/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"410":{"id":410,"text":"On this page you will install the Stackable Operator for Trino as well as the commons and secret operator which are required by all Stackable Operators. There are two ways to install Stackable Operators: Using stackablectl Using Helm The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. After you have installed stackablectl, run the following command to install all operators necessary for Trino: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ trino=0.5.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing trino operator in version 0.5.0-nightly Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait trino-operator stackable-dev/trino-operator --version 0.5.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Trino service (as well as the CRDs for the required operators). You are now ready to deploy Trino in Kubernetes. Set up a Trino cluster and its dependencies.","title":"Installation","component":"trino","version":"0.5","name":"installation","url":"/trino/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"411":{"id":411,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test","title":"","component":"trino","version":"nightly","name":"commandline_args","url":"/trino/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"412":{"id":412,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"Configuration","component":"trino","version":"nightly","name":"configuration","url":"/trino/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6}]},"413":{"id":413,"text":"Default value: /etc/stackable/trino-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name trino-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/trino-operator:latest","title":"","component":"trino","version":"nightly","name":"env_var_args","url":"/trino/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"414":{"id":414,"text":"This is an operator for Kubernetes that can manage Trino clusters. This operator only works with images from the Stackable repository The Stackable Operator for Trino currently supports the following versions of Trino: 377 387 docker pull docker.stackable.tech/stackable/trino:","title":"Stackable Operator for Trino","component":"trino","version":"nightly","name":"index","url":"/trino/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Get Docker image","hash":"_get_docker_image","id":2}]},"415":{"id":415,"text":"Trino works together with the Apache Hive metastore and S3 bucket. Deployed Stackable Apache Hive metastore Accessible S3 Bucket Endpoint, access-key and secret-key Data in the Bucket (we use the Iris dataset here) Optional deployed Stackable Secret Operator for certificates when deploying for TLS Optional deployed Stackable Commons Operator for certificates when deploying for TLS authentication Optional for authorization: Deployed Stackable OPA Operator[OPA-Operator] Optional Trino CLI to test SQL queries In the following we explain or link the required installation steps. Please refer to the S3 provider. Please refer to the Hive Operator docs. Both Hive and Trino need the same S3 authentication. Please refer to the OPA Operator docs. We provide user authentication via secret that can be referred in the custom resource: authentication: method: multiUser: userCredentialsSecret: namespace: default name: simple-trino-users-secret These secrets need to be created manually before startup. The secret may look like the following snippet: apiVersion: v1 kind: Secret metadata: name: simple-trino-users-secret type: kubernetes.io/opaque stringData: admin: $2y$10$89xReovvDLacVzRGpjOyAOONnayOgDAyIS2nW9bs5DJT98q17Dy5i alice: $2y$10$HcCa4k9v2DRrD/g7e5vEz.Bk.1xg00YTEHOZjPX7oK3KqMSt2xT8W bob: $2y$10$xVRXtYZnYuQu66SmruijPO8WHFM/UK5QPHTr.Nzf4JMcZSqt3W.2. The : combinations are provided in the stringData field. The hashes are created using bcrypt with 10 rounds or more. htpasswd -nbBC 10 admin admin In order to authorize Trino via OPA, a ConfigMap containing Rego rules for Trino has to be applied. The following example is an all access Rego rule for testing with the user admin. Do not use it in production! apiVersion: v1 kind: ConfigMap metadata: name: opa-bundle-trino labels: opa.stackable.tech/bundle: \"trino\" data: trino.rego: | package trino import future.keywords.in default allow = false allow { is_admin } is_admin() { input.context.identity.user == \"admin\" } Users should write their own rego rules for more complex OPA authorization. With the prerequisites fulfilled, the CRD for this operator must be created: kubectl apply -f /etc/stackable/trino-operator/crd/trinocluster.crd.yaml Create an insecure single node Trino (v387) cluster for testing. You will access the UI/CLI via http and no user / password or authorization is required. Please adapt the s3 settings with your credentials (check examples/simple-trino-cluster.yaml for an example setting up Hive and Trino): apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 hiveConfigMapName: simple-hive-derby catalogLabelSelector: trino: simple-trino coordinators: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 1 --- apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCatalog metadata: name: hive labels: trino: simple-trino spec: connector: hive: metastore: configMap: simple-hive-derby s3: inline: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials To access the CLI please execute: ./trino-cli-387-executable.jar --debug --server http://: --user=admin There are multiple steps that must be taken to secure a Trino cluster: Enable authentication Enable TLS between the clients and coordinator Enable internal TLS for communications between coordinators and workers For testing purposes we use the Trino CLI. If authentication is enabled, TLS for the coordinator as well as a shared secret for internal communications (this is base64 and not encrypted) must be configured. Securing the Trino cluster will disable all HTTP ports and disable the web interface on the HTTP port as well. apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 config: tls: secretClass: trino-tls authentication: method: multiUser: userCredentialsSecret: name: simple-trino-users-secret [..] If no config.tls.secretClass is provided but authentication is enabled, it will default to tls provided by the Secret Operator. ./trino-cli-387-executable.jar --debug --server https://: --user=admin --keystore-path=keystore.p12 --keystore-password=changeit or ./trino-cli-387-executable.jar --debug --server https://: --user=admin --insecure This will disable the HTTP port and UI access and encrypt client-server communications. apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 config: tls: secretClass: trino-tls [..] ./trino-cli-387-executable.jar --debug --server https://: --user=admin --keystore-path=keystore.p12 --keystore-password=changeit Internal TLS is for encrypted and authenticated communications between coordinators and workers. Since this applies to all the data send and processed between the processes, this may reduce the performance significantly. apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 config: internalTls: secretClass: trino-internal-tls [..] Since Trino has internal and external communications running over a single port, this will enable the HTTPS port but not expose it. Cluster access is only possible via HTTP. ./trino-cli-387-executable.jar --debug --server http://: --user=admin You can specify S3 connection details directly inside the TrinoCatalog specification or by referring to an external S3Connection custom resource. To specify S3 connection details directly as part of the TrinoCatalog resource, you add an inline connection configuration as shown below: s3: (1) inline: host: test-minio (2) port: 9000 (3) pathStyleAccess: true (4) secretClass: minio-credentials (5) tls: verification: server: caCert: secretClass: minio-tls-certificates (6) 1 Entry point for the connection configuration 2 Connection host 3 Optional connection port 4 Optional flag if path-style URLs should be used; This defaults to false which means virtual hosted-style URLs are used. 5 Name of the Secret object expected to contain the following keys: accessKey and secretKey 6 Optional TLS settings for encrypted traffic. The secretClass can be provided by the Secret Operator or yourself. A self provided S3 TLS secret can be specified like this: apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: minio-tls-certificates spec: backend: k8sSearch: searchNamespace: pod: {} --- apiVersion: v1 kind: Secret metadata: name: minio-tls-certificates labels: secrets.stackable.tech/class: minio-tls-certificates data: ca.crt: tls.crt: tls.key: It is also possible to configure the bucket connection details as a separate Kubernetes resource and only refer to that object from the TrinoCatalog specification like this: s3: reference: my-connection-resource (1) 1 Name of the connection resource with connection details The resource named my-connection-resource is then defined as shown below: --- apiVersion: s3.stackable.tech/v1alpha1 kind: S3Connection metadata: name: my-connection-resource spec: host: test-minio port: 9000 accessStyle: Path credentials: secretClass: minio-credentials This has the advantage that the connection configuration can be shared across applications and reduces the cost of updating these details. Create a schema and a table for the Iris data located in S3 and query data. This assumes to have the Iris data set in the PARQUET format available in the S3 bucket which can be downloaded here CREATE SCHEMA IF NOT EXISTS hive.iris WITH (location = 's3a://iris/'); which should return: CREATE SCHEMA CREATE TABLE IF NOT EXISTS hive.iris.iris_parquet ( sepal_length DOUBLE, sepal_width DOUBLE, petal_length DOUBLE, petal_width DOUBLE, class VARCHAR ) WITH ( external_location = 's3a://iris/parq', format = 'PARQUET' ); which should return: CREATE TABLE SELECT sepal_length, class FROM hive.iris.iris_parquet LIMIT 10; which should return something like this: sepal_length | class --------------+------------- 5.1 | Iris-setosa 4.9 | Iris-setosa 4.7 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 5.4 | Iris-setosa 4.6 | Iris-setosa 5.0 | Iris-setosa 4.4 | Iris-setosa 4.9 | Iris-setosa (10 rows) Query 20220210_161615_00000_a8nka, FINISHED, 1 node https://172.18.0.5:30299/ui/query.html?20220210_161615_00000_a8nka Splits: 18 total, 18 done (100.00%) CPU Time: 0.7s total, 20 rows/s, 11.3KB/s, 74% active Per Node: 0.3 parallelism, 5 rows/s, 3.02KB/s Parallelism: 0.3 Peak Memory: 0B 2.67 [15 rows, 8.08KB] [5 rows/s, 3.02KB/s] The managed Trino instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Do not override port numbers. This will lead to faulty installations. For a role or role group, at the same level of config, you can specify: configOverrides for: config.properties node.properties log.properties password-authenticator.properties For a list of possible configuration properties consult the Trino Properties Reference. workers: roleGroups: default: config: {} replicas: 1 configOverrides: config.properties: query.max-memory-per-node: \"2GB\" Just as for the config, it is possible to specify this at role level as well: workers: configOverrides: config.properties: query.max-memory-per-node: \"2GB\" roleGroups: default: config: {} replicas: 1 All override property values must be strings. The properties will be passed on without any escaping or formatting. Environment variables can be (over)written by adding the envOverrides property. For example per role group: workers: roleGroups: default: config: {} replicas: 1 envOverrides: JAVA_HOME: \"path/to/java\" or per role: workers: envOverrides: JAVA_HOME: \"path/to/java\" roleGroups: default: config: {} replicas: 1 Here too, overriding properties such as http-server.https.port will lead to broken installations. You can mount a volume where data (config and logs of Trino) is stored by specifying PersistentVolumeClaims for each individual role or role group: workers: config: resources: storage: data: capacity: 2Gi roleGroups: default: config: resources: storage: data: capacity: 3Gi In the above example, all Trino workers in the default group will store data (the location of the property --data-dir) on a 3Gi volume. Additional role groups not specifying any resources will inherit the config provided on the role level (2Gi volume). This works the same for memory or CPU requests. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 2Gi large local volume mount for the data location containing mainly logs. You can request a certain amount of memory for each individual role group as shown below: workers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each Trino container in the default group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the container running Trino but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: workers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' If nothing is specified, the operator will automatically set the following default values for resources: workers: roleGroups: default: config: resources: requests: cpu: 200m memory: 2Gi limits: cpu: \"4\" memory: 2Gi storage: data: capacity: 2Gi The default values are most likely not sufficient to run a proper cluster in production. Please adapt according to your requirements. For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"trino","version":"nightly","name":"usage","url":"/trino/nightly/usage.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"Installation","hash":"_installation","id":2},{"text":"S3 bucket","hash":"_s3_bucket","id":3},{"text":"Hive operator","hash":"_hive_operator","id":4},{"text":"OPA operator","hash":"_opa_operator","id":5},{"text":"Authentication","hash":"_authentication","id":6},{"text":"Authorization","hash":"_authorization","id":7},{"text":"Trino","hash":"_trino","id":8},{"text":"Insecure for testing:","hash":"_insecure_for_testing","id":9},{"text":"Secure for production:","hash":"_secure_for_production","id":10},{"text":"Via authentication","hash":"_via_authentication","id":11},{"text":"Via TLS only","hash":"_via_tls_only","id":12},{"text":"Via internal TLS","hash":"_via_internal_tls","id":13},{"text":"S3 connection specification","hash":"_s3_connection_specification","id":14},{"text":"Test Trino with Hive and S3","hash":"_test_trino_with_hive_and_s3","id":15},{"text":"Create schema","hash":"_create_schema","id":16},{"text":"Create table","hash":"_create_table","id":17},{"text":"Query data","hash":"_query_data","id":18},{"text":"Monitoring","hash":"_monitoring","id":19},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":20},{"text":"Configuration Properties","hash":"_configuration_properties","id":21},{"text":"Environment Variables","hash":"_environment_variables","id":22},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":23},{"text":"Memory requests","hash":"_memory_requests","id":24},{"text":"CPU requests","hash":"_cpu_requests","id":25},{"text":"Defaults","hash":"_defaults","id":26}]},"416":{"id":416,"text":"After going through the Installation section and having installed all the operators, you will now deploy a Trino cluster and the required dependencies. Afterwards you can verify that it works by running some queries against Trino or visit the Trino web interface. In the simplest form, Trino does not require any other operators (except the commons and secret operator) to work and access the web interface. There are no data sources (e.g. PostgreSQL, Hive or S3) configured and for the tests only internal data is queried. Create a file named trino.yaml with the following content: --- apiVersion: trino.stackable.tech/v1alpha1 kind: TrinoCluster metadata: name: simple-trino spec: version: 387-stackable0.1.0 coordinators: roleGroups: default: replicas: 1 workers: roleGroups: default: replicas: 1 and apply it: kubectl apply -f trino.yaml Wait for the Trino cluster to get ready: kubectl rollout status --watch statefulset/simple-trino-coordinator-default kubectl rollout status --watch statefulset/simple-trino-worker-default At first, make sure the StatefulSets are ready: kubectl get statefulset The output should show all pods in the StatefulSets ready: NAME READY AGE simple-trino-coordinator-default 1/1 5m simple-trino-worker-default 1/1 5m Create a port-forward for the coordinator to access Trino easily in the next steps: kubectl port-forward svc/simple-trino-coordinator 8443 2>&1 >/dev/null & We use the Trino CLI tool to access the Trino cluster. This link points to the latest Trino version. In this guide we keep Trino cluster and client versions (v387) in sync and download the CLI tool from the Stackable repository: curl --output trino.jar https://repo.stackable.tech/repository/packages/trino-cli/trino-cli-387-executable.jar We need to make the CLI tool executable: chmod +x trino.jar Now, run some queries against the coordinator. Show available catalogs: ./trino.jar --insecure --output-format=CSV_UNQUOTED --server https://localhost:8443 --user admin --execute \"SHOW CATALOGS\" which should output: system Check how many workers are connected to the coordinator: ./trino.jar --insecure --output-format=CSV_UNQUOTED --server https://localhost:8443 --user admin --execute \"SELECT COUNT(*) as nodes FROM system.runtime.nodes WHERE coordinator=false AND state='active'\" which should output: 1 Congratulations, you set up your first Stackable Trino cluster successfully. With the port-forward still active, you can connect to the Trino web interface. Enter https://localhost:8443/ui in your browser and login with the username admin. Since no authentication is enabled you do not need to enter a password. Your browser will probably show a security risk warning because it does not trust the self generated TLS certificates. Just ignore that and continue. After logging in you should see the Trino web interface: If you mark the Finished button in the Query Details section, you should see the two queries that were sent earlier via the CLI tool: In order to remove the previously downloaded CLI tool, you can safely remove it from your system: rm trino.jar Have a look at the Usage page to find out more about the features of the Trino Operator.","title":"First steps","component":"trino","version":"nightly","name":"first_steps","url":"/trino/nightly/getting_started/first_steps.html","titles":[{"text":"Setup Trino","hash":"_setup_trino","id":1},{"text":"Verify that it works","hash":"_verify_that_it_works","id":2},{"text":"Access the Trino cluster via CLI tool","hash":"_access_the_trino_cluster_via_cli_tool","id":3},{"text":"Access the Trino web interface","hash":"_access_the_trino_web_interface","id":4},{"text":"Clean up","hash":"_clean_up","id":5},{"text":"What’s next","hash":"_whats_next","id":6}]},"417":{"id":417,"text":"This guide will get you started with Trino using the Stackable Operator. It will guide you through the installation of the operator and its dependencies and setting up your first Trino cluster. You will need: a Kubernetes cluster kubectl optional: Helm optional: Trino CLI tool and curl (for testing) The guide is divided into the following steps: Installing the Operators Setting up the Trino cluster","title":"Getting started","component":"trino","version":"nightly","name":"index","url":"/trino/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"418":{"id":418,"text":"On this page you will install the Stackable Operator for Trino as well as the commons and secret operator which are required by all Stackable Operators. There are two ways to install Stackable Operators: Using stackablectl Using Helm The stackablectl command line tool is the recommended way to interact with operators and dependencies. Follow the installation steps for your platform if you choose to work with stackablectl. After you have installed stackablectl, run the following command to install all operators necessary for Trino: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ trino=0.5.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing trino operator in version 0.5.0-nightly Consult the Quickstart to learn more about how to use stackablectl. You can also use Helm to install the operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait trino-operator stackable-dev/trino-operator --version 0.5.0-nightly Helm will deploy the operators in a Kubernetes Deployment and apply the CRDs for the Trino service (as well as the CRDs for the required operators). You are now ready to deploy Trino in Kubernetes. Set up a Trino cluster and its dependencies.","title":"Installation","component":"trino","version":"nightly","name":"installation","url":"/trino/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"419":{"id":419,"text":"Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test","title":"","component":"zookeeper","version":"0.10","name":"commandline_args","url":"/zookeeper/0.10/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"420":{"id":420,"text":"The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux # Here you can set the Stackable supported configuration parameters # See the documentation for a full list of the exposed configuration parameters config: tickTime: 3000 # You can also override properties in a configuration file here configOverrides: zoo.cfg: 4lw.commands.whitelist: 'srvr,ruok,isro' # Set environment variables here envOverrides: MY_ENV_VAR: \"foobar\" config-spec Property Actual Property Default Value Recommended Value Location initLimit initLimit 5 5 file:zoo.cfg syncLimit syncLimit 2 2 file:zoo.cfg tickTime tickTime 3000 3000 file:zoo.cfg","title":"","component":"zookeeper","version":"0.10","name":"config_properties","url":"/zookeeper/0.10/config_properties.html","titles":[{"text":"Configuration Properties","hash":"_configuration_properties","id":1}]},"421":{"id":421,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux # Here you can set the Stackable supported configuration parameters # See the documentation for a full list of the exposed configuration parameters config: tickTime: 3000 # You can also override properties in a configuration file here configOverrides: zoo.cfg: 4lw.commands.whitelist: 'srvr,ruok,isro' # Set environment variables here envOverrides: MY_ENV_VAR: \"foobar\" config-spec Property Actual Property Default Value Recommended Value Location initLimit initLimit 5 5 file:zoo.cfg syncLimit syncLimit 2 2 file:zoo.cfg tickTime tickTime 3000 3000 file:zoo.cfg","title":"Configuration","component":"zookeeper","version":"0.10","name":"configuration","url":"/zookeeper/0.10/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Configuration Properties","hash":"_configuration_properties","id":8}]},"422":{"id":422,"text":"The Stackable Operator for Apache ZooKeeper creates a number of discovery profiles, which are client configuration bundles that allow access to the Apache ZooKeeper cluster. These are published into the Kubernetes cluster as ConfigMap objects. Discovery profiles are generated for each ZookeeperCluster and ZookeeperZnode object, the name of which is the \"base name\" of the profile. This profile allows access to the Apache ZooKeeper cluster from inside the Kubernetes cluster, and connects directly to the Pod identity. The name of the ConfigMap created for this discovery profile is $BASENAME. This profile allows access to the Apache ZooKeeper cluster from anywhere, inside or outside of the Kubernetes cluster. The name of the ConfigMap created for this discovery profile is $BASENAME-nodeport. Each discovery profile contains the following fields: ZOOKEEPER A connection string, as accepted by the official Java client ZOOKEEPER_HOSTS A comma-separated list of node1:port1,node2:port2,…​ ZOOKEEPER_CHROOT The name of the root ZNode associated with the discovery profile, should be used if (and only if) connecting using ZOOKEEPER_HOSTS (rather than ZOOKEEPER)","title":"Discovery Profiles","component":"zookeeper","version":"0.10","name":"discovery","url":"/zookeeper/0.10/discovery.html","titles":[{"text":"Profiles","hash":"_profiles","id":1},{"text":"Default","hash":"_default","id":2},{"text":"NodePort","hash":"_nodeport","id":3},{"text":"Contents","hash":"_contents","id":4}]},"423":{"id":423,"text":"Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest","title":"","component":"zookeeper","version":"0.10","name":"env_var_args","url":"/zookeeper/0.10/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"424":{"id":424,"text":"This is an operator for Kubernetes that can manage Apache ZooKeeper ensembles. This operator is part of Stackable Data Platform and only works with images from the Stackable repository The Stackable Operator for Apache ZooKeeper currently supports the following versions of ZooKeeper: 3.5.8 3.6.3 3.7.0 3.8.0 docker pull docker.stackable.tech/stackable/zookeeper:","title":"Stackable Operator for Apache ZooKeeper","component":"zookeeper","version":"0.10","name":"index","url":"/zookeeper/0.10/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"425":{"id":425,"text":"There are three ways to run the ZooKeeper Operator: Helm managed Docker container deployment on Kubernetes As a Docker container Build from source. Helm allows you to download and deploy Stackable operators on Kubernetes and is by far the easiest installation method. First ensure that you have installed the Stackable Operators Helm repository: $ helm repo add stackable https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operator for Apache ZooKeeper $ helm install zookeeper-operator stackable/zookeeper-operator Helm will deploy the operator in a Kubernetes container and apply the CRDs for the Apache ZooKeeper service. You’re now ready to deploy Apache ZooKeeper in Kubernetes. This Operator is published as a Docker image: docker.stackable.tech/stackable/zookeeper-operator When installing manually with Docker you will need to install the Stackable CRDs for Apache ZooKeeper in your Kubernetes environment. These are available on the Stackable GitHub repository for this operator. $ sudo kubectl apply -f zookeepercluster.crd.yaml $ sudo kubectl apply -f zookeeperznode.crd.yaml To run it straight from Docker you can use this command: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest This operator is written in Rust and is developed against the latest stable Rust release (1.56 at the time of writing). cargo build","title":"Installation","component":"zookeeper","version":"0.10","name":"installation","url":"/zookeeper/0.10/installation.html","titles":[{"text":"Helm","hash":"_helm","id":1},{"text":"Docker","hash":"_docker","id":2},{"text":"Building the operator from source","hash":"_building_the_operator_from_source","id":3}]},"426":{"id":426,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f /etc/stackable/zookeeper-operator/crd/zookeepercluster.crd.yaml To create a three-node Apache ZooKeeper cluster you can use the example shown below. Please note that the version you need to specify is not only the version of ZooKeeper which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 config: {} Afterwards, a ZNode can be created: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk namespace: default Finally, a ConfigMap is created, containing a path that a ZooKeeper client can connect to: $ kubectl get configmap simple-znode-nodeport -o yaml $ $ZOOKEEPER_HOME/bin/zkCli.sh -server $(kubectl get configmap simple-znode-nodeport -o jsonpath='{.data.ZOOKEEPER}') The quorum and client communication are encrypted by default via TLS. This requires the Secret Operator to be present in order to provide certificates. The utilized certificates can be changed in a top-level config. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.0 config: tls: secretClass: tls (1) quorumTlsSecretClass: tls (2) servers: roleGroups: default: replicas: 3 1 The tls.secretClass refers to the client-to-server encryption. Defaults to the tls secret. 2 The quorumTlsSecretClass refers to the server-to-server quorum encryption. Defaults to the tls secret. The tls secret is deployed from the Secret Operator and looks like this: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true You can create your own secrets and reference them e.g. in the tls.secretClass to use different certificates. The quorum or server-to-server communication is authenticated via TLS per default. In order to enforce TLS authentication for client-to-server communication, you can set an AuthenticationClass reference in the custom resource provided by the Commons Operator. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.0 config: tls: secretClass: tls clientAuthentication: authenticationClass: zk-client-tls (1) quorumTlsSecretClass: tls servers: roleGroups: default: replicas: 3 --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: zk-client-tls (2) spec: provider: tls: clientCertSecretClass: zk-client-auth-secret (3) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: zk-client-auth-secret (4) spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-zk-client-ca namespace: default autoGenerate: true 1 The config.clientAuthentication.authenticationClass can be set to use TLS for authentication. This is optional. 2 The referenced AuthenticationClass that references a SecretClass to provide certificates. 3 The reference to a SecretClass. 4 The SecretClass that is referenced by the AuthenticationClass in order to provide certificates. Due to a bug in ZooKeeper, the clientPort property in combination with client.portUnification=true is used instead of the secureClientPort. This means that unencrypted and unauthenticated access to the ZooKeeper cluster is still possible. The managed ZooKeeper instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the ports) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the zoo.cfg. For example, if you want to set the 4lw.commands.whitelist to allow the ruok administrative command, it can be configured in the ZookeeperCluster resource like so: servers: roleGroups: default: configOverrides: zoo.cfg: 4lw.commands.whitelist: \"srvr, ruok\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: zoo.cfg: 4lw.commands.whitelist: \"srvr, ruok\" roleGroups: default: replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Apache ZooKeeper Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: servers: roleGroups: default: envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: replicas: 1 You can mount volumes where data is stored by specifying PersistentVolumeClaims for each individual role group: servers: roleGroups: default: config: resources: storage: data: capacity: 2Gi In the above example, all ZooKeeper nodes in the default group will store data (the location of the property dataDir) on a 2Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: servers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each ZooKeeper container in the \"default\" group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the containers running the ZooKeeper daemons but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: servers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"zookeeper","version":"0.10","name":"usage","url":"/zookeeper/0.10/usage.html","titles":[{"text":"Encryption","hash":"_encryption","id":1},{"text":"Authentication","hash":"_authentication","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Environment Variables","hash":"_environment_variables","id":6},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":7},{"text":"Memory requests","hash":"_memory_requests","id":8},{"text":"CPU requests","hash":"_cpu_requests","id":9}]},"427":{"id":427,"text":"Apache ZooKeeper organizes all data into a hierarchical system of ZNodes, which act as both files (they can have data associated with them) and folders (they can contain other ZNodes) when compared to a traditional (POSIX-like) file system. In order to isolate different clients using the same ZooKeeper cluster, each client application should be assigned a unique root ZNode, which it can then organize as it sees fit. In the Stackable Operator for Apache ZooKeeper, we manage this using the ZookeeperZnode Kubernetes resource. The operator creates a new ZNode in the linked ZooKeeper cluster, as well as Discovery Profiles that are configured to restrict access to the configured ZNode. The operator does not manage the contents of the ZNode. The operator automatically deletes the ZNode from the ZooKeeper cluster if the Kubernetes ZookeeperZnode object is deleted. Recreating the ZookeeperZnode object will not restore access to the data. The ZookeeperZnode object should be created by the user administering the system that will use the ZNode. For example, when using Apache ZooKeeper to manage an Apache Kafka cluster, the ZookeeperZnode object would be created by the user creating the KafkaCluster object. A basic ZNode can be created like so: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: example-znode spec: clusterRef: (1) name: zookeeper-cluster namespace: my-namespace (2) 1 Refererence to the ZookeeperCluster object 2 The namespace is implied to be the same as the namespace of the ZookeeperZnode if omitted This will create corresponding Discovery Profiles referring to the specific ZNode, which will look roughly like this: --- apiVersion: v1 kind: ConfigMap metadata: name: example-znode (1) deta: ZOOKEEPER: pod-1:2181,pod-2:2181,pod-3:2181/{path} (2) 1 The base name of the discovery profile will be the same as the name of the ZookeeperZnode 2 $PATH will be a unique and unpredictable path that is generated by the operator","title":"ZNodes","component":"zookeeper","version":"0.10","name":"znodes","url":"/zookeeper/0.10/znodes.html","titles":[{"text":"Usage","hash":"_usage","id":1}]},"428":{"id":428,"text":"Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test","title":"","component":"zookeeper","version":"0.11","name":"commandline_args","url":"/zookeeper/stable/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"429":{"id":429,"text":"The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux # Here you can set the Stackable supported configuration parameters # See the documentation for a full list of the exposed configuration parameters config: tickTime: 3000 # You can also override properties in a configuration file here configOverrides: zoo.cfg: 4lw.commands.whitelist: 'srvr,ruok,isro' # Set environment variables here envOverrides: MY_ENV_VAR: \"foobar\" config-spec Property Actual Property Default Value Recommended Value Location initLimit initLimit 5 5 file:zoo.cfg syncLimit syncLimit 2 2 file:zoo.cfg tickTime tickTime 3000 3000 file:zoo.cfg","title":"","component":"zookeeper","version":"0.11","name":"config_properties","url":"/zookeeper/stable/config_properties.html","titles":[{"text":"Configuration Properties","hash":"_configuration_properties","id":1}]},"430":{"id":430,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux # Here you can set the Stackable supported configuration parameters # See the documentation for a full list of the exposed configuration parameters config: tickTime: 3000 # You can also override properties in a configuration file here configOverrides: zoo.cfg: 4lw.commands.whitelist: 'srvr,ruok,isro' # Set environment variables here envOverrides: MY_ENV_VAR: \"foobar\" config-spec Property Actual Property Default Value Recommended Value Location initLimit initLimit 5 5 file:zoo.cfg syncLimit syncLimit 2 2 file:zoo.cfg tickTime tickTime 3000 3000 file:zoo.cfg","title":"Configuration","component":"zookeeper","version":"0.11","name":"configuration","url":"/zookeeper/stable/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Configuration Properties","hash":"_configuration_properties","id":8}]},"431":{"id":431,"text":"The Stackable Operator for Apache ZooKeeper creates a number of discovery profiles, which are client configuration bundles that allow access to the Apache ZooKeeper cluster. These are published into the Kubernetes cluster as ConfigMap objects. Discovery profiles are generated for each ZookeeperCluster and ZookeeperZnode object, the name of which is the \"base name\" of the profile. This profile allows access to the Apache ZooKeeper cluster from inside the Kubernetes cluster, and connects directly to the Pod identity. The name of the ConfigMap created for this discovery profile is $BASENAME. This profile allows access to the Apache ZooKeeper cluster from anywhere, inside or outside of the Kubernetes cluster. The name of the ConfigMap created for this discovery profile is $BASENAME-nodeport. Each discovery profile contains the following fields: ZOOKEEPER A connection string, as accepted by the official Java client ZOOKEEPER_HOSTS A comma-separated list of node1:port1,node2:port2,…​ ZOOKEEPER_CHROOT The name of the root ZNode associated with the discovery profile, should be used if (and only if) connecting using ZOOKEEPER_HOSTS (rather than ZOOKEEPER)","title":"Discovery Profiles","component":"zookeeper","version":"0.11","name":"discovery","url":"/zookeeper/stable/discovery.html","titles":[{"text":"Profiles","hash":"_profiles","id":1},{"text":"Default","hash":"_default","id":2},{"text":"NodePort","hash":"_nodeport","id":3},{"text":"Contents","hash":"_contents","id":4}]},"432":{"id":432,"text":"Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest","title":"","component":"zookeeper","version":"0.11","name":"env_var_args","url":"/zookeeper/stable/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"433":{"id":433,"text":"This is an operator for Kubernetes that can manage Apache ZooKeeper ensembles. This operator is part of Stackable Data Platform and only works with images from the Stackable repository The Stackable Operator for Apache ZooKeeper currently supports the following versions of ZooKeeper: 3.5.8 3.6.3 3.7.0 3.8.0 docker pull docker.stackable.tech/stackable/zookeeper:","title":"Stackable Operator for Apache ZooKeeper","component":"zookeeper","version":"0.11","name":"index","url":"/zookeeper/stable/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"434":{"id":434,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f /etc/stackable/zookeeper-operator/crd/zookeepercluster.crd.yaml To create a three-node Apache ZooKeeper cluster you can use the example shown below. Please note that the version you need to specify is not only the version of ZooKeeper which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 config: {} Afterwards, a ZNode can be created: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk namespace: default Finally, a ConfigMap is created, containing a path that a ZooKeeper client can connect to: $ kubectl get configmap simple-znode-nodeport -o yaml $ $ZOOKEEPER_HOME/bin/zkCli.sh -server $(kubectl get configmap simple-znode-nodeport -o jsonpath='{.data.ZOOKEEPER}') The quorum and client communication are encrypted by default via TLS. This requires the Secret Operator to be present in order to provide certificates. The utilized certificates can be changed in a top-level config. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.0 config: tls: secretClass: tls (1) quorumTlsSecretClass: tls (2) servers: roleGroups: default: replicas: 3 1 The tls.secretClass refers to the client-to-server encryption. Defaults to the tls secret. 2 The quorumTlsSecretClass refers to the server-to-server quorum encryption. Defaults to the tls secret. The tls secret is deployed from the Secret Operator and looks like this: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true You can create your own secrets and reference them e.g. in the tls.secretClass to use different certificates. The quorum or server-to-server communication is authenticated via TLS per default. In order to enforce TLS authentication for client-to-server communication, you can set an AuthenticationClass reference in the custom resource provided by the Commons Operator. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.0 config: clientAuthentication: authenticationClass: zk-client-tls (1) quorumTlsSecretClass: tls servers: roleGroups: default: replicas: 3 --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: zk-client-tls (2) spec: provider: tls: clientCertSecretClass: zk-client-auth-secret (3) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: zk-client-auth-secret (4) spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-zk-client-ca namespace: default autoGenerate: true 1 The config.clientAuthentication.authenticationClass can be set to use TLS for authentication. This is optional. 2 The referenced AuthenticationClass that references a SecretClass to provide certificates. 3 The reference to a SecretClass. 4 The SecretClass that is referenced by the AuthenticationClass in order to provide certificates. If both spec.config.tls.secretClass and spec.config.clientAuthentication.authenticationClass are set, the authentication class will take precedence over the secret class. The cluster will be encrypted and authenticate only against the authentication class. Due to a bug in ZooKeeper, the clientPort property in combination with client.portUnification=true is used instead of the secureClientPort. This means that unencrypted and unauthenticated access to the ZooKeeper cluster is still possible. The managed ZooKeeper instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the ports) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the zoo.cfg. For example, if you want to set the 4lw.commands.whitelist to allow the ruok administrative command, it can be configured in the ZookeeperCluster resource like so: servers: roleGroups: default: configOverrides: zoo.cfg: 4lw.commands.whitelist: \"srvr, ruok\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: zoo.cfg: 4lw.commands.whitelist: \"srvr, ruok\" roleGroups: default: replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Apache ZooKeeper Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: servers: roleGroups: default: envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: replicas: 1 You can mount volumes where data is stored by specifying PersistentVolumeClaims for each individual role group: servers: roleGroups: default: config: resources: storage: data: capacity: 2Gi In the above example, all ZooKeeper nodes in the default group will store data (the location of the property dataDir) on a 2Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: servers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each ZooKeeper container in the \"default\" group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the containers running the ZooKeeper daemons but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: servers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"zookeeper","version":"0.11","name":"usage","url":"/zookeeper/stable/usage.html","titles":[{"text":"Encryption","hash":"_encryption","id":1},{"text":"Authentication","hash":"_authentication","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Environment Variables","hash":"_environment_variables","id":6},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":7},{"text":"Memory requests","hash":"_memory_requests","id":8},{"text":"CPU requests","hash":"_cpu_requests","id":9}]},"435":{"id":435,"text":"Apache ZooKeeper organizes all data into a hierarchical system of ZNodes, which act as both files (they can have data associated with them) and folders (they can contain other ZNodes) when compared to a traditional (POSIX-like) file system. In order to isolate different clients using the same ZooKeeper cluster, each client application should be assigned a unique root ZNode, which it can then organize as it sees fit. In the Stackable Operator for Apache ZooKeeper, we manage this using the ZookeeperZnode Kubernetes resource. The operator creates a new ZNode in the linked ZooKeeper cluster, as well as Discovery Profiles that are configured to restrict access to the configured ZNode. The operator does not manage the contents of the ZNode. The operator automatically deletes the ZNode from the ZooKeeper cluster if the Kubernetes ZookeeperZnode object is deleted. Recreating the ZookeeperZnode object will not restore access to the data. The ZookeeperZnode object should be created by the user administering the system that will use the ZNode. For example, when using Apache ZooKeeper to manage an Apache Kafka cluster, the ZookeeperZnode object would be created by the user creating the KafkaCluster object. A basic ZNode can be created like so: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: example-znode spec: clusterRef: (1) name: zookeeper-cluster namespace: my-namespace (2) 1 Refererence to the ZookeeperCluster object 2 The namespace is implied to be the same as the namespace of the ZookeeperZnode if omitted This will create corresponding Discovery Profiles referring to the specific ZNode, which will look roughly like this: --- apiVersion: v1 kind: ConfigMap metadata: name: example-znode (1) deta: ZOOKEEPER: pod-1:2181,pod-2:2181,pod-3:2181/{path} (2) 1 The base name of the discovery profile will be the same as the name of the ZookeeperZnode 2 $PATH will be a unique and unpredictable path that is generated by the operator","title":"ZNodes","component":"zookeeper","version":"0.11","name":"znodes","url":"/zookeeper/stable/znodes.html","titles":[{"text":"Usage","hash":"_usage","id":1}]},"436":{"id":436,"text":"Now that the operator is installed it is time to deploy a ZooKeeper cluster and connect to it. The ZooKeeper cluster is deployed with a very simple resource definition. Create a file called zookeeper.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f zookeeper.yaml The operator will create a ZooKeeper cluster with two replicas. Use kubectl to observe the status of the cluster: kubectl rollout status --watch statefulset/simple-zk-server-default The Operator deploys readiness probes to make sure the replicas are ready and established a quorum. Only then will the StefulSet actually be marked as Ready. You will see partitioned roll out complete: 2 new pods have been updated... The ZooKeeper cluster is now ready. ZooKeeper manages its data in a hierarchical node system. You can look at the nodes using the zkCli tool. It is included inside the Stackable ZooKeeper container, and you can invoke it using kubectl run: kubectl run my-pod \\ --stdin --tty --quiet --restart=Never \\ --image docker.stackable.tech/stackable/zookeeper:3.8.0-stackable0.7.1 -- \\ bin/zkCli.sh -server simple-zk-server-default:2282 ls / > /dev/null && \\ kubectl logs my-pod && \\ kubectl delete pods my-pod You might wonder why the logs are used instead of the output from kubectl run. This is because kubectl run sometimes loses lines of the output, a known issue. Among the log output you will see the current list of nodes in the root directory /: [zookeeper] The zookeeper node contains ZooKeeper configuration data. It is useful to use different nodes for different applications using ZooKeeper, and the Stackable Operator uses ZNodes for this. ZNodes are created with manifest files of the kind ZookeeperZnode. Create a file called znode.yaml with the following contents: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk And apply it: kubectl apply -f znode.yaml Use the same command as before to list the nodes: kubectl run my-pod \\ --stdin --tty --quiet --restart=Never \\ --image docker.stackable.tech/stackable/zookeeper:3.8.0-stackable0.7.1 -- \\ bin/zkCli.sh -server simple-zk-server-default:2282 ls / > /dev/null && \\ kubectl logs my-pod && \\ kubectl delete pods my-pod and the ZNode has appeared in the output: [znode-4e0a6098-057a-42cc-926e-276ea6305e09, zookeeper] The operator creates a ConfigMap with connection information that has the same name as the ZNode - in this case simple-znode. Have a look at it using kubectl describe configmap simple-znode You will see an output similar to this: ZOOKEEPER: ---- simple-zk-server-default-0.simple-zk-server-default.default.svc.cluster.local:2282,simple-zk-server-default-1.simple-zk-server-default.default.svc.cluster.local:2282/znode-2a9d12be-bfee-49dc-9030-2cb3c3dd80d3 ZOOKEEPER_CHROOT: ---- /znode-2a9d12be-bfee-49dc-9030-2cb3c3dd80d3 ZOOKEEPER_HOSTS: ---- simple-zk-server-default-0.simple-zk-server-default.default.svc.cluster.local:2282,simple-zk-server-default-1.simple-zk-server-default.default.svc.cluster.local:2282 The ZOOKEEPER entry contains a ZooKeeper connection string that you can use to connect to this specific ZNode. The ZOOKEEPER_CHROOT and ZOOKEEPER_HOSTS entries contain the node name and hosts list respectively. You can use these three entries mounted into a pod to connect to ZooKeeper at this specific ZNode and read/write in that ZNode directory. Great! This step concludes the Getting started guide. You have installed the ZooKeeper Operator and it’s dependencies and set up your first ZooKeeper cluster as well as your first ZNode. Have a look at the Usage page to learn more about configuration options for your ZooKeeper cluster like setting up encryption or authentication. You can also have a look at the ZNodes page to learn more about ZNodes.","title":"First steps","component":"zookeeper","version":"0.11","name":"first_steps","url":"/zookeeper/stable/getting_started/first_steps.html","titles":[{"text":"Deploy ZooKeeper","hash":"_deploy_zookeeper","id":1},{"text":"Deploy a ZNode","hash":"_deploy_a_znode","id":2},{"text":"The discovery ConfigMap","hash":"_the_discovery_configmap","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"437":{"id":437,"text":"This guide will get you started with Apache ZooKeeper using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first ZooKeeper cluster and connecting to it as well as setting up your first ZNode. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the ZooKeeper cluster.","title":"Getting started","component":"zookeeper","version":"0.11","name":"index","url":"/zookeeper/stable/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"438":{"id":438,"text":"On this page you will install the Stackable ZooKeeper Operator. There are 2 ways to run Stackable Operators Using stackablectl (recommended) Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl, use it to install the ZooKeeper Operator and its dependencies: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the ZooKeeper cluster. You are now ready to deploy Apache ZooKeeper in Kubernetes. Set up a ZooKeeper cluster.","title":"Installation","component":"zookeeper","version":"0.11","name":"installation","url":"/zookeeper/stable/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"439":{"id":439,"text":"Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test","title":"","component":"zookeeper","version":"nightly","name":"commandline_args","url":"/zookeeper/nightly/commandline_args.html","titles":[{"text":"product-config","hash":"_product_config","id":1},{"text":"watch-namespace","hash":"_watch_namespace","id":2}]},"440":{"id":440,"text":"The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux # Here you can set the Stackable supported configuration parameters # See the documentation for a full list of the exposed configuration parameters config: tickTime: 3000 # You can also override properties in a configuration file here configOverrides: zoo.cfg: 4lw.commands.whitelist: 'srvr,ruok,isro' # Set environment variables here envOverrides: MY_ENV_VAR: \"foobar\" config-spec Property Actual Property Default Value Recommended Value Location initLimit initLimit 5 5 file:zoo.cfg syncLimit syncLimit 2 2 file:zoo.cfg tickTime tickTime 3000 3000 file:zoo.cfg","title":"","component":"zookeeper","version":"nightly","name":"config_properties","url":"/zookeeper/nightly/config_properties.html","titles":[{"text":"Configuration Properties","hash":"_configuration_properties","id":1}]},"441":{"id":441,"text":"This operator accepts the following command line parameters: Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false cargo run -- run --product-config /foo/bar/properties.yaml Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: cargo run -- run --watch-namespace test This operator accepts the following environment variables: Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest The cluster can be configured via a YAML file. This custom resource specifies the amount of replicas for each role group or role specific configuration like port definitions etc. apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: selector: matchLabels: kubernetes.io/os: linux # Here you can set the Stackable supported configuration parameters # See the documentation for a full list of the exposed configuration parameters config: tickTime: 3000 # You can also override properties in a configuration file here configOverrides: zoo.cfg: 4lw.commands.whitelist: 'srvr,ruok,isro' # Set environment variables here envOverrides: MY_ENV_VAR: \"foobar\" config-spec Property Actual Property Default Value Recommended Value Location initLimit initLimit 5 5 file:zoo.cfg syncLimit syncLimit 2 2 file:zoo.cfg tickTime tickTime 3000 3000 file:zoo.cfg","title":"Configuration","component":"zookeeper","version":"nightly","name":"configuration","url":"/zookeeper/nightly/configuration.html","titles":[{"text":"Command Line Parameters","hash":"_command_line_parameters","id":1},{"text":"product-config","hash":"_product_config","id":2},{"text":"watch-namespace","hash":"_watch_namespace","id":3},{"text":"Environment variables","hash":"_environment_variables","id":4},{"text":"PRODUCT_CONFIG","hash":"_product_config_2","id":5},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace_2","id":6},{"text":"Kubernetes custom resource options","hash":"_kubernetes_custom_resource_options","id":7},{"text":"Configuration Properties","hash":"_configuration_properties","id":8}]},"442":{"id":442,"text":"The Stackable Operator for Apache ZooKeeper creates a number of discovery profiles, which are client configuration bundles that allow access to the Apache ZooKeeper cluster. These are published into the Kubernetes cluster as ConfigMap objects. Discovery profiles are generated for each ZookeeperCluster and ZookeeperZnode object, the name of which is the \"base name\" of the profile. This profile allows access to the Apache ZooKeeper cluster from inside the Kubernetes cluster, and connects directly to the Pod identity. The name of the ConfigMap created for this discovery profile is $BASENAME. This profile allows access to the Apache ZooKeeper cluster from anywhere, inside or outside of the Kubernetes cluster. The name of the ConfigMap created for this discovery profile is $BASENAME-nodeport. Each discovery profile contains the following fields: ZOOKEEPER A connection string, as accepted by the official Java client ZOOKEEPER_HOSTS A comma-separated list of node1:port1,node2:port2,…​ ZOOKEEPER_CHROOT The name of the root ZNode associated with the discovery profile, should be used if (and only if) connecting using ZOOKEEPER_HOSTS (rather than ZOOKEEPER)","title":"Discovery Profiles","component":"zookeeper","version":"nightly","name":"discovery","url":"/zookeeper/nightly/discovery.html","titles":[{"text":"Profiles","hash":"_profiles","id":1},{"text":"Default","hash":"_default","id":2},{"text":"NodePort","hash":"_nodeport","id":3},{"text":"Contents","hash":"_contents","id":4}]},"443":{"id":443,"text":"Default value: /etc/stackable/zookeeper-operator/config-spec/properties.yaml Required: false Multiple values: false export PRODUCT_CONFIG=/foo/bar/properties.yaml cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env PRODUCT_CONFIG=/my/product/config.yaml \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest Default value: All namespaces Required: false Multiple values: false The operator will only watch for resources in the provided namespace test: export WATCH_NAMESPACE=test cargo run -- run or via docker: docker run \\ --name zookeeper-operator \\ --network host \\ --env KUBECONFIG=/home/stackable/.kube/config \\ --env WATCH_NAMESPACE=test \\ --mount type=bind,source=\"$HOME/.kube/config\",target=\"/home/stackable/.kube/config\" \\ docker.stackable.tech/stackable/zookeeper-operator:latest","title":"","component":"zookeeper","version":"nightly","name":"env_var_args","url":"/zookeeper/nightly/env_var_args.html","titles":[{"text":"PRODUCT_CONFIG","hash":"_product_config","id":1},{"text":"WATCH_NAMESPACE","hash":"_watch_namespace","id":2}]},"444":{"id":444,"text":"This is an operator for Kubernetes that can manage Apache ZooKeeper ensembles. This operator is part of Stackable Data Platform and only works with images from the Stackable repository The Stackable Operator for Apache ZooKeeper currently supports the following versions of ZooKeeper: 3.5.8 3.6.3 3.7.0 3.8.0 docker pull docker.stackable.tech/stackable/zookeeper:","title":"Stackable Operator for Apache ZooKeeper","component":"zookeeper","version":"nightly","name":"index","url":"/zookeeper/nightly/index.html","titles":[{"text":"Supported Versions","hash":"_supported_versions","id":1},{"text":"Getting the Docker image","hash":"_getting_the_docker_image","id":2}]},"445":{"id":445,"text":"If you are not installing the operator using Helm then after installation the CRD for this operator must be created: kubectl apply -f /etc/stackable/zookeeper-operator/crd/zookeepercluster.crd.yaml To create a three-node Apache ZooKeeper cluster you can use the example shown below. Please note that the version you need to specify is not only the version of ZooKeeper which you want to roll out, but has to be amended with a Stackable version as shown. This Stackable version is the version of the underlying container image which is used to execute the processes. For a list of available versions please check our image registry. It should generally be safe to simply use the latest image version that is available. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 config: {} Afterwards, a ZNode can be created: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk namespace: default Finally, a ConfigMap is created, containing a path that a ZooKeeper client can connect to: $ kubectl get configmap simple-znode-nodeport -o yaml $ $ZOOKEEPER_HOME/bin/zkCli.sh -server $(kubectl get configmap simple-znode-nodeport -o jsonpath='{.data.ZOOKEEPER}') The quorum and client communication are encrypted by default via TLS. This requires the Secret Operator to be present in order to provide certificates. The utilized certificates can be changed in a top-level config. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.0 config: tls: secretClass: tls (1) quorumTlsSecretClass: tls (2) servers: roleGroups: default: replicas: 3 1 The tls.secretClass refers to the client-to-server encryption. Defaults to the tls secret. 2 The quorumTlsSecretClass refers to the server-to-server quorum encryption. Defaults to the tls secret. The tls secret is deployed from the Secret Operator and looks like this: --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: tls spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-ca namespace: default autoGenerate: true You can create your own secrets and reference them e.g. in the tls.secretClass to use different certificates. The quorum or server-to-server communication is authenticated via TLS per default. In order to enforce TLS authentication for client-to-server communication, you can set an AuthenticationClass reference in the custom resource provided by the Commons Operator. --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.0 config: clientAuthentication: authenticationClass: zk-client-tls (1) quorumTlsSecretClass: tls servers: roleGroups: default: replicas: 3 --- apiVersion: authentication.stackable.tech/v1alpha1 kind: AuthenticationClass metadata: name: zk-client-tls (2) spec: provider: tls: clientCertSecretClass: zk-client-auth-secret (3) --- apiVersion: secrets.stackable.tech/v1alpha1 kind: SecretClass metadata: name: zk-client-auth-secret (4) spec: backend: autoTls: ca: secret: name: secret-provisioner-tls-zk-client-ca namespace: default autoGenerate: true 1 The config.clientAuthentication.authenticationClass can be set to use TLS for authentication. This is optional. 2 The referenced AuthenticationClass that references a SecretClass to provide certificates. 3 The reference to a SecretClass. 4 The SecretClass that is referenced by the AuthenticationClass in order to provide certificates. If both spec.config.tls.secretClass and spec.config.clientAuthentication.authenticationClass are set, the authentication class will take precedence over the secret class. The cluster will be encrypted and authenticate only against the authentication class. Due to a bug in ZooKeeper, the clientPort property in combination with client.portUnification=true is used instead of the secureClientPort. This means that unencrypted and unauthenticated access to the ZooKeeper cluster is still possible. The managed ZooKeeper instances are automatically configured to export Prometheus metrics. See Monitoring for more details. The cluster definition also supports overriding configuration properties and environment variables, either per role or per role group, where the more specific override (role group) has precedence over the less specific one (role). Overriding certain properties which are set by operator (such as the ports) can interfere with the operator and can lead to problems. For a role or role group, at the same level of config, you can specify: configOverrides for the zoo.cfg. For example, if you want to set the 4lw.commands.whitelist to allow the ruok administrative command, it can be configured in the ZookeeperCluster resource like so: servers: roleGroups: default: configOverrides: zoo.cfg: 4lw.commands.whitelist: \"srvr, ruok\" replicas: 1 Just as for the config, it is possible to specify this at role level as well: routers: configOverrides: zoo.cfg: 4lw.commands.whitelist: \"srvr, ruok\" roleGroups: default: replicas: 1 All override property values must be strings. For a full list of configuration options we refer to the Apache ZooKeeper Configuration Reference. In a similar fashion, environment variables can be (over)written. For example per role group: servers: roleGroups: default: envOverrides: MY_ENV_VAR: \"MY_VALUE\" replicas: 1 or per role: servers: envOverrides: MY_ENV_VAR: \"MY_VALUE\" roleGroups: default: replicas: 1 You can mount volumes where data is stored by specifying PersistentVolumeClaims for each individual role group: servers: roleGroups: default: config: resources: storage: data: capacity: 2Gi In the above example, all ZooKeeper nodes in the default group will store data (the location of the property dataDir) on a 2Gi volume. By default, in case nothing is configured in the custom resource for a certain role group, each Pod will have a 1Gi large local volume mount for the data location. You can request a certain amount of memory for each individual role group as shown below: servers: roleGroups: default: config: resources: memory: limit: '2Gi' In this example, each ZooKeeper container in the \"default\" group will have a maximum of 2 gigabytes of memory. To be more precise, these memory limits apply to the containers running the ZooKeeper daemons but not to any sidecar containers that are part of the pod. Setting this property will also automatically set the maximum Java heap size for the corresponding process to 80% of the available memory. Be aware that if the memory constraint is too low, the cluster might fail to start. If pods terminate with an 'OOMKilled' status and the cluster doesn’t start, try increasing the memory limit. For more details regarding Kubernetes memory requests and limits see: Assign Memory Resources to Containers and Pods. Similarly to memory resources, you can also configure CPU limits, as shown below: servers: roleGroups: default: config: resources: cpu: max: '500m' min: '250m' For more details regarding Kubernetes CPU limits see: Assign CPU Resources to Containers and Pods.","title":"Usage","component":"zookeeper","version":"nightly","name":"usage","url":"/zookeeper/nightly/usage.html","titles":[{"text":"Encryption","hash":"_encryption","id":1},{"text":"Authentication","hash":"_authentication","id":2},{"text":"Monitoring","hash":"_monitoring","id":3},{"text":"Configuration & Environment Overrides","hash":"_configuration_environment_overrides","id":4},{"text":"Configuration Properties","hash":"_configuration_properties","id":5},{"text":"Environment Variables","hash":"_environment_variables","id":6},{"text":"Storage for data volumes","hash":"_storage_for_data_volumes","id":7},{"text":"Memory requests","hash":"_memory_requests","id":8},{"text":"CPU requests","hash":"_cpu_requests","id":9}]},"446":{"id":446,"text":"Apache ZooKeeper organizes all data into a hierarchical system of ZNodes, which act as both files (they can have data associated with them) and folders (they can contain other ZNodes) when compared to a traditional (POSIX-like) file system. In order to isolate different clients using the same ZooKeeper cluster, each client application should be assigned a unique root ZNode, which it can then organize as it sees fit. In the Stackable Operator for Apache ZooKeeper, we manage this using the ZookeeperZnode Kubernetes resource. The operator creates a new ZNode in the linked ZooKeeper cluster, as well as Discovery Profiles that are configured to restrict access to the configured ZNode. The operator does not manage the contents of the ZNode. The operator automatically deletes the ZNode from the ZooKeeper cluster if the Kubernetes ZookeeperZnode object is deleted. Recreating the ZookeeperZnode object will not restore access to the data. The ZookeeperZnode object should be created by the user administering the system that will use the ZNode. For example, when using Apache ZooKeeper to manage an Apache Kafka cluster, the ZookeeperZnode object would be created by the user creating the KafkaCluster object. A basic ZNode can be created like so: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: example-znode spec: clusterRef: (1) name: zookeeper-cluster namespace: my-namespace (2) 1 Refererence to the ZookeeperCluster object 2 The namespace is implied to be the same as the namespace of the ZookeeperZnode if omitted This will create corresponding Discovery Profiles referring to the specific ZNode, which will look roughly like this: --- apiVersion: v1 kind: ConfigMap metadata: name: example-znode (1) deta: ZOOKEEPER: pod-1:2181,pod-2:2181,pod-3:2181/{path} (2) 1 The base name of the discovery profile will be the same as the name of the ZookeeperZnode 2 $PATH will be a unique and unpredictable path that is generated by the operator","title":"ZNodes","component":"zookeeper","version":"nightly","name":"znodes","url":"/zookeeper/nightly/znodes.html","titles":[{"text":"Usage","hash":"_usage","id":1}]},"447":{"id":447,"text":"Now that the operator is installed it is time to deploy a ZooKeeper cluster and connect to it. The ZooKeeper cluster is deployed with a very simple resource definition. Create a file called zookeeper.yaml: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperCluster metadata: name: simple-zk spec: version: 3.8.0-stackable0.7.1 servers: roleGroups: default: replicas: 3 and apply it: kubectl apply -f zookeeper.yaml The operator will create a ZooKeeper cluster with two replicas. Use kubectl to observe the status of the cluster: kubectl rollout status --watch statefulset/simple-zk-server-default The Operator deploys readiness probes to make sure the replicas are ready and established a quorum. Only then will the StefulSet actually be marked as Ready. You will see partitioned roll out complete: 2 new pods have been updated... The ZooKeeper cluster is now ready. ZooKeeper manages its data in a hierarchical node system. You can look at the nodes using the zkCli tool. It is included inside the Stackable ZooKeeper container, and you can invoke it using kubectl run: kubectl run my-pod \\ --stdin --tty --quiet --restart=Never \\ --image docker.stackable.tech/stackable/zookeeper:3.8.0-stackable0.7.1 -- \\ bin/zkCli.sh -server simple-zk-server-default:2282 ls / > /dev/null && \\ kubectl logs my-pod && \\ kubectl delete pods my-pod You might wonder why the logs are used instead of the output from kubectl run. This is because kubectl run sometimes loses lines of the output, a known issue. Among the log output you will see the current list of nodes in the root directory /: [zookeeper] The zookeeper node contains ZooKeeper configuration data. It is useful to use different nodes for different applications using ZooKeeper, and the Stackable Operator uses ZNodes for this. ZNodes are created with manifest files of the kind ZookeeperZnode. Create a file called znode.yaml with the following contents: --- apiVersion: zookeeper.stackable.tech/v1alpha1 kind: ZookeeperZnode metadata: name: simple-znode spec: clusterRef: name: simple-zk And apply it: kubectl apply -f znode.yaml Use the same command as before to list the nodes: kubectl run my-pod \\ --stdin --tty --quiet --restart=Never \\ --image docker.stackable.tech/stackable/zookeeper:3.8.0-stackable0.7.1 -- \\ bin/zkCli.sh -server simple-zk-server-default:2282 ls / > /dev/null && \\ kubectl logs my-pod && \\ kubectl delete pods my-pod and the ZNode has appeared in the output: [znode-4e0a6098-057a-42cc-926e-276ea6305e09, zookeeper] The operator creates a ConfigMap with connection information that has the same name as the ZNode - in this case simple-znode. Have a look at it using kubectl describe configmap simple-znode You will see an output similar to this: ZOOKEEPER: ---- simple-zk-server-default-0.simple-zk-server-default.default.svc.cluster.local:2282,simple-zk-server-default-1.simple-zk-server-default.default.svc.cluster.local:2282/znode-2a9d12be-bfee-49dc-9030-2cb3c3dd80d3 ZOOKEEPER_CHROOT: ---- /znode-2a9d12be-bfee-49dc-9030-2cb3c3dd80d3 ZOOKEEPER_HOSTS: ---- simple-zk-server-default-0.simple-zk-server-default.default.svc.cluster.local:2282,simple-zk-server-default-1.simple-zk-server-default.default.svc.cluster.local:2282 The ZOOKEEPER entry contains a ZooKeeper connection string that you can use to connect to this specific ZNode. The ZOOKEEPER_CHROOT and ZOOKEEPER_HOSTS entries contain the node name and hosts list respectively. You can use these three entries mounted into a pod to connect to ZooKeeper at this specific ZNode and read/write in that ZNode directory. Great! This step concludes the Getting started guide. You have installed the ZooKeeper Operator and it’s dependencies and set up your first ZooKeeper cluster as well as your first ZNode. Have a look at the Usage page to learn more about configuration options for your ZooKeeper cluster like setting up encryption or authentication. You can also have a look at the ZNodes page to learn more about ZNodes.","title":"First steps","component":"zookeeper","version":"nightly","name":"first_steps","url":"/zookeeper/nightly/getting_started/first_steps.html","titles":[{"text":"Deploy ZooKeeper","hash":"_deploy_zookeeper","id":1},{"text":"Deploy a ZNode","hash":"_deploy_a_znode","id":2},{"text":"The discovery ConfigMap","hash":"_the_discovery_configmap","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]},"448":{"id":448,"text":"This guide will get you started with Apache ZooKeeper using the Stackable Operator. It will guide you through the installation of the Operator and its dependencies, setting up your first ZooKeeper cluster and connecting to it as well as setting up your first ZNode. You will need: a Kubernetes cluster kubectl optional: Helm The Guide is divided into two steps: Installing the Operators. Setting up the ZooKeeper cluster.","title":"Getting started","component":"zookeeper","version":"nightly","name":"index","url":"/zookeeper/nightly/getting_started/index.html","titles":[{"text":"Prerequisites","hash":"_prerequisites","id":1},{"text":"What’s next","hash":"_whats_next","id":2}]},"449":{"id":449,"text":"On this page you will install the Stackable ZooKeeper Operator. There are 2 ways to run Stackable Operators Using stackablectl (recommended) Using Helm stackablectl is the command line tool to interact with Stackable operators and our recommended way to install Operators. Follow the installation steps for your platform. After you have installed stackablectl, use it to install the ZooKeeper Operator and its dependencies: stackablectl operator install \\ commons=0.3.0-nightly \\ secret=0.6.0-nightly \\ zookeeper=0.11.0-nightly The tool will show [INFO ] Installing commons operator in version 0.3.0-nightly [INFO ] Installing secret operator in version 0.6.0-nightly [INFO ] Installing zookeeper operator in version 0.11.0-nightly Consult the Quickstart to learn more about how to use stackablectl. For example, you can use the -k flag to create a Kubernetes cluster with kind. You can also use Helm to install the Operators. Add the Stackable Helm repository: helm repo add stackable-dev https://repo.stackable.tech/repository/helm-dev/ Then install the Stackable Operators: helm install --wait commons-operator stackable-dev/commons-operator --version 0.3.0-nightly helm install --wait secret-operator stackable-dev/secret-operator --version 0.6.0-nightly helm install --wait zookeeper-operator stackable-dev/zookeeper-operator --version 0.11.0-nightly Helm will deploy the Operators in a Kubernetes Deployment and apply the CRDs for the ZooKeeper cluster. You are now ready to deploy Apache ZooKeeper in Kubernetes. Set up a ZooKeeper cluster.","title":"Installation","component":"zookeeper","version":"nightly","name":"installation","url":"/zookeeper/nightly/getting_started/installation.html","titles":[{"text":"Stackable Operators","hash":"_stackable_operators","id":1},{"text":"stackablectl","hash":"_stackablectl","id":2},{"text":"Helm","hash":"_helm","id":3},{"text":"What’s next","hash":"_whats_next","id":4}]}},"components":{},"componentVersions":{"home/nightly":{"displayVersion":"nightly","title":"Stackable Documentation","version":"nightly","name":"home","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/home/stable/index.html","navigation":[{"items":[{"content":"Quickstart","url":"/home/stable/quickstart.html","urlType":"internal"},{"content":"Getting Started","url":"/home/stable/getting_started.html","urlType":"internal"}],"root":true,"order":0},{"items":[{"content":"Concepts","url":"/home/stable/concepts/index.html","urlType":"internal","items":[{"content":"Roles and role groups","url":"/home/stable/concepts/roles-and-role-groups.html","urlType":"internal"},{"content":"Service discovery ConfigMap","url":"/home/stable/concepts/service_discovery.html","urlType":"internal"},{"content":"OPA authorization","url":"/home/stable/concepts/opa.html","urlType":"internal"},{"content":"S3 resources","url":"/home/stable/concepts/s3.html","urlType":"internal"},{"content":"PersistentVolumeClaim usage","url":"/home/stable/concepts/pvc.html","urlType":"internal"}]}],"root":true,"order":1},{"items":[{"content":"Tutorials","url":"/home/stable/tutorials/index.html","urlType":"internal","items":[{"content":"Setting up an end-to-end data pipeline","url":"/home/stable/tutorials/end-to-end_data_pipeline_example.html","urlType":"internal"}]}],"root":true,"order":2},{"items":[{"content":"Reference","url":"/home/stable/reference/index.html","urlType":"internal","items":[{"content":"S3 resources","url":"/home/stable/reference/s3.html","urlType":"internal"}]}],"root":true,"order":3},{"items":[{"content":"Operators","url":"/home/stable/operators/index.html","urlType":"internal","items":[{"content":"Supported Product Versions","url":"/home/stable/operators/supported_versions.html","urlType":"internal"},{"content":"Monitoring","url":"/home/stable/operators/monitoring.html","urlType":"internal"},{"content":"Apache Airflow","url":"/airflow/stable/index.html","urlType":"internal"},{"content":"Apache Druid","url":"/druid/stable/index.html","urlType":"internal"},{"content":"Apache HBase","url":"/hbase/stable/index.html","urlType":"internal"},{"content":"Apache Hadoop HDFS","url":"/hdfs/stable/index.html","urlType":"internal"},{"content":"Apache Hive","url":"/hive/stable/index.html","urlType":"internal"},{"content":"Apache Kafka","url":"/kafka/stable/index.html","urlType":"internal"},{"content":"Apache NiFi","url":"/nifi/stable/index.html","urlType":"internal"},{"content":"Apache Spark on K8S","url":"/spark-k8s/stable/index.html","urlType":"internal"},{"content":"Apache Superset","url":"/superset/stable/index.html","urlType":"internal"},{"content":"Trino","url":"/trino/stable/index.html","urlType":"internal"},{"content":"Apache ZooKeeper","url":"/zookeeper/stable/index.html","urlType":"internal"},{"content":"OpenPolicyAgent","url":"/opa/stable/index.html","urlType":"internal"},{"content":"Commons","url":"/commons-operator/stable/index.html","urlType":"internal"},{"content":"Secret","url":"/secret-operator/stable/index.html","urlType":"internal"}]}],"root":true,"order":4},{"items":[{"content":"Contributor&#8217;s Guide","url":"/home/stable/contributor/index.html","urlType":"internal","items":[{"content":"Steps to contribute","url":"/home/stable/contributor/steps.html","urlType":"internal"},{"content":"Development Dashboard","url":"/home/stable/contributor/development_dashboard.html","urlType":"internal"},{"content":"Documentation style guide","url":"/home/stable/contributor/style_guide.html","urlType":"internal"},{"content":"Implementation guidelines","items":[{"content":"Service discovery implementation guidelines","url":"/home/stable/contributor/service_discovery.html","urlType":"internal"},{"content":"OPA connection implementation guidelines","url":"/home/stable/contributor/opa_configuration.html","urlType":"internal"}]},{"content":"Architectural Decision Records","url":"/home/stable/contributor/adr/index.html","urlType":"internal","items":[{"content":"Current","items":[{"content":"ADR001: Use English as Documentation Language","url":"/home/stable/contributor/adr/ADR001-choose_project_language.html","urlType":"internal"},{"content":"ADR002: Use Multiple Repositories instead of one Large Repository","url":"/home/stable/contributor/adr/ADR002-choose_repository_structure.html","urlType":"internal"},{"content":"ADR003: Use RTC as Review Mechanism for Changes","url":"/home/stable/contributor/adr/ADR003-choose_review_mechanism.html","urlType":"internal"},{"content":"ADR004: Use Rust as programming language for the agent","url":"/home/stable/contributor/adr/ADR004-choose_agent_programming_language.html","urlType":"internal"},{"content":"ADR005: Decide on handling and location of systemd unit files","url":"/home/stable/contributor/adr/ADR005-systemd_unit_file_location.html","urlType":"internal"},{"content":"ADR007: Decide if Kubernetes Components Are to be Reused for Stackable","url":"/home/stable/contributor/adr/ADR007-defined_reuse_of_k8s.html","urlType":"internal"},{"content":"ADR008: Allow Reuse of Existing Kubernetes Operators","url":"/home/stable/contributor/adr/ADR008-decide_reuse_of_operators.html","urlType":"internal"},{"content":"ADR009: Assigning Services to Nodes","url":"/home/stable/contributor/adr/ADR009-selector_support.html","urlType":"internal"},{"content":"ADR010: Expressing one-shot commands in a Kubernetes-native way","url":"/home/stable/contributor/adr/ADR010-command_pattern.html","urlType":"internal"},{"content":"ADR011: Directory Structure Used by Stackable Components on Managed Hosts","url":"/home/stable/contributor/adr/ADR011-directory_structure.html","urlType":"internal"},{"content":"ADR012: Authentication token management","url":"/home/stable/contributor/adr/ADR012-authn_token_management.html","urlType":"internal"},{"content":"ADR013: Supported Kubernetes versions","url":"/home/stable/contributor/adr/ADR013-supported_kubernetes_versions.html","urlType":"internal"},{"content":"ADR014: User Authentication for Products","url":"/home/stable/contributor/adr/ADR014-user_authentication_for_products.html","urlType":"internal"},{"content":"ADR015: How Should Operators Use Values from ConfigMaps &amp; Secrets","url":"/home/stable/contributor/adr/ADR015-using_values_from_configmaps.html","urlType":"internal"},{"content":"ADR016: Representation of S3 Buckets in CRDs","url":"/home/stable/contributor/adr/ADR016-definition_of_s3_objects.html","urlType":"internal"},{"content":"ADR017: TLS authentication","url":"/home/stable/contributor/adr/ADR017-tls_authentication.html","urlType":"internal"},{"content":"ADR018: Product Image Versioning","url":"/home/stable/contributor/adr/ADR018-product_image_versioning.html","urlType":"internal"},{"content":"ADR019: Trino catalog definitions","url":"/home/stable/contributor/adr/ADR019-trino_catalog_definitions.html","urlType":"internal"},{"content":"ADR020: Trino catalog usage","url":"/home/stable/contributor/adr/ADR020-trino_catalog_usage.html","urlType":"internal"},{"content":"ADR021: Initial Version of Stackable Stacks Functionality","url":"/home/stable/contributor/adr/ADR021-stackablectl_stacks_inital_version.html","urlType":"internal"},{"content":"ADR022: Spark history server","url":"/home/stable/contributor/adr/ADR022-spark-history-server.html","urlType":"internal"}]},{"content":"Deprecated","items":[{"content":"Use xxx as storage backend for the orchestrator","url":"/home/stable/contributor/adr/deprecated/ADR006-choose_orchestrator_storage_backend.html","urlType":"internal"}]},{"content":"Drafts","items":[{"content":"Choose Authorization Engine","url":"/home/stable/contributor/adr/drafts/ADRx-choose_authorization_engine.html","urlType":"internal"}]}]}]}],"root":true,"order":5},{"items":[{"content":"Release Notes","url":"/home/stable/release_notes.html","urlType":"internal"}],"root":true,"order":6}]},"stackablectl/nightly":{"displayVersion":"nightly","title":"stackablectl","version":"nightly","name":"stackablectl","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/stackablectl/stable/index.html","navigation":[{"items":[{"content":"Installation","url":"/stackablectl/stable/installation.html","urlType":"internal"},{"content":"Quickstart","url":"/stackablectl/stable/quickstart.html","urlType":"internal"},{"content":"Commands","items":[{"content":"Demo","url":"/stackablectl/stable/commands/demo.html","urlType":"internal"},{"content":"Operator","url":"/stackablectl/stable/commands/operator.html","urlType":"internal"},{"content":"Release","url":"/stackablectl/stable/commands/release.html","urlType":"internal"},{"content":"Services","url":"/stackablectl/stable/commands/services.html","urlType":"internal"},{"content":"Stack","url":"/stackablectl/stable/commands/stack.html","urlType":"internal"}]},{"content":"Demos","url":"/stackablectl/stable/demos/index.html","urlType":"internal","items":[{"content":"trino-taxi-data","url":"/stackablectl/stable/demos/trino-taxi-data.html","urlType":"internal"},{"content":"kafka-druid-earthquake-data","url":"/stackablectl/stable/demos/kafka-druid-earthquake-data.html","urlType":"internal"},{"content":"kafka-druid-water-level-data","url":"/stackablectl/stable/demos/kafka-druid-water-level-data.html","urlType":"internal"}]},{"content":"Customization","url":"/stackablectl/stable/customization.html","urlType":"internal"},{"content":"Troubleshooting","url":"/stackablectl/stable/troubleshooting.html","urlType":"internal"}],"root":true,"order":0}]},"commons-operator/nightly":{"displayVersion":"nightly","title":"Stackable Commons Operator","version":"nightly","name":"commons-operator","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/commons-operator/nightly/index.html","navigation":[{"items":[{"content":"Installation","url":"/commons-operator/nightly/installation.html","urlType":"internal"},{"content":"Configuration","url":"/commons-operator/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/commons-operator/nightly/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"<code>AuthenticationClass</code>","url":"/commons-operator/nightly/authenticationclass.html","urlType":"internal"},{"content":"TLS","url":"/commons-operator/nightly/tls.html","urlType":"internal"},{"content":"Restarter","url":"/commons-operator/nightly/restarter.html","urlType":"internal"}]}],"root":true,"order":0}]},"commons-operator/0.2":{"displayVersion":"0.2","title":"Stackable Commons Operator","version":"0.2","name":"commons-operator","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/commons-operator/stable/index.html","navigation":[{"items":[{"content":"Installation","url":"/commons-operator/stable/installation.html","urlType":"internal"},{"content":"Configuration","url":"/commons-operator/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/commons-operator/stable/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"<code>AuthenticationClass</code>","url":"/commons-operator/stable/authenticationclass.html","urlType":"internal"},{"content":"TLS","url":"/commons-operator/stable/tls.html","urlType":"internal"},{"content":"Restarter","url":"/commons-operator/stable/restarter.html","urlType":"internal"}]}],"root":true,"order":0}]},"secret-operator/nightly":{"displayVersion":"nightly","title":"Stackable Secret Operator","version":"nightly","name":"secret-operator","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/secret-operator/nightly/index.html","navigation":[{"items":[{"content":"Building the Operator","url":"/secret-operator/nightly/building.html","urlType":"internal"},{"content":"Installation","url":"/secret-operator/nightly/installation.html","urlType":"internal"},{"content":"Configuration","url":"/secret-operator/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/secret-operator/nightly/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"<code>SecretClass</code>","url":"/secret-operator/nightly/secretclass.html","urlType":"internal"},{"content":"Scope","url":"/secret-operator/nightly/scope.html","urlType":"internal"},{"content":"Volume","url":"/secret-operator/nightly/volume.html","urlType":"internal"}]}],"root":true,"order":0}]},"secret-operator/0.5":{"displayVersion":"0.5","title":"Stackable Secret Operator","version":"0.5","name":"secret-operator","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/secret-operator/stable/index.html","navigation":[{"items":[{"content":"Building the Operator","url":"/secret-operator/stable/building.html","urlType":"internal"},{"content":"Installation","url":"/secret-operator/stable/installation.html","urlType":"internal"},{"content":"Configuration","url":"/secret-operator/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/secret-operator/stable/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"<code>SecretClass</code>","url":"/secret-operator/stable/secretclass.html","urlType":"internal"},{"content":"Scope","url":"/secret-operator/stable/scope.html","urlType":"internal"},{"content":"Volume","url":"/secret-operator/stable/volume.html","urlType":"internal"}]}],"root":true,"order":0}]},"airflow/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache Airflow","version":"nightly","name":"airflow","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/airflow/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/airflow/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/airflow/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/airflow/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/airflow/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/airflow/nightly/usage.html","urlType":"internal"}],"root":true,"order":1}]},"airflow/0.5":{"displayVersion":"0.5","title":"Stackable Operator for Apache Airflow","version":"0.5","name":"airflow","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/airflow/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/airflow/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/airflow/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/airflow/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/airflow/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/airflow/stable/usage.html","urlType":"internal"}],"root":true,"order":1}]},"airflow/0.4":{"displayVersion":"0.4","title":"Stackable Operator for Apache Airflow","version":"0.4","name":"airflow","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/airflow/0.4/index.html","navigation":[{"items":[{"content":"Installation","url":"/airflow/0.4/installation.html","urlType":"internal"},{"content":"Usage","url":"/airflow/0.4/usage.html","urlType":"internal"}],"root":true,"order":0}]},"airflow/0.3":{"displayVersion":"0.3","title":"Stackable Operator for Apache Airflow","version":"0.3","name":"airflow","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/airflow/0.3/index.html","navigation":[{"items":[{"content":"Installation","url":"/airflow/0.3/installation.html","urlType":"internal"},{"content":"Usage","url":"/airflow/0.3/usage.html","urlType":"internal"}],"root":true,"order":0}]},"druid/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache Druid","version":"nightly","name":"druid","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/druid/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/druid/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/druid/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/druid/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/druid/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/druid/nightly/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/druid/nightly/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"druid/0.7":{"displayVersion":"0.7","title":"Stackable Operator for Apache Druid","version":"0.7","name":"druid","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/druid/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/druid/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/druid/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/druid/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/druid/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/druid/stable/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/druid/stable/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"druid/0.6":{"displayVersion":"0.6","title":"Stackable Operator for Apache Druid","version":"0.6","name":"druid","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/druid/0.6/index.html","navigation":[{"items":[{"content":"Installation","url":"/druid/0.6/installation.html","urlType":"internal"},{"content":"Configuration","url":"/druid/0.6/configuration.html","urlType":"internal"},{"content":"Usage","url":"/druid/0.6/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/druid/0.6/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]},"druid/0.2":{"displayVersion":"0.2","title":"Stackable Operator for Apache Druid","version":"0.2","name":"druid","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/druid/0.2/index.html","navigation":[{"items":[{"content":"Installation","url":"/druid/0.2/installation.html","urlType":"internal"},{"content":"Configuration","url":"/druid/0.2/configuration.html","urlType":"internal"},{"content":"Usage","url":"/druid/0.2/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/druid/0.2/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]},"druid/0.1":{"displayVersion":"0.1","title":"Stackable Operator for Apache Druid","version":"0.1","name":"druid","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/druid/0.1/index.html","navigation":[{"items":[{"content":"Installation","url":"/druid/0.1/installation.html","urlType":"internal"},{"content":"Configuration","url":"/druid/0.1/configuration.html","urlType":"internal"},{"content":"Usage","url":"/druid/0.1/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/druid/0.1/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]},"hbase/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache HBase","version":"nightly","name":"hbase","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hbase/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/hbase/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/hbase/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/hbase/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/hbase/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hbase/nightly/usage.html","urlType":"internal"},{"content":"Discovery","url":"/hbase/nightly/discovery.html","urlType":"internal"}],"root":true,"order":1}]},"hbase/0.4":{"displayVersion":"0.4","title":"Stackable Operator for Apache HBase","version":"0.4","name":"hbase","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hbase/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/hbase/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/hbase/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/hbase/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/hbase/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hbase/stable/usage.html","urlType":"internal"},{"content":"Discovery","url":"/hbase/stable/discovery.html","urlType":"internal"}],"root":true,"order":1}]},"hbase/0.3":{"displayVersion":"0.3","title":"Stackable Operator for Apache HBase","version":"0.3","name":"hbase","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hbase/0.3/index.html","navigation":[{"items":[{"content":"Installation","url":"/hbase/0.3/installation.html","urlType":"internal"},{"content":"Configuration","url":"/hbase/0.3/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hbase/0.3/usage.html","urlType":"internal"},{"content":"Discovery","url":"/hbase/0.3/discovery.html","urlType":"internal"}],"root":true,"order":0}]},"hdfs/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache HDFS","version":"nightly","name":"hdfs","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hdfs/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/hdfs/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/hdfs/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/hdfs/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/hdfs/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hdfs/nightly/usage.html","urlType":"internal"},{"content":"Implementation","url":"/hdfs/nightly/implementation.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/hdfs/nightly/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"hdfs/0.5":{"displayVersion":"0.5","title":"Stackable Operator for Apache HDFS","version":"0.5","name":"hdfs","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hdfs/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/hdfs/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/hdfs/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/hdfs/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/hdfs/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hdfs/stable/usage.html","urlType":"internal"},{"content":"Implementation","url":"/hdfs/stable/implementation.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/hdfs/stable/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"hdfs/0.4":{"displayVersion":"0.4","title":"Stackable Operator for Apache HDFS","version":"0.4","name":"hdfs","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hdfs/0.4/index.html","navigation":[{"items":[{"content":"Installation","url":"/hdfs/0.4/installation.html","urlType":"internal"},{"content":"Configuration","url":"/hdfs/0.4/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hdfs/0.4/usage.html","urlType":"internal"},{"content":"Implementation","url":"/hdfs/0.4/implementation.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/hdfs/0.4/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]},"hive/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache Hive","version":"nightly","name":"hive","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hive/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/hive/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/hive/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/hive/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/hive/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hive/nightly/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/hive/nightly/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"hive/0.7":{"displayVersion":"0.7","title":"Stackable Operator for Apache Hive","version":"0.7","name":"hive","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hive/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/hive/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/hive/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/hive/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/hive/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hive/stable/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/hive/stable/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"hive/0.6":{"displayVersion":"0.6","title":"Stackable Operator for Apache Hive","version":"0.6","name":"hive","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/hive/0.6/index.html","navigation":[{"items":[{"content":"Installation","url":"/hive/0.6/installation.html","urlType":"internal"},{"content":"Configuration","url":"/hive/0.6/configuration.html","urlType":"internal"},{"content":"Usage","url":"/hive/0.6/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/hive/0.6/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]},"kafka/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache Kafka","version":"nightly","name":"kafka","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/kafka/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/kafka/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/kafka/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/kafka/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Dependencies","url":"/kafka/nightly/dependencies.html","urlType":"internal"},{"content":"Configuration","url":"/kafka/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/kafka/nightly/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/kafka/nightly/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"kafka/0.7":{"displayVersion":"0.7","title":"Stackable Operator for Apache Kafka","version":"0.7","name":"kafka","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/kafka/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/kafka/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/kafka/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/kafka/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Dependencies","url":"/kafka/stable/dependencies.html","urlType":"internal"},{"content":"Configuration","url":"/kafka/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/kafka/stable/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/kafka/stable/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"kafka/0.6":{"displayVersion":"0.6","title":"Stackable Operator for Apache Kafka","version":"0.6","name":"kafka","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/kafka/0.6/index.html","navigation":[{"items":[{"content":"Dependencies","url":"/kafka/0.6/dependencies.html","urlType":"internal"},{"content":"Installation","url":"/kafka/0.6/installation.html","urlType":"internal"},{"content":"Configuration","url":"/kafka/0.6/configuration.html","urlType":"internal"},{"content":"Usage","url":"/kafka/0.6/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/kafka/0.6/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]},"nifi/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache NiFi","version":"nightly","name":"nifi","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/nifi/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/nifi/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/nifi/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/nifi/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Dependencies","url":"/nifi/nightly/dependencies.html","urlType":"internal"},{"content":"Configuration","url":"/nifi/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/nifi/nightly/usage.html","urlType":"internal"}],"root":true,"order":1}]},"nifi/0.7":{"displayVersion":"0.7","title":"Stackable Operator for Apache NiFi","version":"0.7","name":"nifi","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/nifi/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/nifi/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/nifi/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/nifi/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Dependencies","url":"/nifi/stable/dependencies.html","urlType":"internal"},{"content":"Configuration","url":"/nifi/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/nifi/stable/usage.html","urlType":"internal"}],"root":true,"order":1}]},"nifi/0.6":{"displayVersion":"0.6","title":"Stackable Operator for Apache NiFi","version":"0.6","name":"nifi","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/nifi/0.6/index.html","navigation":[{"items":[{"content":"Dependencies","url":"/nifi/0.6/dependencies.html","urlType":"internal"},{"content":"Installation","url":"/nifi/0.6/installation.html","urlType":"internal"},{"content":"Configuration","url":"/nifi/0.6/configuration.html","urlType":"internal"},{"content":"Usage","url":"/nifi/0.6/usage.html","urlType":"internal"}],"root":true,"order":0}]},"opa/nightly":{"displayVersion":"nightly","title":"Stackable Operator for OPA","version":"nightly","name":"opa","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/opa/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/opa/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/opa/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/opa/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Usage","url":"/opa/nightly/usage.html","urlType":"internal"},{"content":"Configuration","url":"/opa/nightly/configuration.html","urlType":"internal"},{"content":"Implementation Notes","url":"/opa/nightly/implementation-notes.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/opa/nightly/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"opa/0.10":{"displayVersion":"0.10","title":"Stackable Operator for OPA","version":"0.10","name":"opa","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/opa/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/opa/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/opa/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/opa/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Usage","url":"/opa/stable/usage.html","urlType":"internal"},{"content":"Configuration","url":"/opa/stable/configuration.html","urlType":"internal"},{"content":"Implementation Notes","url":"/opa/stable/implementation-notes.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/opa/stable/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"opa/0.9":{"displayVersion":"0.9","title":"Stackable Operator for OPA","version":"0.9","name":"opa","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/opa/0.9/index.html","navigation":[{"items":[{"content":"Installation","url":"/opa/0.9/installation.html","urlType":"internal"},{"content":"Usage","url":"/opa/0.9/usage.html","urlType":"internal"},{"content":"Configuration","url":"/opa/0.9/configuration.html","urlType":"internal"},{"content":"Implementation Notes","url":"/opa/0.9/implementation-notes.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"Discovery","url":"/opa/0.9/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]},"spark-k8s/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache Spark on Kubernetes","version":"nightly","name":"spark-k8s","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/spark-k8s/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/spark-k8s/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/spark-k8s/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/spark-k8s/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/spark-k8s/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/spark-k8s/nightly/usage.html","urlType":"internal"},{"content":"Job Dependencies","url":"/spark-k8s/nightly/job_dependencies.html","urlType":"internal"},{"content":"RBAC","url":"/spark-k8s/nightly/rbac.html","urlType":"internal"}],"root":true,"order":1}]},"spark-k8s/0.5":{"displayVersion":"0.5","title":"Stackable Operator for Apache Spark on Kubernetes","version":"0.5","name":"spark-k8s","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/spark-k8s/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/spark-k8s/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/spark-k8s/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/spark-k8s/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/spark-k8s/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/spark-k8s/stable/usage.html","urlType":"internal"},{"content":"Job Dependencies","url":"/spark-k8s/stable/job_dependencies.html","urlType":"internal"},{"content":"RBAC","url":"/spark-k8s/stable/rbac.html","urlType":"internal"}],"root":true,"order":1}]},"spark-k8s/0.4":{"displayVersion":"0.4","title":"Stackable Operator for Apache Spark on Kubernetes","version":"0.4","name":"spark-k8s","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/spark-k8s/0.4/index.html","navigation":[{"items":[{"content":"Installation","url":"/spark-k8s/0.4/installation.html","urlType":"internal"},{"content":"Usage","url":"/spark-k8s/0.4/usage.html","urlType":"internal"},{"content":"Job Dependencies","url":"/spark-k8s/0.4/job_dependencies.html","urlType":"internal"},{"content":"RBAC","url":"/spark-k8s/0.4/rbac.html","urlType":"internal"}],"root":true,"order":0}]},"spark-k8s/0.3":{"displayVersion":"0.3","title":"Stackable Operator for Apache Spark on Kubernetes","version":"0.3","name":"spark-k8s","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/spark-k8s/0.3/index.html","navigation":[{"items":[{"content":"Installation","url":"/spark-k8s/0.3/installation.html","urlType":"internal"},{"content":"Usage","url":"/spark-k8s/0.3/usage.html","urlType":"internal"},{"content":"Job Dependencies","url":"/spark-k8s/0.3/job_dependencies.html","urlType":"internal"},{"content":"RBAC","url":"/spark-k8s/0.3/rbac.html","urlType":"internal"}],"root":true,"order":0}]},"spark-k8s/0.2":{"displayVersion":"0.2","title":"Stackable Operator for Apache Spark on Kubernetes","version":"0.2","name":"spark-k8s","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/spark-k8s/0.2/index.html","navigation":[{"items":[{"content":"Installation","url":"/spark-k8s/0.2/installation.html","urlType":"internal"},{"content":"Usage","url":"/spark-k8s/0.2/usage.html","urlType":"internal"},{"content":"Job Dependencies","url":"/spark-k8s/0.2/job_dependencies.html","urlType":"internal"},{"content":"RBAC","url":"/spark-k8s/0.2/rbac.html","urlType":"internal"}],"root":true,"order":0}]},"superset/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache Superset","version":"nightly","name":"superset","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/superset/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/superset/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/superset/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/superset/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/superset/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/superset/nightly/usage.html","urlType":"internal"}],"root":true,"order":1}]},"superset/0.6":{"displayVersion":"0.6","title":"Stackable Operator for Apache Superset","version":"0.6","name":"superset","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/superset/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/superset/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/superset/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/superset/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/superset/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/superset/stable/usage.html","urlType":"internal"}],"root":true,"order":1}]},"superset/0.5":{"displayVersion":"0.5","title":"Stackable Operator for Apache Superset","version":"0.5","name":"superset","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/superset/0.5/index.html","navigation":[{"items":[{"content":"Installation","url":"/superset/0.5/installation.html","urlType":"internal"},{"content":"Configuration","url":"/superset/0.5/configuration.html","urlType":"internal"},{"content":"Usage","url":"/superset/0.5/usage.html","urlType":"internal"}],"root":true,"order":0}]},"trino/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Trino","version":"nightly","name":"trino","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/trino/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/trino/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/trino/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/trino/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/trino/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/trino/nightly/usage.html","urlType":"internal"}],"root":true,"order":1}]},"trino/0.5":{"displayVersion":"0.5","title":"Stackable Operator for Trino","version":"0.5","name":"trino","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/trino/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/trino/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/trino/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/trino/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/trino/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/trino/stable/usage.html","urlType":"internal"}],"root":true,"order":1}]},"trino/0.4":{"displayVersion":"0.4","title":"Stackable Operator for Trino","version":"0.4","name":"trino","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/trino/0.4/index.html","navigation":[{"items":[{"content":"Installation","url":"/trino/0.4/installation.html","urlType":"internal"},{"content":"Configuration","url":"/trino/0.4/configuration.html","urlType":"internal"},{"content":"Usage","url":"/trino/0.4/usage.html","urlType":"internal"}],"root":true,"order":0}]},"trino/0.3":{"displayVersion":"0.3","title":"Stackable Operator for Trino","version":"0.3","name":"trino","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/trino/0.3/index.html","navigation":[{"items":[{"content":"Installation","url":"/trino/0.3/installation.html","urlType":"internal"},{"content":"Configuration","url":"/trino/0.3/configuration.html","urlType":"internal"},{"content":"Usage","url":"/trino/0.3/usage.html","urlType":"internal"}],"root":true,"order":0}]},"zookeeper/nightly":{"displayVersion":"nightly","title":"Stackable Operator for Apache ZooKeeper","version":"nightly","name":"zookeeper","prerelease":true,"asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/zookeeper/nightly/index.html","navigation":[{"items":[{"content":"Getting started","url":"/zookeeper/nightly/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/zookeeper/nightly/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/zookeeper/nightly/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/zookeeper/nightly/configuration.html","urlType":"internal"},{"content":"Usage","url":"/zookeeper/nightly/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"ZNodes","url":"/zookeeper/nightly/znodes.html","urlType":"internal"},{"content":"Discovery Profiles","url":"/zookeeper/nightly/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"zookeeper/0.11":{"displayVersion":"0.11","title":"Stackable Operator for Apache ZooKeeper","version":"0.11","name":"zookeeper","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/zookeeper/stable/index.html","navigation":[{"items":[{"content":"Getting started","url":"/zookeeper/stable/getting_started/index.html","urlType":"internal","items":[{"content":"Installation","url":"/zookeeper/stable/getting_started/installation.html","urlType":"internal"},{"content":"First steps","url":"/zookeeper/stable/getting_started/first_steps.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Configuration","url":"/zookeeper/stable/configuration.html","urlType":"internal"},{"content":"Usage","url":"/zookeeper/stable/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"ZNodes","url":"/zookeeper/stable/znodes.html","urlType":"internal"},{"content":"Discovery Profiles","url":"/zookeeper/stable/discovery.html","urlType":"internal"}]}],"root":true,"order":1}]},"zookeeper/0.10":{"displayVersion":"0.10","title":"Stackable Operator for Apache ZooKeeper","version":"0.10","name":"zookeeper","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Stackable Documentation","site-url":"https://docs.stackable.tech","base-repo":"https://github.com/stackabletech","plantuml-server-url":"http://www.plantuml.com/plantuml","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{}]},"url":"/zookeeper/0.10/index.html","navigation":[{"items":[{"content":"Installation","url":"/zookeeper/0.10/installation.html","urlType":"internal"},{"content":"Configuration","url":"/zookeeper/0.10/configuration.html","urlType":"internal"},{"content":"Usage","url":"/zookeeper/0.10/usage.html","urlType":"internal"},{"content":"Concepts","items":[{"content":"ZNodes","url":"/zookeeper/0.10/znodes.html","urlType":"internal"},{"content":"Discovery Profiles","url":"/zookeeper/0.10/discovery.html","urlType":"internal"}]}],"root":true,"order":0}]}}}})